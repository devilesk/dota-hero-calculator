(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":2,"../../js/alert.js":3,"../../js/button.js":4,"../../js/carousel.js":5,"../../js/collapse.js":6,"../../js/dropdown.js":7,"../../js/modal.js":8,"../../js/popover.js":9,"../../js/scrollspy.js":10,"../../js/tab.js":11,"../../js/tooltip.js":12,"../../js/transition.js":13}],2:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.7'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],3:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.7
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.7'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector === '#' ? [] : selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],4:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.7'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d).prop(d, true)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d).prop(d, false)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault()
        // The target component still receive the focus
        if ($btn.is('input,button')) $btn.trigger('focus')
        else $btn.find('input:visible,button:visible').first().trigger('focus')
      }
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],5:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.7
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.7'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],6:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],7:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.7'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],8:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.7'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (document !== e.target &&
            this.$element[0] !== e.target &&
            !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],9:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.7'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],10:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.7'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],11:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.7'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],12:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.7'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr('aria-describedby')
          .trigger('hidden.bs.' + that.type)
      }
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
      that.$element = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],13:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],14:[function(require,module,exports){
/*!
 * jQuery UI :data 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );
} ) );

},{}],15:[function(require,module,exports){
/*!
 * jQuery UI Disable Selection 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: disableSelection
//>>group: Core
//>>description: Disable selection of text content within the set of matched elements.
//>>docs: http://api.jqueryui.com/disableSelection/

// This file is deprecated
( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

return $.fn.extend( {
	disableSelection: ( function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.on( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			} );
		};
	} )(),

	enableSelection: function() {
		return this.off( ".ui-disableSelection" );
	}
} );

} ) );

},{}],16:[function(require,module,exports){
/*!
 * jQuery UI Focusable 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :focusable Selector
//>>group: Core
//>>description: Selects elements which can be focused.
//>>docs: http://api.jqueryui.com/focusable-selector/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

// Selectors
$.ui.focusable = function( element, hasTabindex ) {
	var map, mapName, img, focusableIfVisible, fieldset,
		nodeName = element.nodeName.toLowerCase();

	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" );
		return img.length > 0 && img.is( ":visible" );
	}

	if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
		focusableIfVisible = !element.disabled;

		if ( focusableIfVisible ) {

			// Form controls within a disabled fieldset are disabled.
			// However, controls within the fieldset's legend do not get disabled.
			// Since controls generally aren't placed inside legends, we skip
			// this portion of the check.
			fieldset = $( element ).closest( "fieldset" )[ 0 ];
			if ( fieldset ) {
				focusableIfVisible = !fieldset.disabled;
			}
		}
	} else if ( "a" === nodeName ) {
		focusableIfVisible = element.href || hasTabindex;
	} else {
		focusableIfVisible = hasTabindex;
	}

	return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
};

// Support: IE 8 only
// IE 8 doesn't resolve inherit to visible/hidden for computed values
function visible( element ) {
	var visibility = element.css( "visibility" );
	while ( visibility === "inherit" ) {
		element = element.parent();
		visibility = element.css( "visibility" );
	}
	return visibility !== "hidden";
}

$.extend( $.expr[ ":" ], {
	focusable: function( element ) {
		return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
	}
} );

return $.ui.focusable;

} ) );

},{}],17:[function(require,module,exports){
( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

// This file is deprecated
return $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );
} ) );

},{}],18:[function(require,module,exports){
/*!
 * jQuery UI Keycode 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.ui.keyCode = {
	BACKSPACE: 8,
	COMMA: 188,
	DELETE: 46,
	DOWN: 40,
	END: 35,
	ENTER: 13,
	ESCAPE: 27,
	HOME: 36,
	LEFT: 37,
	PAGE_DOWN: 34,
	PAGE_UP: 33,
	PERIOD: 190,
	RIGHT: 39,
	SPACE: 32,
	TAB: 9,
	UP: 38
};

} ) );

},{}],19:[function(require,module,exports){
( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

// $.ui.plugin is deprecated. Use $.widget() extensions instead.
return $.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
				instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};

} ) );

},{}],20:[function(require,module,exports){
/*!
 * jQuery UI Position 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {
( function() {
var cachedScrollbarWidth, supportsOffsetFractions,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

// Support: IE <=9 only
supportsOffsetFractions = function() {
	var element = $( "<div>" )
			.css( "position", "absolute" )
			.appendTo( "body" )
			.offset( {
				top: 1.5,
				left: 1.5
			} ),
		support = element.offset().top === 1.5;

	element.remove();

	supportsOffsetFractions = function() {
		return support;
	};

	return support;
};

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[ 0 ];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div " +
				"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
				"<div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[ 0 ];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[ 0 ].clientWidth;
		}

		div.remove();

		return ( cachedScrollbarWidth = w1 - w2 );
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[ 0 ] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
			hasOffset = !isWindow && !isDocument;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: withinElement.outerWidth(),
			height: withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// Make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[ 0 ].preventDefault ) {

		// Force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;

	// Clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1 ) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// Calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// Reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	} );

	// Normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each( function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
				scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
				scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// If the browser doesn't support fractions, then round for consistent results
		if ( !supportsOffsetFractions() ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				} );
			}
		} );

		if ( options.using ) {

			// Adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	} );
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// Element is wider than within
			if ( data.collisionWidth > outerWidth ) {

				// Element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
						withinOffset;
					position.left += overLeft - newOverRight;

				// Element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;

				// Element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}

			// Too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;

			// Too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;

			// Adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// Element is taller than within
			if ( data.collisionHeight > outerHeight ) {

				// Element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
						withinOffset;
					position.top += overTop - newOverBottom;

				// Element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;

				// Element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}

			// Too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;

			// Too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;

			// Adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
					outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
					atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
					outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
					offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

} )();

return $.ui.position;

} ) );

},{}],21:[function(require,module,exports){
( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.ui.safeActiveElement = function( document ) {
	var activeElement;

	// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try {
		activeElement = document.activeElement;
	} catch ( error ) {
		activeElement = document.body;
	}

	// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if ( !activeElement ) {
		activeElement = document.body;
	}

	// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if ( !activeElement.nodeName ) {
		activeElement = document.body;
	}

	return activeElement;
};

} ) );

},{}],22:[function(require,module,exports){
( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.ui.safeBlur = function( element ) {

	// Support: IE9 - 10 only
	// If the <body> is blurred, IE will switch windows, see #9420
	if ( element && element.nodeName.toLowerCase() !== "body" ) {
		$( element ).trigger( "blur" );
	}
};

} ) );

},{}],23:[function(require,module,exports){
/*!
 * jQuery UI Scroll Parent 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

return $.fn.scrollParent = function( includeHidden ) {
	var position = this.css( "position" ),
		excludeStaticParent = position === "absolute",
		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
		scrollParent = this.parents().filter( function() {
			var parent = $( this );
			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
				return false;
			}
			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
				parent.css( "overflow-x" ) );
		} ).eq( 0 );

	return position === "fixed" || !scrollParent.length ?
		$( this[ 0 ].ownerDocument || document ) :
		scrollParent;
};

} ) );

},{}],24:[function(require,module,exports){
/*!
 * jQuery UI Tabbable 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :tabbable Selector
//>>group: Core
//>>description: Selects elements which can be tabbed to.
//>>docs: http://api.jqueryui.com/tabbable-selector/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version", "./focusable" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

return $.extend( $.expr[ ":" ], {
	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			hasTabindex = tabIndex != null;
		return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
	}
} );

} ) );

},{}],25:[function(require,module,exports){
/*!
 * jQuery UI Unique ID 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

return $.fn.extend( {
	uniqueId: ( function() {
		var uuid = 0;

		return function() {
			return this.each( function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			} );
		};
	} )(),

	removeUniqueId: function() {
		return this.each( function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		} );
	}
} );

} ) );

},{}],26:[function(require,module,exports){
( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {

$.ui = $.ui || {};

return $.ui.version = "1.12.0";

} ) );

},{}],27:[function(require,module,exports){
/*!
 * jQuery UI Widget 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

var widgetUuid = 0;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// Http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( $.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {
			this.each( function() {
				var methodValue;
				var instance = $.data( this, fullName );

				if ( options === "instance" ) {
					returnValue = instance;
					return false;
				}

				if ( !instance ) {
					return $.error( "cannot call methods on " + name +
						" prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}

				if ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name +
						" widget instance" );
				}

				methodValue = instance[ options ].apply( instance, args );

				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			} );
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					current = $( $.unique( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName ).off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

return $.widget;

} ) );

},{}],28:[function(require,module,exports){
/*!
 * jQuery UI Autocomplete 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"./menu",
			"../keycode",
			"../position",
			"../safe-active-element",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

$.widget( "ui.autocomplete", {
	version: "1.12.0",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {

		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		// Textareas are always multi-line
		// Inputs are always single-line, even if inside a contentEditable element
		// IE also treats inputs as contentEditable
		// All other element types are determined by whether or not they're contentEditable
		this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this._addClass( "ui-autocomplete-input" );
		this.element.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:

					// when menu is open and has focus
					if ( this.menu.active ) {

						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );

						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;

					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// Replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		} );

		this._initSource();
		this.menu = $( "<ul>" )
			.appendTo( this._appendTo() )
			.menu( {

				// disable ARIA support, the live region takes care of that
				role: null
			} )
			.hide()
			.menu( "instance" );

		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
		this._on( this.menu.element, {
			mousedown: function( event ) {

				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay( function() {
					delete this.cancelBlur;

					// Support: IE 8 only
					// Right clicking a menu item or selecting text from the menu items will
					// result in focus moving out of the input. However, we've already received
					// and ignored the blur event because of the cancelBlur flag set above. So
					// we restore focus to ensure that the menu closes properly based on the user's
					// next actions.
					if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
						this.element.trigger( "focus" );
					}
				} );
			},
			menufocus: function( event, ui ) {
				var label, item;

				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						} );

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// Only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay( function() {
						this.previous = previous;
						this.selectedItem = item;
					} );
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}

				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		} );

		this.liveRegion = $( "<div>", {
			role: "status",
			"aria-live": "assertive",
			"aria-relevant": "additions"
		} )
			.appendTo( this.document[ 0 ].body );

		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_isEventTargetInWidget: function( event ) {
		var menuElement = this.menu.element[ 0 ];

		return event.target === this.element[ 0 ] ||
			event.target === menuElement ||
			$.contains( menuElement, event.target );
	},

	_closeOnClickOutside: function( event ) {
		if ( !this._isEventTargetInWidget( event ) ) {
			this.close();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax( {
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				} );
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay( function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// Always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this._addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy( function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this._removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {

			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {

		// Remove the handler that closes the menu on outside clicks
		this._off( this.document, "mousedown" );

		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {

		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			} );
		} );
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// Size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend( {
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}

		// Listen for interactions outside of the widget (#6642)
		this._on( this.document, {
			mousedown: "_closeOnClickOutside"
		} );
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(

			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<div>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// Prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},

	// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable: function( element ) {
		if ( !element.length ) {
			return false;
		}

		var editable = element.prop( "contentEditable" );

		if ( editable === "inherit" ) {
		  return this._isContentEditable( element.parent() );
		}

		return editable === "true";
	}
} );

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		} );
	}
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
} );

return $.ui.autocomplete;

} ) );

},{}],29:[function(require,module,exports){
/*!
 * jQuery UI Button 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Button
//>>group: Widgets
//>>description: Enhances a form with themeable buttons.
//>>docs: http://api.jqueryui.com/button/
//>>demos: http://jqueryui.com/button/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",

			// These are only for backcompat
			// TODO: Remove after 1.12
			"./controlgroup",
			"./checkboxradio",

			"../keycode",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

$.widget( "ui.button", {
	version: "1.12.0",
	defaultElement: "<button>",
	options: {
		classes: {
			"ui-button": "ui-corner-all"
		},
		disabled: null,
		icon: null,
		iconPosition: "beginning",
		label: null,
		showLabel: true
	},

	_getCreateOptions: function() {
		var disabled,

			// This is to support cases like in jQuery Mobile where the base widget does have
			// an implementation of _getCreateOptions
			options = this._super() || {};

		this.isInput = this.element.is( "input" );

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}

		this.originalLabel = this.isInput ? this.element.val() : this.element.html();
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		return options;
	},

	_create: function() {
		if ( !this.option.showLabel & !this.options.icon ) {
			this.options.showLabel = true;
		}

		// We have to check the option again here even though we did in _getCreateOptions,
		// because null may have been passed on init which would override what was set in
		// _getCreateOptions
		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled || false;
		}

		this.hasTitle = !!this.element.attr( "title" );

		// Check to see if the label needs to be set or if its already correct
		if ( this.options.label && this.options.label !== this.originalLabel ) {
			if ( this.isInput ) {
				this.element.val( this.options.label );
			} else {
				this.element.html( this.options.label );
			}
		}
		this._addClass( "ui-button", "ui-widget" );
		this._setOption( "disabled", this.options.disabled );
		this._enhance();

		if ( this.element.is( "a" ) ) {
			this._on( {
				"keyup": function( event ) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						event.preventDefault();

						// Support: PhantomJS <= 1.9, IE 8 Only
						// If a native click is available use it so we actually cause navigation
						// otherwise just trigger a click event
						if ( this.element[ 0 ].click ) {
							this.element[ 0 ].click();
						} else {
							this.element.trigger( "click" );
						}
					}
				}
			} );
		}
	},

	_enhance: function() {
		if ( !this.element.is( "button" ) ) {
			this.element.attr( "role", "button" );
		}

		if ( this.options.icon ) {
			this._updateIcon( "icon", this.options.icon );
			this._updateTooltip();
		}
	},

	_updateTooltip: function() {
		this.title = this.element.attr( "title" );

		if ( !this.options.showLabel && !this.title ) {
			this.element.attr( "title", this.options.label );
		}
	},

	_updateIcon: function( option, value ) {
		var icon = option !== "iconPosition",
			position = icon ? this.options.iconPosition : value,
			displayBlock = position === "top" || position === "bottom";

		// Create icon
		if ( !this.icon ) {
			this.icon = $( "<span>" );

			this._addClass( this.icon, "ui-button-icon", "ui-icon" );

			if ( !this.options.showLabel ) {
				this._addClass( "ui-button-icon-only" );
			}
		} else if ( icon ) {

			// If we are updating the icon remove the old icon class
			this._removeClass( this.icon, null, this.options.icon );
		}

		// If we are updating the icon add the new icon class
		if ( icon ) {
			this._addClass( this.icon, null, value );
		}

		this._attachIcon( position );

		// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
		// the iconSpace if there is one.
		if ( displayBlock ) {
			this._addClass( this.icon, null, "ui-widget-icon-block" );
			if ( this.iconSpace ) {
				this.iconSpace.remove();
			}
		} else {

			// Position is beginning or end so remove the ui-widget-icon-block class and add the
			// space if it does not exist
			if ( !this.iconSpace ) {
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-button-icon-space" );
			}
			this._removeClass( this.icon, null, "ui-wiget-icon-block" );
			this._attachIconSpace( position );
		}
	},

	_destroy: function() {
		this.element.removeAttr( "role" );

		if ( this.icon ) {
			this.icon.remove();
		}
		if ( this.iconSpace ) {
			this.iconSpace.remove();
		}
		if ( !this.hasTitle ) {
			this.element.removeAttr( "title" );
		}
	},

	_attachIconSpace: function( iconPosition ) {
		this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
	},

	_attachIcon: function( iconPosition ) {
		this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
	},

	_setOptions: function( options ) {
		var newShowLabel = options.showLabel === undefined ?
				this.options.showLabel :
				options.showLabel,
			newIcon = options.icon === undefined ? this.options.icon : options.icon;

		if ( !newShowLabel && !newIcon ) {
			options.showLabel = true;
		}
		this._super( options );
	},

	_setOption: function( key, value ) {
		if ( key === "icon" ) {
			if ( value ) {
				this._updateIcon( key, value );
			} else if ( this.icon ) {
				this.icon.remove();
				if ( this.iconSpace ) {
					this.iconSpace.remove();
				}
			}
		}

		if ( key === "iconPosition" ) {
			this._updateIcon( key, value );
		}

		// Make sure we can't end up with a button that has neither text nor icon
		if ( key === "showLabel" ) {
				this._toggleClass( "ui-button-icon-only", null, !value );
				this._updateTooltip();
		}

		if ( key === "label" ) {
			if ( this.isInput ) {
				this.element.val( value );
			} else {

				// If there is an icon, append it, else nothing then append the value
				// this avoids removal of the icon when setting label text
				this.element.html( value );
				if ( this.icon ) {
					this._attachIcon( this.options.iconPosition );
					this._attachIconSpace( this.options.iconPosition );
				}
			}
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;
			if ( value ) {
				this.element.blur();
			}
		}
	},

	refresh: function() {

		// Make sure to only check disabled if its an element that supports this otherwise
		// check for the disabled class to determine state
		var isDisabled = this.element.is( "input, button" ) ?
			this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { disabled: isDisabled } );
		}

		this._updateTooltip();
	}
} );

// DEPRECATED
if ( $.uiBackCompat !== false ) {

	// Text and Icons options
	$.widget( "ui.button", $.ui.button, {
		options: {
			text: true,
			icons: {
				primary: null,
				secondary: null
			}
		},

		_create: function() {
			if ( this.options.showLabel && !this.options.text ) {
				this.options.showLabel = this.options.text;
			}
			if ( !this.options.showLabel && this.options.text ) {
				this.options.text = this.options.showLabel;
			}
			if ( !this.options.icon && ( this.options.icons.primary ||
					this.options.icons.secondary ) ) {
				if ( this.options.icons.primary ) {
					this.options.icon = this.options.icons.primary;
				} else {
					this.options.icon = this.options.icons.secondary;
					this.options.iconPosition = "end";
				}
			} else if ( this.options.icon ) {
				this.options.icons.primary = this.options.icon;
			}
			this._super();
		},

		_setOption: function( key, value ) {
			if ( key === "text" ) {
				this._super( "showLabel", value );
				return;
			}
			if ( key === "showLabel" ) {
				this.options.text = value;
			}
			if ( key === "icon" ) {
				this.options.icons.primary = value;
			}
			if ( key === "icons" ) {
				if ( value.primary ) {
					this._super( "icon", value.primary );
					this._super( "iconPosition", "beginning" );
				} else if ( value.secondary ) {
					this._super( "icon", value.secondary );
					this._super( "iconPosition", "end" );
				}
			}
			this._superApply( arguments );
		}
	} );

	$.fn.button = ( function( orig ) {
		return function() {
			if ( !this.length || ( this.length && this[ 0 ].tagName !== "INPUT" ) ||
					( this.length && this[ 0 ].tagName === "INPUT" && (
						this.attr( "type" ) !== "checkbox" && this.attr( "type" ) !== "radio"
					) ) ) {
				return orig.apply( this, arguments );
			}
			if ( !$.ui.checkboxradio ) {
				$.error( "Checkboxradio widget missing" );
			}
			if ( arguments.length === 0 ) {
				return this.checkboxradio( {
					"icon": false
				} );
			}
			return this.checkboxradio.apply( this, arguments );
		};
	} )( $.fn.button );

	$.fn.buttonset = function() {
		if ( !$.ui.controlgroup ) {
			$.error( "Controlgroup widget missing" );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
			return this.controlgroup.apply( this,
				[ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
			return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
		}
		if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
			arguments[ 0 ].items = {
				button: arguments[ 0 ].items
			};
		}
		return this.controlgroup.apply( this, arguments );
	};
}

return $.ui.button;

} ) );

},{}],30:[function(require,module,exports){
/*!
 * jQuery UI Dialog 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Dialog
//>>group: Widgets
//>>description: Displays customizable dialog windows.
//>>docs: http://api.jqueryui.com/dialog/
//>>demos: http://jqueryui.com/dialog/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/dialog.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"./button",
			"./draggable",
			"./mouse",
			"./resizable",
			"../focusable",
			"../keycode",
			"../position",
			"../safe-active-element",
			"../safe-blur",
			"../tabbable",
			"../unique-id",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

$.widget( "ui.dialog", {
	version: "1.12.0",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		classes: {
			"ui-dialog": "ui-corner-all",
			"ui-dialog-titlebar": "ui-corner-all"
		},
		closeOnEscape: true,
		closeText: "Close",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",

			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// Callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	sizeRelatedOptions: {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},

	resizableRelatedOptions: {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},

	_create: function() {
		this.originalCss = {
			display: this.element[ 0 ].style.display,
			width: this.element[ 0 ].style.width,
			minHeight: this.element[ 0 ].style.minHeight,
			maxHeight: this.element[ 0 ].style.maxHeight,
			height: this.element[ 0 ].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr( "title" );
		if ( this.options.title == null && this.originalTitle != null ) {
			this.options.title = this.originalTitle;
		}

		// Dialogs can't be disabled
		if ( this.options.disabled ) {
			this.options.disabled = false;
		}

		this._createWrapper();

		this.element
			.show()
			.removeAttr( "title" )
			.appendTo( this.uiDialog );

		this._addClass( "ui-dialog-content", "ui-widget-content" );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;

		this._trackFocus();
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && ( element.jquery || element.nodeType ) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._untrackInstance();
		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.css( this.originalCss )

			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );

		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._focusedElement = null;
		this._destroyOverlay();
		this._untrackInstance();

		if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

			// Hiding a focused element doesn't trigger blur in WebKit
			// so in case we have nothing to focus on, explicitly blur the active element
			// https://bugs.webkit.org/show_bug.cgi?id=47182
			$.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		} );
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = false,
			zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
				return +$( this ).css( "z-index" );
			} ).get(),
			zIndexMax = Math.max.apply( null, zIndices );

		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
			this.uiDialog.css( "z-index", zIndexMax + 1 );
			moved = true;
		}

		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );

		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if ( this.overlay ) {
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
		}

		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger( "focus" );
		} );

		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();

		this._trigger( "open" );
	},

	_focusTabbable: function() {

		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		var hasFocus = this._focusedElement;
		if ( !hasFocus ) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.element.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).trigger( "focus" );
	},

	_keepFocus: function( event ) {
		function checkFocus() {
			var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
				isActive = this.uiDialog[ 0 ] === activeElement ||
					$.contains( this.uiDialog[ 0 ], activeElement );
			if ( !isActive ) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call( this );

		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( checkFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $( "<div>" )
			.hide()
			.attr( {

				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			} )
			.appendTo( this._appendTo() );

		this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// Prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
					return;
				}
				var tabbables = this.uiDialog.find( ":tabbable" ),
					first = tabbables.filter( ":first" ),
					last = tabbables.filter( ":last" );

				if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
						!event.shiftKey ) {
					this._delay( function() {
						first.trigger( "focus" );
					} );
					event.preventDefault();
				} else if ( ( event.target === first[ 0 ] ||
						event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
					this._delay( function() {
						last.trigger( "focus" );
					} );
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		} );

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find( "[aria-describedby]" ).length ) {
			this.uiDialog.attr( {
				"aria-describedby": this.element.uniqueId().attr( "id" )
			} );
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $( "<div>" );
		this._addClass( this.uiDialogTitlebar,
			"ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {

				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.trigger( "focus" );
				}
			}
		} );

		// Support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button( {
				label: $( "<a>" ).text( this.options.closeText ).html(),
				icon: "ui-icon-closethick",
				showLabel: false
			} )
			.appendTo( this.uiDialogTitlebar );

		this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		} );

		uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
		this._addClass( uiDialogTitle, "ui-dialog-title" );
		this._title( uiDialogTitle );

		this.uiDialogTitlebar.prependTo( this.uiDialog );

		this.uiDialog.attr( {
			"aria-labelledby": uiDialogTitle.attr( "id" )
		} );
	},

	_title: function( title ) {
		if ( this.options.title ) {
			title.text( this.options.title );
		} else {
			title.html( "&#160;" );
		}
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $( "<div>" );
		this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
			"ui-widget-content ui-helper-clearfix" );

		this.uiButtonSet = $( "<div>" )
			.appendTo( this.uiDialogButtonPane );
		this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// If we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ( $.isArray( buttons ) && !buttons.length ) ) {
			this._removeClass( this.uiDialog, "ui-dialog-buttons" );
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = $.isFunction( props ) ?
				{ click: props, text: name } :
				props;

			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );

			// Change the context for the click callback to be the main element
			click = props.click;
			buttonOptions = {
				icon: props.icon,
				iconPosition: props.iconPosition,
				showLabel: props.showLabel
			};

			delete props.click;
			delete props.icon;
			delete props.iconPosition;
			delete props.showLabel;

			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet )
				.on( "click", function() {
					click.apply( that.element[ 0 ], arguments );
				} );
		} );
		this._addClass( this.uiDialog, "ui-dialog-buttons" );
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable( {
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-dragging" );
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();

				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-dragging" );
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		} );
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,

			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css( "position" ),
			resizeHandles = typeof handles === "string" ?
				handles :
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable( {
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-resizing" );
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();

				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-resizing" );
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		} )
			.css( "position", position );
	},

	_trackFocus: function() {
		this._on( this.widget(), {
			focusin: function( event ) {
				this._makeFocusTarget();
				this._focusedElement = $( event.target );
			}
		} );
	},

	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},

	_untrackInstance: function() {
		var instances = this._trackingInstances(),
			exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},

	_trackingInstances: function() {
		var instances = this.document.data( "ui-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "ui-dialog-instances", instances );
		}
		return instances;
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {

		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is( ":visible" );
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in that.sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in that.resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		} );

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button( {

				// Ensure that we always pass a string
				label: $( "<a>" ).text( "" + this.options.closeText ).html()
			} );
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is( ":data(ui-draggable)" );
			if ( isDraggable && !value ) {
				uiDialog.draggable( "destroy" );
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {

			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is( ":data(ui-resizable)" );
			if ( isResizable && !value ) {
				uiDialog.resizable( "destroy" );
			}

			// Currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// Currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
		}
	},

	_size: function() {

		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css( {
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		} );

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// Reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css( {
			height: "auto",
			width: options.width
		} )
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css( {
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			} );
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( {
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				} )
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest( ".ui-datepicker" ).length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay( function() {
			isOpening = false;
		} );

		if ( !this.document.data( "ui-dialog-overlays" ) ) {

			// Prevent use of anchors and inputs
			// Using _on() for an event handler shared across many instances is
			// safe because the dialogs stack and must be closed in reverse order
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}

					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						this._trackingInstances()[ 0 ]._focusTabbable();
					}
				}
			} );
		}

		this.overlay = $( "<div>" )
			.appendTo( this._appendTo() );

		this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		} );
		this.document.data( "ui-dialog-overlays",
			( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

			if ( !overlays ) {
				this._off( this.document, "focusin" );
				this.document.removeData( "ui-dialog-overlays" );
			} else {
				this.document.data( "ui-dialog-overlays", overlays );
			}

			this.overlay.remove();
			this.overlay = null;
		}
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for dialogClass option
	$.widget( "ui.dialog", $.ui.dialog, {
		options: {
			dialogClass: ""
		},
		_createWrapper: function() {
			this._super();
			this.uiDialog.addClass( this.options.dialogClass );
		},
		_setOption: function( key, value ) {
			if ( key === "dialogClass" ) {
				this.uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}
			this._superApply( arguments );
		}
	} );
}

return $.ui.dialog;

} ) );

},{}],31:[function(require,module,exports){
/*!
 * jQuery UI Draggable 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"./mouse",
			"../data",
			"../plugin",
			"../safe-active-element",
			"../safe-blur",
			"../scroll-parent",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

$.widget( "ui.draggable", $.ui.mouse, {
	version: "1.12.0",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// Callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if ( this.options.addClasses ) {
			this._addClass( "ui-draggable" );
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var o = this.options;

		this._blurActiveElement( event );

		// Among others, prevent a drag on a resizable-handle
		if ( this.helper || o.disabled ||
				$( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle( event );
		if ( !this.handle ) {
			return false;
		}

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
			target = $( event.target );

		// Only blur if the event occurred on an element that is:
		// 1) within the draggable handle
		// 2) but not within the currently focused element
		// See #10527, #12472
		if ( this._getHandle( event ) && target.closest( activeElement ).length ) {
			return;
		}

		// Blur any element that currently has focus, see #4261
		$.ui.safeBlur( activeElement );
	},

	_mouseStart: function( event ) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		this._addClass( this.helper, "ui-draggable-dragging" );

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter( function() {
				return $( this ).css( "position" ) === "fixed";
			} ).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if ( this._trigger( "start", event ) === false ) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		// Execute the drag once - this causes the helper not to be visible before getting its
		// correct position
		this._mouseDrag( event, true );

		// If the ddmanager is used for droppables, inform the manager that dragging has started
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart( this, event );
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function( event, noPropagation ) {

		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Call plugins and callbacks and use the resulting position if something is returned
		if ( !noPropagation ) {
			var ui = this._uiHash();
			if ( this._trigger( "drag", event, ui ) === false ) {
				this._mouseUp( new $.Event( "mouseup", event ) );
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		return false;
	},

	_mouseStop: function( event ) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			dropped = $.ui.ddmanager.drop( this, event );
		}

		//if a drop comes from outside (a sortable)
		if ( this.dropped ) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ( ( this.options.revert === "invalid" && !dropped ) ||
				( this.options.revert === "valid" && dropped ) ||
				this.options.revert === true || ( $.isFunction( this.options.revert ) &&
				this.options.revert.call( this.element, dropped ) )
		) {
			$( this.helper ).animate(
				this.originalPosition,
				parseInt( this.options.revertDuration, 10 ),
				function() {
					if ( that._trigger( "stop", event ) !== false ) {
						that._clear();
					}
				}
			);
		} else {
			if ( this._trigger( "stop", event ) !== false ) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		// If the ddmanager is used for droppables, inform the manager that dragging has stopped
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop( this, event );
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {

			// The interaction is over; whether or not the click resulted in a drag,
			// focus the element
			this.element.trigger( "focus" );
		}

		return $.ui.mouse.prototype._mouseUp.call( this, event );
	},

	cancel: function() {

		if ( this.helper.is( ".ui-draggable-dragging" ) ) {
			this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function( event ) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this._addClass( this.handleElement, "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this._removeClass( this.handleElement, "ui-draggable-handle" );
	},

	_createHelper: function( event ) {

		var o = this.options,
			helperIsFunction = $.isFunction( o.helper ),
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if ( !helper.parents( "body" ).length ) {
			helper.appendTo( ( o.appendTo === "parent" ?
				this.element[ 0 ].parentNode :
				o.appendTo ) );
		}

		// Http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if ( helper[ 0 ] !== this.element[ 0 ] &&
				!( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
			helper.css( "position", "absolute" );
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
			right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
			bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() -
					this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() +
					( $( window ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document" ) {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ) {
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
					pageX = containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
					pageY = containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
					pageX = containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
					pageY = containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {

				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
				// argument errors in IE (see ticket #6950)
				top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
					this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
				pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
					top - this.offset.click.top > containment[ 3 ] ) ?
						top :
						( ( top - this.offset.click.top >= containment[ 1 ] ) ?
							top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

				left = o.grid[ 0 ] ? this.originalPageX +
					Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
					this.originalPageX;
				pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
					left - this.offset.click.left > containment[ 2 ] ) ?
						left :
						( ( left - this.offset.click.left >= containment[ 0 ] ) ?
							left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this._removeClass( this.helper, "ui-draggable-dragging" );
		if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

} );

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each( function() {
			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// RefreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger( "activate", event, uiSortable );
			}
		} );
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop( event );

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {

				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		} );
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {

					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				} );
			}

			if ( innermostIntersecting ) {

				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					// Store draggable's parent in case we need to reappend to it later.
					draggable._parent = ui.helper.parent();

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					// Hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );

					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {

				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// Restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					ui.helper.appendTo( draggable._parent );
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );
				}
			}
		} );
	}
} );

$.ui.plugin.add( "draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if ( t.css( "cursor" ) ) {
			o._cursor = t.css( "cursor" );
		}
		t.css( "cursor", o.cursor );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._cursor ) {
			$( "body" ).css( "cursor", o._cursor );
		}
	}
} );

$.ui.plugin.add( "draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if ( t.css( "opacity" ) ) {
			o._opacity = t.css( "opacity" );
		}
		t.css( "opacity", o.opacity );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._opacity ) {
			$( ui.helper ).css( "opacity", o._opacity );
		}
	}
} );

$.ui.plugin.add( "draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
				i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
						o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
						o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if ( !o.axis || o.axis !== "x" ) {
				if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
				} else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() - o.scrollSpeed
					);
				} else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() + o.scrollSpeed
					);
				}
			}

		}

		if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( i, event );
		}

	}
} );

$.ui.plugin.add( "draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
			.each( function() {
				var $t = $( this ),
					$o = $t.offset();
				if ( this !== i.element[ 0 ] ) {
					i.snapElements.push( {
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					} );
				}
			} );

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

			l = inst.snapElements[ i ].left - inst.margins.left;
			r = l + inst.snapElements[ i ].width;
			t = inst.snapElements[ i ].top - inst.margins.top;
			b = t + inst.snapElements[ i ].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
					!$.contains( inst.snapElements[ i ].item.ownerDocument,
					inst.snapElements[ i ].item ) ) {
				if ( inst.snapElements[ i ].snapping ) {
					( inst.options.snap.release &&
						inst.options.snap.release.call(
							inst.element,
							event,
							$.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
						) );
				}
				inst.snapElements[ i ].snapping = false;
				continue;
			}

			if ( o.snapMode !== "inner" ) {
				ts = Math.abs( t - y2 ) <= d;
				bs = Math.abs( b - y1 ) <= d;
				ls = Math.abs( l - x2 ) <= d;
				rs = Math.abs( r - x1 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l - inst.helperProportions.width
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r
					} ).left;
				}
			}

			first = ( ts || bs || ls || rs );

			if ( o.snapMode !== "outer" ) {
				ts = Math.abs( t - y1 ) <= d;
				bs = Math.abs( b - y2 ) <= d;
				ls = Math.abs( l - x1 ) <= d;
				rs = Math.abs( r - x2 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r - inst.helperProportions.width
					} ).left;
				}
			}

			if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
				( inst.options.snap.snap &&
					inst.options.snap.snap.call(
						inst.element,
						event,
						$.extend( inst._uiHash(), {
							snapItem: inst.snapElements[ i ].item
						} ) ) );
			}
			inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

		}

	}
} );

$.ui.plugin.add( "draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
				return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
					( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
			} );

		if ( !group.length ) { return; }

		min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
		$( group ).each( function( i ) {
			$( this ).css( "zIndex", min + i );
		} );
		this.css( "zIndex", ( min + group.length ) );
	}
} );

$.ui.plugin.add( "draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if ( t.css( "zIndex" ) ) {
			o._zIndex = t.css( "zIndex" );
		}
		t.css( "zIndex", o.zIndex );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if ( o._zIndex ) {
			$( ui.helper ).css( "zIndex", o._zIndex );
		}
	}
} );

return $.ui.draggable;

} ) );

},{}],32:[function(require,module,exports){
/*!
 * jQuery UI Menu 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"../keycode",
			"../position",
			"../safe-active-element",
			"../unique-id",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

return $.widget( "ui.menu", {
	version: "1.12.0",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-caret-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// Callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.attr( {
				role: this.options.role,
				tabIndex: 0
			} );

		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
		this._on( {

			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) &&
							active.closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {

				// Ignore mouse events while typeahead is active, see #10458.
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
				// is over an item in the menu
				if ( this.previousFilter ) {
					return;
				}

				var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
					target = $( event.currentTarget );

				// Ignore bubbled events on parent items, see #11641
				if ( actualTarget[ 0 ] !== target[ 0 ] ) {
					return;
				}

				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				this._removeClass( target.siblings().children( ".ui-state-active" ),
					null, "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {

				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.find( this.options.items ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay( function() {
					var notContained = !$.contains(
						this.element[ 0 ],
						$.ui.safeActiveElement( this.document[ 0 ] )
					);
					if ( notContained ) {
						this.collapseAll( event );
					}
				} );
			},
			keydown: "_keydown"
		} );

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		} );
	},

	_destroy: function() {
		var items = this.element.find( ".ui-menu-item" )
				.removeAttr( "role aria-disabled" ),
			submenus = items.children( ".ui-menu-item-wrapper" )
				.removeUniqueId()
				.removeAttr( "tabIndex role aria-haspopup" );

		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
					"tabIndex" )
				.removeUniqueId()
				.show();

		submenus.children().each( function() {
			var elem = $( this );
			if ( elem.data( "ui-menu-submenu-caret" ) ) {
				elem.remove();
			}
		} );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			character = String.fromCharCode( event.keyCode );
			skip = false;

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay( function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items, newSubmenus, newItems, newWrappers,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		newSubmenus = submenus.filter( ":not(.ui-menu)" )
			.hide()
			.attr( {
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			} )
			.each( function() {
				var menu = $( this ),
					item = menu.prev(),
					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCaret );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			} );

		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each( function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
			}
		} );

		// Don't refresh list items that are already adapted
		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
		newWrappers = newItems.children()
			.not( ".ui-menu" )
				.uniqueId()
				.attr( {
					tabIndex: -1,
					role: this._itemRole()
				} );
		this._addClass( newItems, "ui-menu-item" )
			._addClass( newWrappers, "ui-menu-item-wrapper" );

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icons = this.element.find( ".ui-menu-icon" );
			this._removeClass( icons, null, this.options.icons.submenu )
				._addClass( icons, null, value.submenu );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", String( value ) );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	focus: function( event, item ) {
		var nested, focused, activeParent;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();

		focused = this.active.children( ".ui-menu-item-wrapper" );
		this._addClass( focused, null, "ui-state-active" );

		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		activeParent = this.active
			.parent()
				.closest( ".ui-menu-item" )
					.children( ".ui-menu-item-wrapper" );
		this._addClass( activeParent, null, "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay( function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening( nested );
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
			null, "ui-state-active" );

		this._trigger( "blur", event, { item: this.active } );
		this.active = null;
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the caret icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay( function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend( {
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay( function() {

			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all
			// sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );

			// Work around active item staying active after menu is blurred
			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu.find( ".ui-menu" )
			.hide()
			.attr( "aria-hidden", "true" )
			.attr( "aria-expanded", "false" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
					.find( this.options.items )
						.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay( function() {
				this.focus( event, newItem );
			} );
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.find( this.options.items )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {

		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function( character ) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
					.filter( function() {
						return regex.test(
							$.trim( $( this ).children( ".ui-menu-item-wrapper" ).text() ) );
					} );
	}
} );

} ) );

},{}],33:[function(require,module,exports){
/*!
 * jQuery UI Mouse 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"../ie",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

var mouseHandled = false;
$( document ).on( "mouseup", function() {
	mouseHandled = false;
} );

return $.widget( "ui.mouse", {
	version: "1.12.0",
	options: {
		cancel: "input, textarea, button, select, option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.on( "mousedown." + this.widgetName, function( event ) {
				return that._mouseDown( event );
			} )
			.on( "click." + this.widgetName, function( event ) {
				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
					event.stopImmediatePropagation();
					return false;
				}
			} );

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.off( "." + this.widgetName );
		if ( this._mouseMoveDelegate ) {
			this.document
				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
		}
	},

	_mouseDown: function( event ) {

		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// We may have missed mouseup (out of window)
		( this._mouseStarted && this._mouseUp( event ) );

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = ( event.which === 1 ),

			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
				$( event.target ).closest( this.options.cancel ).length : false );
		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if ( !this.mouseDelayMet ) {
			this._mouseDelayTimer = setTimeout( function() {
				that.mouseDelayMet = true;
			}, this.options.delay );
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted = ( this._mouseStart( event ) !== false );
			if ( !this._mouseStarted ) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
		}

		// These delegates are required to keep context
		this._mouseMoveDelegate = function( event ) {
			return that._mouseMove( event );
		};
		this._mouseUpDelegate = function( event ) {
			return that._mouseUp( event );
		};

		this.document
			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function( event ) {

		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {

			// IE mouseup check - mouseup happened when mouse was out of window
			if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
					!event.button ) {
				return this._mouseUp( event );

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {

				// Support: Safari <=8 - 9
				// Safari sets which to 0 if you press any of the following keys
				// during a drag (#14461)
				if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
						event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
					this.ignoreMissingWhich = true;
				} else if ( !this.ignoreMissingWhich ) {
					return this._mouseUp( event );
				}
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if ( this._mouseStarted ) {
			this._mouseDrag( event );
			return event.preventDefault();
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted =
				( this._mouseStart( this._mouseDownEvent, event ) !== false );
			( this._mouseStarted ? this._mouseDrag( event ) : this._mouseUp( event ) );
		}

		return !this._mouseStarted;
	},

	_mouseUp: function( event ) {
		this.document
			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if ( this._mouseStarted ) {
			this._mouseStarted = false;

			if ( event.target === this._mouseDownEvent.target ) {
				$.data( event.target, this.widgetName + ".preventClickEvent", true );
			}

			this._mouseStop( event );
		}

		if ( this._mouseDelayTimer ) {
			clearTimeout( this._mouseDelayTimer );
			delete this._mouseDelayTimer;
		}

		this.ignoreMissingWhich = false;
		mouseHandled = false;
		event.preventDefault();
	},

	_mouseDistanceMet: function( event ) {
		return ( Math.max(
				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
				Math.abs( this._mouseDownEvent.pageY - event.pageY )
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function( /* event */ ) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function( /* event */ ) {},
	_mouseDrag: function( /* event */ ) {},
	_mouseStop: function( /* event */ ) {},
	_mouseCapture: function( /* event */ ) { return true; }
} );

} ) );

},{}],34:[function(require,module,exports){
/*!
 * jQuery UI Resizable 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Resizable
//>>group: Interactions
//>>description: Enables resize functionality for any element.
//>>docs: http://api.jqueryui.com/resizable/
//>>demos: http://jqueryui.com/resizable/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/resizable.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"./mouse",
			"../disable-selection",
			"../plugin",
			"../version",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

$.widget( "ui.resizable", $.ui.mouse, {
	version: "1.12.0",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		classes: {
			"ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
		},
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,

		// See #7960
		zIndex: 90,

		// Callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseFloat( value ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseFloat( value ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden" ) {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},

	_create: function() {

		var margins,
			o = this.options,
			that = this;
		this._addClass( "ui-resizable" );

		$.extend( this, {
			_aspectRatio: !!( o.aspectRatio ),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		} );

		// Wrap the element if it cannot hold child nodes
		if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

			this.element.wrap(
				$( "<div class='ui-wrapper' style='overflow: hidden;'></div>" ).css( {
					position: this.element.css( "position" ),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css( "top" ),
					left: this.element.css( "left" )
				} )
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			margins = {
				marginTop: this.originalElement.css( "marginTop" ),
				marginRight: this.originalElement.css( "marginRight" ),
				marginBottom: this.originalElement.css( "marginBottom" ),
				marginLeft: this.originalElement.css( "marginLeft" )
			};

			this.element.css( margins );
			this.originalElement.css( "margin", 0 );

			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css( "resize" );
			this.originalElement.css( "resize", "none" );

			this._proportionallyResizeElements.push( this.originalElement.css( {
				position: "static",
				zoom: 1,
				display: "block"
			} ) );

			// Support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css( margins );

			this._proportionallyResize();
		}

		this._setupHandles();

		if ( o.autoHide ) {
			$( this.element )
				.on( "mouseenter", function() {
					if ( o.disabled ) {
						return;
					}
					that._removeClass( "ui-resizable-autohide" );
					that._handles.show();
				} )
				.on( "mouseleave", function() {
					if ( o.disabled ) {
						return;
					}
					if ( !that.resizing ) {
						that._addClass( "ui-resizable-autohide" );
						that._handles.hide();
					}
				} );
		}

		this._mouseInit();
	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function( exp ) {
				$( exp )
					.removeData( "resizable" )
					.removeData( "ui-resizable" )
					.off( ".resizable" )
					.find( ".ui-resizable-handle" )
						.remove();
			};

		// TODO: Unwrap at same DOM position
		if ( this.elementIsWrapper ) {
			_destroy( this.element );
			wrapper = this.element;
			this.originalElement.css( {
				position: wrapper.css( "position" ),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css( "top" ),
				left: wrapper.css( "left" )
			} ).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css( "resize", this.originalResizeStyle );
		_destroy( this.originalElement );

		return this;
	},

	_setOption: function( key, value ) {
		this._super( key, value );

		switch ( key ) {
		case "handles":
			this._removeHandles();
			this._setupHandles();
			break;
		default:
			break;
		}
	},

	_setupHandles: function() {
		var o = this.options, handle, i, n, hname, axis, that = this;
		this.handles = o.handles ||
			( !$( ".ui-resizable-handle", this.element ).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		this._handles = $();
		if ( this.handles.constructor === String ) {

			if ( this.handles === "all" ) {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split( "," );
			this.handles = {};

			for ( i = 0; i < n.length; i++ ) {

				handle = $.trim( n[ i ] );
				hname = "ui-resizable-" + handle;
				axis = $( "<div>" );
				this._addClass( axis, "ui-resizable-handle " + hname );

				axis.css( { zIndex: o.zIndex } );

				this.handles[ handle ] = ".ui-resizable-" + handle;
				this.element.append( axis );
			}

		}

		this._renderAxis = function( target ) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for ( i in this.handles ) {

				if ( this.handles[ i ].constructor === String ) {
					this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
					this.handles[ i ] = $( this.handles[ i ] );
					this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
				}

				if ( this.elementIsWrapper &&
						this.originalElement[ 0 ]
							.nodeName
							.match( /^(textarea|input|select|button)$/i ) ) {
					axis = $( this.handles[ i ], this.element );

					padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
						axis.outerHeight() :
						axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test( i ) ? "Top" :
						/se|sw|s/.test( i ) ? "Bottom" :
						/^e$/.test( i ) ? "Right" : "Left" ].join( "" );

					target.css( padPos, padWrapper );

					this._proportionallyResize();
				}

				this._handles = this._handles.add( this.handles[ i ] );
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis( this.element );

		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
		this._handles.disableSelection();

		this._handles.on( "mouseover", function() {
			if ( !that.resizing ) {
				if ( this.className ) {
					axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
				}
				that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
			}
		} );

		if ( o.autoHide ) {
			this._handles.hide();
			this._addClass( "ui-resizable-autohide" );
		}
	},

	_removeHandles: function() {
		this._handles.remove();
	},

	_mouseCapture: function( event ) {
		var i, handle,
			capture = false;

		for ( i in this.handles ) {
			handle = $( this.handles[ i ] )[ 0 ];
			if ( handle === event.target || $.contains( handle, event.target ) ) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function( event ) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num( this.helper.css( "left" ) );
		curtop = this._num( this.helper.css( "top" ) );

		if ( o.containment ) {
			curleft += $( o.containment ).scrollLeft() || 0;
			curtop += $( o.containment ).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
			o.aspectRatio :
			( ( this.originalSize.width / this.originalSize.height ) || 1 );

		cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
		$( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

		this._addClass( "ui-resizable-resizing" );
		this._propagate( "start", event );
		return true;
	},

	_mouseDrag: function( event ) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = ( event.pageX - smp.left ) || 0,
			dy = ( event.pageY - smp.top ) || 0,
			trigger = this._change[ a ];

		this._updatePrevProperties();

		if ( !trigger ) {
			return false;
		}

		data = trigger.apply( this, [ event, dx, dy ] );

		this._updateVirtualBoundaries( event.shiftKey );
		if ( this._aspectRatio || event.shiftKey ) {
			data = this._updateRatio( data, event );
		}

		data = this._respectSize( data, event );

		this._updateCache( data );

		this._propagate( "resize", event );

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function( event ) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if ( this._helper ) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
			soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: ( that.helper.width()  - soffsetw ),
				height: ( that.helper.height() - soffseth )
			};
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null;
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

			if ( !o.animate ) {
				this.element.css( $.extend( s, { top: top, left: left } ) );
			}

			that.helper.height( that.size.height );
			that.helper.width( that.size.width );

			if ( this._helper && !o.animate ) {
				this._proportionallyResize();
			}
		}

		$( "body" ).css( "cursor", "auto" );

		this._removeClass( "ui-resizable-resizing" );

		this._propagate( "stop", event );

		if ( this._helper ) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function( forceAspectRatio ) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
			maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
			minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
			maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
		};

		if ( this._aspectRatio || forceAspectRatio ) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if ( pMinWidth > b.minWidth ) {
				b.minWidth = pMinWidth;
			}
			if ( pMinHeight > b.minHeight ) {
				b.minHeight = pMinHeight;
			}
			if ( pMaxWidth < b.maxWidth ) {
				b.maxWidth = pMaxWidth;
			}
			if ( pMaxHeight < b.maxHeight ) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function( data ) {
		this.offset = this.helper.offset();
		if ( this._isNumber( data.left ) ) {
			this.position.left = data.left;
		}
		if ( this._isNumber( data.top ) ) {
			this.position.top = data.top;
		}
		if ( this._isNumber( data.height ) ) {
			this.size.height = data.height;
		}
		if ( this._isNumber( data.width ) ) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if ( this._isNumber( data.height ) ) {
			data.width = ( data.height * this.aspectRatio );
		} else if ( this._isNumber( data.width ) ) {
			data.height = ( data.width / this.aspectRatio );
		}

		if ( a === "sw" ) {
			data.left = cpos.left + ( csize.width - data.width );
			data.top = null;
		}
		if ( a === "nw" ) {
			data.top = cpos.top + ( csize.height - data.height );
			data.left = cpos.left + ( csize.width - data.width );
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
			ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
			isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
			isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.originalPosition.top + this.originalSize.height,
			cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
		if ( isminw ) {
			data.width = o.minWidth;
		}
		if ( isminh ) {
			data.height = o.minHeight;
		}
		if ( ismaxw ) {
			data.width = o.maxWidth;
		}
		if ( ismaxh ) {
			data.height = o.maxHeight;
		}

		if ( isminw && cw ) {
			data.left = dw - o.minWidth;
		}
		if ( ismaxw && cw ) {
			data.left = dw - o.maxWidth;
		}
		if ( isminh && ch ) {
			data.top = dh - o.minHeight;
		}
		if ( ismaxh && ch ) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if ( !data.width && !data.height && !data.left && data.top ) {
			data.top = null;
		} else if ( !data.width && !data.height && !data.top && data.left ) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
			widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if ( !this._proportionallyResizeElements.length ) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++ ) {

			prel = this._proportionallyResizeElements[ i ];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if ( !this.outerDimensions ) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css( {
				height: ( element.height() - this.outerDimensions.height ) || 0,
				width: ( element.width() - this.outerDimensions.width ) || 0
			} );

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if ( this._helper ) {

			this.helper = this.helper || $( "<div style='overflow:hidden;'></div>" );

			this._addClass( this.helper, this._helper );
			this.helper.css( {
				width: this.element.outerWidth(),
				height: this.element.outerHeight(),
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			} );

			this.helper
				.appendTo( "body" )
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function( event, dx ) {
			return { width: this.originalSize.width + dx };
		},
		w: function( event, dx ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function( event, dx, dy ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function( event, dx, dy ) {
			return { height: this.originalSize.height + dy };
		},
		se: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		sw: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		},
		ne: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		nw: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		}
	},

	_propagate: function( n, event ) {
		$.ui.plugin.call( this, n, [ event, this.ui() ] );
		( n !== "resize" && this._trigger( n, event, this.ui() ) );
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

} );

/*
 * Resizable Extensions
 */

$.ui.plugin.add( "resizable", "animate", {

	stop: function( event ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
			soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = {
				width: ( that.size.width - soffsetw ),
				height: ( that.size.height - soffseth )
			},
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null,
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

		that.element.animate(
			$.extend( style, top && left ? { top: top, left: left } : {} ), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseFloat( that.element.css( "width" ) ),
						height: parseFloat( that.element.css( "height" ) ),
						top: parseFloat( that.element.css( "top" ) ),
						left: parseFloat( that.element.css( "left" ) )
					};

					if ( pr && pr.length ) {
						$( pr[ 0 ] ).css( { width: data.width, height: data.height } );
					}

					// Propagating resize, and updating values for each animation step
					that._updateCache( data );
					that._propagate( "resize", event );

				}
			}
		);
	}

} );

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ?
				oc.get( 0 ) :
				( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			} );

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			( that._helper ?
				that.offset.left - cop.left :
				( that.offset.left - co.left ) ) );

		hoset = Math.abs( that.sizeDiff.height +
			( that._helper ?
				that.offset.top - cop.top :
				( that.offset.top - co.top ) ) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ) {
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}
	}
} );

$.ui.plugin.add( "resizable", "alsoResize", {

	start: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options;

		$( o.alsoResize ).each( function() {
			var el = $( this );
			el.data( "ui-resizable-alsoresize", {
				width: parseFloat( el.width() ), height: parseFloat( el.height() ),
				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
			} );
		} );
	},

	resize: function( event, ui ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: ( that.size.height - os.height ) || 0,
				width: ( that.size.width - os.width ) || 0,
				top: ( that.position.top - op.top ) || 0,
				left: ( that.position.left - op.left ) || 0
			};

			$( o.alsoResize ).each( function() {
				var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
					css = el.parents( ui.originalElement[ 0 ] ).length ?
							[ "width", "height" ] :
							[ "width", "height", "top", "left" ];

				$.each( css, function( i, prop ) {
					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
					if ( sum && sum >= 0 ) {
						style[ prop ] = sum || null;
					}
				} );

				el.css( style );
			} );
	},

	stop: function() {
		$( this ).removeData( "ui-resizable-alsoresize" );
	}
} );

$.ui.plugin.add( "resizable", "ghost", {

	start: function() {

		var that = $( this ).resizable( "instance" ), cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost.css( {
			opacity: 0.25,
			display: "block",
			position: "relative",
			height: cs.height,
			width: cs.width,
			margin: 0,
			left: 0,
			top: 0
		} );

		that._addClass( that.ghost, "ui-resizable-ghost" );

		// DEPRECATED
		// TODO: remove after 1.12
		if ( $.uiBackCompat !== false && typeof that.options.ghost === "string" ) {

			// Ghost option
			that.ghost.addClass( this.options.ghost );
		}

		that.ghost.appendTo( that.helper );

	},

	resize: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost ) {
			that.ghost.css( {
				position: "relative",
				height: that.size.height,
				width: that.size.width
			} );
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost && that.helper ) {
			that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
		}
	}

} );

$.ui.plugin.add( "resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = ( grid[ 0 ] || 1 ),
			gridY = ( grid[ 1 ] || 1 ),
			ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
			oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
			isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
			isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
			isMinHeight = o.minHeight && ( o.minHeight > newHeight );

		o.grid = grid;

		if ( isMinWidth ) {
			newWidth += gridX;
		}
		if ( isMinHeight ) {
			newHeight += gridY;
		}
		if ( isMaxWidth ) {
			newWidth -= gridX;
		}
		if ( isMaxHeight ) {
			newHeight -= gridY;
		}

		if ( /^(se|s|e)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if ( /^(ne)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if ( /^(sw)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridX - outerDimensions.width;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

} );

return $.ui.resizable;

} ) );

},{}],35:[function(require,module,exports){
/*!
 * jQuery UI Spinner 1.12.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Spinner
//>>group: Widgets
//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
//>>docs: http://api.jqueryui.com/spinner/
//>>demos: http://jqueryui.com/spinner/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/spinner.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [
			"jquery",
			"./button",
			"../version",
			"../keycode",
			"../safe-active-element",
			"../widget"
		], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}( function( $ ) {

function spinnerModifer( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.12.0",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		classes: {
			"ui-spinner": "ui-corner-all",
			"ui-spinner-down": "ui-corner-br",
			"ui-spinner-up": "ui-corner-tr"
		},
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {

		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {

			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_getCreateOptions: function() {
		var options = this._super();
		var element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value != null && value.length ) {
				options[ option ] = value;
			}
		} );

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay( function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );
				if ( !isActive ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay( function() {
						this.previous = previous;
					} );
				}
			}

			// Ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// Support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay( function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			} );

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {

			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},

		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	// Support mobile enhanced option and make backcompat more sane
	_enhance: function() {
		this.uiSpinner = this.element
			.attr( "autocomplete", "off" )
			.wrap( "<span>" )
			.parent()

				// Add buttons
				.append(
					"<a></a><a></a>"
				);
	},

	_draw: function() {
		this._enhance();

		this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
		this._addClass( "ui-spinner-input" );

		this.element.attr( "role", "spinbutton" );

		// Button bindings
		this.buttons = this.uiSpinner.children( "a" )
			.attr( "tabIndex", -1 )
			.attr( "aria-hidden", true )
			.button( {
				classes: {
					"ui-button": ""
				}
			} );

		// TODO: Right now button does not support classes this is already updated in button PR
		this._removeClass( this.buttons, "ui-corner-all" );

		this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
		this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
		this.buttons.first().button( {
			"icon": this.options.icons.up,
			"showLabel": false
		} );
		this.buttons.last().button( {
			"icon": this.options.icons.down,
			"showLabel": false
		} );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
				this.uiSpinner.height() > 0 ) {
			this.uiSpinner.height( this.uiSpinner.height() );
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay( function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// Make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;

		// - round to the nearest step
		aboveMin = Math.round( aboveMin / options.step ) * options.step;

		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// Fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// Clamp the value
		if ( options.max !== null && value > options.max ) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		var prevValue, first, last;

		if ( key === "culture" || key === "numberFormat" ) {
			prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			first = this.buttons.first().find( ".ui-icon" );
			this._removeClass( first, null, this.options.icons.up );
			this._addClass( first, null, value.up );
			last = this.buttons.last().find( ".ui-icon" );
			this._removeClass( last, null, this.options.icons.down );
			this._addClass( last, null, value.down );
		}

		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
		this.element.prop( "disabled", !!value );
		this.buttons.button( value ? "disable" : "enable" );
	},

	_setOptions: spinnerModifer( function( options ) {
		this._super( options );
	} ),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr( {
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,

			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		} );
	},

	isValid: function() {
		var value = this.value();

		// Null is invalid
		if ( value === null ) {
			return false;
		}

		// If value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// Update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.prop( "disabled", false )
			.removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: spinnerModifer( function( steps ) {
		this._stepUp( steps );
	} ),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinnerModifer( function( steps ) {
		this._stepDown( steps );
	} ),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinnerModifer( function( pages ) {
		this._stepUp( ( pages || 1 ) * this.options.page );
	} ),

	pageDown: spinnerModifer( function( pages ) {
		this._stepDown( ( pages || 1 ) * this.options.page );
	} ),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinnerModifer( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for spinner html extension points
	$.widget( "ui.spinner", $.ui.spinner, {
		_enhance: function() {
			this.uiSpinner = this.element
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()

					// Add buttons
					.append( this._buttonHtml() );
		},
		_uiSpinnerHtml: function() {
			return "<span>";
		},

		_buttonHtml: function() {
			return "<a></a><a></a>";
		}
	} );
}

return $.ui.spinner;

} ) );

},{}],36:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("../herocalc/main");

my.prototype.DamageAmpViewModel = function (a) {
    var self = new my.prototype.BuffViewModel(ko.observableArray([]));
    self.availableBuffs = ko.observableArray([
        new my.prototype.BuffOption('slardar', 'slardar_sprint'),
        new my.prototype.BuffOption('undying', 'undying_flesh_golem'),
        new my.prototype.BuffOption('chen', 'chen_penitence'),
        new my.prototype.BuffOption('medusa', 'medusa_stone_gaze'),
        new my.prototype.BuffOption('shadow_demon', 'shadow_demon_soul_catcher')
    ]);
    self.availableDebuffs = ko.observableArray([
        new my.prototype.BuffOption('medusa', 'medusa_mana_shield'),
        //new my.prototype.BuffOption('templar_assassin', 'templar_assassin_refraction'),
        //new my.prototype.BuffOption('faceless_void', 'faceless_void_backtrack'),
        //new my.prototype.BuffOption('nyx_assassin', 'nyx_assassin_spiked_carapace'),
        new my.prototype.BuffOption('spectre', 'spectre_dispersion'),
        new my.prototype.BuffOption('wisp', 'wisp_overcharge'),
        new my.prototype.BuffOption('bristleback', 'bristleback_bristleback'),
        //new my.prototype.BuffOption('abaddon', 'abaddon_borrowed_time'),
        //new my.prototype.BuffOption('abaddon', 'abaddon_aphotic_shield'),
        //new my.prototype.BuffOption('dazzle', 'dazzle_shallow_grave'),
        //new my.prototype.BuffOption('treant', 'treant_living_armor'),
        new my.prototype.BuffOption('kunkka', 'kunkka_ghostship')
    ]);
    self.selectedBuff = ko.observable(self.availableBuffs()[0]);
    
    self.buffs = ko.observableArray([]);

    self.getAbilityDamageAmpValue = function (abilityName, attributeName) {
        var a = my.prototype.findWhere(self.buffs(), {name: abilityName});
        if (a == undefined) {
            return 0;
        }
        else {
            var ability = a.data;
            return self.getAbilityAttributeValue(ability.attributes(), attributeName, ability.level());
        }
    }
    
    self.getDamageMultiplierSources = ko.computed(function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    switch (ability.name()) {
                        case 'bristleback_bristleback':
                            sources[ability.name()] = {
                                'multiplier': ability.damageReduction() / 100,
                                'damageType': 'physical',
                                'displayname': ability.displayname()
                            }
                        break;
                        case 'slardar_sprint':
                            sources[ability.name()] = {
                                'multiplier': self.getAbilityAttributeValue(ability.attributes(), 'bonus_damage', ability.level()) / 100,
                                'damageType': 'physical',
                                'displayname': ability.displayname()
                            }
                        break;
                        case 'undying_flesh_golem':
                            sources[ability.name()] = {
                                'multiplier': ability.damageAmplification() / 100,
                                'damageType': 'physical',
                                'displayname': ability.displayname()
                            }
                        break;
                        case 'medusa_stone_gaze':
                            sources[ability.name()] = {
                                'multiplier': self.getAbilityAttributeValue(ability.attributes(), 'bonus_physical_damage', ability.level()) / 100,
                                'damageType': 'physical',
                                'displayname': ability.displayname()
                            }
                        break;
                        case 'chen_penitence':
                            sources[ability.name()] = {
                                'multiplier': self.getAbilityAttributeValue(ability.attributes(), 'bonus_damage_taken', ability.level()) / 100,
                                'damageType': 'physical',
                                'displayname': ability.displayname()
                            }
                        break;
                        case 'shadow_demon_soul_catcher':
                            sources[ability.name()] = {
                                'multiplier': self.getAbilityAttributeValue(ability.attributes(), 'bonus_damage_taken', ability.level()) / 100,
                                'damageType': 'pure',
                                'displayname': ability.displayname()
                            }
                        break;
                        case 'medusa_mana_shield':
                            sources[ability.name()] = {
                                'multiplier': ability.damageReduction() / 100,
                                'damageType': 'physical',
                                'displayname': ability.displayname()
                            }                            
                        break;
                        case 'spectre_dispersion':
                            sources[ability.name()] = {
                                'multiplier': -self.getAbilityAttributeValue(ability.attributes(), 'damage_reflection_pct', ability.level()) / 100,
                                'damageType': 'percentreduction',
                                'displayname': ability.displayname()
                            }                                
                        break;
                        case 'abaddon_aphotic_shield':
                            sources[ability.name()] = {
                                'multiplier': self.getAbilityAttributeValue(ability.attributes(), 'damage_absorb', ability.level()),
                                'damageType': 'flatreduction',
                                'displayname': ability.displayname()
                            }                                
                        break;
                        case 'kunkka_ghostship':
                            sources[ability.name()] = {
                                'multiplier': -50 / 100,
                                'damageType': 'percentreduction',
                                'displayname': ability.displayname()
                            }                                
                        break;
                        case 'wisp_overcharge':
                            sources[ability.name()] = {
                                'multiplier': self.getAbilityAttributeValue(ability.attributes(), 'bonus_damage_pct', ability.level()) / 100,
                                'damageType': 'percentreduction',
                                'displayname': ability.displayname()
                            }                                
                        break;
                        /*case 'faceless_void_backtrack':
                            sources[ability.name()] = {
                                'multiplier': -self.getAbilityAttributeValue(ability.attributes(), 'dodge_chance_pct', ability.level()) / 100,
                                'damageType': 'percentreduction',
                                'displayname': ability.displayname()
                            }                                
                        break;*/
                    }
                }
        }
        return sources;
    });
    
    return self;
}
},{"../herocalc/main":57,"./herocalc_knockout":39}],37:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("../herocalc/main");

my.prototype.GraphPropertyOption = function (id, label) {
    this.id = id;
    this.label = label;
};

my.prototype.AbilityModel.prototype.isQWER = function (ability) {
    return (ability.displayname() != 'Empty' &&  (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_HIDDEN') == -1 || ability.name().indexOf('invoker_') != -1) && ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') == -1)
}

my.prototype.BuildExplorerViewModel = function (h) {
var self = this;
    self.parent = h;

    self.itemBuild = ko.observableArray([]);
    self.skillBuild = ko.observableArray([]);
    self.graphDataItemRows = [];
    for (var i = 0; i < 25; i++) {
        self.itemBuild.push(new my.prototype.BasicInventoryViewModel());
        self.itemBuild()[i].carryOver = ko.observable(true);
        self.skillBuild.push(ko.observable(-1));
        self.graphDataItemRows.push(ko.observable(false));
    }
    self.toggleItemBuildCarryOver = function (index) {
        self.itemBuild()[index].carryOver(!self.itemBuild()[index].carryOver());
    }
    
    self.abilityMapData = [0,1,2,3,4];
    self.abilityMapHero = self.parent.selectedHero().heroName;
    self.abilityMap = ko.computed(function () {
        if (self.abilityMapHero == self.parent.selectedHero().heroName) return;
        self.abilityMapHero = self.parent.selectedHero().heroName;
        var newMap = self.parent.ability().abilities().map(function(ability, index) {
            if (self.parent.ability().isQWER(ability)) {
                return index;
            }
            else {
                return -1;
            }
        }).filter(function(element) { return element != -1; });
        for (var i = 0; i < 25; i++) {
            var abilityValue = self.skillBuild()[i]();
            if (abilityValue == -1) continue;
            
            var abilityIndex = self.abilityMapData.indexOf(abilityValue);
            var newValue = newMap[abilityIndex];
            if (newValue != abilityValue) {
                self.skillBuild()[i](newValue);
            }
        }
        self.abilityMapData = newMap;
    });
    
    self.availableSkillBuildPoints = ko.computed(function () {
        return self.skillBuild().reduce(function(memo, num){ return memo + (num() == -1); }, 0);
    });
    self.getSkillBuildAbilityLevel = function (index) {
        return self.skillBuild().reduce(function(memo, num){ return memo + (num() == index); }, 0);
    };
    self.toggleAbilitySkillBuild = function (index, abilityIndex, data, event) {
        if (self.skillBuild()[index]() != abilityIndex) {
            var ability = self.parent.ability().abilities()[abilityIndex],
                abilityType = ability.abilitytype(),
                skillBuildSlice = self.skillBuild().slice(0, index),
                currentAbilityLevel = self.skillBuild().reduce(function(memo, num){ return memo + (num() == abilityIndex); }, 0),
                n = skillBuildSlice.reduce(function(memo, num){ return memo + (num() == abilityIndex); }, 0);
            
            if (self.IsValidAbilityLevel(ability, self.parent.selectedHero().heroName, index + 1, n)) {
                self.skillBuild()[index](abilityIndex);
                for (var i = index + 1; i < 25; i++) {
                    if (self.skillBuild()[i]() == abilityIndex) {
                        n++;
                        if (!self.IsValidAbilityLevel(ability, self.parent.selectedHero().heroName, i + 1, n)) {
                            self.skillBuild()[i](-1);
                            n--;
                        }
                    }
                }
            }
            else if (n > 0 && self.IsValidAbilityLevel(ability, self.parent.selectedHero().heroName, index + 1, n - 1)) {
                for (var i = skillBuildSlice.length - 1; i >= 0; i--) {
                    if (skillBuildSlice[i]() == abilityIndex) {
                        self.skillBuild()[i](-1);
                        self.skillBuild()[index](abilityIndex);
                        break;
                    }
                }
            }
        }
        else {
            self.skillBuild()[index](-1);
        }
    };
    self.IsValidAbilityLevel = function (ability, heroName, heroLevel, abilityLevel) {
        var a = 1, b = 2, m = 4;
        if (ability.name() == 'attribute_bonus') {
            m = 10;
        }
        else {
            if (ability.abilitytype() == 'DOTA_ABILITY_TYPE_ULTIMATE') {
                if (heroName == 'invoker') {
                    a = 2;
                    b = 5;
                }
                else if (heroName == 'meepo') {
                    a = 3;
                    b = 7;
                    m = 3;
                }
                else {
                    a = 6;
                    b = 5;
                    m = 3;
                }
            }
            else {
                if (heroName == 'invoker') {
                    m = 7;
                }
            }                
        }
        
        return heroLevel >= a + b * abilityLevel && abilityLevel < m;
    }
    
    self.resetItemBuild = function (index) {
        self.itemBuild()[index].removeAll();
    };        
    self.resetAllItemBuilds = function () {
        for (var i = 0; i < 25; i++) {
            self.itemBuild()[i].removeAll();
            self.itemBuild()[i].carryOver(true);
        }
    };
    self.resetSkillBuild = function () {
        for (var i = 0; i < 25; i++) {
            self.skillBuild()[i](-1);
        }
    };
    self.graphData = ko.observableArray([]);
    self.graphDataHeader = ko.observable(self.parent.selectedHero().heroDisplayName);
    self.parent.selectedHero.subscribe(function (newValue) {
        self.graphDataHeader(self.parent.selectedHero().heroDisplayName);
    });
    self.graphDataDescription = ko.observable('');
    self.graphProperties = ko.observableArray([
        new my.prototype.GraphPropertyOption('totalArmorPhysical', 'Armor'),
        new my.prototype.GraphPropertyOption('totalArmorPhysicalReduction', 'Physical Damage Reduction'),
        new my.prototype.GraphPropertyOption('totalMagicResistance', 'Magical Resistance'),
        new my.prototype.GraphPropertyOption('health', 'Health'),
        new my.prototype.GraphPropertyOption('healthregen', 'Health Regeneration'),
        new my.prototype.GraphPropertyOption('mana', 'Mana'),
        new my.prototype.GraphPropertyOption('manaregen', 'Mana Regeneration'),
        new my.prototype.GraphPropertyOption('ehpPhysical', 'EHP Physical'),
        new my.prototype.GraphPropertyOption('ehpMagical', 'EHP Magical'),
        new my.prototype.GraphPropertyOption('damage', 'Damage per attack'),
        new my.prototype.GraphPropertyOption('dps', 'Damage per second'),
        new my.prototype.GraphPropertyOption('attacksPerSecond', 'Attacks per second'),
        new my.prototype.GraphPropertyOption('attackTime', 'Time per attack')
    ]);
    self.graph = function() {
        var savedAbilityLevels = [],
            savedLevel = self.parent.selectedHeroLevel(),
            savedItems = self.parent.inventory.items(),
            savedActiveItems = self.parent.inventory.activeItems(),
            s = ko.toJS(self.skillBuild),
            carryOverItems = [],
            carryOverActiveItems = [],
            dataset = [];
        for (var i = 0; i < self.parent.ability().abilities().length; i++) {
            savedAbilityLevels.push(self.parent.ability().abilities()[i].level());
        }
        for (var i = 1; i < 26; i++) {
            self.parent.selectedHeroLevel(i);
            var skillBuildSubset = s.slice(0, i);
            for (var j = 0; j < self.parent.ability().abilities().length; j++) {
                var a = self.parent.ability().abilities()[j],
                    count = skillBuildSubset.reduce(function(memo, num) {
                        return memo + (num == j);
                    }, 0);
                a.level(count);
            }

            if (!self.itemBuild()[i - 1].carryOver()) {
                carryOverItems = [];
                carryOverActiveItems = [];
            }
            carryOverItems = carryOverItems.concat(self.itemBuild()[i - 1].items());
            carryOverActiveItems = carryOverActiveItems.concat(self.itemBuild()[i - 1].activeItems());

            self.parent.inventory.items(carryOverItems);
            self.parent.inventory.activeItems(carryOverActiveItems);
            var dataObj = {};
            for (var j = 0; j < self.graphProperties().length; j++) {
                var prop = self.graphProperties()[j];
                switch (prop.id) {
                    case 'dps':
                        dataObj[prop.id] = self.parent['damageTotalInfo']().totalRow[2]().toFixed(2);
                        break;
                    case 'damage':
                        dataObj[prop.id] = self.parent['damageTotalInfo']().totalRow[0]().toFixed(2);
                        break;
                    default:
                        dataObj[prop.id] = self.parent[prop.id]();
                        break;
                }
            }

            dataObj.items = carryOverItems.map(function(item) {
                return ko.toJS(item);
            });
            dataset.push(dataObj);
            if (carryOverItems > 0) {
                self.graphDataItemRows[i - 1](true);
            }
        }
        var data = {
            header: self.graphDataHeader(),
            description: self.graphDataDescription(),
            items: self.parent.inventory.items().map(function(item) {
                return ko.toJS(item);
            }),
            skillBuild: ko.toJS(self.skillBuild),
            data: dataset,
            abilityMap: self.abilityMapData.slice(0),
            cumulativeSkillBuild: [],
            visible: ko.observable(true)
        }
        for (var i = 0; i < 25; i++) {
            var skillBuildAtLevel = [],
                skillBuildSlice = data.skillBuild.slice(0, i + 1);
            for (var j = 0; j < data.abilityMap.length; j++) {
                var abilityIndex = data.abilityMap[j];
                skillBuildAtLevel.push(skillBuildSlice.reduce(function(memo, num) {
                    return memo + (num == abilityIndex);
                }, 0));
            }
            data.cumulativeSkillBuild.push(skillBuildAtLevel);
        }

        self.graphData.push(data);
        self.parent.selectedHeroLevel(savedLevel);
        for (var i = 0; i < self.parent.ability().abilities().length; i++) {
            self.parent.ability().abilities()[i].level(savedAbilityLevels[i]);
        }
        self.parent.inventory.items(savedItems);
        self.parent.inventory.activeItems(savedActiveItems);
    };
    self.removeGraphDataSet = function (data) {
        self.graphData.remove(data);
    }
    self.selectedGraphProperty = ko.observable(self.graphProperties()[0].id);
    
    self.graphChartOptions = ko.computed(function () {
        //var color = my.prototype.theme() == 'dark' ? 'rgb(151, 154, 162)' : 'rgb(51, 51, 51)';
        var color = 'rgb(151, 154, 162)';
        return {
            responsive: true,
            datasetStroke: false,
            datasetStrokeWidth: -1,
            datasetFill: false,
            pointHitDetectionRadius : 10,
            scaleFontColor: color,
            scaleLineColor: color.replace('rgb', 'rgba').replace(')', ', .1)'),
            scaleGridLineColor: color.replace('rgb', 'rgba').replace(')', ', .1)')
        }
    });
    self.graphChartData = ko.computed(function () {
        var data = {
            labels: [],
            datasets: []
        }
        for (var i = 0; i < 25; i++) {
            data.labels.push((i+1).toString());
        }
        for (var i = 0; i < self.graphData().length; i++) {
            var dataObj = self.graphData()[i],
                dataset = {
                    label: dataObj.header,
                    fillColor: self.graphDistinctColor(self.graphData().length, i, .1),
                    strokeColor: self.graphDistinctColor(self.graphData().length, i, 1),
                    pointColor: self.graphDistinctColor(self.graphData().length, i, 1),
                    pointStrokeColor: self.graphDistinctColor(self.graphData().length, i, 1),
                    pointHighlightFill: self.graphDistinctColor(self.graphData().length, i, .1),
                    pointHighlightStroke: self.graphDistinctColor(self.graphData().length, i, .5),
                    data: dataObj.data.map(function (o) {
                        return o[self.selectedGraphProperty()]
                    })
                };
            data.datasets.push(dataset);
        }
        return data;
    });
    self.graphDistinctColor = function (max, index, alpha) {
        var alpha = alpha || 1,
            rgba = self.hslToRgb((1 / max) * index % 1, 1, .5);
        rgba.push(alpha);
        return "rgba(" + rgba.join() + ")";
    }
    self.getDistinctColor = function (max, index, alpha) {
        var alpha = alpha || 1;
        rgba = self.hslToRgb((1 / max) * index % 1, 1, .5);
        rgba.push(alpha);
        return rgba;
    }
    self.hslToRgb = function(h, s, l) {
        var r, g, b;
        if (s == 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function hue2rgb(p, q, t) {
                if (t < 0) t += 1;
                if (t > 1) t -= 1;
                if (t < 1 / 6) return p + (q - p) * 6 * t;
                if (t < 1 / 2) return q;
                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            }

            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }

        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    }
    
    self.showGraphItemBuildRows = ko.observable(false);
    self.showGraphSkillBuildColumns = ko.observable(false);
    self.graphRowHasItems = function (index) {
        return self.graphData().some(function (dataset) {
            return dataset.visible() && dataset.data[index].items.length > 0;
        });
    }

    self.selectInventory = function (index) {
        self.parent.selectedInventory(self.parent.selectedInventory() == index ? -1 : index);
    }
    self.getSelectedInventory = ko.pureComputed(function () {
        if (self.parent.selectedInventory() == -1) {
            return self.parent.inventory;
        }
        else {
            return self.itemBuild()[self.parent.selectedInventory()];
        }
    });
    self.copyInventory = function (index) {
        if (self.parent.selectedInventory() != -1 && self.parent.selectedInventory() != index) {
            self.itemBuild()[self.parent.selectedInventory()].items(self.itemBuild()[self.parent.selectedInventory()].items().concat(self.itemBuild()[index].items()));
            self.itemBuild()[self.parent.selectedInventory()].activeItems(my.prototype.union(self.itemBuild()[self.parent.selectedInventory()].activeItems(), self.itemBuild()[index].activeItems()));
        }
    }
    self.copyInventoryToClipBoard = function (index) {
        if (index == -1) {
            my.prototype.inventoryClipBoard.items = self.parent.inventory.items.slice(0);
            my.prototype.inventoryClipBoard.activeItems = self.parent.inventory.activeItems.slice(0);            
        }
        else {
            my.prototype.inventoryClipBoard.items = self.itemBuild()[index].items.slice(0);
            my.prototype.inventoryClipBoard.activeItems = self.itemBuild()[index].activeItems.slice(0);
        }
    }
    self.pasteInventoryFromClipBoard = function (index) {
        if (my.prototype.inventoryClipBoard.items.length > 0) {
            if (index == -1) {
                self.parent.inventory.items(self.parent.inventory.items().concat(my.prototype.inventoryClipBoard.items));
                self.parent.inventory.activeItems(my.prototype.union(self.parent.inventory.activeItems(), my.prototype.inventoryClipBoard.activeItems));    
            }
            else {
                self.itemBuild()[index].items(self.itemBuild()[index].items().concat(my.prototype.inventoryClipBoard.items));
                self.itemBuild()[index].activeItems(my.prototype.union(self.itemBuild()[index].activeItems(), my.prototype.inventoryClipBoard.activeItems));
            }
        }
    }
    self.loadGraphData = function (data) {
        self.parent.sectionDisplay()['skillbuild'](true);
        for (var i = 0; i < data.length; i++) {
            data[i].visible = ko.observable(data[i].visible);
        }
        self.graphData(data);
    }
    self.graphChartContext = ko.observable();
    self.exportImage = function () {
        var w = window.open();
        w.document.write('<img src="'+ self.graphChartContext().canvas.toDataURL() +'"/>');
    }
    return self;
}
},{"../herocalc/main":57,"./herocalc_knockout":39}],38:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("../herocalc/main");

my.prototype.DamageInstance = function (label, damageType, value, data, total) {
    this.label = label || '';
    this.damageType = damageType || '';
    this.value = parseFloat(value) || 0;
    this.data = data || [];
    this.total = parseFloat(total) || 0;
}

my.prototype.HeroDamageAmpMixin = function (self) {
    self.damageBrackets = [
        ['medusa_mana_shield', 'templar_assassin_refraction', 'faceless_void_backtrack', 'nyx_assassin_spiked_carapace'],
        ['spectre_dispersion', 'wisp_overcharge', 'slardar_sprint','bristleback_bristleback', 'undying_flesh_golem'],
        ['abaddon_borrowed_time', 'abaddon_aphotic_shield', 'kunkka_ghostship', 'treant_living_armor'],
        ['chen_penitence', 'medusa_stone_gaze', 'shadow_demon_soul_catcher'],
        ['dazzle_shallow_grave']
    ];
    
    self.getDamageAfterBracket = function (initialDamage,index) {
        var bracket = self.damageBrackets[index];
        var multiplier = 1;
        for (var i = 0; i < bracket.length; i++) {
            if (my.prototype.findWhere(self.damageAmplification.buffs, {name: bracket[i].name}) != undefined || my.prototype.findWhere(self.damageReduction.buffs, {name: bracket[i].name}) != undefined) {
                multiplier += bracket[i].value;
            }
        };
        return initialDamage * multiplier;
    };
    
    self.processDamageAmpReducBracket = function (index, sources, damage) {
        var multiplier = 1,
            data = [],
            damage = parseFloat(damage),
            total = parseFloat(damage);
            
        for (var i = 0; i < self.damageBrackets[index].length; i++) {
            if (sources[self.damageBrackets[index][i]] != undefined) {
                multiplier = 1 + parseFloat(sources[self.damageBrackets[index][i]].multiplier);
                total += (damage * multiplier) - damage;
                data.push(new my.prototype.DamageInstance(
                    sources[self.damageBrackets[index][i]].displayname,
                    sources[self.damageBrackets[index][i]].damageType,
                    (damage * multiplier) - damage,
                    [],
                    total
                ));
            }
        }
        return data;
    }
    
    self.getDamageAmpReducInstance = function(sources, initialDamage, ability, damageType) {
        var data = [],
            damage = parseFloat(initialDamage),
            prevDamage = damage,
            label = ability == 'initial' ? 'Initial' : sources[ability].displayname;

        // Bracket 0
        data = data.concat(self.processDamageAmpReducBracket(0, sources, damage));
        damage = data[data.length - 1] ? data[data.length - 1].total : damage;

        // Bracket 1
        data = data.concat(self.processDamageAmpReducBracket(1, sources, damage));
        damage = data[data.length - 1] ? data[data.length - 1].total : damage;
        
        // Bracket 2
        data = data.concat(self.processDamageAmpReducBracket(2, sources, damage));
        damage = data[data.length - 1] ? data[data.length - 1].total : damage;

        return new my.prototype.DamageInstance(label, damageType, initialDamage, data, data[data.length - 1] ? data[data.length - 1].total : damage);
    }
    
    self.getDamageAmpReduc = function (initialDamage) {
        var instances = [],
            sources = {},
            sourcesAmp = self.damageReduction.getDamageMultiplierSources(),
            sourcesReduc = self.damageAmplification.getDamageMultiplierSources();
        my.prototype.extend(sources, sourcesAmp);
        my.prototype.extend(sources, sourcesReduc);
        // Initial damage instance
        instances.push(self.getDamageAmpReducInstance(sources, initialDamage, 'initial', 'physical'));
        
        // Bracket 4 damage instances
        var b4 = ['shadow_demon_soul_catcher', 'medusa_stone_gaze', 'chen_penitence'];
        for (var i = 0; i < b4.length; i++) {
            if (sources[b4[i]] != undefined) {
                instances.push(self.getDamageAmpReducInstance(sources, initialDamage * sources[b4[i]].multiplier, b4[i], sources[b4[i]].damageType));
            }
        }
    
        return new my.prototype.DamageInstance('Total', 'physical', initialDamage, instances, instances.reduce(function(memo, i) {return parseFloat(memo) + parseFloat(i.total);}, 0));
    };
    
    self.damageInputValue = ko.observable(0);
    self.damageInputModified = ko.computed(function () {
        return self.getDamageAmpReduc(self.damageInputValue());
    });
}
},{"../herocalc/main":57,"./herocalc_knockout":39}],39:[function(require,module,exports){
(function (global){
'use strict';
var ko = (typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

ko.bindingHandlers.stopBinding = {
    init: function() {
        return { controlsDescendantBindings: true };
    }
};

ko.virtualElements.allowedBindings.stopBinding = true;

ko.bindingHandlers.lazyBinding = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        ko.utils.domData.set(element, 'isBound', false)
        
        // Also tell KO *not* to bind the descendants itself, otherwise they will be bound twice
        return { controlsDescendantBindings: true };
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var val = ko.unwrap(valueAccessor()),
            isBound = ko.utils.domData.get(element, 'isBound');
        if (val && !isBound) {
            ko.utils.domData.set(element, 'isBound', true);
            ko.applyBindingsToDescendants(bindingContext, element);
        }
    }
};

ko.virtualElements.allowedBindings.lazyBinding = true;

ko.bindingHandlers.itemBuildTable = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var buildExplorer = ko.unwrap(valueAccessor()),
            $el = $(element);

        var pressedKeys = {};
        ko.utils.domData.set(element, 'pressedKeys', pressedKeys);
        
        var keyDownHandler = function(e) {
            var pressedKeys = ko.utils.domData.get(element, 'pressedKeys');
            pressedKeys[e.which] = true;
            ko.utils.domData.set(element, 'pressedKeys', pressedKeys);
        }
        ko.utils.domData.set(element, 'keyDownHandler', keyDownHandler);
        
        var keyUpHandler = function(e) {
            var pressedKeys = ko.utils.domData.get(element, 'pressedKeys');
            if ((pressedKeys[17] && pressedKeys[67]) || (pressedKeys[17] && pressedKeys[86])) { // ctrl + c
                var $hoveredRows = $(element).find('.hover-cursor:hover');
                if ($hoveredRows.length == 1) {
                    if (pressedKeys[67]) {
                        buildExplorer.copyInventoryToClipBoard($("tr", $(element)).index($hoveredRows[0]));
                    }
                    else {
                        buildExplorer.pasteInventoryFromClipBoard($("tr", $(element)).index($hoveredRows[0]));
                    }
                    $hoveredRows.fadeOut(50).fadeIn(50);
                }
            }
            delete pressedKeys[e.which];
            ko.utils.domData.set(element, 'pressedKeys', pressedKeys);
        }
        ko.utils.domData.set(element, 'keyUpHandler', keyUpHandler);
        
        $(document).bind( "keydown", keyDownHandler );
        $(document).bind( "keyup", keyUpHandler );

        ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
            var keyDownHandler = ko.utils.domData.get(element, 'keyDownHandler');
            var keyUpHandler = ko.utils.domData.get(element, 'keyUpHandler');
            $(document).unbind( "keydown", keyDownHandler );
            $(document).unbind( "keyup", keyUpHandler );
        });
    }
};

ko.bindingHandlers.preventBubble = {
    init: function(element, valueAccessor) {
        var eventName = ko.utils.unwrapObservable(valueAccessor());
        ko.utils.registerEventHandler(element, eventName, function(event) {
           event.cancelBubble = true;
           if (event.stopPropagation) {
                event.stopPropagation();
           }                
        });
    }        
};

ko.bindingHandlers.toggle = {
    init: function (element, valueAccessor) {
        var value = valueAccessor();
        ko.applyBindingsToNode(element, {
            click: function () {
                value(!value());
            }
        });
    }
};

ko.bindingHandlers.shopDockStyle = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (bindingContext.$data.shopDock() && !bindingContext.$data.shopPopout()) {
            ko.applyBindingsToNode(element, { style: { height: (bindingContext.$data.windowHeight() - 52) + 'px', position: 'fixed', right: 0, top: '52px', 'overflow-y': 'auto' } });
        }
        else {
            ko.applyBindingsToNode(element, { style: { height: 'auto', position: 'relative', right: 'initial', top: 'initial', 'overflow-y': 'initial' } });
        }
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (bindingContext.$data.shopDock() && !bindingContext.$data.shopPopout()) {
            ko.applyBindingsToNode(element, { style: { height: (bindingContext.$data.windowHeight() - 52) + 'px', position: 'fixed', right: 0, top: '52px', 'overflow-y': 'auto' } });
        }
        else {
            ko.applyBindingsToNode(element, { style: { height: 'auto', position: 'relative', right: 'initial', top: 'initial', 'overflow-y': 'initial' } });
        }
    }
};

ko.bindingHandlers.logger = {
    update: function(element, valueAccessor, allBindings) {
        //store a counter with this element
        var count = ko.utils.domData.get(element, "_ko_logger") || 0,
            data = ko.toJS(valueAccessor() || allBindings());

        ko.utils.domData.set(element, "_ko_logger", ++count);

        if (window.console && console.log) {
            console.log(count, element, data);
        }
    }
};

ko.bindingHandlers.tooltip = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element, options, tooltip;
        options = ko.utils.unwrapObservable(valueAccessor());
        $element = $(element);

        // If the title is an observable, make it auto-updating.
        if (ko.isObservable(options.title)) {
            var isToolTipVisible = false;

            $element.on('show.bs.tooltip', function () {
                isToolTipVisible = true;
            });
            $element.on('hide.bs.tooltip', function () {
                isToolTipVisible = false;
            });

            // "true" is the bootstrap default.
            var origAnimation = options.animation || true;
            options.title.subscribe(function () {
                if (isToolTipVisible) {
                    $element.data('bs.tooltip').options.animation = false; // temporarily disable animation to avoid flickering of the tooltip
                    $element.tooltip('fixTitle') // call this method to update the title
                        .tooltip('show');
                    $element.data('bs.tooltip').options.animation = origAnimation;
                }
            });
        }

        tooltip = $element.data('bs.tooltip');
        if (tooltip) {
            $.extend(tooltip.options, options);
        } else {
            $element.tooltip(options);
        }
    }
};

ko.bindingHandlers.popover = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var popoverBindingValues = ko.utils.unwrapObservable(valueAccessor());
        var template = popoverBindingValues.template || false;
        var options = popoverBindingValues.options || {title: 'popover'};
        var data = popoverBindingValues.data || false;
        if (template !== false) {
            if (data) {
                options.content = "<!-- ko template: { name: template, if: data, data: data } --><!-- /ko -->";
            }
            else {
                options.content = $('#' + template).html();
            }
            options.html = true;
        }
        $element.on('shown.bs.popover', function(event) {

            var popoverData = $(event.target).data();
            var popoverEl = popoverData['bs.popover'].$tip;
            var options = popoverData['bs.popover'].options || {};
            var button = $(event.target);
            var buttonPosition = button.position();
            var buttonDimensions = {
                x: button.outerWidth(),
                y: button.outerHeight()
            };

            if (data) {
                ko.applyBindingsToNode(popoverEl[0], { template: { name: template, data: data } }, bindingContext);
                //ko.applyBindings({template: template, data: data}, popoverEl[0]);
                //ko.renderTemplate(template, data, {}, popoverEl[0], 'replaceChildren');
            }
            else {
                //ko.renderTemplate(template, data, {}, popoverEl[0], 'replaceChildren');
                //ko.applyBindings(viewModel, popoverEl[0]);
            }

            var popoverDimensions = {
                x: popoverEl.outerWidth(),
                y: popoverEl.outerHeight()
            };

            popoverEl.find('button[data-dismiss="popover"]').click(function() {
                button.popover('hide');
            });

            switch (options.placement) {
                case 'right':
                    popoverEl.css({
                        left: buttonDimensions.x + buttonPosition.left,
                        top: (buttonDimensions.y / 2 + buttonPosition.top) - popoverDimensions.y / 2
                    });
                    break;
                case 'left':
                    popoverEl.css({
                        left: buttonPosition.left - popoverDimensions.x,
                        top: (buttonDimensions.y / 2 + buttonPosition.top) - popoverDimensions.y / 2
                    });
                    break;
                case 'top':
                    popoverEl.css({
                        left: buttonPosition.left + (buttonDimensions.x / 2 - popoverDimensions.x / 2),
                        top: buttonPosition.top - popoverDimensions.y
                    });
                    break;
                case 'bottom':
                    popoverEl.css({
                        left: buttonPosition.left + (buttonDimensions.x / 2 - popoverDimensions.x / 2),
                        top: buttonPosition.top + buttonDimensions.y
                    });
                    break;
            }
        });

        $element.popover(options);

        return { controlsDescendantBindings: true };

    }
};

ko.bindingHandlers.chart = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var newCanvas = $('<canvas/>'),
      data = ko.utils.unwrapObservable(valueAccessor()),
      ctx = newCanvas[0].getContext("2d"),
      chartType = allBindingsAccessor().chartType,
      options = allBindingsAccessor().chartOptions || {},
      chartContext = allBindingsAccessor().chartContext;
            
        $(element).append(newCanvas);
        var myChart = new Chart(ctx)[chartType](data, options);
        ko.utils.domData.set(element, 'myChart', myChart);
        
  //handle disposal (if KO removes by the template binding)
  ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
    var myChart = ko.utils.domData.get(element, 'myChart');
    myChart.clear();
    myChart.destroy();
  });
        
  if (chartContext) {
    chartContext(ctx);
  }
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var newCanvas = $('<canvas/>').width(730).height(365),
      data = ko.utils.unwrapObservable(valueAccessor()),
      ctx = newCanvas[0].getContext("2d"),
      chartType = allBindingsAccessor().chartType,
      options = allBindingsAccessor().chartOptions || {},
      chartContext = allBindingsAccessor().chartContext,
      myChart = ko.utils.domData.get(element, 'myChart');
        
  if (myChart) {
    myChart.clear();
    myChart.destroy();
  }
        bindingContext.$root.displayShop();
        bindingContext.$root.sideView();
        bindingContext.$root.shopDock();
        $(element).empty();
        $(element).append(newCanvas);
  if (data.datasets.length > 0) {
            myChart = new Chart(ctx)[chartType](data, options);
            ko.utils.domData.set(element, 'myChart', myChart);
  }
  
  if (chartContext) {
    chartContext(ctx);
  }
    }
};

ko.bindingHandlers.spinner = {
    init: function(element, valueAccessor, allBindingsAccessor) {
        //initialize datepicker with some optional options
        var options = allBindingsAccessor().spinnerOptions || {};
        options.icons = options.icons || { down: "glyphicon glyphicon-triangle-bottom", up: "glyphicon glyphicon-triangle-top" };
        $(element).spinner(options);

        //handle the field changing
        ko.utils.registerEventHandler(element, "spinchange", function () {
            var observable = valueAccessor();
            observable($(element).spinner("value"));
        });

        //handle disposal (if KO removes by the template binding)
        ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
            $(element).spinner("destroy");
        });

    },
    update: function(element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor()),
            current = $(element).spinner("value");

        if (value !== current) {
            $(element).spinner("value", value);
        }
    }
};

ko.bindingHandlers.secondTab = {
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $root = bindingContext.$root,
            value = ko.utils.unwrapObservable(valueAccessor());
        ko.applyBindingsToNode(element, { css: {'second-tab': $root.isSecondTab(value) && $root.sideView()} });
    }
};

ko.bindingHandlers.hoverTab = {
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $root = bindingContext.$root,
            value = ko.utils.unwrapObservable(valueAccessor());
            
        ko.utils.registerEventHandler(element, "mouseover", function() {
            $root.highlightTab(value);
        });  

        ko.utils.registerEventHandler(element, "mouseout", function() {
            $root.unhighlightTab(value);
        });      
    }
};

ko.bindingHandlers.hoverPaneStyle = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $root = bindingContext.$root,
            value = ko.utils.unwrapObservable(valueAccessor());
        ko.applyBindingsToNode(element, { style: { opacity: !($root.sideView()) || $root.highlightedTab() == value || $root.highlightedTab() == '' ? 1 : .5 } });
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $root = bindingContext.$root,
            value = ko.utils.unwrapObservable(valueAccessor());
        ko.applyBindingsToNode(element, { style: { opacity: !($root.sideView()) || $root.highlightedTab() == value || $root.highlightedTab() == '' ? 1 : .5 } });
    }
};

ko.bindingHandlers.diffStyle = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        ko.applyBindingsToNode(element, { css: {'diffPos': value > 0, 'diffNeg': value < 0} });
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        ko.applyBindingsToNode(element, { css: {'diffPos': value > 0, 'diffNeg': value < 0} });
    }
};

ko.bindingHandlers.diffCss = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var value = ko.utils.unwrapObservable(valueAccessor()),
            stat = allBindingsAccessor().diffCssStat;
        if (stat == 'attackTime' || stat == 'bat') {
            value = -value;
        }
        ko.applyBindingsToNode(element, { css: {'diffPos': value > 0, 'diffNeg': value < 0} });
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var value = ko.utils.unwrapObservable(valueAccessor()),
            stat = allBindingsAccessor().diffCssStat;
        if (stat == 'attackTime' || stat == 'bat') {
            value = -value;
        }
        ko.applyBindingsToNode(element, { css: {'diffPos': value > 0, 'diffNeg': value < 0} });
    }
};

ko.bindingHandlers.jqAuto = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var options = valueAccessor() || {},
            allBindings = allBindingsAccessor(),
            unwrap = ko.utils.unwrapObservable,
            modelValue = allBindings.jqAutoValue,
            source = allBindings.jqAutoSource,
            valueProp = allBindings.jqAutoSourceValue,
            inputValueProp = allBindings.jqAutoSourceInputValue || valueProp,
            labelProp = allBindings.jqAutoSourceLabel || valueProp;

        //function that is shared by both select and change event handlers
        function writeValueToModel(valueToWrite) {
            if (ko.isWriteableObservable(modelValue)) {
               modelValue(valueToWrite );  
            } else {  //write to non-observable
               if (allBindings['_ko_property_writers'] && allBindings['_ko_property_writers']['jqAutoValue'])
                        allBindings['_ko_property_writers']['jqAutoValue'](valueToWrite );    
            }
        }
        
        //on a selection write the proper value to the model
        options.select = function(event, ui) {
            writeValueToModel(ui.item ? ui.item.actualValue : null);
        };
            
        //on a change, make sure that it is a valid value or clear out the model value
        options.change = function(event, ui) {
            var currentValue = $(element).val();
            var matchingItem =  ko.utils.arrayFirst(unwrap(source), function(item) {
               return unwrap(item[inputValueProp]) === currentValue;  
            });
            
            if (!matchingItem) {
               writeValueToModel(null);
            }    
        }
        
        
        //handle the choices being updated in a DO, to decouple value updates from source (options) updates
        var mappedSource = ko.dependentObservable(function() {
            var mapped = ko.utils.arrayMap(unwrap(source), function(item) {
                var result = {};
                result.label = labelProp ? unwrap(item[labelProp]) : unwrap(item).toString();  //show in pop-up choices
                result.value = inputValueProp ? unwrap(item[inputValueProp]) : unwrap(item).toString();  //show in input box
                result.actualValue = valueProp ? unwrap(item[valueProp]) : item;  //store in model
                return result;
            });
            return mapped;                
        });
        
        //whenever the items that make up the source are updated, make sure that autocomplete knows it
        mappedSource.subscribe(function(newValue) {
           $(element).autocomplete("option", "source", newValue); 
        });
        
        options.source = mappedSource();
        
        options.minLength = 1;
        //initialize autocomplete
        $(element).autocomplete(options);
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
       //update value based on a model change
       var allBindings = allBindingsAccessor(),
           unwrap = ko.utils.unwrapObservable,
           modelValue = unwrap(allBindings.jqAutoValue) || '', 
           valueProp = allBindings.jqAutoSourceValue,
           inputValueProp = allBindings.jqAutoSourceInputValue || valueProp;
        
       //if we are writing a different property to the input than we are writing to the model, then locate the object
       if (valueProp && inputValueProp !== valueProp) {
           var source = unwrap(allBindings.jqAutoSource) || [];
           var modelValue = ko.utils.arrayFirst(source, function(item) {
                 return unwrap(item[valueProp]) === modelValue;
           }) || {};  //probably don't need the || {}, but just protect against a bad value          
       } 

       //update the element with the value that should be shown in the input
       $(element).val(modelValue && inputValueProp !== valueProp ? unwrap(modelValue[inputValueProp]) : modelValue.toString());    
    }
};

ko.bindingHandlers.jqAutoCombo = {
    init: function(element, valueAccessor) {
       var autoEl = $("#" + valueAccessor());
       
        $(element).click(function() {
           // close if already visible
            if (autoEl.autocomplete("widget").is(":visible")) {
                autoEl.autocomplete( "close" );
                return;
            }

           //autoEl.blur();
            autoEl.autocomplete("search", " ");
            autoEl.focus(); 
            
        });
        
    }  
}

module.exports = ko;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],40:[function(require,module,exports){
(function (global){
var ko = (typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);
var my = require("../herocalc/main");
require("./herocalc_hero_damageamp");
require("./herocalc_buffs.amplification.reduction");
require("./herocalc_buildexplorer");

my.prototype.HeroOption2 = function (hero) {
    this.heroName = ko.computed(function () {
        return hero.selectedHero().heroName;
    });
    this.heroDisplayName = ko.computed(function () {
        return hero.selectedHero().heroDisplayName;
    });
    this.hero = hero;
};

my.prototype.HeroCalculatorModel = function (h) {
    var self = this;
    self.index = ko.observable(h);
    self.availableHeroes = ko.observableArray(my.prototype.HeroOptions);
    self.availableHeroes.sort(function (left, right) {
        return left.heroDisplayName == right.heroDisplayName ? 0 : (left.heroDisplayName < right.heroDisplayName ? -1 : 1);
    });
    self.selectedHero = ko.observable(self.availableHeroes()[h]);
    
    my.prototype.HeroModel.call(this, self.selectedHero().heroName);
    
    self.selectedHero.subscribe(function (newValue) {
        self.heroId(newValue.heroName);
    });
    
    
    self.bound = ko.observable(false);
    self.playerColorCss = ko.computed(function () {
        return 'player-color-' + self.index();
    });
    self.heroOption = new my.prototype.HeroOption2(self);
    self.otherHeroes = ko.observableArray([]);
    self.availableCompare = ko.computed(function () {
        return self.otherHeroes().map(function (o) {
            return o.heroOption;
        });
    });
    self.selectedCompare = ko.observable();
    self.selectedCompare.subscribe(function (newValue) {
        self.heroCompare(newValue.hero);
    });
    self.enemies = ko.observableArray([]);
    self.availableEnemies = ko.computed(function () {
        return self.enemies().map(function (o) {
            return o.heroOption;
        });
    });
    self.selectedEnemy = ko.observable();
    self.selectedEnemy.subscribe(function (newValue) {
        self.enemy(newValue.hero);
    });
    self.setHeroOptionStyling = function(option, item) {
        ko.applyBindingsToNode(option, {css: item.hero.playerColorCss() }, item);
    }
    self.sectionDisplay = ko.observable({
        'inventory': ko.observable(true),
        'ability': ko.observable(true),
        'buff': ko.observable(true),
        'debuff': ko.observable(true),
        'damageamp': ko.observable(false),
        'illusion': ko.observable(false),
        'skillbuild': ko.observable(false),
        'skillbuild-skills': ko.observable(true),
        'skillbuild-items': ko.observable(true)
    });
    self.sectionDisplayToggle = function (section) {
        self.sectionDisplay()[section](!self.sectionDisplay()[section]());
    }
    self.showUnitTab = ko.observable(false);
    self.showDiff = ko.observable(false);
    self.showCriticalStrikeDetails = ko.observable(false);
    self.showDamageDetails = ko.observable(false);
    self.showStatDetails = ko.observable(false);
    self.showDamageAmpCalcDetails = ko.observable(false);
    
    self.damageAmplification = new my.prototype.DamageAmpViewModel();
    self.damageReduction = new my.prototype.DamageAmpViewModel();
    self.buildExplorer = new my.prototype.BuildExplorerViewModel(self);
    my.prototype.HeroDamageAmpMixin(self);
}
my.prototype.HeroCalculatorModel.prototype = Object.create(my.prototype.HeroModel.prototype);
my.prototype.HeroCalculatorModel.prototype.constructor = my.prototype.HeroCalculatorModel;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../herocalc/main":57,"./herocalc_buffs.amplification.reduction":36,"./herocalc_buildexplorer":37,"./herocalc_hero_damageamp":38}],41:[function(require,module,exports){
(function (global){
'use strict';
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('jquery-ui');
require('../../../node_modules/jquery-ui/ui/version');
require('../../../node_modules/jquery-ui/ui/widget');
require('../../../node_modules/jquery-ui/ui/unique-id');
require('../../../node_modules/jquery-ui/ui/safe-active-element');
require('../../../node_modules/jquery-ui/ui/keycode');
require('../../../node_modules/jquery-ui/ui/position');
require('../../../node_modules/jquery-ui/ui/focusable');
require('../../../node_modules/jquery-ui/ui/tabbable');
require('../../../node_modules/jquery-ui/ui/plugin');
require('../../../node_modules/jquery-ui/ui/ie');
require('../../../node_modules/jquery-ui/ui/data');
require('../../../node_modules/jquery-ui/ui/scroll-parent');
require('../../../node_modules/jquery-ui/ui/disable-selection');
require('../../../node_modules/jquery-ui/ui/safe-blur');
require('../../../node_modules/jquery-ui/ui/widgets/button');
require('../../../node_modules/jquery-ui/ui/widgets/spinner');
require('../../../node_modules/jquery-ui/ui/widgets/menu');
require('../../../node_modules/jquery-ui/ui/widgets/autocomplete');
require('../../../node_modules/jquery-ui/ui/widgets/mouse');
require('../../../node_modules/jquery-ui/ui/widgets/draggable');
require('../../../node_modules/jquery-ui/ui/widgets/resizable');
require('../../../node_modules/jquery-ui/ui/widgets/dialog');

var proto = $.ui.autocomplete.prototype,
    initSource = proto._initSource;

function filter( array, term ) {
    var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
    return $.grep( array, function(value) {
        return matcher.test( $( "<div>" ).html( value.label || value.value || value ).text() );
    });
}

$.extend( proto, {
    _initSource: function() {
        if ( this.options.html && $.isArray(this.options.source) ) {
            this.source = function( request, response ) {
                response( filter( this.options.source, request.term ) );
            };
        } else {
            initSource.call( this );
        }
    },

    _renderItem: function( ul, item) {
        return $( "<li></li>" )
            .data( "item.autocomplete", item )
            .append( $( "<a></a>" )[ this.options.html ? "html" : "text" ]( item.label ) )
            .appendTo( ul );
    }
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../../node_modules/jquery-ui/ui/data":14,"../../../node_modules/jquery-ui/ui/disable-selection":15,"../../../node_modules/jquery-ui/ui/focusable":16,"../../../node_modules/jquery-ui/ui/ie":17,"../../../node_modules/jquery-ui/ui/keycode":18,"../../../node_modules/jquery-ui/ui/plugin":19,"../../../node_modules/jquery-ui/ui/position":20,"../../../node_modules/jquery-ui/ui/safe-active-element":21,"../../../node_modules/jquery-ui/ui/safe-blur":22,"../../../node_modules/jquery-ui/ui/scroll-parent":23,"../../../node_modules/jquery-ui/ui/tabbable":24,"../../../node_modules/jquery-ui/ui/unique-id":25,"../../../node_modules/jquery-ui/ui/version":26,"../../../node_modules/jquery-ui/ui/widget":27,"../../../node_modules/jquery-ui/ui/widgets/autocomplete":28,"../../../node_modules/jquery-ui/ui/widgets/button":29,"../../../node_modules/jquery-ui/ui/widgets/dialog":30,"../../../node_modules/jquery-ui/ui/widgets/draggable":31,"../../../node_modules/jquery-ui/ui/widgets/menu":32,"../../../node_modules/jquery-ui/ui/widgets/mouse":33,"../../../node_modules/jquery-ui/ui/widgets/resizable":34,"../../../node_modules/jquery-ui/ui/widgets/spinner":35,"jquery-ui":27}],42:[function(require,module,exports){
(function (global){
'use strict';
var ko = require('./herocalc_knockout');
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
global.jQuery = $;
require('bootstrap');
require('./jquery-ui.custom');
require('../lib/Chart.min');
require('../lib/Chart.scatter');

ko.components.register('hero-pane', { template: "<div class=\"row\">\n    <div class=\"col-md-3\">\n        <img class=\"img-rounded hero-image\" data-bind=\"attr:{src: '/media/images/heroes/' + selectedHero().heroName + '.png'}\"/>\n    </div>\n    <div class=\"col-md-9\">\n        <div class=\"row form-group\">\n            <div class=\"col-md-6\">\n                <label for=\"heroselect\">Hero</label>\n                <select id=\"heroselect\" class=\"form-control\" data-bind=\"options: availableHeroes , optionsText: 'heroDisplayName', value: selectedHero\"></select>\n            </div>\n            <div class=\"col-md-6\">\n                <label for=\"herolevel\">Level</label>\n                <input id=\"herolevel\" data-bind=\"spinner: selectedHeroLevel, spinnerOptions: { min: 1, max: 25 }\">\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <label for=\"enemyselect\">Enemy</label>\n                <select id=\"enemyselect\" class=\"form-control\" data-bind=\"css: enemy().playerColorCss, options: availableEnemies , optionsText: 'heroDisplayName', value: selectedEnemy, optionsAfterRender: setHeroOptionStyling\"></select>\n            </div>\n            <div class=\"col-md-6\">\n                <label for=\"enemyselect\">Compare to</label>\n                <select id=\"enemyselect\" class=\"form-control\" data-bind=\"css: heroCompare().playerColorCss, options: availableCompare , optionsText: 'heroDisplayName', value: selectedCompare, optionsAfterRender: setHeroOptionStyling\"></select>\n            </div>\n            <div class=\"col-md-12 checkbox\" style=\"margin-bottom:0px;padding-left:34px;\" data-bind=\"visible: $root.layout() == 0\">\n                <label><input type=\"checkbox\" style=\"float:none;margin-right:5px;\" data-bind=\"checked: showDiff\"><span style=\"font-size:12px\">Show <abbr title=\"The difference between two adjacent hero tabs shown next to each stat.\">delta values</abbr>. <span data-bind=\"visible: showDiff\">Comparing level <span data-bind=\"text: selectedHeroLevel\"></span> <span data-bind=\"text: heroData().displayname, css: playerColorCss\"></span> to level <span data-bind=\"text: heroCompare().selectedHeroLevel\"></span> <span data-bind=\"text: heroCompare().heroData().displayname, css: heroCompare().playerColorCss\"></span>.</span></span></label>\n                <label style=\"margin-left:25px;font-size:12px;\"><input type=\"checkbox\" style=\"float:none;margin-right:5px;\" data-bind=\"checked: showUnitTab\">Show unit tab</label>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-4\" data-bind=\"css: {'col-md-4': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div class=\"row\">\n            <h3 class=\"col-md-12\">Stats <a class=\"btn btn-default btn-xs\" data-bind=\"toggle: showStatDetails, text: !showStatDetails() ? 'Show more' : 'Show less', attr: {title: !showStatDetails() ? 'Click to show base stats' : 'Click to hide base stats'}\"></a>\n                <div style=\"margin-left:15px;display:inline;\" data-bind=\"style: {'display': $root.layout() == 1 ? 'inline' : 'none'}\">\n                    <label><input type=\"checkbox\" style=\"float:none;margin-right:5px;\" data-bind=\"checked: showDiff\"><span style=\"font-size:12px\">Show <abbr title=\"The difference between two adjacent hero tabs shown next to each stat.\">delta values</abbr>. <span data-bind=\"visible: showDiff\">Comparing level <span data-bind=\"text: selectedHeroLevel\"></span> <span data-bind=\"text: heroData().displayname, css: playerColorCss\"></span> to level <span data-bind=\"text: heroCompare().selectedHeroLevel\"></span> <span data-bind=\"text: heroCompare().heroData().displayname, css: heroCompare().playerColorCss\"></span>.</span></span></label>\n                    <label style=\"margin-left:25px;font-size:12px;\"><input type=\"checkbox\" style=\"float:none;margin-right:5px;\" data-bind=\"checked: showUnitTab\">Show unit tab</label>\n                </div>\n            </h3>\n\n            <div class=\"col-md-12\" data-bind=\"visible: showStatDetails(), css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}, component: {name: 'stats-additional', params: $data}\"></div>\n\n            <div class=\"statscontainer\" data-bind=\"foreach: $root.allItems\">\n                <div data-bind=\"component: { name: $data.value, params: $parentContext.$data}\"></div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-md-8\" data-bind=\"css: {'col-md-8': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div data-bind=\"component: { name: 'damage-details', params: $data}\"></div>\n    \n        <div class=\"row\">\n            <div class=\"col-md-12\" data-bind=\"itemBuildTable: $data.buildExplorer\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().inventory, css: { section_disabled: !sectionDisplay().inventory() }\">Inventory <small style=\"color:goldenrod\" data-bind=\"html: inventory.totalCost() ? '<img src=\\'http://cdn.dota2.com/apps/dota2/images/tooltips/gold.png\\'/> ' + inventory.totalCost() : '' \"></small></h3>\n                <div id=\"inventory\" class=\"inventory hover-cursor\" data-bind=\"click: function (data, event) { buildExplorer.selectInventory(-1); }, css: {'row-highlight': selectedInventory() == -1}, template: { name: 'item-template', foreach: inventory.items }, visible: sectionDisplay().inventory()\"></div>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().ability, css: { section_disabled: !sectionDisplay().ability() }\">Abilities <small style=\"color:inherit\" data-bind=\"text: availableSkillPoints() ? (availableSkillPoints() == 1 ? '1 unspent skillpoint' : availableSkillPoints() + ' unspent skillpoints') : ''\"></small></h3>\n                <div class=\"row\" data-bind=\"visible: sectionDisplay().ability(), foreach: ability().abilities\">\n                    <div data-bind=\"component: { name: 'ability', params: $data }\"></div>\n                </div>\n                <div class=\"form-horizontal\" data-bind=\"if: selectedHero().heroName == 'silencer', visible: sectionDisplay().ability()\">\n                    <div class=\"form-group\">\n                            <div class=\"col-md-2 control-label\">\n                                <label for=\"intelligencestolen\">Intelligence Stolen</label>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <input class=\"form-control\" id=\"intelligencestolen\" data-bind=\"value: intStolen\" />\n                            </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div data-bind=\"component: { name: 'buff-section', params: $data}\"></div>\n        \n        <div class=\"row\" data-bind=\"component: { name: 'damage-amp', params: $data}\"></div>\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().illusion, css: { section_disabled: !sectionDisplay().illusion() }\">Illusions</h3>\n                <div data-bind=\"visible: sectionDisplay().illusion(), lazyBinding: sectionDisplay().illusion\">\n                    <h4 style=\"color:red\">Under Construction</h4>\n                    <div class=\"form-horizontal\">\n                        <div class=\"form-group\">\n                                <div class=\"col-md-2 control-label\">\n                                    <label for=\"illusionSelect\">Type</label>\n                                </div>\n                                <div class=\"col-md-10\">\n                                    <select id=\"illusionSelect\" class=\"form-control\" data-bind=\"options: availableIllusions , optionsText: 'illusionDisplayName', value: selectedIllusion\"></select>\n                                </div>\n                        </div>\n                        <div class=\"form-group\">\n                                <div class=\"col-md-2 control-label\">\n                                    <label for=\"illusionabilitylevel\">Ability Level</label>\n                                </div>\n                                <div class=\"col-md-10\">\n                                    <select id=\"illusionabilitylevel\" class=\"form-control\" data-bind=\"value: illusionAbilityLevel, foreach: new Array(illusionAbilityMaxLevel())\">\n                                        <option data-bind=\"text: $index()+1\"></option>\n                                    </select>\n                                </div>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"col-md-offset-2 col-md-10\">\n                                <button class=\"btn btn-default\" data-bind=\"click: addIllusion\">Add Illusion</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"col-md-12\">\n        <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().skillbuild, css: { section_disabled: !sectionDisplay().skillbuild() }\">Build Explorer</h3>\n        <div data-bind=\"visible: sectionDisplay().skillbuild(), attr: {id: 'section-build-explorer-' + index() }, lazyBinding: sectionDisplay().skillbuild\">\n            <div class=\"section-content\">    \n                <div class=\"col-md-12\">\n                    <h4 class=\"section_header\" data-bind=\"toggle: sectionDisplay()['skillbuild-skills'], css: { section_disabled: !sectionDisplay()['skillbuild-skills']() }\">Skill Build <small style=\"color:inherit\" data-bind=\"text: buildExplorer.availableSkillBuildPoints() ? (buildExplorer.availableSkillBuildPoints() == 1 ? '1 unspent skillpoint' : buildExplorer.availableSkillBuildPoints() + ' unspent skillpoints') : ''\"></small></h4>\n                        <div data-bind=\"visible: sectionDisplay()['skillbuild-skills']\">\n                        <table>\n                            <tbody data-bind=\"template: { name: 'ability-3-template', foreach: ability().abilities }\"></tbody>\n                        </table>\n                        <div class=\"form-group\">\n                            <button class=\"btn btn-default\" data-bind=\"click: buildExplorer.resetSkillBuild\">Clear</button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-12\">\n                    <h4 class=\"section_header\" data-bind=\"toggle: sectionDisplay()['skillbuild-items'], css: { section_disabled: !sectionDisplay()['skillbuild-items']() }\">Item Build</h4>\n                    <div data-bind=\"visible: sectionDisplay()['skillbuild-items']\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Level</th>\n                                    <th class=\"text-center\">Inventory</th>\n                                    <th></th>\n                                    <th></th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody data-bind=\"foreach: new Array(25), itemBuildTable: buildExplorer\">\n                                <tr class=\"hover-cursor\" data-bind=\"css: {'row-highlight': $parent.selectedInventory() == $index()}\">\n                                    <td class=\"carry-over\" data-bind=\"click: function (data, event) { $parent.buildExplorer.selectInventory($index()); }\">\n                                        <strong data-bind=\"text: ($index() + 1)\"></strong>\n                                        <a class=\"btn btn-default btn-xs glyphicon\" data-bind=\"visible: $index() > 0, toggle: $parent.buildExplorer.itemBuild()[$index()].carryOver, preventBubble: 'click', css: { 'glyphicon-arrow-down': $parent.buildExplorer.itemBuild()[$index()].carryOver(), 'glyphicon-stop': !$parent.buildExplorer.itemBuild()[$index()].carryOver() }\" title=\"Carry over items to next level's inventory\"></a>\n                                    </td>\n                                    <td class=\"col-md-10\" data-bind=\"click: function (data, event) { $parent.buildExplorer.selectInventory($index()); }\">\n                                        <div class=\"itemBuild-inventory\" data-bind=\"template: { name: 'itemBuild-item-template', foreach: $parent.buildExplorer.itemBuild()[$index()].items }\"></div>\n                                    </td>\n                                    <td>\n                                        <a class=\"btn btn-default btn-xs\" data-bind=\"click: function (data, event) { $parent.buildExplorer.copyInventoryToClipBoard($index()); }\" title=\"Copy items\">Copy</a>\n                                    </td>\n                                    <td>\n                                        <a class=\"btn btn-default btn-xs\" data-bind=\"click: function (data, event) { $parent.buildExplorer.pasteInventoryFromClipBoard($index()); }\" title=\"Paste items\">Paste</a>\n                                    </td>\n                                    <td>\n                                        <a class=\"btn btn-default btn-xs\" data-bind=\"click: function (data, event) { $parent.buildExplorer.resetItemBuild($index()); }\" title=\"Clear inventory\">Clear</a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"form-group\">\n                            <button class=\"btn btn-default\" data-bind=\"click: buildExplorer.resetAllItemBuilds\">Clear</button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label>Data set header label</label>\n                    <input type=\"text\" class=\"form-control\" data-bind=\"value: buildExplorer.graphDataHeader\">\n                </div>\n                <div class=\"form-group\">\n                    <label>Data set description</label>\n                    <input type=\"text\" class=\"form-control\" data-bind=\"value: buildExplorer.graphDataDescription\">\n                </div>\n                <div class=\"form-group\">\n                    <button class=\"btn btn-default\" data-bind=\"click: buildExplorer.graph\">Add data set</button>\n                </div>\n                <div class=\"form-group\">\n                    <label>Hero Property</label>\n                    <select class=\"form-control\" data-bind=\"options: buildExplorer.graphProperties, optionsText: 'label', optionsValue: 'id', value: buildExplorer.selectedGraphProperty\"></select>\n                </div>\n                <!-- ko if: buildExplorer.graphData().length > 0 -->\n                <div class=\"form-group\" data-bind=\"chart: buildExplorer.graphChartData, chartType: 'Scatter', chartOptions: buildExplorer.graphChartOptions(), chartContext: buildExplorer.graphChartContext\"></div>\n                <div class=\"form-group\">\n                  <button class=\"btn btn-default\" data-bind=\"click: buildExplorer.exportImage\"><span class=\"glyphicon glyphicon-export\"></span> Export Image</button>\n                </div>\n                <button class=\"btn btn-default btn-xs\" data-bind=\"toggle: buildExplorer.showGraphItemBuildRows, css: {'toggled': buildExplorer.showGraphItemBuildRows}\">Show item build rows</button>\n                <button class=\"btn btn-default btn-xs\" data-bind=\"toggle: buildExplorer.showGraphSkillBuildColumns, css: {'toggled': buildExplorer.showGraphSkillBuildColumns}\">Show skill build columns</button>\n                <table class=\"table build-table\">\n                    <thead>\n                        <tr>\n                            <th class=\"right-border\">Level</th>\n                            <!-- ko foreach: buildExplorer.graphData -->\n                            <th class=\"text-center\" data-bind=\"css: { 'right-border': !$parent.buildExplorer.showGraphSkillBuildColumns() || !$data.visible() }\">\n                                <span data-bind=\"css: { 'tooltip-underline': $data.description }, tooltip: {title: $data.description, placement: 'bottom'}, visible: $data.visible(), text: $data.header, style: { color: $parent.buildExplorer.graphDistinctColor($parent.buildExplorer.graphData().length, $index(), 1) }\"></span>\n                                <span class=\"btn btn-xs glyphicon glyphicon-info-sign\" data-bind=\"visible: $data.visible(), popover: {template: 'popover-graphData-template', data: $data, options: {} }\"></span>\n                                <button class=\"btn btn-default btn-xs shop-button glyphicon glyphicon-remove pull-right\" class=\"close\" data-bind=\"visible: !$parent.buildExplorer.showGraphSkillBuildColumns() || !$data.visible(), click: function(data, event) { $parent.buildExplorer.removeGraphDataSet($data); }\"></button>\n                                <button class=\"btn btn-default btn-xs shop-button glyphicon pull-right\" data-bind=\"visible: !$parent.buildExplorer.showGraphSkillBuildColumns() || !$data.visible(), toggle: $data.visible, css: { 'glyphicon-minus': $data.visible(), 'glyphicon-plus': !$data.visible()}\"></button>\n                            </th>\n                            <th class=\"text-left right-border\" data-bind=\"visible: $data.visible() && $parent.buildExplorer.showGraphSkillBuildColumns()\"><abbr title=\"Q-W-E-R-Stats\">Skill Build</abbr>\n                                <button class=\"btn btn-default btn-xs shop-button glyphicon glyphicon-remove pull-right\" class=\"close\" data-bind=\"visible: $parent.buildExplorer.showGraphSkillBuildColumns(), click: function(data, event) { $parent.buildExplorer.removeGraphDataSet($data); }\"></button>\n                                <button class=\"btn btn-default btn-xs shop-button glyphicon pull-right\" data-bind=\"visible: $parent.buildExplorer.showGraphSkillBuildColumns(), toggle: $data.visible, css: { 'glyphicon-minus': $data.visible(), 'glyphicon-plus': !$data.visible()}\"></button>\n                            </th>\n                            <!-- /ko -->\n                        </tr>\n                    </thead>\n                    <tbody data-bind=\"foreach: new Array(buildExplorer.graphData()[0].data.length)\">\n                        <tr>\n                            <td class=\"right-border\">\n                                <strong data-bind=\"text: ($index() + 1)\"></strong>\n                            </td>\n                            <!-- ko foreach: new Array($parent.buildExplorer.graphData().length) -->\n                            <td class=\"text-right\" data-bind=\"css: { 'right-border': !$parents[1].buildExplorer.showGraphSkillBuildColumns() || !$parents[1].buildExplorer.graphData()[$index()].visible() }\">\n                                <span data-bind=\"visible: $parents[1].buildExplorer.graphData()[$index()].visible(), text: $parents[1].buildExplorer.graphData()[$index()].data[$parentContext.$index()][$parents[1].buildExplorer.selectedGraphProperty()]\"></span>\n                            </td>\n                            <td class=\"text-left right-border\" data-bind=\"visible: $parents[1].buildExplorer.graphData()[$index()].visible() && $parents[1].buildExplorer.showGraphSkillBuildColumns(), text: $parents[1].buildExplorer.graphData()[$index()].cumulativeSkillBuild[$parentContext.$index()].join('-')\"></td>\n                            <!-- /ko -->\n                        </tr>\n                        <tr class=\"itemBuild-inventory\" data-bind=\"visible: $parent.buildExplorer.showGraphItemBuildRows() && $parent.buildExplorer.graphRowHasItems($index())\">\n                            <td class=\"right-border-itemrow no-top-border\"></td>\n                            <!-- ko foreach: new Array($parent.buildExplorer.graphData().length) -->\n                            <td class=\"right-border-itemrow no-top-border\" data-bind=\"attr: { colspan: $parents[1].buildExplorer.graphData()[$index()].visible() && $parents[1].buildExplorer.showGraphSkillBuildColumns() ? 2 : 1 }\">\n                                <div data-bind=\"visible: $parents[1].buildExplorer.graphData()[$index()].visible(), foreach: $parents[1].buildExplorer.graphData()[$index()].data[$parentContext.$index()].items\">\n                                    <img class=\"itemBuild-img-sm img-rounded\" data-bind=\"css: { item_disabled: !enabled, item_active: $parents[2].inventory.getActiveBorder($data) == 1, item_inactive: $parents[2].inventory.getActiveBorder($data) == 0 }, attr:{ src: $parents[2].inventory.getItemImage($data) }\"/>\n                                    <div style=\"float:left\" data-bind=\"visible: $parents[2].inventory.getItemSizeLabel($data) != ''\">\n                                        <div data-bind=\"html: $parents[2].inventory.getItemSizeLabel($data)\" style=\"position:absolute;left:0;bottom:0;color:white;opacity:.5;background-color:black;padding:0px 2px\"></div>\n                                        <div data-bind=\"html: $parents[2].inventory.getItemSizeLabel($data)\" style=\"position:absolute;left:0;bottom:0;color:white;padding:0px 2px\"></div>\n                                    </div>\n                                </div>\n                            </td>\n                            <!-- /ko -->\n                        </tr>\n                    </tbody>\n                </table>\n                <!-- /ko -->\n            </div>\n        </div>\n    </div>\n\n</div>" });
ko.components.register('unit-pane', { template: "<div class=\"row\">\n    <div class=\"col-md-4\">\n        <img class=\"img-rounded\" data-bind=\"attr:{src: selectedUnit().image}\"/>\n    </div>\n    <div class=\"col-md-4\">\n        <label for=\"unitselect\">Unit</label>\n        <select id=\"unitselect\" class=\"form-control\" data-bind=\"options: availableUnits , optionsText: 'heroDisplayName', value: selectedUnit\"></select>\n    </div>\n    <div class=\"col-md-4\">\n        <label for=\"unitlevel\">Level</label>\n        <p class=\"form-control-static\" data-bind=\"visible: selectedUnit().levels == 0, text: hero().level\"></p>\n        <select id=\"herolevel\" class=\"form-control\" data-bind=\"visible: selectedUnit().levels > 0, value: selectedUnitLevel, foreach: new Array(selectedUnit().levels)\">\n            <option data-bind=\"text: $index()+1\"></option>\n        </select>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-4\" data-bind=\"css: {'col-md-4': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div class=\"row\">\n            <h3 class=\"col-md-12\">Stats <a class=\"btn btn-default btn-xs\" data-bind=\"toggle: showStatDetails, text: !showStatDetails() ? 'Show more' : 'Show less', attr: {title: !showStatDetails() ? 'Click to show base stats' : 'Click to hide base stats'}\"></a></h3>\n\n            <div class=\"col-md-3\" data-bind=\"visible: showStatDetails(), component: {name: 'stats-additional', params: $data}\"></div>\n            \n            <div class=\"col-md-12\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n                <table class=\"table table-condensed\">\n                <tbody>\n                <tr><td>Gold:</td><td class=\"text-right\"><span data-bind=\"text: hero().bountygoldmin() == hero().bountygoldmax() ? hero().bountygoldmax() : hero().bountygoldmin() + '-' + hero().bountygoldmax()\"></span></td></tr>\n                <tr><td>Experience:</td><td class=\"text-right\"><span data-bind=\"text: hero().bountyxp()\"></span></td></tr>\n                <tr><td>Level:</td><td class=\"text-right\"><span data-bind=\"text: hero().level()\"></span></td></tr>\n                <tr><td><abbr title=\"Movement Speed\">MS</abbr>:</td><td class=\"text-right\"><span data-bind=\"text: totalMovementSpeed\"></span></td></tr>\n                <tr><td>Turn Rate:</td><td class=\"text-right\"><span data-bind=\"text: totalTurnRate\"></span></td></tr>\n                <tr><td>Sight Range:</td><td class=\"text-right\"><span data-bind=\"html: '<abbr title=\\'Day\\'>' + visionrangeday() + '</abbr>/<abbr title=\\'Night\\'>' + visionrangenight() + '</abbr>'\"></span></td></tr>\n                </tbody>\n                </table>\n            </div>\n\n\n            <div class=\"col-md-12\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n                <table class=\"table table-condensed\">\n                <tbody>\n                <tr><td>Health:</td><td class=\"text-right\"><span data-bind=\"text: health\"></span></td></tr>\n                <tr><td>Health Regen:</td><td class=\"text-right\"><span data-bind=\"text: healthregen\"></span></td></tr>\n                <tr><td>Mana:</td><td class=\"text-right\"><span data-bind=\"text: mana\"></span></td></tr>\n                <tr><td>Mana Regen:</td><td class=\"text-right\"><span data-bind=\"text: manaregen\"></span></td></tr>\n                <tr><td>Physical <abbr title=\"Effective Hit Points\">EHP</abbr>:</td><td class=\"text-right\"><span data-bind=\"text: ehpPhysical\"></span></td></tr>\n                <tr><td>Magical <abbr title=\"Effective Hit Points\">EHP</abbr>:</td><td class=\"text-right\"><span data-bind=\"text: ehpMagical\"></span></td></tr>\n                </tbody>\n                </table>\n            </div>\n\n            <div class=\"col-md-12\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n                <table class=\"table table-condensed\">\n                <tbody>\n                <tr><td>Armor:</td><td class=\"text-right\"><span data-bind=\"text: totalArmorPhysical\"></span></td></tr>\n                <tr><td>Magic Res:</td><td class=\"text-right\"><span data-bind=\"html: totalMagicResistance().toFixed(2) + '%'\"></span></td></tr>\n                <tr><td>Lifesteal:</td><td class=\"text-right\"><span data-bind=\"text: lifesteal\"></span></td></tr>\n                <tr><td>Evasion:</td><td class=\"text-right\"><span data-bind=\"text: evasion\"></span></td></tr>\n                <tr><td>Bash:</td><td class=\"text-right\"><span data-bind=\"text: bash\"></span></td></tr>\n                <tr><td>Miss Chance:</td><td class=\"text-right\"><span data-bind=\"text: missChance\"></span></td></tr>\n                </tbody>\n                <tbody class=\"tabledropdown\" style=\"border-top:0\" data-bind=\"visible: showCriticalStrikeDetails(),foreach: critInfo().sources\">\n                <tr><td colspan=2><strong data-bind=\"text: $data.name\"></strong></td></tr>\n                <tr><td>Crit Chance:</td><td class=\"text-right\"><span data-bind=\"text: ($data.totalchance * 100).toFixed(2) + '%'\"></span></td></tr>\n                <tr><td>Crit Multiplier:</td><td class=\"text-right\"><span data-bind=\"text: ($data.multiplier * 100).toFixed(2) + '%'\"></span></td></tr>\n                </tbody>\n                </table>\n            </div>\n\n            <div class=\"col-md-12\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n                <table class=\"table table-condensed\">\n                <tbody>\n                <tr>\n                    <td>Damage:</td>\n                    <td class=\"text-right\">\n                        <span data-bind=\"html: baseDamage()[0] + '-' + baseDamage()[1]\"></span>\n                        <span style=\"color:green\" data-bind=\"visible: bonusDamage() > 0, text: ' + ' + bonusDamage()\"></span>\n                        <span style=\"color:red\" data-bind=\"visible: bonusDamageReduction() != 0, text: ' - ' + bonusDamageReduction()\"></span>\n                    </td>\n                </tr>\n                <tr><td><abbr title=\"Increased Attack Speed\">IAS</abbr>:</td><td class=\"text-right\"><span data-bind=\"text: ias\"></span></td></tr>\n                <tr><td><abbr title=\"Base Attack Time\">BAT</abbr>:</td><td class=\"text-right\"><span data-bind=\"text: bat\"></span></td></tr>\n                <tr><td>Attack Time:</td><td class=\"text-right\"><span data-bind=\"text: attackTime\"></span></td></tr>\n                <tr><td>Attack / Sec:</td><td class=\"text-right\"><span data-bind=\"text: attacksPerSecond().toFixed(2)\"></span></td></tr>\n                <tr><td>Attack Range:</td><td class=\"text-right\"><span data-bind=\"text: totalattackrange\"></span></td></tr>\n                </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-md-8\" data-bind=\"css: {'col-md-8': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div data-bind=\"component: { name: 'damage-details', params: $data}\"></div>\n        \n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().inventory, css: { section_disabled: !sectionDisplay().inventory() }\">Inventory <small style=\"color:goldenrod\" data-bind=\"html: inventory.totalCost() ? '<img src=\\'http://cdn.dota2.com/apps/dota2/images/tooltips/gold.png\\'/> ' + inventory.totalCost() : '' \"></small></h3>\n                <div id=\"inventory\" class=\"inventory hover-cursor\" data-bind=\"click: function (data, event) { buildExplorer.selectInventory(-1); }, css: {'row-highlight': selectedInventory() == -1}, template: { name: 'item-template', foreach: inventory.items }, visible: sectionDisplay().inventory()\"></div>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().ability, css: { section_disabled: !sectionDisplay().ability() }\">Abilities <small style=\"color:inherit\" data-bind=\"text: availableSkillPoints() ? (availableSkillPoints() == 1 ? '1 unspent skillpoint' : availableSkillPoints() + ' unspent skillpoints') : ''\"></small></h3>\n                <div class=\"row\" data-bind=\"visible: sectionDisplay().ability(), foreach: ability().abilities\">\n                    <div data-bind=\"component: { name: 'ability', params: $data }\"></div>\n                </div>\n                <div class=\"form-horizontal\" data-bind=\"if: selectedHero().heroName == 'silencer', visible: sectionDisplay().ability()\">\n                    <div class=\"form-group\">\n                            <div class=\"col-md-2 control-label\">\n                                <label for=\"intelligencestolen\">Intelligence Stolen</label>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <input class=\"form-control\" id=\"intelligencestolen\" data-bind=\"value: intStolen\" />\n                            </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div data-bind=\"component: { name: 'buff-section', params: $data}\"></div>\n    </div>\n</div>" });
ko.components.register('clone-pane', { template: "<div class=\"row\">\n    <div class=\"col-md-4\">\n        <img class=\"img-rounded\" data-bind=\"attr:{src: '/media/images/heroes/meepo.png'}\"/>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-4\" data-bind=\"css: {'col-md-4': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div class=\"row\">\n            <h3 class=\"col-md-12\">Stats <a class=\"btn btn-default btn-xs\" data-bind=\"toggle: showStatDetails, text: !showStatDetails() ? 'Show more' : 'Show less', attr: {title: !showStatDetails() ? 'Click to show base stats' : 'Click to hide base stats'}\"></a></h3>\n\n            <div class=\"col-md-12\" data-bind=\"visible: showStatDetails(), css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}, component: {name: 'stats-additional', params: $data}\"></div>\n\n            <div class=\"statscontainer\" data-bind=\"foreach: $root.allItems\">\n                <div data-bind=\"component: { name: $data.value, params: $root.heroes[$parentContext.$index()].clone()}\"></div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-md-8\" data-bind=\"css: {'col-md-8': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div data-bind=\"component: { name: 'damage-details', params: $data}\"></div>\n        \n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().inventory, css: { section_disabled: !sectionDisplay().inventory() }\">Inventory <small style=\"color:goldenrod\" data-bind=\"html: inventory.totalCost() ? '<img src=\\'http://cdn.dota2.com/apps/dota2/images/tooltips/gold.png\\'/> ' + inventory.totalCost() : '' \"></small></h3>\n                <div id=\"inventory\" class=\"inventory hover-cursor\" data-bind=\"click: function (data, event) { buildExplorer.selectInventory(-1); }, css: {'row-highlight': selectedInventory() == -1}, template: { name: 'item-template', foreach: inventory.items }, visible: sectionDisplay().inventory()\"></div>\n            </div>\n        </div>\n\n        <div class=\"row\" data-bind=\"component: { name: 'damage-amp', params: $data}\"></div>\n    </div>\n</div>" });
ko.components.register('illusion-pane', { template: "<div class=\"row\">\n    <div class=\"col-md-4\">\n        <div class=\"img-rounded\" style=\"background-color:#428bca;display:inline-block\">\n            <img class=\"img-rounded\" style=\"opacity:.5\" data-bind=\"attr:{src: '/media/images/heroes/' + selectedHero().heroName + '.png'}\"/>\n        </div>\n    </div>\n    <div class=\"col-md-4\">\n        <label for=\"illusionlevel\" data-bind=\"text: illusionDisplayName\"></label>\n        <table class=\"table\">\n            <tbody>\n            <tr>\n                <td>Damage Dealt</td>\n                <td class=\"text-right\" data-bind=\"text: (getOutgoingDamageMultiplier(illusionType(), false, hero().attacktype())*100).toFixed(0)+'%'\"></td>\n            </tr>\n            <tr>\n                <td>Damage Taken</td>\n                <td class=\"text-right\" data-bind=\"text: (getIncomingDamageMultiplier(illusionType(), false, hero().attacktype())*100).toFixed(0)+'%'\"></td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"col-md-4\">\n        <div data-bind=\"visible: illusionType() != 'item_manta'\">\n            <label for=\"illusionlevel\">Ability Level</label>\n            <select id=\"illusionlevel\" class=\"form-control\" data-bind=\"value: illusionAbilityLevel, foreach: new Array(illusionAbilityMaxLevel())\">\n                <option data-bind=\"text: $index()+1\"></option>\n            </select>\n        </div>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-4\" data-bind=\"css: {'col-md-4': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div class=\"row\">\n            <h3 class=\"col-md-12\">Stats <a class=\"btn btn-default btn-xs\" data-bind=\"toggle: showStatDetails, text: !showStatDetails() ? 'Show more' : 'Show less', attr: {title: !showStatDetails() ? 'Click to show base stats' : 'Click to hide base stats'}\"></a></h3>\n\n            <div class=\"col-md-12\" data-bind=\"visible: showStatDetails(), css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}, component: {name: 'stats-additional', params: $data}\">\n            </div>\n            <div class=\"statscontainer\" data-bind=\"foreach: $root.allItems\">\n                <div data-bind=\"component: { name: $data.value, params: $parentContext.$data}\"></div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-md-8\" data-bind=\"css: {'col-md-4': $root.layout() == 0, 'col-md-12': $root.layout() == 1}\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().inventory, css: { section_disabled: !sectionDisplay().inventory() }\">Inventory <small style=\"color:goldenrod\" data-bind=\"html: inventory.totalCost() ? '<img src=\\'http://cdn.dota2.com/apps/dota2/images/tooltips/gold.png\\'/> ' + inventory.totalCost() : '' \"></small></h3>\n                <div id=\"inventory\" class=\"inventory hover-cursor\" data-bind=\"click: function (data, event) { buildExplorer.selectInventory(-1); }, css: {'row-highlight': selectedInventory() == -1}, foreach: inventory.items, visible: sectionDisplay().inventory()\">\n                    <div class=\"btn-group\">\n                        <img style=\"width:75px;\" class=\"img-rounded\" data-bind=\"css: { item_disabled: !enabled(), item_active: $parent.inventory.getActiveBorder($data) == 1, item_inactive: $parent.inventory.getActiveBorder($data) == 0 }, attr:{ src: $parent.inventory.getItemImage($data) }, click: function(data, event) { $parent.inventory.toggleItem($index, data, event); }, event: { dblclick: $parent.inventory.removeItem }\"/>\n                        <div style=\"float:left\" data-bind=\"visible: $parent.inventory.getItemSizeLabel($data) != ''\">\n                            <div data-bind=\"html: $parent.inventory.getItemSizeLabel($data)\" style=\"position:absolute;left:0;bottom:0;color:white;opacity:.5;background-color:black;padding:0px 2px\"></div>\n                            <div data-bind=\"html: $parent.inventory.getItemSizeLabel($data)\" style=\"position:absolute;left:0;bottom:0;color:white;padding:0px 2px\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>" });
ko.components.register('buff-settings', { template: "<div class=\"form-horizontal\">\n    <div data-bind=\"foreach: data\">\n        <div class=\"form-group\" data-bind=\"visible: (display == undefined || display == 'buff')\">\n            <label class=\"col-md-6 control-label\" data-bind=\"css: {'checkbox-label': controlType == 'checkbox'}, attr: {'for': labelName}, html: labelName\"></label>\n            <div data-bind=\"if: controlType == 'input' && (display == undefined || display == 'buff' || display == 'hidden')\">\n                <div class=\"col-md-6\"><input class=\"form-control\" data-bind=\"attr: {'id': labelName}, value: controlVal\"></div>\n            </div>\n            <div data-bind=\"if: controlType == 'checkbox' && (display == undefined || display == 'buff' || display == 'hidden')\">\n                <div class=\"col-md-6\">\n                    <div class=\"checkbox\">\n                        <input type=\"checkbox\" data-bind=\"attr: {'id': labelName}, checked: controlVal\">\n                    </div>\n                </div>\n            </div>\n            <div data-bind=\"if: (controlType == 'text' || controlType == 'method') && (display == undefined || display == 'buff' || display == 'hidden')\">\n                <div class=\"col-md-6\"><p class=\"form-control-static\" data-bind=\"html: controlVal\"></p></div>\n            </div>\n            <div data-bind=\"if: controlType == 'radio' && (display == undefined || display == 'buff' || display == 'hidden')\">\n                <div class=\"col-md-6\">\n                    <!-- ko foreach: controlOptions -->\n                    <div class=\"radio\">\n                        <label>\n                            <input type=\"radio\" data-bind=\"attr: {'id': $parent.labelName + value, value: value}, checked: $parent.controlVal\">\n                            <span data-bind=\"text: text\"></span>\n                        </label>\n                    </div>\n                    <!-- /ko -->\n                </div>\n            </div>\n        </div>\n    </div>\n</div>" });
ko.components.register('item-buff', { template: "<div class=\"btn-group\">\n    <img style=\"width:75px;\" class=\"img-rounded\" data-bind=\"css: { item_disabled: !enabled(), item_active: $parents[1].buffs.itemBuffs.getActiveBorder($data) == 1, item_inactive: $parents[1].buffs.itemBuffs.getActiveBorder($data) == 0 }, attr:{ src: $parents[1].buffs.itemBuffs.getItemImage($data) }, click: function(data, event) { $parents[1].buffs.itemBuffs.toggleItem($index, data, event); }, event: { dblclick: $parents[1].buffs.itemBuffs.removeItem }\"/>\n    <div class=\"btn-group-vertical\">\n        <button style=\"padding:3px 10px;\" class=\"btn btn-default btn-xs\" title=\"Remove Item\" data-bind=\"click: $parents[1].buffs.itemBuffs.removeItem\">&times;</button>\n        <button style=\"padding:3px 10px;\" class=\"btn btn-default btn-xs\" title=\"Disable/Enable Item\" data-bind=\"click: $parents[1].buffs.itemBuffs.toggleMuteItem, html: enabled() ? 'o' : '-', attr: {title: enabled() ? 'Disable Item' : 'Enable Item'}\">o</button>\n    </div>\n</div>" });
ko.components.register('item-debuff', { template: "<div class=\"btn-group\">\n    <img style=\"width:75px;\" class=\"img-rounded\" data-bind=\"css: { item_disabled: !enabled(), item_active: $parents[1].debuffs.itemBuffs.getActiveBorder($data) == 1, item_inactive: $parents[1].debuffs.itemBuffs.getActiveBorder($data) == 0 }, attr:{ src: $parents[1].debuffs.itemBuffs.getItemImage($data) }, click: function(data, event) { $parents[1].debuffs.itemBuffs.toggleItem($index, data, event); }, event: { dblclick: $parents[1].debuffs.itemBuffs.removeItem }\"/>\n    <div class=\"btn-group-vertical\">\n        <button style=\"padding:3px 10px;\" class=\"btn btn-default btn-xs\" title=\"Remove Item\" data-bind=\"click: $parents[1].debuffs.itemBuffs.removeItem\">&times;</button>\n        <button style=\"padding:3px 10px;\" class=\"btn btn-default btn-xs\" title=\"Disable/Enable Item\" data-bind=\"click: $parents[1].debuffs.itemBuffs.toggleMuteItem, html: enabled() ? 'o' : '-', attr: {title: enabled() ? 'Disable Item' : 'Enable Item'}\">o</button>\n    </div>\n</div>" });
ko.components.register('buff-section', { template: "<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().buff, css: { section_disabled: !sectionDisplay().buff() }\">Buffs</h3>\n        <div class=\"form-horizontal\" data-bind=\"visible: sectionDisplay().buff()\">\n            <div class=\"form-group\">\n                <div class=\"col-md-6\">\n                    <select id=\"buffselect\" class=\"form-control\" data-bind=\"options: buffs.availableBuffs , optionsText: 'buffDisplayName', value: buffs.selectedBuff\"></select>\n                </div>\n                <div class=\"col-md-6\">\n                    <button class=\"btn btn-default\" data-bind=\"click: buffs.addBuff\">Add</button>\n                    <button class=\"btn btn-default\" data-bind=\"click: function(data,event) { buffs.removeBuff(data, event, buffs.selectedBuff().buffName) }\">Remove</button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\" data-bind=\"foreach: buffs.buffs, visible: sectionDisplay().buff()\">\n            <div data-bind=\"css: {row: $data.data.isDetail() || ($index() < $parent.buffs.buffs().length-1 && $parent.buffs.buffs()[$index()+1].data.isDetail()), row2: $data.data.isDetail() || ($index() < $parent.buffs.buffs().length-1 && $parent.buffs.buffs()[$index()+1].data.isDetail()) }\">\n                <div class=\"col-md-3 text-center bottom-buffer2\" data-bind=\"css: {'col-md-3': $root.layout() == 0, 'col-md-2': $root.layout() == 1}\">\n                    <img style=\"padding:0px;margin-bottom:1px;\" class=\"img-rounded ability\" data-bind=\"css: { ability_active: $data.data.isActive() || $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1, ability_inactive: !$data.data.isActive() && $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, btn: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, 'btn-default': $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1}, attr:{src: '/media/images/spellicons/' + $data.data.name() + '.png'}, click: function(data, event) { $parent.buffs.toggleBuff($index, data.data, event); }, event: { dblclick: function(data,event) { $parent.buffs.removeBuff(data, event, $data.data.name()) } }\"/>\n                    <div class=\"progress\" style=\"position:relative\">\n                        <div style=\"position:absolute;width:100%;color:white;\" class=\"text-center\" data-bind=\"visible: $parent.getAbilityLevelMax($data.data) > 0, text: $data.data.level() + '/' + $parent.getAbilityLevelMax($data.data)\"></div>\n                        <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%;\" data-bind=\"attr: { 'aria-valuenow': ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) }, style: { width: ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) + '%' }\"></div>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\" data-bind=\"if: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') == -1\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.buffs.levelDownAbility($index, data.data, event, $parent); }\">-</a>\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.buffs.levelUpAbility($index, data.data, event, $parent); }\">+</a>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.buffs.toggleBuffDetail($index, data, event); }, css: {'toggled': $data.data.isDetail}\">Details</a>\n                    </div>\n                </div>\n                <div class=\"col-md-9 bottom-buffer\" data-bind=\"visible: $data.data.isDetail()\">\n                    <button type=\"button\" class=\"close\" data-bind=\"click: function(data, event) { $parent.buffs.toggleBuffDetail($index, data.data, event); }\">&times;</button>\n                    <div data-bind=\"html: $parent.ability().getAbilityTooltipData($data.hero, $data.data.name())\"></div>\n                    <div data-bind=\"if: $data.data.name() in $parent.buffs.abilityData && $parent.buffs.buffs()[$index()].data.level() > 0\">\n                        <div class=\"col-md-8\">\n                            <div data-bind=\"component: { name: 'buff-settings', params: $parent.buffs.abilitySettingsData($data.data.name(), $parent, $index()) }\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"form-horizontal\" data-bind=\"visible: sectionDisplay().buff()\">\n            <div class=\"form-group\">\n                <div class=\"col-md-6\">\n                    <div class=\"input-group\">\n                        <input class=\"form-control\" id=\"auto2\" data-bind=\"attr: {id: id() + '-auto2' }, jqAuto: { autoFocus: true, html: true }, jqAutoSource: buffs.itemBuffs.itemBuffOptions, jqAutoValue: buffs.itemBuffs.selectedItemBuff, jqAutoSourceLabel: 'displayname', jqAutoSourceInputValue: 'name', jqAutoSourceValue: 'value'\" />\n                        <span class=\"input-group-btn\">\n                            <button class=\"btn btn-default\" data-bind=\"jqAutoCombo: id() + '-auto2'\"><span class=\"glyphicon glyphicon-search\"></span></button>\n                        </span>\n                    </div>\n                </div>\n                <div class=\"col-md-6\">\n                    <button class=\"btn btn-default\" data-bind=\"click: buffs.itemBuffs.addItemBuff\">Add</button>\n                </div>\n            </div>\n        </div>\n        <div data-bind=\"foreach: buffs.itemBuffs.items, visible: sectionDisplay().buff()\">\n            <div class=\"pull-left\" style=\"margin-right:10px\" data-bind=\"component: { name: 'item-buff', params: $data}\"></div>\n        </div>\n    </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().debuff, css: { section_disabled: !sectionDisplay().debuff() }\">Debuffs</h3>\n        <div class=\"form-horizontal\" data-bind=\"visible: sectionDisplay().debuff()\">\n            <div class=\"form-group\">\n                <div class=\"col-md-6\">\n                    <select id=\"buffselect\" class=\"form-control\" data-bind=\"options: debuffs.availableDebuffs , optionsText: 'buffDisplayName', value: debuffs.selectedBuff\"></select>\n                </div>\n                <div class=\"col-md-6\">\n                    <button class=\"btn btn-default\" data-bind=\"click: debuffs.addBuff\">Add</button>\n                    <button class=\"btn btn-default\" data-bind=\"click: function(data,event) { debuffs.removeBuff(data, event, debuffs.selectedBuff().buffName) }\">Remove</button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\" data-bind=\"foreach: debuffs.buffs, visible: sectionDisplay().debuff()\">\n            <div data-bind=\"css: {row: $data.data.isDetail() || ($index() < $parent.debuffs.buffs().length-1 && $parent.debuffs.buffs()[$index()+1].data.isDetail()), row2: $data.data.isDetail() || ($index() < $parent.debuffs.buffs().length-1 && $parent.debuffs.buffs()[$index()+1].data.isDetail()) }\">\n                <div class=\"col-md-3 text-center bottom-buffer2\" data-bind=\"css: {'col-md-3': $root.layout() == 0, 'col-md-2': $root.layout() == 1}\">\n                    <img style=\"padding:0px;margin-bottom:1px;\" class=\"img-rounded ability\" data-bind=\"css: { ability_active: $data.data.isActive() || $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1, ability_inactive: !$data.data.isActive() && $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, btn: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, 'btn-default': $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1}, attr:{src: '/media/images/spellicons/' + $data.data.name() + '.png'}, click: function(data, event) { $parent.debuffs.toggleBuff($index, data.data, event); }, event: { dblclick: function(data,event) { $parent.debuffs.removeBuff(data, event, $data.data.name()) } }\"/>\n                    <div class=\"progress\" style=\"position:relative\">\n                        <div style=\"position:absolute;width:100%;color:white;\" class=\"text-center\" data-bind=\"visible: $parent.getAbilityLevelMax($data.data) > 0, text: $data.data.level() + '/' + $parent.getAbilityLevelMax($data.data)\"></div>\n                        <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%;\" data-bind=\"attr: { 'aria-valuenow': ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) }, style: { width: ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) + '%' }\"></div>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\" data-bind=\"if: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') == -1\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.debuffs.levelDownAbility($index, data.data, event, $parent); }\">-</a>\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.debuffs.levelUpAbility($index, data.data, event, $parent); }\">+</a>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.debuffs.toggleBuffDetail($index, data, event); }, css: {'toggled': $data.data.isDetail}\">Details</a>\n                    </div>\n                </div>\n                <div class=\"col-md-9 bottom-buffer\" data-bind=\"visible: $data.data.isDetail()\">\n                    <button type=\"button\" class=\"close\" data-bind=\"click: function(data, event) { $parent.debuffs.toggleBuffDetail($index, data.data, event); }\">&times;</button>\n                    <div data-bind=\"html: $parent.ability().getAbilityTooltipData($data.hero, $data.data.name())\"></div>\n                    <div data-bind=\"if: $data.data.name() in $parent.debuffs.abilityData && $parent.debuffs.buffs()[$index()].data.level() > 0\">\n                        <div class=\"col-md-8\">\n                            <div data-bind=\"component: { name: 'buff-settings', params: $parent.debuffs.abilitySettingsData($data.data.name(), $parent, $index()) }\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"form-horizontal\" data-bind=\"visible: sectionDisplay().debuff()\">\n            <div class=\"form-group\">\n                <div class=\"col-md-6\">\n                    <div class=\"input-group\">\n                        <input class=\"form-control\" id=\"auto3\" data-bind=\"attr: {id: id() + '-auto3' }, jqAuto: { autoFocus: true, html: true }, jqAutoSource: debuffs.itemBuffs.itemDebuffOptions, jqAutoValue: debuffs.itemBuffs.selectedItemDebuff, jqAutoSourceLabel: 'displayname', jqAutoSourceInputValue: 'name', jqAutoSourceValue: 'value'\" />\n                        <span class=\"input-group-btn\">\n                            <button class=\"btn btn-default\" data-bind=\"jqAutoCombo: id() + '-auto3'\"><span class=\"glyphicon glyphicon-search\"></span></button>\n                        </span>\n                    </div>\n                </div>\n                <div class=\"col-md-6\">\n                    <button class=\"btn btn-default\" data-bind=\"click: debuffs.itemBuffs.addItemDebuff\">Add</button>\n                </div>\n            </div>\n        </div>\n        <div data-bind=\"foreach: debuffs.itemBuffs.items, visible: sectionDisplay().debuff()\">\n            <div class=\"pull-left\" style=\"margin-right:10px\" data-bind=\"component: { name: 'item-debuff', params: $data}\"></div>\n        </div>\n    </div>\n</div>" });
ko.components.register('damage-details', { template: "<div class=\"row\">\n    <div class=\"col-md-12\">\n        <h3 style=\"display:block;\" class=\"section_header\" data-bind=\"toggle: showDamageDetails, css: { section_disabled: !showDamageDetails() }\">Damage Details\n            <span class=\"pull-right\" data-bind=\"visible: showDamageDetails()\">\n                <small style=\"text-align:center\" data-bind=\"style: {color: getDamageTypeColor('physical')}\">Physical</small>\n                <small style=\"text-align:center\" data-bind=\"style: {color: getDamageTypeColor('magic')}\">Magical</small>\n                <small style=\"text-align:center\" data-bind=\"style: {color: getDamageTypeColor('pure')}\">Pure</small>\n            </span>\n        </h3>\n        <table class=\"table damage-details\" data-bind=\"visible: showDamageDetails()\">\n            <thead>\n                <tr class=\"damage-details-header-row\">\n                    <td></td>\n                    <td class=\"text-center\" colspan=\"2\"><strong>Attack Damage</strong><img src=\"img/reduc_icon.png\" class=\"pull-right\" data-bind=\"attr: {title: 'After reductions from ' + enemy().heroData().displayname}\"></td>\n                    <td class=\"text-center\" colspan=\"2\"><strong>DPS</strong><img src=\"img/reduc_icon.png\" class=\"pull-right\" data-bind=\"attr: {title: 'After reductions from ' + enemy().heroData().displayname}\"></td>\n                </tr>\n                <tr class=\"damage-details-header-row-2 total-row\">\n                    <td><strong>Total</strong></td>\n                    <td class=\"text-right\" data-bind=\"text: damageTotalInfo().totalRow[0]().toFixed(2)\"></td>\n                    <td class=\"text-right\" data-bind=\"text: damageTotalInfo().totalRow[1]().toFixed(2)\"></td>\n                    <td class=\"text-right\" data-bind=\"text: damageTotalInfo().totalRow[2]().toFixed(2)\"></td>\n                    <td class=\"text-right\" data-bind=\"text: damageTotalInfo().totalRow[3]().toFixed(2)\"></td>\n                </tr>\n            </thead>\n            <!-- ko foreach: damageTotalInfo().attacks -->\n            <tbody>\n                <tr class=\"indent subtotal-row\" data-bind=\"toggle: $data.enabled, css: { 'inactive': !$data.enabled() }\">\n                    <td>\n                        <button class=\"btn btn-default btn-xs glyphicon pull-left\" data-bind=\"toggle: $data.enabled, css: {'glyphicon-eye-open': $data.enabled(), 'glyphicon-eye-close': !$data.enabled()}, preventBubble: 'click'\"></button>\n                        <button class=\"btn btn-default btn-xs glyphicon pull-right\" data-bind=\"toggle: $data.visible, css: {'glyphicon-minus': $data.visible(), 'glyphicon-plus': !$data.visible()}, preventBubble: 'click'\"></button>\n                        <strong><span data-bind=\"text: $data.name\"></span></strong>\n                    </td>\n                    <td class=\"text-right\" data-bind=\"text: $data.totalRow[0]().toFixed(2)\"></td>\n                    <td class=\"text-right\" data-bind=\"text: $data.totalRow[1]().toFixed(2)\"></td>\n                    <td class=\"text-right\" data-bind=\"text: $data.totalRow[2]().toFixed(2)\"></td>\n                    <td class=\"text-right\" data-bind=\"text: $data.totalRow[3]().toFixed(2)\"></td>\n                </tr>\n            </tbody>\n            <tbody class=\"indent\" data-bind=\"foreach: $data.sources, visible: $data.visible\">\n                <tr data-bind=\"toggle: $data.enabled, css: { 'inactive': !$data.enabled() }\">\n                    <td class=\"indent\">\n                        <span data-bind=\"text: $data.name\"></span>\n                        <button class=\"btn btn-default btn-xs glyphicon pull-left\" data-bind=\"toggle: $data.enabled, css: {'glyphicon-eye-open': $data.enabled(), 'glyphicon-eye-close': !$data.enabled()}, preventBubble: 'click'\"></button>\n                    </td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.damage.toFixed(2), style: {color: $parents[1].getDamageTypeColor($data.damageType)}\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.damageReduced.toFixed(2), style: {color: $parents[1].getDamageTypeColor($data.damageType)}\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.dps.toFixed(2), style: {color: $parents[1].getDamageTypeColor($data.damageType)}\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.dpsReduced.toFixed(2), style: {color: $parents[1].getDamageTypeColor($data.damageType)}\"></span></td>\n                </tr>\n            </tbody>\n            <tr class=\"indent crit\" data-bind=\"visible: $data.visible() && $data.sourcesCrit.length > 0\">\n                <td class=\"indent\">Critical Strike Proc, <span data-bind=\"text: ($data.totalCritChance * 100).toFixed(1) + '%'\"></span></td>\n                <td class=\"text-right\" data-bind=\"text: $data.totalCritRow[0]().toFixed(2)\"></td>\n                <td class=\"text-right\" data-bind=\"text: $data.totalCritRow[1]().toFixed(2)\"></td>\n                <td class=\"text-right\" data-bind=\"text: $data.totalCritRow[2]().toFixed(2)\"></td>\n                <td class=\"text-right\" data-bind=\"text: $data.totalCritRow[3]().toFixed(2)\"></td>\n            </tr>\n            <tbody class=\"indent\" data-bind=\"visible: $data.visible, foreach: $data.sourcesCrit\">\n                <tr class=\"indent crit\" data-bind=\"toggle: $data.enabled, css: { 'inactive': !$data.enabled() }\">\n                    <td class=\"indent\">\n                        <span data-bind=\"text: $data.name\"></span>\n                        <button class=\"btn btn-default btn-xs glyphicon pull-left\" data-bind=\"toggle: $data.enabled, css: {'glyphicon-eye-open': $data.enabled(), 'glyphicon-eye-close': !$data.enabled()}, preventBubble: 'click'\"></button>\n                    </td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.damage.toFixed(2)\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.damageReduced.toFixed(2)\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.dps.toFixed(2)\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: $data.dpsReduced.toFixed(2)\"></span></td>\n                </tr>\n            </tbody>\n            <!-- /ko -->\n            <tbody>\n                <tr data-bind=\"visible: cleaveInfo().length > 0\">\n                    <td colspan=3><strong>Cleave</strong></td>\n                </tr>\n            </tbody>    \n            <tbody data-bind=\"foreach: cleaveInfo()\">\n                <tr><td>Radius:</td><td class=\"text-right\"><span data-bind=\"html: $data.radius\"></span></td></tr>\n                <tr><td>Magnitude:</td><td class=\"text-right\"><span data-bind=\"html: ($data.magnitude * 100).toFixed(2) + '%'\"></span></td></tr>\n                <tr>\n                    <td>Cleave Damage:</td>\n                    <td class=\"text-right\"><span data-bind=\"html: ($data.magnitude * $parent.damageTotalInfo().total).toFixed(2)\"></span></td>\n                </tr>\n            </tbody>\n        \n        </table>\n    </div>\n</div>" });
ko.components.register('damage-amp', { template: "<div class=\"col-md-12\">\n    <h3 class=\"section_header\" data-bind=\"toggle: sectionDisplay().damageamp, css: { section_disabled: !sectionDisplay().damageamp() }\">Damage Amplification & Reduction</h3>\n    <div data-bind=\"visible: sectionDisplay().damageamp(), lazyBinding: sectionDisplay().damageamp\">\n        <div class=\"form-horizontal\">\n            <div class=\"form-group\">\n                    <div class=\"col-md-3 control-label\">\n                        <label for=\"damageinput\">Damage</label>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <input class=\"form-control\" id=\"damageinput\" data-bind=\"value: damageInputValue\" />\n                    </div>\n            </div>\n        </div>\n        <div class=\"form-horizontal\">\n            <div class=\"form-group\">\n                    <div class=\"col-md-3 control-label\">\n                        <label for=\"buffampselect\">Amplification</label>\n                    </div>\n                    <div class=\"col-md-5\">\n                        <select id=\"buffampselect\" class=\"form-control\" data-bind=\"options: damageAmplification.availableBuffs , optionsText: 'buffDisplayName', value: damageAmplification.selectedBuff\"></select>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <button class=\"btn btn-default\" data-bind=\"click: damageAmplification.addBuff\">Add</button>\n                        <button class=\"btn btn-default\" data-bind=\"click: function(data,event) { damageAmplification.removeBuff(data, event, damageAmplification.selectedBuff().buffName) }\">Remove</button>\n                    </div>\n            </div>\n        </div>\n        <div class=\"row\" data-bind=\"foreach: damageAmplification.buffs\">\n            <div data-bind=\"css: {row: $data.data.isDetail() || ($index() < $parent.damageAmplification.buffs().length-1 && $parent.damageAmplification.buffs()[$index()+1].data.isDetail()), row2: $data.data.isDetail() || ($index() < $parent.damageAmplification.buffs().length-1 && $parent.damageAmplification.buffs()[$index()+1].data.isDetail()) }\">\n                <div class=\"col-md-3 text-center bottom-buffer row2\" data-bind=\"css: {'col-md-3': $root.layout() == 0, 'col-md-2': $root.layout() == 1}\">\n                    <img style=\"padding:0px;margin-bottom:1px;\" class=\"img-rounded ability\" data-bind=\"css: { ability_active: $data.data.isActive() || $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1, ability_inactive: !$data.data.isActive() && $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, btn: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, 'btn-default': $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1}, attr:{src: '/media/images/spellicons/' + $data.data.name() + '.png'}, click: function(data, event) { $parent.damageAmplification.toggleBuff($index, data.data, event); }, event: { dblclick: function(data,event) { $parent.damageAmplification.removeBuff(data, event, $data.data.name()) } }\"/>\n                    <div class=\"progress\" style=\"position:relative\">\n                        <div style=\"position:absolute;width:100%;color:white;\" class=\"text-center\" data-bind=\"visible: $parent.getAbilityLevelMax($data.data) > 0, text: $data.data.level() + '/' + $parent.getAbilityLevelMax($data.data)\"></div>\n                        <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%;\" data-bind=\"attr: { 'aria-valuenow': ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) }, style: { width: ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) + '%' }\"></div>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\" data-bind=\"if: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') == -1\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.damageAmplification.levelDownAbility($index, data.data, event, $parent); }\">-</a>\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.damageAmplification.levelUpAbility($index, data.data, event, $parent); }\">+</a>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.damageAmplification.toggleBuffDetail($index, data, event); }, css: {'toggled': $data.data.isDetail}\">Details</a>\n                    </div>\n                </div>\n                <div class=\"col-md-9 bottom-buffer\" data-bind=\"visible: $data.data.isDetail()\">\n                    <button type=\"button\" class=\"close\" data-bind=\"click: function(data, event) { $parent.damageAmplification.toggleBuffDetail($index, data.data, event); }\">&times;</button>\n                    <div data-bind=\"html: $parent.ability().getAbilityTooltipData($data.hero, $data.data.name())\"></div>\n                    <div data-bind=\"if: $data.data.name() in $parent.damageAmplification.abilityData && $parent.damageAmplification.buffs()[$index()].data.level() > 0\">\n                        <div class=\"col-md-8\">\n                            <div data-bind=\"component: { name: 'buff-settings', params: $parent.damageAmplification.abilitySettingsData($data.data.name(), $parent, $index()) }\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-horizontal\">\n            <div class=\"form-group\">\n                    <div class=\"col-md-3 control-label\">\n                        <label for=\"buffreductionselect\">Reduction</label>\n                    </div>\n                    <div class=\"col-md-5\">\n                        <select id=\"buffreductionselect\" class=\"form-control\" data-bind=\"options: damageReduction.availableDebuffs , optionsText: 'buffDisplayName', value: damageReduction.selectedBuff\"></select>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <button class=\"btn btn-default\" data-bind=\"click: damageReduction.addBuff\">Add</button>\n                        <button class=\"btn btn-default\" data-bind=\"click: function(data,event) { damageReduction.removeBuff(data, event, damageReduction.selectedBuff().buffName) }\">Remove</button>\n                    </div>\n            </div>\n        </div>\n        <div class=\"row\" data-bind=\"foreach: damageReduction.buffs\">\n            <div data-bind=\"css: {row: $data.data.isDetail() || ($index() < $parent.damageReduction.buffs().length-1 && $parent.damageReduction.buffs()[$index()+1].data.isDetail()), row2: $data.data.isDetail() || ($index() < $parent.damageReduction.buffs().length-1 && $parent.damageReduction.buffs()[$index()+1].data.isDetail()) }\">\n                <div class=\"col-md-3 text-center bottom-buffer row2\" data-bind=\"css: {'col-md-3': $root.layout() == 0, 'col-md-2': $root.layout() == 1}\">\n                    <img style=\"padding:0px;margin-bottom:1px;\" class=\"img-rounded ability\" data-bind=\"css: { ability_active: $data.data.isActive() || $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1, ability_inactive: !$data.data.isActive() && $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, btn: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, 'btn-default': $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1}, attr:{src: '/media/images/spellicons/' + $data.data.name() + '.png'}, click: function(data, event) { $parent.damageReduction.toggleBuff($index, data.data, event); }, event: { dblclick: function(data,event) { $parent.damageReduction.removeBuff(data, event, $data.data.name()) } }\"/>\n                    <div class=\"progress\" style=\"position:relative\">\n                        <div style=\"position:absolute;width:100%;color:white;\" class=\"text-center\" data-bind=\"visible: $parent.getAbilityLevelMax($data.data) > 0, text: $data.data.level() + '/' + $parent.getAbilityLevelMax($data.data)\"></div>\n                        <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%;\" data-bind=\"attr: { 'aria-valuenow': ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) }, style: { width: ($parent.getAbilityLevelMax($data.data) > 0 ? $data.data.level()/$parent.getAbilityLevelMax($data.data)*100 : 0) + '%' }\"></div>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\" data-bind=\"if: $data.data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') == -1\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.damageReduction.levelDownAbility($index, data.data, event, $parent); }\">-</a>\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.damageReduction.levelUpAbility($index, data.data, event, $parent); }\">+</a>\n                    </div>\n                    <div class=\"btn-group btn-group-justified\">\n                        <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parent.damageReduction.toggleBuffDetail($index, data, event); }, css: {'toggled': $data.data.isDetail}\">Details</a>\n                    </div>\n                </div>\n                <div class=\"col-md-9 bottom-buffer\" data-bind=\"visible: $data.data.isDetail()\">\n                    <button type=\"button\" class=\"close\" data-bind=\"click: function(data, event) { $parent.damageReduction.toggleBuffDetail($index, data.data, event); }\">&times;</button>\n                    <div data-bind=\"html: $parent.ability().getAbilityTooltipData($data.hero, $data.data.name())\"></div>\n                    <div data-bind=\"if: $data.data.name() in $parent.damageReduction.abilityData && $parent.damageReduction.buffs()[$index()].data.level() > 0\">\n                        <div class=\"col-md-8\">\n                            <div data-bind=\"component: { name: 'buff-settings', params: $parent.damageReduction.abilitySettingsData($data.data.name(), $parent, $index()) }\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <h4>Calculations <a class=\"btn btn-default btn-xs\" data-bind=\"toggle: showDamageAmpCalcDetails, text: !showDamageAmpCalcDetails() ? 'Show details' : 'Hide details'\"></a></h4>\n        <table class=\"table\">\n            <tbody>\n                <!-- ko foreach: damageInputModified().data -->\n                <tr data-bind=\"visible: $parent.showDamageAmpCalcDetails()\">\n                    <td><span style=\"text-decoration: underline;\" data-bind=\"text: $data.label + ' damage'\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: Math.round($data.value * 100) / 100, style: {color: $parent.getDamageTypeColor($data.damageType)}\"></span></td>\n                </tr>\n                    <!-- ko foreach: $data.data -->\n                    <tr data-bind=\"visible: $parents[1].showDamageAmpCalcDetails()\">\n                        <td><span data-bind=\"text: $data.label\"></span></td>\n                        <td class=\"text-right\"><span data-bind=\"html: Math.round($data.value * 100) / 100, diffStyle: $data.value\"></span></td>\n                    </tr>\n                    <!-- /ko -->\n                <tr data-bind=\"css: {subtotal: $parent.showDamageAmpCalcDetails()}\">\n                    <td data-bind=\"visible: $parent.showDamageAmpCalcDetails()\"><span data-bind=\"text: $data.label + ' damage subtotal'\"></span></td>\n                    <td data-bind=\"visible: !$parent.showDamageAmpCalcDetails()\"><span data-bind=\"text: $data.label + ' damage'\"></span></td>\n                    <td class=\"text-right\"><span data-bind=\"html: Math.round($data.total * 100) / 100, style: {color: $parent.getDamageTypeColor($data.damageType)}\"></span></td>\n                </tr>\n                <!-- /ko -->\n                <tr>\n                    <td><strong data-bind=\"text: damageInputModified().label + ' damage'\"></strong></td>\n                    <td class=\"text-right\"><strong data-bind=\"html: Math.round(damageInputModified().total * 100) / 100, style: {color: getDamageTypeColor(damageInputModified().damageType)}\"></strong></td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>" });
ko.components.register('ability', { template: "<div data-bind=\"if: $data.displayname() != 'Empty' &&  ($data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_HIDDEN') == -1 || $data.name().indexOf('invoker_') != -1),\nstyle: {clear: $data.name() == 'invoker_cold_snap' || $data.name() == 'invoker_chaos_meteor' ? 'both' : ''},\ncss: {row: $data.isDetail() || ($index() < $parents[1].ability().abilities().length-1 && $parents[1].ability().abilities()[$index()+1].isDetail()), row3: $data.isDetail() || ($index() < $parents[1].ability().abilities().length-1 && $parents[1].ability().abilities()[$index()+1].isDetail()) }\">\n    <div class=\"col-md-3 text-center bottom-buffer row2\" data-bind=\"css: {'col-md-3': $root.layout() == 0, 'col-md-2': $root.layout() == 1}\">\n        <img style=\"padding:0px;margin-bottom:1px;\" class=\"img-rounded ability\" data-bind=\"css: { ability_active: $data.isActive() || $data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1, ability_inactive: !$data.isActive() && $data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, btn: $data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1, 'btn-default': $data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') == -1}, attr:{src: '/media/images/spellicons/' + $data.name() + '.png'}, click: function(data, event) { $parents[1].ability().toggleAbility($index, data, event); }\"/>\n        <div class=\"progress\" style=\"position:relative\">\n            <div style=\"position:absolute;width:100%;color:white;\" class=\"text-center\" data-bind=\"visible: $parents[1].getAbilityLevelMax($data) > 0, text: $data.level() + '/' + $parents[1].getAbilityLevelMax($data)\"></div>\n            <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%;\" data-bind=\"attr: { 'aria-valuenow': ($parents[1].getAbilityLevelMax($data) > 0 ? $data.level()/$parents[1].getAbilityLevelMax($data)*100 : 0) }, style: { width: ($parents[1].getAbilityLevelMax($data) > 0 ? $data.level()/$parents[1].getAbilityLevelMax($data)*100 : 0) + '%' }\"></div>\n        </div>\n        <div class=\"btn-group btn-group-justified\" data-bind=\"if: $data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') == -1\">\n            <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parents[1].ability().levelDownAbility($index, data, event, $parents[1]); }\">-</a>\n            <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parents[1].ability().levelUpAbility($index, data, event, $parents[1]); }\">+</a>\n        </div>\n        <div class=\"btn-group btn-group-justified\">\n            <a class=\"btn btn-default btn-sm\" data-bind=\"click: function(data, event) { $parents[1].ability().toggleAbilityDetail($index, data, event); }, css: {'toggled': $data.isDetail}\">Details</a>\n        </div>\n        <div class=\"btn-group btn-group-justified\" data-bind=\"if: $data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE') != -1\">\n            <a class=\"btn btn-default btn-sm btn-block\" style=\"visibility:hidden;\">&mdash;</a>\n        </div>\n    </div>\n    <div class=\"col-md-9 bottom-buffer2\" data-bind=\"visible: $data.isDetail()\">\n        <button type=\"button\" class=\"close\" data-bind=\"click: function(data, event) { $parents[1].ability().toggleAbilityDetail($index, data, event); }\">&times;</button>\n        <div data-bind=\"html: $parents[1].ability().getAbilityTooltipData('npc_dota_hero_' + $parents[1].heroId(), $data.name())\"></div>\n        <div data-bind=\"if: $data.name() in $parents[1].ability().abilityData && $parents[1].ability().abilities()[$index()].level() > 0\">\n            <div class=\"col-md-12\" style=\"margin-top: 10px\" >\n                <div data-bind=\"template: { name: 'ability-settings-template', data: $parents[1].ability().abilitySettingsData($data.name(), $parents[1], $index()) }\"></div>\n            </div>\n        </div>\n    </div>\n</div>" });
ko.components.register('shop', require('../components/shop'));
ko.components.register('stat', { template: "<span data-bind=\"text: parseFloat(hero[stat]()).toString()\"></span><span data-bind=\"html: $root.getDiffText(hero.diff[stat]()), diffCss: hero.diff[stat], diffCssStat: stat, visible: hero.showDiff\"></span>" });
ko.components.register('stats0', { template: "<div class=\"col-md-12 stats0\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n    <table class=\"table table-condensed\">\n    <tbody>\n    <tr><td>Strength:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalStr' } }\"></td></tr>\n    <tr><td>Agility:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalAgi' } }\"></td></tr>\n    <tr><td>Intelligence:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalInt' } }\"></td></tr>\n    <tr><td><abbr title=\"Movement Speed\">MS</abbr>:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalMovementSpeed' } }\"></td></tr>\n    <tr><td>Turn Rate:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalTurnRate' } }\"></td></tr>\n    <tr><td>Sight Range:</td><td class=\"text-right\"><span data-bind=\"html: '<abbr title=\\'Day\\'>' + visionrangeday() + '</abbr>/<abbr title=\\'Night\\'>' + visionrangenight() + '</abbr>'\"></span></td></tr>\n    </tbody>\n    </table>\n</div>" });
ko.components.register('stats1', { template: "<div class=\"col-md-12 stats1\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n    <table class=\"table table-condensed\">\n    <tbody>\n    <tr><td>Armor:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalArmorPhysical' } }\"></td></tr>\n    <tr><td>Health:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'health' } }\"></td></tr>\n    <tr><td>Health Regen:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'healthregen' } }\"></td></tr>\n    <tr><td>Mana:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'mana' } }\"></td></tr>\n    <tr><td>Mana Regen:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'manaregen' } }\"></td></tr>\n    <tr><td>Physical <abbr title=\"Effective Hit Points\">EHP</abbr>:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'ehpPhysical' } }\"></td></tr>\n    <tr><td>Magical <abbr title=\"Effective Hit Points\">EHP</abbr>:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'ehpMagical' } }\"></td></tr>\n    </tbody>\n    </table>\n</div>" });
ko.components.register('stats2', { template: "<div class=\"col-md-12 stats2\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n    <table class=\"table table-condensed\">\n    <tbody>\n    <tr><td>%Phys Res:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalArmorPhysicalReduction' } }\"></td></tr>\n    <tr><td>%Magic Res:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalMagicResistance' } }\"></td></tr>\n    <tr><td>%Lifesteal:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'lifesteal' } }\"></td></tr>\n    <tr><td>%Evasion:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'evasion' } }\"></td></tr>\n    <tr><td>%Bash:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'bash' } }\"></td></tr>\n    <tr><td>%Miss Chance:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'missChance' } }\"></td></tr>\n    <tr style=\"display: none\"><td colspan=2><a class=\"btn btn-default btn-block btn-xs\" data-bind=\"css: {disabled: critInfo().sources.length == 0 ? 'disabled' : '', 'toggled': showCriticalStrikeDetails}, toggle: showCriticalStrikeDetails\">Critical Strike Details</a></td></tr>\n    </tbody>\n    <tbody class=\"tabledropdown\" style=\"border-top:0\" data-bind=\"visible: showCriticalStrikeDetails(),foreach: critInfo().sources\">\n    <tr><td colspan=2><strong data-bind=\"text: $data.name\"></strong></td></tr>\n    <tr><td>Crit Chance:</td><td class=\"text-right\"><span data-bind=\"text: ($data.totalchance * 100).toFixed(2) + '%'\"></span></td></tr>\n    <tr><td>Crit Multiplier:</td><td class=\"text-right\"><span data-bind=\"text: ($data.multiplier * 100).toFixed(2) + '%'\"></span></td></tr>\n    </tbody>\n    </table>\n</div>" });
ko.components.register('stats3', { template: "<div class=\"col-md-12 stats3\" data-bind=\"css: {'col-md-12': $root.layout() == 0, 'col-md-3': $root.layout() == 1}\">\n    <table class=\"table table-condensed\">\n    <tbody>\n    <tr>\n        <td>Damage:</td>\n        <td class=\"text-right\">\n            <span data-bind=\"html: baseDamage()[0].toFixed(0)\"></span>\n            <span data-bind=\"html: $root.getDiffText(diff['baseDamage']()[0]), css: {'diffPos': diff['baseDamage']()[0] > 0, 'diffNeg': diff['baseDamage']()[0] < 0}, visible: showDiff\"></span>\n            <span>&ndash;</span>\n            <span data-bind=\"html: baseDamage()[1].toFixed(0)\"></span>\n            <span data-bind=\"html: $root.getDiffText(diff['baseDamage']()[1]), css: {'diffPos': diff['baseDamage']()[1] > 0, 'diffNeg': diff['baseDamage']()[1] < 0}, visible: showDiff\"></span>\n            <span style=\"color:green\" data-bind=\"visible: bonusDamage() > 0, html: ' + ' + bonusDamage().toFixed(0)\"></span>\n            <span data-bind=\"html: $root.getDiffText(diff['bonusDamage']()), css: {'diffPos': diff['bonusDamage']() > 0, 'diffNeg': diff['bonusDamage']() < 0}, visible: showDiff\"></span>\n            <span style=\"color:red\" data-bind=\"visible: bonusDamageReduction() != 0, html: ' - ' + bonusDamageReduction().toFixed(0)\"></span>\n            <span data-bind=\"html: $root.getDiffText(diff['bonusDamageReduction']()), css: {'diffPos': diff['bonusDamageReduction']() > 0, 'diffNeg': diff['bonusDamageReduction']() < 0}, visible: showDiff\"></span>\n        </td>\n    </tr>\n    <tr><td><abbr title=\"Increased Attack Speed\">IAS</abbr>:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'ias' } }\"></td></tr>\n    <tr><td><abbr title=\"Base Attack Time\">BAT</abbr>:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'bat' } }\"></td></tr>\n    <tr><td>Attack Time:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'attackTime' } }\"></td></tr>\n    <tr><td>Attack &frasl; Sec:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'attacksPerSecond' } }\"></td></tr>\n    <tr><td>Attack Range:</td><td class=\"text-right\" data-bind=\"component: { name: 'stat', params: {'hero': $data, 'stat': 'totalattackrange' } }\"></td></tr>\n    </tbody>\n    </table>\n</div>" });
ko.components.register('stats-additional', { template: "<table class=\"table table-condensed\">\n    <tbody>\n        <tr><td>Base Strength:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attributebasestrength\"></span></td></tr>\n        <tr><td>Strength Gain:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attributestrengthgain\"></span></td></tr>\n        <tr><td>Base Agility:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attributebaseagility\"></span></td></tr>\n        <tr><td>Agility Gain:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attributeagilitygain\"></span></td></tr>\n        <tr><td>Base Intelligence:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attributebaseintelligence\"></span></td></tr>\n        <tr><td>Intelligence Gain:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attributeintelligencegain\"></span></td></tr>\n        <tr><td>Base Armor:</td><td class=\"text-right\"><span data-bind=\"text: heroData().armorphysical\"></span></td></tr>\n        <tr><td><abbr title=\"Base Armor + armor from base agility\">Starting Armor:</abbr></td><td class=\"text-right\"><span data-bind=\"text: parseFloat($data.startingArmor()).toString()\"></span></td></tr>\n        <tr><td>Base Magic Res:</td><td class=\"text-right\"><span data-bind=\"text: heroData().magicalresistance + '%'\"></span></td></tr>\n        <tr><td>Base Attack Point:</td><td class=\"text-right\"><span data-bind=\"text: heroData().attackpoint\"></span></td></tr>\n        <tr><td><abbr data-bind=\"attr: { title: 'Total experience required to reach level ' + $data.selectedHeroLevel() }\">Total Exp:</abbr></td><td class=\"text-right\"><span data-bind=\"text: $data.totalExp()\"></span></span></td></tr>\n        <tr><td><abbr title=\"Experience required for next level\">Next level exp:</abbr></td><td class=\"text-right\"><span data-bind=\"html: $data.nextLevelExp()\"></span></span></td></tr>\n        <tr><td>Respawn Time:</td><td class=\"text-right\"><span data-bind=\"text: $data.respawnTime()\"></span></td></tr>\n    </tbody>\n</table>" });

// The app extends the herocalc library, provides a frontend
var my = require("../herocalc/main");
var getItemTooltipData = require("../herocalc/herocalc_tooltips_item");
var getAbilityTooltipData = require("../herocalc/herocalc_tooltips_ability");
my.prototype.AbilityModel.prototype.getAbilityTooltipData = function (hero, el) {
    return getAbilityTooltipData(my.prototype.heroData, my.prototype.unitData, hero, el);
}
//require("./herocalc_tooltips");
require("./heroviewmodel");

my.prototype.PlayerColors = [
    "#2E6AE6", //Blue
    "#5DE6AD", //Teal
    "#AD00AD", //Purple
    "#DCD90A", //Yellow
    "#E66200", //Orange
    "#E67AB0", //Pink
    "#92A440", //Pus Yellow
    "#5CC5E0", //Light Blue
    "#00771F", //Green
    "#956000" //Brown
];

my.prototype.Tab = function (id, href, data, text, color, template) {
    var self = this;
    self.id = id;
    self.href = href;
    self.color = color;
    self.data = data;
    self.data.id = ko.observable(self.href);
    self.text = text;
    self.template = template;
    return self;
}
my.prototype.Tab.prototype.toJS = function () {
    return {
        id: this.id,
        href: this.href,
        color: this.color,
        text: this.text,
        template: this.template
    }
}

my.prototype.TabGroup = function (hero, unit, clone) {
    var self = this;
    self.hero = hero;
    self.unit = unit;
    self.clone = clone;
    self.illusions = ko.observableArray([]);
    return self;
}
my.prototype.TabGroup.prototype.toJS = function () {
    return {
        hero: this.hero.toJS(),
        unit: this.unit.toJS(),
        clone: this.clone.toJS(),
        illusions: this.illusions().map(function (illusion) { return illusion.toJS(); })
    }
}

my.prototype.HeroCalculatorViewModel = function () {
    var self = this;
    self.heroes = [];

    for (var i = 0; i < 10; i++) {
        self.heroes.push(new my.prototype.HeroCalculatorModel(i));
    }
    
    for (var i = 0; i < 5; i++) {
        var arr = [];
        for (var j = 5; j < 10; j++) {
            arr.push(self.heroes[j]);
        }
        self.heroes[i].enemies.push.apply(self.heroes[i].enemies, arr);
    }
    for (var i = 5; i < 10; i++) {
        var arr = [];
        for (var j = 0; j < 5; j++) {
            arr.push(self.heroes[j]);
        }
        self.heroes[i].enemies.push.apply(self.heroes[i].enemies, arr);
    }
    for (var i = 0; i < 10; i++) {
        var arr = [];
        for (var j = 0; j < 10; j++) {
            if (i !== j) arr.push(self.heroes[j]);
        }
        self.heroes[i].otherHeroes.push.apply(self.heroes[i].otherHeroes, arr);
    }
    
    for (var i = 0; i < 10; i++) {
        self.heroes[i].clone = ko.observable(new my.prototype.CloneViewModel('meepo', self.heroes[i]));
        self.heroes[i].unit = ko.observable(new my.prototype.UnitViewModel('abaddon', self.heroes[i]));
        
        self.heroes[i].selectedCompare(self.heroes[i].availableCompare()[i < 5 ? 4 + i : i - 5]);
        self.heroes[i].selectedEnemy(self.heroes[i].availableEnemies()[i % 5]);
        //self.heroes[i].enemy = ko.observable(self.heroes[i < 2 ? 2 : 0]);
        self.heroes[i].unit().enemy(self.heroes[i].enemy());
        //self.heroes[i].unit().enemy = ko.observable(self.heroes[i < 2 ? 2 : 0]);
        //self.heroes[i].heroCompare = ko.observable(self.heroes[1 - (i % 2) + (i < 2 ? 0 : 2)]);
        
        self.heroes[i].unit().selectedUnit(self.heroes[i].unit().availableUnits()[0]);
        //self.heroes[i].selectedHero(self.heroes[i].availableHeroes()[i < 2 ? 0 : 2]);
        self.heroes[i].illusions.subscribe(function (changes) {
            for (var i = 0; i < changes.length; i++) {
                if (changes[i].status == 'added') {
                    var color = this.index < 2 ? '#5cb85c' : '#d9534f',
                        j = my.prototype.uniqueId();
                    self.tabs()[this.index].illusions.push(
                        new my.prototype.Tab(
                            'illusionTab' + this.index + '-' + j,
                            'illusionPane' + this.index + '-' + j,
                            self.heroes[this.index].illusions()[self.tabs()[this.index].illusions().length](),
                            'Illusion ' + j,
                            color,
                            'illusion-pane')
                    );
                }
            }
        }, {vm: this, index: i}, "arrayChange");
    }
    //self.heroes[0].showUnitTab(true);
    self.heroes[0].bound(true);
    self.tabs = ko.observableArray([]);
    var tabsArr = [];
    for (var i = 0; i < 10; i++) {
        //var color = i < 5 ? '#5cb85c' : '#d9534f';
        var color = my.prototype.PlayerColors[i];
        var tabGroup = new my.prototype.TabGroup(
            new my.prototype.Tab('heroTab' + i, 'heroPane' + i, self.heroes[i], 'Hero ' + i, color, 'hero-pane'),
            new my.prototype.Tab('unitTab' + i, 'unitPane' + i, self.heroes[i].unit(), 'Unit ' + i, color, 'unit-pane'),
            new my.prototype.Tab('cloneTab' + i, 'clonePane' + i, self.heroes[i].clone(), 'Meepo Clone ' + i, color, 'clone-pane')
        );
        //self.tabs.push(tabGroup);
        tabsArr.push(tabGroup);
    }
    self.tabs.push.apply(self.tabs, tabsArr);//.slice(0, 1));

    self.selectedItem = ko.observable();
    self.layout = ko.observable("1");
    self.displayShop = ko.observable(true);
    self.displayShopItemTooltip = ko.observable(true);
    self.allItems = ko.observableArray([
        {name: 'Str, Agi, Int, MS, Turn, Sight', value: 'stats0'},
        {name: 'Armor, Health, Mana, Regen, EHP', value: 'stats1'},
        {name: 'Phys Res, Magic Res, Lifesteal, Evasion, Bash, Miss', value: 'stats2'},
        {name: 'Damage, IAS, BAT, Attack', value: 'stats3'}
    ]); // Initial items
    self.selectedItems = ko.observableArray([]); 
    self.moveUp = function () {
        var start = self.allItems.indexOf(self.selectedItems()[0]),
            end = self.allItems.indexOf(self.selectedItems()[self.selectedItems().length - 1]);
        if (start > 0) {
            var e = self.allItems.splice(start - 1, 1);
            self.allItems.splice(end, 0, e[0]);            
        }
    };
    self.moveDown = function () {
        var start = self.allItems.indexOf(self.selectedItems()[0]),
            end = self.allItems.indexOf(self.selectedItems()[self.selectedItems().length - 1]);        
        if (end < self.allItems().length - 1) {
            var e = self.allItems.splice(end + 1, 1);
            self.allItems.splice(start, 0, e[0]);
        }
    };
    self.selectedTabId = ko.observable('heroTab0');
    self.getSelectedTab = function (tabId) {
        var indices = tabId.replace('heroTab', '').replace('cloneTab', '').replace('unitTab', '').replace('illusionTab', '').split('-'),
            index = indices[0],
            tab = self.tabs()[index];
        return tab;
    }
    self.selectedTab = ko.computed(function () {
        /*var indices = self.selectedTabId().replace('heroTab', '').replace('cloneTab', '').replace('unitTab', '').replace('illusionTab', '').split('-'),
            index = indices[0],
            tab = self.tabs()[index];*/
        var tab = self.getSelectedTab(self.selectedTabId());
        if (self.selectedTabId().indexOf('hero') != -1) {
            return tab.hero;
        }
        else if (self.selectedTabId().indexOf('unit') != -1) {
            return tab.unit;
        }
        else if (self.selectedTabId().indexOf('clone') != -1) {
            return tab.clone;
        }
        else if (self.selectedTabId().indexOf('illusion') != -1) {
            return tab.illusions().find(function (tab) {
                return tab.id == self.selectedTabId();
            });
        }
        else {
            return self.tabs()[0].hero;
        }
    });
    self.selectedTabs = ko.observableArray(['heroTab0', 'heroTab1']);
    //self.selectedTabs.push('heroTab0');
    //self.selectedTabs.push('heroTab1');
    self.boundSettings = ko.observable(false);
    self.clickTab = function (data, event, index) {
        /*if (event.target.id != 'settingsTab') {
            self.selectedTabId(event.target.id);
        }*/
        self.selectedTabId(event.target.id);
        if (self.selectedTabs()[1] != event.target.id) {
            self.selectedTabs.shift();
            self.selectedTabs.push(event.target.id);
        }
        if (self.selectedTab().data.hasOwnProperty('bound')) {
            self.selectedTab().data.bound(true);

            // make sure build explorer graph renders
            setTimeout(function () {
                self.selectedTab().data.buildExplorer.graphData.valueHasMutated();
            }, 0);
        }
        if (event.target.id === 'settingsTab') self.boundSettings(true);
    };
    self.isSecondTab = function (id) {
        return self.selectedTabs().indexOf(id) > -1 && self.selectedTabId() != id;
    }
    
    self.showSideTabId = function (id) {
        return self.selectedTabs().indexOf(id) > -1 && self.sideView();
    };
    
    self.removeTab = function (index, data, event, tab) {
        if (data.id == self.selectedTabId()) {
            //self.selectedTabId('heroTab0');
            self.clickTab(null, {target: {id: 'heroTab0'}});
            $('#heroTab0').tab('show');
        }
        self.tabs()[tab].illusions.remove(function (illusion) {
            return illusion == data;
        });
        self.heroes[tab].illusions.remove(function (illusion) {
            return illusion() == data.data;
        });
    };
    
    self.sideView = ko.observable(false);
    self.sideView.subscribe(function (newValue) {
        if (newValue) {
            if (!self.shopPopout()) {
                self.displayShop(false);
            }
            for (var i = 0; i < self.selectedTabs().length; i++) {
                var tab = self.getSelectedTab(self.selectedTabs()[i]);
                if (tab && tab.hero.data.hasOwnProperty('bound')) {
                    tab.hero.data.bound(true);
                }
            }
            self.layout("0");
        }
    });
    var $window = $(window);
    self.windowWidth = ko.observable($window.width());
    self.windowHeight = ko.observable($window.height());
    $window.resize(function () { 
        self.windowWidth($window.width());
        self.windowHeight($window.height());
    });
    self.shopDock = ko.observable(false);
    self.shopDock.subscribe(function (newValue) {
        if (newValue) {
            self.shopPopout(false);
        }
        else {
        }
    });

    self.shopDockTrigger = ko.computed(function () {
        self.windowWidth();
        self.shopDock();
    });
    self.shopPopout = ko.observable(false);
    self.shopPopout.subscribe(function (newValue) {
        if (newValue) {
            self.displayShop(true);
            $( "#shop-dialog" ).dialog({
                minWidth: 380,
                minHeight: 0,
                closeText: "",
                open: function ( event, ui ) {
                    $(event.target.offsetParent).find('.ui-dialog-titlebar').find('button')
                        .addClass('close glyphicon glyphicon-remove shop-button btn btn-default btn-xs pull-right')
                        .removeClass('ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only ui-dialog-titlebar-close close')
                        .css('margin-right','0px')
                        .parent()
                            .append($('#shop-minimize'))
                            .append($('#shop-maximize'));
                    $(event.target.offsetParent).find('.ui-dialog-titlebar').dblclick(function () {
                        self.displayShop(!self.displayShop());
                    });
                },
                close: function ( event, ui ) {
                    self.shopPopout(false);
                }
            });
        }
        else {
            $('#shop-container').prepend($('#shop-minimize')).prepend($('#shop-maximize'));
            $( "#shop-dialog" ).dialog("destroy");
        }
    });

    self.addItem = function (data, event) {
        self.selectedTab().data.buildExplorer.getSelectedInventory().addItem(data, event);
    }
    self.itemOptions = ko.computed(function () {
        return self.selectedTab().data.inventory.itemOptions();
    });
    
    self.changeSelectedItem = function (data, event) {
        self.itemInputValue(1);
        self.selectedItem(event.target.id);
    }
    
    self.getItemTooltipData = ko.computed(function () {
        return getItemTooltipData(my.prototype.itemData, self.selectedItem());
    }, this);
    self.getItemInputLabel = ko.computed(function () {
        if (my.prototype.stackableItems.indexOf(self.selectedItem()) != -1) {
            return 'Stack Size'
        }
        else if (my.prototype.levelitems.indexOf(self.selectedItem()) != -1) {
            return 'Upgrade Level'
        }
        else if (self.selectedItem() == 'bloodstone') {
            return 'Charges'
        }
        else {
            return ''
        }
    }, this);
    self.itemInputValue = ko.observable(1);
    self.saveLink = ko.observable();
    self.getAppState = function () {
        var data = {
            selectedItem: self.selectedItem,
            layout: self.layout,
            displayShop: self.displayShop,
            displayShopItemTooltip: self.displayShopItemTooltip,
            allItems: self.allItems,
            selectedItems: self.selectedItems,
            selectedTabId: self.selectedTabId,
            selectedTabs: self.selectedTabs,
            boundSettings: self.boundSettings,
            sideView: self.sideView,
            windowWidth: self.windowWidth,
            windowHeight: self.windowHeight,
            shopDock: self.shopDock,
            shopPopout: self.shopPopout,
            itemInputValue: self.itemInputValue,
            saveLink: self.saveLink
        }
        data.tabs = self.tabs().map(function (tab) { return tab.toJS() });
        return ko.toJS(data);
    }
    self.getSaveData = function () {
        var data = {
            version: "1.3.0",
            heroes: []
        }
        for (var i = 0; i < 10; i++) {
            var hero = self.heroes[i];
            var d = {
                hero: hero.selectedHero().heroName,
                level: hero.selectedHeroLevel(),
                items: [],
                abilities: [],
                skillPointHistory: hero.skillPointHistory(),
                buffs: [],
                itemBuffs: [],
                debuffs: [],
                itemDebuffs: [],
                graphData: [],
                enemyIndex: hero.enemy().index(),
                heroCompareIndex: hero.heroCompare().index()
            }
            // items
            for (var j = 0; j < hero.inventory.items().length; j++) {
                d.items.push(ko.toJS(hero.inventory.items()[j]));
            }
            // abilities
            for (var j = 0; j < hero.ability().abilities().length; j++) {
                d.abilities.push({
                    level: hero.ability().abilities()[j].level(),
                    isActive: hero.ability().abilities()[j].isActive()
                });
            }
            // buffs
            for (var j = 0; j < hero.buffs.buffs().length; j++) {
                d.buffs.push({
                    name: hero.buffs.buffs()[j].name,
                    level: hero.buffs.buffs()[j].data.level(),
                    isActive: hero.buffs.buffs()[j].data.isActive()
                });
            }
            
            // debuffs
            for (var j = 0; j < hero.debuffs.buffs().length; j++) {
                d.debuffs.push({
                    name: hero.debuffs.buffs()[j].name,
                    level: hero.debuffs.buffs()[j].data.level(),
                    isActive: hero.debuffs.buffs()[j].data.isActive()
                });
            }

            // item buffs
            for (var j = 0; j < hero.buffs.itemBuffs.items().length; j++) {
                d.itemBuffs.push(ko.toJS(hero.buffs.itemBuffs.items()[j]));
            }
            
            // item debuffs
            for (var j = 0; j < hero.debuffs.itemBuffs.items().length; j++) {
                d.itemDebuffs.push(ko.toJS(hero.debuffs.itemBuffs.items()[j]));
            }
            
            // graph data
            d.graphData = ko.toJS(hero.buildExplorer.graphData);
            
            data.heroes.push(d);
        }
        return data;
    }
    self.save = function () {
        var data = self.getSaveData();
        var serialized = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "save.php",
            data: {'data': serialized},
            dataType: "json",
            success: function (data){
                self.saveLink([location.protocol, '//', location.host, location.pathname].join('') + '?id=' + data.file);
            },
            failure: function (errMsg) {
                alert("Save request failed.");
            }
        });
    }
    self.load = function (data) {
        for (var i = 0; i < data.heroes.length; i++) {
            var hero = self.heroes[i];
            hero.selectedHero(my.prototype.findWhere(hero.availableHeroes(), {'heroName': data.heroes[i].hero}));
            hero.selectedHeroLevel(data.heroes[i].level);
            hero.inventory.items.removeAll();
            hero.inventory.activeItems.removeAll();
            
            // load hero compare
            if (data.heroes[i].hasOwnProperty('heroCompareIndex')) {
                var o = hero.availableCompare().filter(function (option) {
                    return option.hero.index() == data.heroes[i].heroCompareIndex;
                });
                if (o.length) {
                    hero.selectedCompare(o[0]);
                    hero.heroCompare(o[0].hero);
                }
            }
            
            // load enemy
            if (data.heroes[i].hasOwnProperty('enemyIndex')) {
                var o = hero.availableEnemies().filter(function (option) {
                    return option.hero.index() == data.heroes[i].enemyIndex;
                });
                if (o.length) {
                    hero.selectedEnemy(o[0]);
                    hero.enemy(o[0].hero);
                }
            }
            
            // load items
            for (var j = 0; j < data.heroes[i].items.length; j++) {
                var item = data.heroes[i].items[j];
                var new_item = {
                    item: item.item,
                    state: ko.observable(item.state),
                    size: item.size,
                    enabled: ko.observable(item.enabled)
                }
                hero.inventory.items.push(new_item);
            }

            // load abilities
            for (var j = 0; j < data.heroes[i].abilities.length; j++) {
                hero.ability().abilities()[j].level(data.heroes[i].abilities[j].level);
                hero.ability().abilities()[j].isActive(data.heroes[i].abilities[j].isActive);
            }
            hero.skillPointHistory(data.heroes[i].skillPointHistory);

            // load buffs
            for (var j = 0; j < data.heroes[i].buffs.length; j++) {
                hero.buffs.selectedBuff(my.prototype.findWhere(hero.buffs.availableBuffs(), {buffName: data.heroes[i].buffs[j].name}));
                hero.buffs.addBuff(hero, {});
                var b = my.prototype.findWhere(hero.buffs.buffs(), { name: data.heroes[i].buffs[j].name });
                b.data.level(data.heroes[i].buffs[j].level);
                b.data.isActive(data.heroes[i].buffs[j].isActive);
            }

            // load debuffs
            for (var j = 0; j < data.heroes[i].debuffs.length; j++) {
                hero.debuffs.selectedBuff(my.prototype.findWhere(hero.debuffs.availableDebuffs(), {buffName: data.heroes[i].debuffs[j].name}));
                hero.debuffs.addBuff(hero, {});
                var b = my.prototype.findWhere(hero.debuffs.buffs(), { name: data.heroes[i].debuffs[j].name });
                b.data.level(data.heroes[i].debuffs[j].level);
                b.data.isActive(data.heroes[i].debuffs[j].isActive);
            }

            // load item buffs
            if (data.heroes[i].itemBuffs) {
                for (var j = 0; j < data.heroes[i].itemBuffs.length; j++) {
                    var item = data.heroes[i].itemBuffs[j];
                    var new_item = {
                        item: item.item,
                        state: ko.observable(item.state),
                        size: item.size,
                        enabled: ko.observable(item.enabled)
                    }
                    hero.buffs.itemBuffs.items.push(new_item);
                }
            }

            // load item debuffs
            if (data.heroes[i].itemDebuffs) {
                for (var j = 0; j < data.heroes[i].itemDebuffs.length; j++) {
                    var item = data.heroes[i].itemDebuffs[j];
                    var new_item = {
                        item: item.item,
                        state: ko.observable(item.state),
                        size: item.size,
                        enabled: ko.observable(item.enabled)
                    }
                    hero.debuffs.itemBuffs.items.push(new_item);
                }
            }
            
            // load graph data
            if (data.heroes[i].graphData) {
                hero.buildExplorer.loadGraphData(data.heroes[i].graphData);
            }
        }
    }
    
    self.sendReport = function () {
        if ($('#BugReportFormText').val()) {
            $.post( "report.php", { name: $('#BugReportFormName').val(), email: $('#BugReportFormEmail').val(), body: $('#BugReportFormText').val() })
            .done(function (data) {
                if (data == 'Success') {
                    alert('Report successfully sent. Thanks!');
                    $('#BugReportFormText').val('');
                }
                else {
                    alert('Failed to send report. Try again later or email admin@devilesk.com');
                }
            });
            $('#myModal').modal('hide');
        }
        else {
            alert('Message is required.');
        }
    }
    
    self.getProperty = function (obj, properties) {
        var result = obj;
        for (var i = 0; i < properties.length; i++) {
            result = result[properties[i]];
        }
        return result;
    };
    
    self.getDiffTextWrapper = function (hero, property) {
        return self.getDiffText(self.getDiffMagnitude(hero, property));
    }
    
    self.getDiffMagnitude = function (hero, property) {
        var properties = property.split('.');
        return self.getProperty(hero.damageTotalInfo(), properties).toFixed(2) - self.getProperty(hero.heroCompare().damageTotalInfo(), properties).toFixed(2);
    }
    
    self.getDiffText = function (value) {
        if (value > 0) {
            return '+' + parseFloat(value.toFixed(2));
        }
        else if (value < 0) {
            return '&minus;' + parseFloat(value.toFixed(2)*-1).toString();
        }
        else {
            return '';
        }
    }
    self.highlightedTabInternal = ko.observable('');
    self.highlightedTab = ko.computed(function () {
        return self.highlightedTabInternal();
    }).extend({ throttle: 100 });
    self.highlightTab = function (data) {
        self.highlightedTabInternal(data);
    }
    self.unhighlightTab = function (data) {
        self.highlightedTabInternal('');
    }
}

my.prototype.theme = ko.observable('dark'); //ko.observable($('#theme-select').val());
my.prototype.heroCalculator = {};

my.prototype.run = function () {
    my.prototype.heroCalculator = new my.prototype.HeroCalculatorViewModel();
    ko.applyBindings(my.prototype.heroCalculator);
    /*$('#theme-select').change(function () {
        my.prototype.theme($(this).val());
    });*/
    $('#spinner').hide();
    $('.initial-hidden').css('display', 'inline-block');
    $('#popHero0').addClass('active');
    $('#heroPane0').addClass('active');
    $('[data-toggle="tooltip"]').tooltip();
    var saveId = my.prototype.getParameterByName('id');
    if (saveId) {
        $.get('save/' + saveId + '.json', function (data) {
            my.prototype.heroCalculator.load(data);
        });
    }
}

my.prototype.inventoryClipBoard = {
    items: [],
    activeItems: []
};

my.prototype.getParameterByName = function (name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

module.exports = my;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../components/shop":43,"../herocalc/herocalc_tooltips_ability":54,"../herocalc/herocalc_tooltips_item":55,"../herocalc/main":57,"../lib/Chart.min":59,"../lib/Chart.scatter":60,"./herocalc_knockout":39,"./heroviewmodel":40,"./jquery-ui.custom":41,"bootstrap":1}],43:[function(require,module,exports){
function ViewModel(params) {
    var self = this;
    self.windowWidth = params.windowWidth;
    self.windowHeight = params.windowHeight;
    self.displayShop = params.displayShop;
    self.displayShopItemTooltip = params.displayShopItemTooltip;
    self.shopDock = params.shopDock;
    self.shopDockTrigger = params.shopDockTrigger;
    self.shopPopout = params.shopPopout;
    self.selectedItem = params.selectedItem;
    self.addItem = params.addItem;
    self.changeSelectedItem = params.changeSelectedItem;
    self.getItemTooltipData = params.getItemTooltipData;
    self.getItemInputLabel = params.getItemInputLabel;
    self.itemInputValue = params.itemInputValue;
    self.itemOptions = params.itemOptions;
}

module.exports = {
    viewModel: ViewModel,
    template: "        <div id=\"shop-container\" class=\"col-md-12 col-lg-4\" data-bind=\"shopDockStyle: shopDockTrigger, visible: displayShop() || shopPopout(), css: {'col-lg-4': !shopPopout()}, style: { 'padding-top': shopPopout() ? '5px' : '0px'}\">\n              <button id=\"shop-minimize\" class=\"btn btn-default btn-xs shop-button glyphicon glyphicon-minus pull-right\" data-bind=\"toggle: displayShop, visible: displayShop()\" title=\"Minimize shop\"></button>\n              <button id=\"shop-maximize\" class=\"btn btn-default btn-xs shop-button glyphicon glyphicon-plus pull-right\" data-bind=\"toggle: displayShop, visible: !displayShop()\" title=\"Maximize shop\"></button>\n              <button class=\"btn btn-default btn-xs shop-button glyphicon glyphicon-new-window pull-right hidden-xs\" data-bind=\"click: shopPopout, visible: !shopPopout()\" title=\"Popout shop\"></button>\n              <button class=\"btn btn-default btn-xs shop-button glyphicon glyphicon-align-right pull-right hidden-xs\" data-bind=\"toggle: shopDock, attr: { title: shopDock() ? 'Undock shop to right side of screen' : 'Dock shop to right side of screen' }\" ></button>\n            <ul id=\"shoptabs\" class=\"nav nav-tabs\" data-bind=\"visible: displayShop()\">\n              <li><a href=\"#shop_basic\" data-toggle=\"tab\">Basic</a></li>\n              <li><a href=\"#shop_upgrade\" data-toggle=\"tab\">Upgrade</a></li>\n              <li><a href=\"#shop_secret\" data-toggle=\"tab\">Secret</a></li>\n            </ul>\n            <div class=\"tab-content text-center bottom-buffer2\" data-bind=\"visible: displayShop()\">\n                <div class=\"tab-pane active\" id=\"shop_basic\">\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-consumables\" id=\"consumables\"></div>\n  <div class=\"img-rounded hc-item hc-item-clarity\" id=\"clarity\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-faerie_fire\" id=\"faerie_fire\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-enchanted_mango\" id=\"enchanted_mango\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-tango\" id=\"tango\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-flask\" id=\"flask\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-smoke_of_deceit\" id=\"smoke_of_deceit\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-tpscroll\" id=\"tpscroll\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-dust\" id=\"dust\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-courier\" id=\"courier\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-flying_courier\" id=\"flying_courier\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ward_observer\" id=\"ward_observer\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ward_sentry\" id=\"ward_sentry\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-tome_of_knowledge\" id=\"tome_of_knowledge\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-bottle\" id=\"bottle\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-attributes\" id=\"attributes\"></div>\n  <div class=\"img-rounded hc-item hc-item-branches\" id=\"branches\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-gauntlets\" id=\"gauntlets\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-slippers\" id=\"slippers\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-mantle\" id=\"mantle\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-circlet\" id=\"circlet\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-belt_of_strength\" id=\"belt_of_strength\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-boots_of_elves\" id=\"boots_of_elves\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-robe\" id=\"robe\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ogre_axe\" id=\"ogre_axe\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-blade_of_alacrity\" id=\"blade_of_alacrity\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-staff_of_wizardry\" id=\"staff_of_wizardry\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-emptyitembg\" id=\"emptyitembg\"></div>\n  <div class=\"img-rounded hc-item hc-item-emptyitembg\" id=\"emptyitembg\"></div>\n  <div class=\"img-rounded hc-item hc-item-emptyitembg\" id=\"emptyitembg\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-armaments\" id=\"armaments\"></div>\n  <div class=\"img-rounded hc-item hc-item-ring_of_protection\" id=\"ring_of_protection\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-stout_shield\" id=\"stout_shield\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-quelling_blade\" id=\"quelling_blade\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-infused_raindrop\" id=\"infused_raindrop\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-blight_stone\" id=\"blight_stone\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-orb_of_venom\" id=\"orb_of_venom\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-blades_of_attack\" id=\"blades_of_attack\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-chainmail\" id=\"chainmail\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-quarterstaff\" id=\"quarterstaff\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-helm_of_iron_will\" id=\"helm_of_iron_will\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-broadsword\" id=\"broadsword\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-claymore\" id=\"claymore\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-javelin\" id=\"javelin\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-mithril_hammer\" id=\"mithril_hammer\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-arcane\" id=\"arcane\"></div>\n  <div class=\"img-rounded hc-item hc-item-wind_lace\" id=\"wind_lace\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-magic_stick\" id=\"magic_stick\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-sobi_mask\" id=\"sobi_mask\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ring_of_regen\" id=\"ring_of_regen\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-boots\" id=\"boots\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-gloves\" id=\"gloves\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-cloak\" id=\"cloak\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ring_of_health\" id=\"ring_of_health\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-void_stone\" id=\"void_stone\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-gem\" id=\"gem\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-lifesteal\" id=\"lifesteal\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-shadow_amulet\" id=\"shadow_amulet\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ghost\" id=\"ghost\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-blink\" id=\"blink\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n\n\n                </div>\n                <div class=\"tab-pane\" id=\"shop_upgrade\">\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-common\" id=\"common\"></div>\n  <div class=\"img-rounded hc-item hc-item-magic_wand\" id=\"magic_wand\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-null_talisman\" id=\"null_talisman\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-wraith_band\" id=\"wraith_band\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-poor_mans_shield\" id=\"poor_mans_shield\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-bracer\" id=\"bracer\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-soul_ring\" id=\"soul_ring\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-phase_boots\" id=\"phase_boots\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-power_treads\" id=\"power_treads\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-oblivion_staff\" id=\"oblivion_staff\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-pers\" id=\"pers\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-hand_of_midas\" id=\"hand_of_midas\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-travel_boots\" id=\"travel_boots\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-moon_shard\" id=\"moon_shard\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-emptyitembg\" id=\"emptyitembg\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-support\" id=\"support\"></div>\n  <div class=\"img-rounded hc-item hc-item-ring_of_basilius\" id=\"ring_of_basilius\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-iron_talon\" id=\"iron_talon\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-headdress\" id=\"headdress\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-buckler\" id=\"buckler\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-urn_of_shadows\" id=\"urn_of_shadows\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-tranquil_boots\" id=\"tranquil_boots\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ring_of_aquila\" id=\"ring_of_aquila\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-medallion_of_courage\" id=\"medallion_of_courage\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-arcane_boots\" id=\"arcane_boots\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ancient_janggo\" id=\"ancient_janggo\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-mekansm\" id=\"mekansm\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-vladmir\" id=\"vladmir\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-pipe\" id=\"pipe\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-guardian_greaves\" id=\"guardian_greaves\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-caster\" id=\"caster\"></div>\n  <div class=\"img-rounded hc-item hc-item-glimmer_cape\" id=\"glimmer_cape\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-force_staff\" id=\"force_staff\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-veil_of_discord\" id=\"veil_of_discord\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-aether_lens\" id=\"aether_lens\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-necronomicon\" id=\"necronomicon\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-dagon\" id=\"dagon\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-cyclone\" id=\"cyclone\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-solar_crest\" id=\"solar_crest\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-rod_of_atos\" id=\"rod_of_atos\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-orchid\" id=\"orchid\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ultimate_scepter\" id=\"ultimate_scepter\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-refresher\" id=\"refresher\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-sheepstick\" id=\"sheepstick\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-octarine_core\" id=\"octarine_core\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-weapons\" id=\"weapons\"></div>\n  <div class=\"img-rounded hc-item hc-item-lesser_crit\" id=\"lesser_crit\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-armlet\" id=\"armlet\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-invis_sword\" id=\"invis_sword\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-basher\" id=\"basher\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-bfury\" id=\"bfury\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ethereal_blade\" id=\"ethereal_blade\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-silver_edge\" id=\"silver_edge\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-radiance\" id=\"radiance\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-monkey_king_bar\" id=\"monkey_king_bar\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-greater_crit\" id=\"greater_crit\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-butterfly\" id=\"butterfly\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-rapier\" id=\"rapier\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-abyssal_blade\" id=\"abyssal_blade\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-bloodthorn\" id=\"bloodthorn\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-armor\" id=\"armor\"></div>\n  <div class=\"img-rounded hc-item hc-item-hood_of_defiance\" id=\"hood_of_defiance\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-vanguard\" id=\"vanguard\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-blade_mail\" id=\"blade_mail\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-soul_booster\" id=\"soul_booster\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-crimson_guard\" id=\"crimson_guard\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-black_king_bar\" id=\"black_king_bar\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-lotus_orb\" id=\"lotus_orb\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-shivas_guard\" id=\"shivas_guard\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-bloodstone\" id=\"bloodstone\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-manta\" id=\"manta\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-sphere\" id=\"sphere\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-hurricane_pike\" id=\"hurricane_pike\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-assault\" id=\"assault\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-heart\" id=\"heart\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-artifacts\" id=\"artifacts\"></div>\n  <div class=\"img-rounded hc-item hc-item-mask_of_madness\" id=\"mask_of_madness\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-helm_of_the_dominator\" id=\"helm_of_the_dominator\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-dragon_lance\" id=\"dragon_lance\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-sange\" id=\"sange\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-yasha\" id=\"yasha\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-echo_sabre\" id=\"echo_sabre\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-maelstrom\" id=\"maelstrom\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-diffusal_blade\" id=\"diffusal_blade\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-desolator\" id=\"desolator\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-heavens_halberd\" id=\"heavens_halberd\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-sange_and_yasha\" id=\"sange_and_yasha\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-skadi\" id=\"skadi\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-mjollnir\" id=\"mjollnir\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-satanic\" id=\"satanic\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n                </div>\n                <div class=\"tab-pane\" id=\"shop_secret\">\n<div class=\"shop-column\">\n  <div class=\"hc-shop hc-shop-secret\" id=\"secret\"></div>\n  <div class=\"img-rounded hc-item hc-item-energy_booster\" id=\"energy_booster\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-vitality_booster\" id=\"vitality_booster\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-point_booster\" id=\"point_booster\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-platemail\" id=\"platemail\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-talisman_of_evasion\" id=\"talisman_of_evasion\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-hyperstone\" id=\"hyperstone\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-ultimate_orb\" id=\"ultimate_orb\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-demon_edge\" id=\"demon_edge\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-mystic_staff\" id=\"mystic_staff\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-eagle\" id=\"eagle\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-reaver\" id=\"reaver\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n  <div class=\"img-rounded hc-item hc-item-relic\" id=\"relic\" data-bind=\"click: changeSelectedItem, event: { dblclick: addItem }\"></div>\n</div>\n                </div>\n            </div>\n\n            <div class=\"form-group\" data-bind=\"visible: displayShop()\">\n                <div class=\"input-group\">\n                    <input class=\"form-control\" id=\"auto\" data-bind=\"jqAuto: { autoFocus: true, html: true }, jqAutoSource: itemOptions, jqAutoValue: selectedItem, jqAutoSourceLabel: 'displayname', jqAutoSourceInputValue: 'name', jqAutoSourceValue: 'value'\" />\n                    <span class=\"input-group-btn\">\n                        <button class=\"btn btn-default\" data-bind=\"jqAutoCombo: 'auto'\"><span class=\"glyphicon glyphicon-search\"></span></button>\n                    </span>\n                </div>\n            </div>\n\n            <div data-bind=\"visible: selectedItem() && displayShop()\">\n                <button class=\"btn btn-default btn-xs glyphicon glyphicon-minus pull-right\" data-bind=\"toggle: displayShopItemTooltip, visible: displayShopItemTooltip()\" title=\"Hide item description\"></button>\n                <button class=\"btn btn-default btn-xs glyphicon glyphicon-plus pull-right\" data-bind=\"toggle: displayShopItemTooltip, visible: !displayShopItemTooltip()\" title=\"Show item description\"></button>\n                <div data-bind=\"html: getItemTooltipData, css: { 'hide-shop-item-details': !displayShopItemTooltip() }\"></div>\n                <div style=\"margin-top:10px;margin-bottom:10px;\" class=\"form-inline\" data-bind=\"visible: getItemInputLabel() != ''\">\n                    <div class=\"form-group\">\n                        <label for=\"iteminput\" data-bind=\"text: getItemInputLabel\"></label>\n                        <input class=\"form-control\" id=\"iteminput\" data-bind=\"value: itemInputValue\" />\n                    </div>\n                </div>\n                <div class=\"form-group text-right\">\n                    <button class=\"btn btn-default\" data-bind=\"click: addItem\">Add Item</button>\n                </div>\n            </div>\n        </div>"
};
},{}],44:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.AbilityModel = function (a, h) {
    var self = this;
    self.hero = h;
    self.abilityData = my.prototype.abilityData;
    self.hasScepter = ko.observable(false);
    self.isShapeShiftActive = ko.observable(false);
    self.abilities = a;
    for (var i = 0; i < self.abilities().length; i++) {
        self.abilities()[i].isActive = ko.observable(false);
        self.abilities()[i].isDetail = ko.observable(false);
        self.abilities()[i].baseDamage = ko.observable(0);
        self.abilities()[i].baseDamageReductionPct = ko.observable(0);
        self.abilities()[i].baseDamageMultiplier = ko.observable(0);
        self.abilities()[i].bash = ko.observable(0);
        self.abilities()[i].bashBonusDamage = ko.observable(0);
        self.abilities()[i].bonusDamage = ko.observable(0);
        self.abilities()[i].bonusDamageOrb = ko.observable(0);
        self.abilities()[i].bonusDamagePct = ko.observable(0);
        self.abilities()[i].bonusDamagePrecisionAura = ko.observable(0);
        self.abilities()[i].bonusDamageReduction = ko.observable(0);
        self.abilities()[i].bonusHealth = ko.observable(0);
        self.abilities()[i].bonusStrength = ko.observable(0);
        self.abilities()[i].bonusStrength2 = ko.observable(0);
        self.abilities()[i].bonusAgility = ko.observable(0);
        self.abilities()[i].bonusAgility2 = ko.observable(0);
        self.abilities()[i].bonusInt = ko.observable(0);
        self.abilities()[i].bonusAllStatsReduction = ko.observable(0);
        self.abilities()[i].damageAmplification = ko.observable(0);
        self.abilities()[i].damageReduction = ko.observable(0);
        self.abilities()[i].evasion = ko.observable(0);
        self.abilities()[i].magicResist = ko.observable(0);
        self.abilities()[i].manaregen = ko.observable(0);
        self.abilities()[i].manaregenreduction = ko.observable(0);
        self.abilities()[i].missChance = ko.observable(0);
        self.abilities()[i].movementSpeedFlat = ko.observable(0);
        self.abilities()[i].movementSpeedPct = ko.observable(0);
        self.abilities()[i].movementSpeedPctReduction = ko.observable(0);
        self.abilities()[i].turnRateReduction = ko.observable(0);
        self.abilities()[i].attackrange = ko.observable(0);
        self.abilities()[i].attackspeed = ko.observable(0);
        self.abilities()[i].attackspeedreduction = ko.observable(0);
        self.abilities()[i].armor = ko.observable(0);
        self.abilities()[i].armorReduction = ko.observable(0);
        self.abilities()[i].healthregen = ko.observable(0);
        self.abilities()[i].lifesteal = ko.observable(0);
        self.abilities()[i].visionnight = ko.observable(0);
        self.abilities()[i].visionday = ko.observable(0);
    }
    self.abilityControlData = {};
    self.abilitySettingsData = function (data, parent, index) {
        if (self.abilityControlData[data] == undefined) {
            return self.processAbility(data, parent, index, self.abilityData[data]);
        }
        else {
            return self.abilityControlData[data];
        }
    }
    
    self.processAbility = function (data, parent, index, args) {
        var result = {};
        result.data = [];
        var v;
        var v_list = [];
        for (var i=0; i < args.length; i++) {
            switch (args[i].controlType) {
                case 'input':
                    v = ko.observable(0).extend({ numeric: 2 });
                    v.controlValueType = args[i].controlValueType;
                    v_list.push(v);
                    result.data.push({ labelName: args[i].label.toUpperCase() + ':', controlVal: v, controlType: args[i].controlType, display: args[i].display });
                break;
                case 'checkbox':
                    v = ko.observable(false);
                    v.controlValueType = args[i].controlValueType;
                    v_list.push(v);
                    result.data.push({ labelName: args[i].label.toUpperCase() + '?', controlVal: v, controlType: args[i].controlType, display: args[i].display });
                break;
                case 'radio':
                    v = ko.observable(args[i].controlOptions[0].value);
                    v.controlValueType = args[i].controlValueType;
                    v_list.push(v);
                    result.data.push({ labelName: args[i].label.toUpperCase() + '?', controlVal: v, controlType: args[i].controlType, display: args[i].display, controlOptions: args[i].controlOptions });
                break;
                case 'method':
                case 'text':
                    // single input abilities
                    if (args[i].controls == undefined) {
                        if (args[i].noLevel) {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    var _ability = self.abilities().find(function(b) {
                                        return b.name() == data;
                                    });
                                    return self.getAbilityAttributeValue(_ability.attributes(), attributeName, 0);
                                })};
                            };
                        }
                        else {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    var _ability = self.abilities().find(function(b) {
                                        return b.name() == data;
                                    });
                                    return self.getAbilityAttributeValue(_ability.attributes(), attributeName, _ability.level());
                                })};
                            };
                        }
                        var g = attributeValue(args[i].attributeName)
                        var r = self.getComputedFunction(v, g.fn, args[i].fn, parent, index, self, args[i].returnProperty, undefined, data);
                        if (args[i].ignoreTooltip) {
                            var tooltip = args[i].label || args[i].attributeName;
                        }
                        else {
                            var tooltip = self.getAbilityAttributeTooltip(self.abilities()[index].attributes(), args[i].attributeName) || args[i].label || args[i].attributeName;
                        }
                        result.data.push({ labelName: tooltip.toUpperCase(), controlVal: r, controlType: args[i].controlType, display: args[i].display, clean: g.fn });
                    }
                    // multi input abilities
                    else {
                        if (args[i].noLevel) {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    return self.getAbilityAttributeValue(self.abilities()[index].attributes(), attributeName, 0);
                                })};
                            };
                        }
                        else {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    return self.getAbilityAttributeValue(self.abilities()[index].attributes(), attributeName, self.abilities()[index].level());
                                })};
                            };
                        }
                        var g = attributeValue(args[i].attributeName)
                        var r = self.getComputedFunction(v_list, g.fn, args[i].fn, parent, index, self, args[i].returnProperty, args[i].controls, data);
                        if (args[i].ignoreTooltip) {
                            var tooltip = args[i].label || args[i].attributeName;
                        }
                        else {
                            var tooltip = self.getAbilityAttributeTooltip(self.abilities()[index].attributes(), args[i].attributeName) || args[i].label || args[i].attributeName;
                        }
                        result.data.push({ labelName: tooltip.toUpperCase(), controlVal: r, controlType: args[i].controlType, display: args[i].display, clean: g.fn });
                    }
                    
                    if (args[i].controlType == 'method') {
                        v_list.push(r);
                    }
                break;
            }
        }
        self.abilityControlData[data] = result;
        return result;
    }

    self.getComputedFunction = function (v, attributeValue, fn, parent, index, abilityModel, returnProperty, controls, abilityName) {
        var _ability = abilityModel.abilities().find(function(b) {
            return b.name() == abilityName;
        });
        return ko.pureComputed(function () {                
            var inputValue;
            if (controls == undefined) {
                if (v == undefined) {
                    inputValue = v;
                }
                else if (typeof v() == 'boolean') {
                    inputValue = v();
                }
                else if (v.controlValueType == undefined) {
                    inputValue = parseFloat(v());
                }
                else if (v.controlValueType == 'string') {
                    inputValue = v();
                }
                else {
                    inputValue = parseFloat(v());
                }
            }
            else {
                var v_list = [];
                for (var i=0;i<controls.length;i++) {
                    switch (typeof v[controls[i]]()) {
                        case 'boolean':
                        case 'object':
                            v_list.push(v[controls[i]]());
                        break;
                        default:
                            v_list.push(parseFloat(v[controls[i]]()));
                        break;
                    }
                }
                inputValue = v_list;
            }
            
            var returnVal = fn.call(this, inputValue, attributeValue(), parent, index, abilityModel, _ability);
            if (returnProperty != undefined) {
                _ability[returnProperty](returnVal);
            }
            return returnVal;
        }, this);
    }

    self.getAbilityAttributeValue = function (attributes, attributeName, level) {
        for (var i=0; i < attributes.length; i++) {
            if (attributes[i].name() == attributeName) {
                if (level == 0) {
                    return parseFloat(attributes[i].value()[0]);
                }
                else if (level > attributes[i].value().length) {
                    return parseFloat(attributes[i].value()[0]);
                }
                else {
                    return parseFloat(attributes[i].value()[level-1]);
                }
            }
        }
    }

    self.getAbilityAttributeTooltip = function (attributes, attributeName) {
        for (var i=0; i<attributes.length; i++) {
            if (attributes[i].name() == attributeName) {
                if (attributes[i].hasOwnProperty('tooltip')) {
                    var d = attributes[i].tooltip().replace(/\\n/g, '');
                    return d;
                }
                else {
                    return '';
                }
            }
        }
        return '';
    }
    
    self.getAbilityLevelByAbilityName = function (abilityName) {
        for (var i = 0; i < self.abilities().length; i++) {
            if (self.abilities()[i].name() == abilityName) {
                return self.abilities()[i].level();
            }
        }
        return -1;
    }

    self.getAbilityByName = function (abilityName) {
        for (var i = 0; i < self.abilities().length; i++) {
            if (self.abilities()[i].name() == abilityName) {
                return self.abilities()[i];
            }
        }
        return undefined;
    }

    self.getAbilityPropertyValue = function (ability, property) {
        return parseFloat(ability[property]()[ability.level()-1]);
    }
    
    self.getAttributeBonusLevel = function () {
        for (var i = 0; i < self.abilities().length; i++) {
            if (self.abilities()[i].name() == 'attribute_bonus') {
                return self.abilities()[i].level();
            }
        }
        return 0;        
    }
    
    self.getAllStatsReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        /*switch(attribute.name()) {
                            // invoker_quas
                            case 'bonus_strength':
                                totalAttribute += parseInt(attribute.value()[ability.level()-1]);
                            break;
                        }*/
                    }
                }
            }
            else if (ability.bonusAllStatsReduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // slark_essence_shift
                    totalAttribute+=ability.bonusAllStatsReduction();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getStrengthReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        /*switch(attribute.name()) {
                            // invoker_quas
                            case 'bonus_strength':
                                totalAttribute += parseInt(attribute.value()[ability.level()-1]);
                            break;
                        }*/
                    }
                }
            }
            else if (ability.bonusStrength != undefined && ability.name() == 'undying_decay') {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // undying_decay
                    totalAttribute-=ability.bonusStrength();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getStrength = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        /*switch(attribute.name()) {
                            // invoker_quas
                            case 'bonus_strength':
                                totalAttribute += parseInt(attribute.value()[ability.level()-1]);
                            break;
                        }*/
                    }
                }
            }
            else {
                if (ability.bonusStrength != undefined) {
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1) || ability.name() == 'invoker_quas')) {
                        // pudge_flesh_heap,invoker_quas,morphling_morph_str,morphling_morph_agi,undying_decay
                        totalAttribute+=ability.bonusStrength();
                    }
                }
                if (ability.bonusStrength2 != undefined) {
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                        // morphling_morph_str
                        totalAttribute+=ability.bonusStrength2();
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAgility = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // drow_ranger_marksmanship
                            case 'marksmanship_agility_bonus':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else {
                if (ability.bonusAgility != undefined) {
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1) || ability.name() == 'invoker_wex')) {
                        // invoker_wex,morphling_morph_agi,morphling_morph_str
                        totalAttribute+=ability.bonusAgility();
                    }
                }
                if (ability.bonusAgility2 != undefined) {
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                        // invoker_wex,morphling_morph_agi,morphling_morph_str
                        totalAttribute+=ability.bonusAgility2();
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.getIntelligence = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // invoker_exort
                        /*    case 'bonus_intelligence':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;*/
                        }
                    }
                }
            }
            else if (ability.bonusInt != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1) || ability.name() == 'invoker_exort')) {
                    // invoker_exort
                    totalAttribute+=ability.bonusInt();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getArmor = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // axe_berserkers_call,dragon_knight_dragon_blood,troll_warlord_berserkers_rage,lycan_shapeshift,enraged_wildkin_toughness_aura
                            case 'bonus_armor':
                                if (ability.name() != 'templar_assassin_meld') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // sven_warcry
                            case 'warcry_armor':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // lich_frost_armor,ogre_magi_frost_armor
                            case 'armor_bonus':
                                if (ability.name() == 'lich_frost_armor' || ability.name() == 'ogre_magi_frost_armor') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.armor != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // shredder_reactive_armor,visage_gravekeepers_cloak
                    totalAttribute+=ability.armor();
                }
            }
        }
        return totalAttribute;
    });

    self.getArmorBaseReduction = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    switch(ability.name()) {
                        //elder_titan_natural_order
                        case 'elder_titan_natural_order':
                            totalAttribute *= (1-self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'armor_reduction_pct', ability.level())/100);
                        break;
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getArmorReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    switch(ability.name()) {
                        //templar_assassin_meld
                        case 'templar_assassin_meld':
                            totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'bonus_armor', ability.level());
                        break;
                        // tidehunter_gush
                        case 'tidehunter_gush':
                            totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'armor_bonus', ability.level());
                        break;
                        // naga_siren_rip_tide
                        case 'naga_siren_rip_tide':
                        // slardar_amplify_damage
                        case 'slardar_amplify_damage':
                        // vengefulspirit_wave_of_terror
                        case 'vengefulspirit_wave_of_terror':
                            totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'armor_reduction', ability.level());
                        break;
                        // nevermore_dark_lord
                        case 'nevermore_dark_lord':
                            totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'presence_armor_reduction', ability.level());
                        break;
                    }
                }
            }
            else if (ability.armorReduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // alchemist_acid_spray
                    totalAttribute+=ability.armorReduction();
                }
            }
        }
        return totalAttribute;
    });

    self.getHealth = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // lone_druid_true_form,lycan_shapeshift,troll_warlord_berserkers_rage
                            case 'bonus_hp':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // lone_druid_synergy
                            case 'true_form_hp_bonus':
                                if (self.isTrueFormActive()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.bonusHealth != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // clinkz_death_pact
                    totalAttribute+=ability.bonusHealth();
                }
            }
        }
        return totalAttribute;
    });
    
    self.isTrueFormActive = function () {
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (ability.isActive() && ability.name() == 'lone_druid_true_form') {
                return true;
            }
        }
        return false;
    }

    self.getHealthRegen = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // alchemist_chemical_rage, dragon_knight_dragon_blood
                            case 'bonus_health_regen':
                            // broodmother_spin_web
                            case 'heath_regen':
                            // omniknight_guardian_angel,treant_living_armor,satyr_hellcaller_unholy_aura
                            case 'health_regen':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // legion_commander_press_the_attack
                            case 'hp_regen':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else if (ability.healthregen != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // shredder_reactive_armor,invoker_quas,necrolyte_sadist
                    totalAttribute+=ability.healthregen();
                }
            }
        }
        return totalAttribute;
    });

    self.getMana = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // obsidian_destroyer_essence_aura
                            case 'bonus_mana':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getManaRegen = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // alchemist_chemical_rage
                            case 'bonus_mana_regen':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else if (ability.manaregen != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // necrolyte_sadist
                    totalAttribute+=ability.manaregen();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getManaRegenArcaneAura = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // crystal_maiden_brilliance_aura
                            case 'mana_regen':
                                if (ability.name() == 'crystal_maiden_brilliance_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.getManaRegenReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        //switch(attribute.name()) {
                        //    // 
                        //    case '':
                        //        totalAttribute += parseInt(attribute.value()[ability.level()-1]);
                        //    break;
                        //}
                    }
                }
            }
            else if (ability.manaregenreduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // pugna_nether_ward
                    totalAttribute+=ability.manaregenreduction();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAttackRange = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // winter_wyvern_arctic_burn
                            case 'attack_range_bonus':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // templar_assassin_psi_blades,sniper_take_aim
                            case 'bonus_attack_range':
                            // terrorblade_metamorphosis,troll_warlord_berserkers_rage
                            case 'bonus_range':
                                if (ability.name() == 'terrorblade_metamorphosis') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                                if (ability.name() == 'troll_warlord_berserkers_rage') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // tiny_grow
                            case 'bonus_range_scepter':
                                if (ability.name() == 'tiny_grow' && self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // enchantress_impetus
                            case 'bonus_attack_range_scepter':
                                if (ability.name() == 'enchantress_impetus' && self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                        }
                    }
                    // lone_druid_true_form
                    if (ability.name() == 'lone_druid_true_form') {
                        totalAttribute -= 422;
                    }
                }
                else if (ability.level() > 0 && ability.name() == 'enchantress_impetus' && self.hasScepter()) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                          case 'bonus_attack_range_scepter':
                            totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                          break;
                        }
                    }
                }
            }
            else if (ability.attackrange != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // dragon_knight_elder_dragon_form
                    totalAttribute+=ability.attackrange();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAttackSpeed = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // abaddon_frostmourne,troll_warlord_battle_trance
                            case 'attack_speed':
                            // visage_grave_chill
                            case 'attackspeed_bonus':
                            // mirana_leap
                            case 'leap_speedbonus_as':
                            // life_stealer
                            case 'attack_speed_bonus':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // clinkz_strafe,ursa_overpower
                            case 'attack_speed_bonus_pct':
                                if (ability.name() == 'clinkz_strafe' || ability.name() == 'ursa_overpower') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // axe_culling_blade,necronomicon_archer_aoe
                            case 'speed_bonus':
                                if (ability.name() == 'axe_culling_blade' || ability.name() == 'necronomicon_archer_aoe') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // ancient_apparition_chilling_touch
                            case 'attack_speed_pct':
                                if (ability.name() == 'ancient_apparition_chilling_touch') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // beastmaster_inner_beast,lycan_feral_impulse,lone_druid_rabid,tiny_grow,phantom_assassin_phantom_strike,windrunner_focusfire,ogre_magi_bloodlust,centaur_khan_endurance_aura
                            case 'bonus_attack_speed':
                                if (ability.name() == 'beastmaster_inner_beast' 
                                 || ability.name() == 'lycan_feral_impulse' 
                                 || ability.name() == 'lone_druid_rabid' 
                                 || ability.name() == 'tiny_grow' 
                                 || ability.name() == 'phantom_assassin_phantom_strike' 
                                 || ability.name() == 'windrunner_focusfire' 
                                 || ability.name() == 'ogre_magi_bloodlust'
                                 || ability.name() == 'centaur_khan_endurance_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.attackspeed != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // troll_warlord_fervor,wisp_overcharge,lina_fiery_soul,invoker_alacrity,invoker_wex,huskar_berserkers_blood
                    totalAttribute+=ability.attackspeed();
                }
            }
        }
        return totalAttribute;
    });

    self.getAttackSpeedReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // night_stalker_void,crystal_maiden_crystal_nova,ghost_frost_attack,ogre_magi_frost_armor,polar_furbolg_ursa_warrior_thunder_clap
                            case 'attackspeed_slow':
                            // lich_frost_armor,lich_frost_nova,enchantress_untouchable
                            case 'slow_attack_speed':
                            // beastmaster_primal_roar
                            case 'slow_attack_speed_pct':
                            // storm_spirit_overload
                            case 'overload_attack_slow':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // omniknight_degen_aura
                            case 'speed_bonus':
                                if (ability.name() == 'omniknight_degen_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // tusk_frozen_sigil,crystal_maiden_freezing_field
                            case 'attack_slow':
                                if (ability.name() == 'crystal_maiden_freezing_field' && !self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                                else if (ability.name() == 'tusk_frozen_sigil') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            case 'attack_slow_scepter':
                                if (ability.name() == 'crystal_maiden_freezing_field' && self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // faceless_void_time_walk
                            case 'attack_speed_pct':
                                if (ability.name() == 'faceless_void_time_walk') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // bounty_hunter_jinada
                            case 'bonus_attackspeed':
                                if (ability.name() == 'bounty_hunter_jinada') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // brewmaster_thunder_clap
                            case 'attack_speed_slow':
                                if (ability.name() == 'brewmaster_thunder_clap') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // medusa_stone_gaze
                            case 'slow':
                                if (ability.name() == 'medusa_stone_gaze') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // visage_grave_chill
                            case 'attackspeed_bonus':
                                totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                            // abaddon_frostmourne
                            case 'attack_slow_tooltip':
                                if (ability.name() == 'abaddon_frostmourne') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                        }
                    }
                    if (ability.name() == 'enraged_wildkin_tornado') {
                        totalAttribute -= 15;
                    }
                }
            }
            else if (ability.attackspeedreduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // viper_viper_strike,viper_corrosive_skin,jakiro_liquid_fire,lich_chain_frost,sandking_epicenter,earth_spirit_rolling_boulder
                    totalAttribute+=ability.attackspeedreduction();
                }
            }
        }
        return totalAttribute;
    });
    self.getBash = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // slardar_bash
                            case 'chance':
                            // sniper_headshot
                            case 'proc_chance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                        }
                    }
                }
            }
            else if (ability.bash != undefined) {
                // spirit_breaker_greater_bash,faceless_void_time_lock
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    totalAttribute *= (1 - ability.bash()/100);
                }
            }
        }
        return totalAttribute;
    });    
    self.getBaseDamage = ko.computed(function () {
        var totalAttribute = 0;
        var totalMultiplier = 1;
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // tiny_grow,terrorblade_metamorphosis
                            case 'bonus_damage':
                                if (ability.name() == 'tiny_grow' || ability.name() == 'terrorblade_metamorphosis') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                        }
                    }
                }
            }
            else {
                if (ability.baseDamageMultiplier != undefined) {
                    // earthshaker_enchant_totem
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                        totalMultiplier += ability.baseDamageMultiplier()/100;
                        /*totalAttribute += ability.baseDamage();
                        sources[ability.name()] = {
                            'damage': ability.baseDamage(),
                            'damageType': 'physical',
                            'displayname': ability.displayname()
                        }*/
                    }
                }
                if (ability.baseDamage != undefined) {
                    // clinkz_death_pact
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                        totalAttribute += ability.baseDamage();
                        sources[ability.name()] = {
                            'damage': ability.baseDamage(),
                            'damageType': 'physical',
                            'displayname': ability.displayname()
                        }
                    }
                }
            }
        }
        return { sources: sources, total: totalAttribute, multiplier: totalMultiplier };
    });
    
    self.getSelfBaseDamageReductionPct = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // medusa_split_shot
                            case 'damage_modifier':
                                totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                            // windrunner_focusfire
                            case 'focusfire_damage_reduction':
                                if (!self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                            case 'focusfire_damage_reduction_scepter':
                                if (self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getBaseDamageReductionPct = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // vengefulspirit_command_aura
                            case 'bonus_damage_pct':
                                if (ability.name() == 'vengefulspirit_command_aura') {
                                    totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.baseDamageReductionPct != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // nevermore_requiem
                    totalAttribute *= (1 + ability.baseDamageReductionPct()/100);
                }
            }
        }
        return totalAttribute;
    });
    
    self.getBAT = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // troll_warlord_berserkers_rage,alchemist_chemical_rage,lone_druid_true_form,lycan_shapeshift
                            case 'base_attack_time':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    self.getBonusDamage = ko.computed(function () {
        var totalAttribute = 0;
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // broodmother_insatiable_hunger,luna_lunar_blessing,templar_assassin_refraction,templar_assassin_meld,troll_warlord_berserkers_rage,lone_druid_true_form_battle_cry
                            case 'bonus_damage':
                                if (ability.name() == 'broodmother_insatiable_hunger' || ability.name() == 'luna_lunar_blessing'
                                 || ability.name() == 'templar_assassin_refraction' || ability.name() == 'templar_assassin_meld'
                                 || ability.name() == 'troll_warlord_berserkers_rage' || ability.name() == 'lone_druid_true_form_battle_cry') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                            // lycan_howl
                            case 'hero_bonus_damage':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                sources[ability.name()] = {
                                    'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level()),
                                    'damageType': 'physical',
                                    'displayname': ability.displayname()
                                }
                            break;
                        }
                    }
                    if (ability.name() == 'storm_spirit_overload') {
                        totalAttribute += self.getAbilityPropertyValue(ability, 'damage');
                        sources[ability.name()] = {
                            'damage': self.getAbilityPropertyValue(ability, 'damage'),
                            'damageType': 'magic',
                            'displayname': ability.displayname()
                        }                        
                    }
                }
            }
            else if (ability.bonusDamage != undefined && ability.bonusDamage() != 0) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // nevermore_necromastery,ursa_fury_swipes,ursa_enrage,invoker_alacrity,invoker_exort,elder_titan_ancestral_spirit,spectre_desolate,razor_static_link
                    totalAttribute+=ability.bonusDamage();
                    sources[ability.name()] = {
                        'damage': ability.bonusDamage(),
                        'damageType': ability.name() == 'spectre_desolate' ? 'pure' : 'physical',
                        'displayname': ability.displayname()
                    }
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    });

    self.getBonusDamagePercent = ko.computed(function () {
        var totalAttribute = 0;
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // bloodseeker_bloodrage
                            case 'damage_increase_pct':
                                if (ability.name() == 'bloodseeker_bloodrage') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                            // magnataur_empower,vengefulspirit_command_aura,alpha_wolf_command_aura
                            case 'bonus_damage_pct':
                                if (ability.name() == 'magnataur_empower' || ability.name() == 'vengefulspirit_command_aura' || ability.name() == 'alpha_wolf_command_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                            // sven_gods_strength
                            case 'gods_strength_damage':
                                if (ability.name() == 'sven_gods_strength' && self.hero != undefined && self.hero.heroId() == 'sven') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                            case 'gods_strength_damage_scepter':
                                if (ability.name() == 'sven_gods_strength' && self.hero == undefined) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.bonusDamagePct != undefined && ability.bonusDamagePct() != 0) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // bloodseeker_bloodrage
                    /*totalAttribute+=ability.bonusDamagePct()/100;
                    sources[ability.name()] = {
                        'damage': ability.bonusDamagePct()/100,
                        'damageType': 'physical',
                        'displayname': ability.displayname()
                    }*/
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    });

    self.getBonusDamageBackstab = ko.computed(function () {
        var totalAttribute1 = 0;
        var totalAttribute2 = 0;
        var sources = [];
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (ability.name() == 'riki_backstab') {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // riki_backstab
                            case 'damage_multiplier':
                                totalAttribute1 += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                sources.push({
                                    'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level()),
                                    'damageType': 'physical',
                                    'displayname': ability.displayname()
                                });
                            break;
                        }
                    }/*
                    if (ability.bonusDamageBackstab != undefined) {
                        console.log('bonusDamageBackstab');
                        // damage_multiplier
                        totalAttribute2+=ability.bonusDamageBackstab();
                        sources.push({
                            'damage': ability.bonusDamageBackstab(),
                            'damageType': 'physical',
                            'displayname': ability.displayname()
                        });
                    }
                    */
                }
            }
        }
        return { sources: sources, total: [totalAttribute1,totalAttribute2] };
    });
    
    self.getBonusDamagePrecisionAura = ko.computed(function () {
        var totalAttribute1 = 0;
        var totalAttribute2 = 0;
        var sources = [];
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (ability.name() == 'drow_ranger_trueshot') {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // drow_ranger_trueshot
                            case 'trueshot_ranged_damage':
                                totalAttribute1 += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                sources.push({
                                    'damage': self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100,
                                    'damageType': 'physical',
                                    'displayname': ability.displayname()
                                });
                            break;
                        }
                    }
                    if (ability.bonusDamagePrecisionAura != undefined) {
                        // drow_ranger_trueshot
                        totalAttribute2+=ability.bonusDamagePrecisionAura();
                        sources.push({
                            'damage': ability.bonusDamagePrecisionAura(),
                            'damageType': 'physical',
                            'displayname': ability.displayname()
                        });
                    }
                }
            }
        }
        return { sources: sources, total: [totalAttribute1,totalAttribute2] };
    });
    
    self.getBonusDamageReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // bane_enfeeble
                            case 'enfeeble_attack_reduction':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else if (ability.bonusDamageReduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // rubick_fade_bolt,razor_static_link
                    totalAttribute+=ability.bonusDamageReduction();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getBonusDamageReductionPct = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // medusa_split_shot
                            case 'damage_modifier':
                                totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                            // windrunner_focusfire
                            case 'focusfire_damage_reduction':
                                if (!self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                            case 'focusfire_damage_reduction_scepter':
                                if (self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.getDamageAmplification = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                /*if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // bane_enfeeble
                            case 'enfeeble_attack_reduction':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }*/
            }
            else if (ability.damageAmplification != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // undying_flesh_golem
                    totalAttribute *= (1 + ability.damageAmplification()/100);
                }
            }
        }
        return totalAttribute;
    });
    
    self.getDamageReduction = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // bloodseeker_bloodrage
                            case 'damage_increase_pct':
                                if (ability.name() == 'bloodseeker_bloodrage') {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                        }
                    }
                    // kunkka_ghostship
                    if (ability.name() == 'kunkka_ghostship') {
                        totalAttribute *= (1 - 50/100);
                    }
                }
            }
            else if (ability.damageReduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // wisp_overcharge,bristleback_bristleback,spectre_dispersion,medusa_mana_shield,ursa_enrage
                    totalAttribute *= (1 + ability.damageReduction()/100);
                }
            }
        }
        return totalAttribute;
    });

    self.getCritSource = ko.computed(function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    switch(ability.name()) {
                        // phantom_assassin_coup_de_grace,brewmaster_drunken_brawler,chaos_knight_chaos_strike,lycan_shapeshift,skeleton_king_mortal_strike,juggernaut_blade_dance,alpha_wolf_critical_strike,giant_wolf_critical_strike
                        case 'phantom_assassin_coup_de_grace':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'chance': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_bonus', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        case 'brewmaster_drunken_brawler':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'chance': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_multiplier', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        case 'chaos_knight_chaos_strike':
                        case 'lycan_shapeshift':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'chance': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_multiplier', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        case 'skeleton_king_mortal_strike':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'chance': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_mult', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        case 'juggernaut_blade_dance':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'chance': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'blade_dance_crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'blade_dance_crit_mult', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        case 'alpha_wolf_critical_strike':
                        case 'giant_wolf_critical_strike':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'chance': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'crit_mult', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                    }
                }
            }
        }
        return sources;
    });    

    self.getCleaveSource = ko.computed(function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    switch(ability.name()) {
                        // magnataur_empower
                        case 'magnataur_empower':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'radius': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'cleave_radius', ability.level()),
                                    'magnitude': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'cleave_damage_pct', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        // sven_great_cleave
                        case 'sven_great_cleave':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'radius': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'great_cleave_radius', ability.level()),
                                    'magnitude': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'great_cleave_damage', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        // kunkka_tidebringer
                        case 'kunkka_tidebringer':
                            if (sources[ability.name()] == undefined) {
                                sources[ability.name()] = {
                                    'radius': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'radius', ability.level()),
                                    'magnitude': 1,
                                    'count': 1,
                                    'displayname': ability.displayname()
                                }
                            }
                            else {
                                sources[ability.name()].count += 1;
                            }
                        break;
                        // tiny_grow
                        case 'tiny_grow':
                            if (self.hasScepter()) {
                                if (sources[ability.name()] == undefined) {
                                    sources[ability.name()] = {
                                        'radius': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'bonus_cleave_radius_scepter', ability.level()),
                                        'magnitude': self.getAbilityAttributeValue(self.abilities()[i].attributes(), 'bonus_cleave_damage_scepter', ability.level())/100,
                                        'count': 1,
                                        'displayname': ability.displayname()
                                    }
                                }
                                else {
                                    sources[ability.name()].count += 1;
                                }
                            }
                        break;
                    }
                }
            }
        }
        return sources;
    });    
    
    self.getCritChance = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // phantom_assassin_coup_de_grace,brewmaster_drunken_brawler,chaos_knight_chaos_strike,lycan_shapeshift,skeleton_king_mortal_strike
                            case 'crit_chance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });            
    
    self.getEvasion = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // phantom_assassin_blur
                            case 'bonus_evasion':
                            // brewmaster_drunken_brawler
                            case 'dodge_chance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getEvasionBacktrack = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // faceless_void_backtrack
                            case 'dodge_chance_pct':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMissChance = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // broodmother_incapacitating_bite,brewmaster_drunken_haze
                            case 'miss_chance':
                            // riki_smoke_screen,keeper_of_the_light_blinding_light,tinker_laser
                            case 'miss_rate':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                        }
                    }
                }
            }
            else if (ability.missChance != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // night_stalker_crippling_fear
                    totalAttribute*=(1-ability.missChance()/100);
                }
            }
        }
        return totalAttribute;
    });
    
    self.getLifesteal = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // skeleton_king_vampiric_aura
                            case 'vampiric_aura':
                            // broodmother_insatiable_hunger
                            case 'lifesteal_pct':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else if (ability.lifesteal != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // life_stealer_open_wounds
                    totalAttribute+=ability.lifesteal();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMagicResist = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // antimage_spell_shield
                            case 'spell_shield_resistance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                            // phantom_lancer_phantom_edge
                            case 'magic_resistance_pct':
                                if (ability.name() == 'phantom_lancer_phantom_edge') {
                                    totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                            // rubick_null_field
                            case 'magic_damage_reduction_pct':
                                if (ability.name() == 'rubick_null_field') {
                                    totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.magicResist != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // huskar_berserkers_blood,viper_corrosive_skin,visage_gravekeepers_cloak
                    totalAttribute *= (1 - ability.magicResist()/100);
                }
            }
        }
        return totalAttribute;
    });

    self.getMagicResistReduction = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // ancient_apparition_ice_vortex
                            case 'spell_resist_pct':
                            // pugna_decrepify
                            case 'bonus_spell_damage_pct':
                            // skywrath_mage_ancient_seal
                            case 'resist_debuff':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                            // elder_titan_natural_order
                            case 'magic_resistance_pct':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMovementSpeedFlat = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // alchemist_chemical_rage
                            case 'bonus_movespeed':
                                if (ability.name() == 'alchemist_chemical_rage') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // tiny_grow
                            case 'bonus_movement_speed':
                                if (ability.name() == 'tiny_grow') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }
                            break;
                            // troll_warlord_berserkers_rage
                            case 'bonus_move_speed':
                                if (ability.name() == 'troll_warlord_berserkers_rage') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                                }                                
                            break;
                            // lone_druid_true_form
                            case 'speed_loss':
                                totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else if (ability.movementSpeedFlat != undefined) {
                // dragon_knight_elder_dragon_form
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    totalAttribute+=ability.movementSpeedFlat();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMovementSpeedPercent = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // abaddon_frostmourne 
                            case 'move_speed_pct':
                            // bounty_hunter_track 
                            case 'bonus_move_speed_pct':
                            // mirana_leap 
                            case 'leap_speedbonus':
                            // sven_warcry 
                            case 'warcry_movespeed':
                            // clinkz_wind_walk
                            case 'move_speed_bonus_pct':
                            // windrunner_windrun
                            case 'movespeed_bonus_pct':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                            break;
                            // broodmother_spin_web,spectre_spectral_dagger
                            case 'bonus_movespeed':
                                if (ability.name() == 'broodmother_spin_web' || ability.name() == 'spectre_spectral_dagger') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // axe_culling_blade,necronomicon_archer_aoe
                            case 'speed_bonus':
                                if (ability.name() == 'axe_culling_blade' || ability.name() == 'necronomicon_archer_aoe') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // nyx_assassin_vendetta 
                            case 'movement_speed':
                                if (ability.name() == 'nyx_assassin_vendetta') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // spirit_breaker_empowering_haste
                            case 'bonus_movespeed_pct':
                                if (ability.name() == 'spirit_breaker_empowering_haste') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // ogre_magi_bloodlust,death_prophet_witchcraft,kobold_taskmaster_speed_aura
                            case 'bonus_movement_speed':
                                if (ability.name() == 'ogre_magi_bloodlust' || ability.name() == 'death_prophet_witchcraft' || ability.name() == 'kobold_taskmaster_speed_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // razor_unstable_current,phantom_lancer_doppelwalk
                            case 'movement_speed_pct':
                                if (ability.name() == 'razor_unstable_current' || ability.name() == 'phantom_lancer_doppelwalk') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // treant_natures_guise,lone_druid_rabid
                            case 'bonus_move_speed':
                                if (ability.name() == 'treant_natures_guise' || ability.name() == 'lone_druid_rabid') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // wisp_tether
                            case 'movespeed':
                                if (ability.name() == 'wisp_tether') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // kunkka_ghostship,visage_grave_chill
                            case 'movespeed_bonus':
                                if (ability.name() == 'kunkka_ghostship' || ability.name() == 'visage_grave_chill') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }                                
                            break;
                        }
                    }
                }
            }
            else if (ability.movementSpeedPct != undefined) {
                // axe_battle_hunger,bristleback_warpath,spirit_breaker_greater_bash,lina_fiery_soul,invoker_ghost_walk,invoker_wex,elder_titan_ancestral_spirit
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    totalAttribute+=ability.movementSpeedPct()/100;
                }
            }
        }
        return totalAttribute;
    });

    self.getMovementSpeedPercentReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // crystal_maiden_freezing_field
                            case 'movespeed_slow':
                                if (ability.name() == 'crystal_maiden_freezing_field' && !self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            case 'movespeed_slow_scepter':
                                if (ability.name() == 'crystal_maiden_freezing_field' && self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // elder_titan_earth_splitter,magnataur_skewer,abaddon_frostmourne 
                            case 'slow_pct':
                                totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                            break;
                            // night_stalker_void,crystal_maiden_crystal_nova,ghost_frost_attack,ogre_magi_frost_armor,polar_furbolg_ursa_warrior_thunder_clap
                            case 'movespeed_slow':
                                if (ability.name() != 'crystal_maiden_freezing_field') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // lich_frost_armor,lich_frost_nova,enchantress_enchant
                            case 'slow_movement_speed':
                            // beastmaster_primal_roar
                            case 'slow_movement_speed_pct':
                            // drow_ranger_frost_arrows
                            case 'frost_arrows_movement_speed':
                            // skeleton_king_hellfire_blast
                            case 'blast_slow':
                            // slardar_slithereen_crush
                            case 'crush_extra_slow':
                            // storm_spirit_overload:
                            case 'overload_move_slow':
                            // windrunner_windrun
                            case 'enemy_movespeed_bonus_pct':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                            break;
                            // phantom_assassin_stifling_dagger,tusk_frozen_sigil
                            case 'move_slow':
                                if (ability.name() == 'phantom_assassin_stifling_dagger') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                                else if (ability.name() == 'tusk_frozen_sigil') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // invoker_ice_wall,medusa_stone_gaze,wisp_tether
                            case 'slow':
                                if (ability.name() == 'medusa_stone_gaze') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                                else {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // broodmother_incapacitating_bite,bounty_hunter_jinada,spectre_spectral_dagger,winter_wyvern_arctic_burn
                            case 'bonus_movespeed':
                                if (ability.name() == 'broodmother_incapacitating_bite' || ability.name() == 'bounty_hunter_jinada' || ability.name() == 'winter_wyvern_arctic_burn' || ability.name() == 'winter_wyvern_splinter_blast') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                                else if (ability.name() == 'spectre_spectral_dagger') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // omniknight_degen_aura
                            case 'speed_bonus':
                                if (ability.name() == 'omniknight_degen_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // tidehunter_gush
                            case 'movement_speed':
                                if (ability.name() == 'tidehunter_gush') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // pugna_decrepify,chen_penitence
                            case 'bonus_movement_speed':
                                if (ability.name() == 'pugna_decrepify' || ability.name() == 'chen_penitence') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // ancient_apparition_ice_vortex,phantom_lancer_spirit_lance,skywrath_mage_concussive_shot,faceless_void_time_walk
                            case 'movement_speed_pct':
                                if (ability.name() == 'ancient_apparition_ice_vortex' || ability.name() == 'phantom_lancer_spirit_lance' || ability.name() == 'faceless_void_time_walk') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                                else if (ability.name() == 'skywrath_mage_concussive_shot') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // razor_unstable_current
                            case 'slow_amount':
                                if (ability.name() == 'razor_unstable_current') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // brewmaster_drunken_haze,brewmaster_thunder_clap,treant_leech_seed
                            case 'movement_slow':
                                if (ability.name() == 'brewmaster_drunken_haze' || ability.name() == 'brewmaster_thunder_clap') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                                else if (ability.name() == 'ursa_earthshock' || ability.name() == 'treant_leech_seed') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // skeleton_king_reincarnation
                            case 'movespeed':
                                if (ability.name() == 'skeleton_king_reincarnation') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                            // kunkka_torrent,visage_grave_chill
                            case 'movespeed_bonus':
                                if (ability.name() == 'kunkka_torrent') {
                                    totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                                else if (ability.name() == 'visage_grave_chill') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                        }
                    }
                    if (ability.name() == 'satyr_trickster_purge') {
                        totalAttribute -= 80/100;
                    }
                    else if (ability.name() == 'enraged_wildkin_tornado') {
                        totalAttribute -= 15/100;
                    }
                }
            }
            else if (ability.movementSpeedPctReduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // axe_battle_hunger,batrider_sticky_napalm,shredder_chakram,meepo_geostrike,life_stealer_open_wounds,
                    // venomancer_poison_sting,viper_viper_strike,viper_corrosive_skin,viper_poison_attack,venomancer_venomous_gale,treant_leech_seed
                    // lich_chain_frost,sniper_shrapnel,centaur_stampede,huskar_life_break,jakiro_dual_breath,meepo_geostrike,sandking_epicenter
                    // earth_spirit_rolling_boulder,invoker_ghost_walk,invoker_ice_wall,elder_titan_earth_splitter
                    // undying_flesh_golem,templar_assassin_psionic_trap,nevermore_requiem,queenofpain_shadow_strike
                    totalAttribute+=ability.movementSpeedPctReduction()/100;
                }
            }
        }
        return totalAttribute;
    });

    self.getTurnRateReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // medusa_stone_gaze
                            case 'slow':
                                if (ability.name() == 'medusa_stone_gaze') {
                                    totalAttribute -= self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.turnRateReduction != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // batrider_sticky_napalm
                    totalAttribute+=ability.turnRateReduction()/100;
                }
            }
        }
        return totalAttribute;
    });
    
    self.getVisionRangeNight = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // winter_wyvern_arctic_burn
                            case 'night_vision_bonus':
                            // lycan_shapeshift,luna_lunar_blessing
                            case 'bonus_night_vision':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level());
                            break;
                        }
                    }
                }
            }
            else if (ability.visionnight != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // 
                    totalAttribute+=ability.visionnight();
                }
            }
        }
        return totalAttribute;
    });

    self.getVisionRangePctReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // night_stalker_darkness
                            case 'blind_percentage':
                                totalAttribute += self.getAbilityAttributeValue(self.abilities()[i].attributes(), attribute.name(), ability.level())/100;
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.setEvasion = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (ability.name() == 'windrunner_windrun') {
                    return 1;
                }
            }
        }
        return totalAttribute;
    });
    
    self.setMovementSpeed = ko.computed(function () {
        var MAX_MOVESPEED = 522;
        var MIN_MOVESPEED = 100;
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (ability.name() == 'spirit_breaker_charge_of_darkness') {
                    return self.getAbilityAttributeValue(ability.attributes(), 'movement_speed', ability.level());
                }
                if (ability.name() == 'dark_seer_surge') {
                    return MAX_MOVESPEED;
                }
                if (ability.name() == 'centaur_stampede') {
                    return MAX_MOVESPEED;
                }
                if (ability.name() == 'lycan_shapeshift') {
                    return MAX_MOVESPEED;
                }
                if (ability.name() == 'lion_voodoo' || ability.name() == 'shadow_shaman_voodoo') {
                    return MIN_MOVESPEED;
                }
            }
        }
        return totalAttribute;
    });

    self.getBashSource = function (attacktype) {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // sniper_headshot
                            case 'proc_chance':
                                if (sources[ability.name()] == undefined && ability.name() == 'sniper_headshot') {
                                    sources[ability.name()] = {
                                        'chance': self.getAbilityAttributeValue(ability.attributes(), attribute.name(), ability.level())/100,
                                        'damage': self.getAbilityPropertyValue(ability, 'damage'),
                                        'count': 1,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                            // slardar_bash
                            case 'chance':
                                if (sources[ability.name()] == undefined && ability.name() == 'slardar_bash') {
                                    sources[ability.name()] = {
                                        'chance': self.getAbilityAttributeValue(ability.attributes(), attribute.name(), ability.level())/100,
                                        'damage': self.getAbilityAttributeValue(ability.attributes(), 'bonus_damage', ability.level()),
                                        'count': 1,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.bashBonusDamage != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // faceless_void_time_lock
                    if (sources[ability.name()] == undefined && ability.name() == 'faceless_void_time_lock') {
                        sources[ability.name()] = {
                            'chance': ability.bash()/100,
                            'damage': ability.bashBonusDamage(),
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': ability.displayname()
                        }
                    }
                    // spirit_breaker_greater_bash
                    if (sources[ability.name()] == undefined && ability.name() == 'spirit_breaker_greater_bash') {
                        sources[ability.name()] = {
                            'chance': ability.bash()/100,
                            'damage': ability.bashBonusDamage()/100,
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': ability.displayname()
                        }
                    }
                }
            }
        }

        return sources;
    };
    
    self.getOrbSource = function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self.abilities()[i];
            if (!(ability.name() in self.abilityData)) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self.abilities()[i].attributes().length; j++) {
                        var attribute = self.abilities()[i].attributes()[j];
                        switch(attribute.name()) {
                            // antimage_mana_break
                            case 'mana_per_hit':
                                if (sources[ability.name()] == undefined && ability.name() == 'antimage_mana_break') {
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(ability.attributes(), attribute.name(), ability.level()) 
                                                * self.getAbilityAttributeValue(ability.attributes(), 'damage_per_burn', ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                            // clinkz_searing_arrows
                            case 'damage_bonus':
                                if (sources[ability.name()] == undefined && ability.name() == 'clinkz_searing_arrows') {
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(ability.attributes(), attribute.name(), ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname()
                                    }
                                }
                            // silencer_glaives_of_wisdom
                            case 'intellect_damage_pct':
                                if (sources[ability.name()] == undefined && ability.name() == 'silencer_glaives_of_wisdom') {
                                    sources[ability.name()] = {
                                        'damage': self.getAbilityAttributeValue(ability.attributes(), attribute.name(), ability.level())/100 * self.hero.totalInt(),
                                        'damageType': 'pure',
                                        'displayname': ability.displayname()
                                    }
                                }
                            break;
                        }
                    }
                }
            }
            else if (ability.bonusDamageOrb != undefined) {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    // obsidian_destroyer_arcane_orb
                    if (sources[ability.name()] == undefined && ability.name() == 'obsidian_destroyer_arcane_orb') {
                        sources[ability.name()] = {
                            'damage': ability.bonusDamageOrb(),
                            'damageType': 'pure',
                            'displayname': ability.displayname()
                        }
                    }
                }
            }
        }
        
        return sources;
    };
    
    self.toggleAbility = function (index, data, event) {
        if (self.abilities()[index()].behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') < 0) {
            if (self.abilities()[index()].isActive()) {
                self.abilities()[index()].isActive(false);
            }
            else {
                self.abilities()[index()].isActive(true);
            }
            
            if (self.abilities()[index()].name() == 'lycan_shapeshift') {
                self.isShapeShiftActive(self.abilities()[index()].isActive());
            }
        }
    }.bind(this);

    self.toggleAbilityDetail = function (index, data, event) {
        if (self.abilities()[index()].isDetail()) {
            self.abilities()[index()].isDetail(false);
        }
        else {
            self.abilities()[index()].isDetail(true);
        }
    }.bind(this);
    
    self.getAbility = function (abilityName) {
        return self.abilities().find(function(b) {
            return b.name() == abilityName;
        });
    }
}

my.prototype.AbilityModel.prototype.levelUpAbility = function (index, data, event, hero) {
    var self = this;
    if (self.abilities()[index()].level() < hero.getAbilityLevelMax(data) && hero.availableSkillPoints() > 0 ) {
        switch(self.abilities()[index()].abilitytype()) {
            case 'DOTA_ABILITY_TYPE_ULTIMATE':
                if (hero.heroId() == 'invoker') {
                    if (
                        (self.abilities()[index()].level() == 0) && (parseInt(hero.selectedHeroLevel()) >= 2) ||
                        (self.abilities()[index()].level() == 1) && (parseInt(hero.selectedHeroLevel()) >= 7) ||
                        (self.abilities()[index()].level() == 2) && (parseInt(hero.selectedHeroLevel()) >= 11) ||
                        (self.abilities()[index()].level() == 3) && (parseInt(hero.selectedHeroLevel()) >= 17)
                    ) {
                        self.abilities()[index()].level(self.abilities()[index()].level()+1);
                        hero.skillPointHistory.push(index());
                    }
                }
                else if (hero.heroId() == 'meepo') {
                    if (self.abilities()[index()].level() * 7 + 3 <= parseInt(hero.selectedHeroLevel())) {
                        self.abilities()[index()].level(self.abilities()[index()].level()+1);
                        hero.skillPointHistory.push(index());
                    }
                }
                else {
                    if ((self.abilities()[index()].level()+1) * 5 + 1 <= parseInt(hero.selectedHeroLevel())) {
                        self.abilities()[index()].level(self.abilities()[index()].level()+1);
                        hero.skillPointHistory.push(index());
                    }
                }
            break;
            default:
                if (self.abilities()[index()].level() * 2 + 1 <= parseInt(hero.selectedHeroLevel())) {
                    self.abilities()[index()].level(self.abilities()[index()].level()+1);
                    hero.skillPointHistory.push(index());
                }
            break;
        }
        switch (self.abilities()[index()].name()) {
            case 'beastmaster_call_of_the_wild':
            case 'chen_test_of_faith':
            case 'morphling_morph_agi':
            case 'shadow_demon_shadow_poison':
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
            break;
            case 'morphling_morph_str':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
            case 'keeper_of_the_light_spirit_form':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() - 2].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze1':
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
                self.abilities()[index() + 2].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze2':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze3':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() - 2].level(self.abilities()[index()].level());
            break;
            case 'ember_spirit_fire_remnant':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
            case 'lone_druid_true_form':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
        }
    }
};
my.prototype.AbilityModel.prototype.levelDownAbility = function (index, data, event, hero) {
    var self = this;
    if (self.abilities()[index()].level() > 0) {
        self.abilities()[index()].level(self.abilities()[index()].level() - 1);
        hero.skillPointHistory.splice(hero.skillPointHistory().lastIndexOf(index()), 1);
        switch (self.abilities()[index()].name()) {
            case 'beastmaster_call_of_the_wild':
            case 'chen_test_of_faith':
            case 'morphling_morph_agi':
            case 'shadow_demon_shadow_poison':
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
            break;
            case 'morphling_morph_str':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
            case 'keeper_of_the_light_spirit_form':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() - 2].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze1':
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
                self.abilities()[index() + 2].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze2':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze3':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() - 2].level(self.abilities()[index()].level());
            break;
            case 'ember_spirit_fire_remnant':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
            case 'lone_druid_true_form':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
        }
    }
};
},{"./herocalc_core":47,"./herocalc_knockout":53}],45:[function(require,module,exports){
'use strict';
    
var my = require("./herocalc_core");

my.prototype.abilityData = {
    'alchemist_acid_spray': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'armor_reduction',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'armorReduction'
        }
    ],
    'alchemist_unstable_concoction': [
        {
            label: 'Brew Time',
            controlType: 'input'
        },
        {
            attributeName: 'max_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/5;
            }
        },
        {
            attributeName: 'max_stun',
            label: 'Total Stun',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/5;
            }
        }
    ],
    'ancient_apparition_cold_feet': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'stun_duration',
            label: 'Total Stun',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        }
    ],
    'ancient_apparition_ice_blast': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'dot_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')+v*a;
            }
        }
    ],
    'antimage_mana_void': [
        {
            label: 'Enemy Missing Mana',
            controlType: 'input'
        },
        {
            attributeName: 'mana_void_damage_per_mana',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'axe_battle_hunger': [
        {
            label: 'Battle Hungered Enemies',
            controlType: 'input'
        },
        {
            attributeName: 'speed_bonus',
            label: 'Movement Speed Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'slow',
            label: 'Movement Speed Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'bane_nightmare': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'bane_fiends_grip': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Mana',
            controlType: 'input'
        },
        {
            attributeName: 'fiend_grip_damage',
            label: 'Total Damage',
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    return v[0]*abilityModel.getAbilityAttributeValue(ability.attributes(), 'fiend_grip_damage_scepter',ability.level());
                }
                else {
                    return v[0]*a;
                }
            }
        },
        {
            attributeName: 'fiend_grip_mana_drain',
            label: 'Total Mana Drain',
            controlType: 'text',
            controls: [0,1],
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    return v[0]*v[1]*abilityModel.getAbilityAttributeValue(ability.attributes(), 'fiend_grip_mana_drain_scepter',ability.level())/100;
                }
                else {
                    return v[0]*v[1]*a/100;
                }
            }
        }
    ],
    'batrider_sticky_napalm': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Bonus Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        },
        {
            attributeName: 'movement_speed_pct',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'turn_rate_pct',
            label: 'Enemy Turn Rate Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'turnRateReduction'
        }
    ],
    'batrider_firefly': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'bloodseeker_rupture': [
        {
            label: 'Enemy Distance Traveled',
            controlType: 'input'
        },
        {
            attributeName: 'movement_damage_pct',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage') + v*a/100;
            }
        }
    ],
    'bristleback_viscous_nasal_goo': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'armor_per_stack',
            label: 'Enemy Armor Reduction',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'armorReduction'
        },
        {
            attributeName: 'move_slow_per_stack',
            label: '%SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -(abilityModel.getAbilityAttributeValue(ability.attributes(), 'base_move_slow',0)+v*a);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'bristleback_quill_spray': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'quill_stack_damage',
            label: 'DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var total = abilityModel.getAbilityAttributeValue(ability.attributes(), 'quill_base_damage',ability.level())+v*a,
                damage_cap = abilityModel.getAbilityAttributeValue(ability.attributes(), 'max_damage',0);
                if (total > damage_cap) {
                    total = damage_cap;
                }
                return total;
            }
        }
    ],
    'bristleback_bristleback': [
        {
            label: 'Damage From',
            controlType: 'radio',
            controlValueType: 'string',
            controlOptions: [
                {text: 'Back', value: 'back'},
                {text: 'Side', value: 'side'}
            ]
        },
        {
            attributeName: 'back_damage_reduction',
            label: '%DAMAGE REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var ability = abilityModel.abilities().find(function(b) {
                    return b.name() == 'bristleback_bristleback';
                });
                if (v == 'back') {
                    var total = abilityModel.getAbilityAttributeValue(ability.attributes(), 'back_damage_reduction', ability.level());
                }
                else {
                    var total = abilityModel.getAbilityAttributeValue(ability.attributes(), 'side_damage_reduction', ability.level());
                }
                return -total;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'bristleback_warpath': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_stack',
            label: 'BONUS DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v < 1) {
                    return 0;
                }
                else {
                    return abilityModel.getAbilityAttributeValue(ability.attributes(), 'base_damage',ability.level())+(v-1)*a;
                }
            }
        },
        {
            attributeName: 'move_speed_per_stack',
            label: '%MOVEMENT:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v < 1) {
                    return 0;
                }
                else {
                    return abilityModel.getAbilityAttributeValue(ability.attributes(), 'base_move_speed',ability.level())+(v-1)*a;
                }
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'centaur_return': [
        {
            label: 'Strength',
            controlType: 'input'
        },
        {
            attributeName: 'strength_pct',
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'return_damage',ability.level()) + v*a/100;
            }
        }
    ],
    'centaur_stampede': [
        {
            label: 'Strength',
            controlType: 'input'
        },
        {
            attributeName: 'strength_damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'clinkz_death_pact': [
        {
            label: 'Consumed Unit HP',
            controlType: 'input'
        },
        {
            attributeName: 'damage_gain_pct',
            label: 'BASE DAMAGE GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'baseDamage'
        },
        {
            attributeName: 'health_gain_pct',
            label: 'HEALTH GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusHealth'
        }
    ],
    'crystal_maiden_frostbite': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'dark_seer_ion_shell': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'dazzle_shadow_wave': [
        {
            label: 'Targets',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'dazzle_weave': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'armor_per_second',
            label: 'ARMOR',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'armor'
        },
        {
            attributeName: 'armor_per_second',
            label: 'ARMOR REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'armorReduction'
        }
    ],
    'death_prophet_exorcism': [
        {
            label: 'Damage Dealt',
            controlType: 'input'
        },
        {
            attributeName: 'heal_percent',
            label: 'Total Armor',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        }
    ],
    'disruptor_static_storm': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damagevalue = 0.25 * (130 + 40 * ability.level()) * (1/20),
                mult = (v*4)*((v*4)+1)/2;
                return damagevalue * mult;
            }
        }
    ],
    'doom_bringer_scorched_earth': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'damage_per_second',
            label: 'HP REGEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'healthregen'
        }
    ],
    'doom_bringer_doom': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    return v*abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_scepter',ability.level());
                }
                else {
                    return v*a;
                }
            }
        }
    ],
    'dragon_knight_elder_dragon_form': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_attack_range',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackrange'
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedFlat'
        }
    ],
    'drow_ranger_trueshot': [
        {
            label: 'Drow\'s Agility',
            controlType: 'input',
            display: 'buff'
        },
        {
            attributeName: 'trueshot_ranged_damage',
            label: 'DAMAGE BONUS:',
            ignoreTooltip: true,
            controlType: 'text',
            display: 'buff',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusDamagePrecisionAura'
        }
    ],
    'earth_spirit_rolling_boulder': [
        {
            label: 'Using Stone',
            controlType: 'checkbox'
        },
        {
            attributeName: 'move_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return -a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'earthshaker_enchant_totem': [
        {
            label: 'Activated',
            controlType: 'checkbox'
        },
        {
            attributeName: 'totem_damage_percentage',
            label: 'DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'baseDamageMultiplier'
        }
    ],
    'earthshaker_echo_slam': [
        {
            label: 'Enemies in Range',
            controlType: 'input'
        },
        {
            attributeName: 'echo_slam_echo_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'elder_titan_ancestral_spirit': [
        {
            label: 'HEROES PASSED THROUGH',
            controlType: 'input'
        },
        {
            label: 'CREEPS PASSED THROUGH',
            controlType: 'input'
        },
        {
            attributeName: 'damage_creeps',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_heroes',ability.level()) + v[1]*a;
            },
            returnProperty: 'bonusDamage'
        },
        {
            attributeName: 'move_pct_creeps',
            label: '%BONUS SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*abilityModel.getAbilityAttributeValue(ability.attributes(), 'move_pct_heroes',ability.level()) + v[1]*a;
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'elder_titan_earth_splitter': [
        {
            label: 'Enemy Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'damage_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        },
        {
            attributeName: 'slow_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'enchantress_natures_attendants': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'heal',
            label: 'HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'wisp_count',ability.level())*v*a;
            }
        }
    ],
    'enigma_malefice': [
        {
            label: 'Hits',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'stun_duration',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'enigma_midnight_pulse': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'damage_percent',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        }
    ],
    'enigma_black_hole': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'far_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'near_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'faceless_void_time_lock': [
        {
            label: 'In Chronosphere',
            controlType: 'checkbox'
        },
        {
            attributeName: 'bonus_damage',
            label: '%MOVESPEED AS DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a*2;
                }
                else {
                    return a;
                }
            },
            returnProperty: 'bashBonusDamage'
        },
        {
            attributeName: 'duration',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        },
        {
            attributeName: 'chance_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bash'
        }
    ],
    'gyrocopter_rocket_barrage': [
        {
            label: 'Rockets',
            controlType: 'input'
        },
        {
            attributeName: 'rockets_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
/*        'gyrocopter_homing_missile': [
        {
            label: 'Distance Traveled',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'gyrocopter_flak_cannon': [
        {
            label: 'Attacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],*/
    'huskar_burning_spear': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'health_cost',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'huskar_berserkers_blood': [
        {
            label: '%HP',
            controlType: 'input'
        },
        {
            attributeName: 'hp_threshold_max',
            label: 'Health at given %HP:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return parent.health()*v/100;
            }
        },
        {
            attributeName: 'hp_threshold_max',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        },
        {
            attributeName: 'maximum_resistance',
            label: 'MAGIC RESISTANCE BONUS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var v = Math.min(v, 100);
                v = Math.max(v, 10);
                var hp_threshold_max = abilityModel.getAbilityAttributeValue(ability.attributes(), 'hp_threshold_max',0);
                var d = 100 - hp_threshold_max;
                var c = (v - hp_threshold_max) / d;
                c = 1 - c;
                return c*a;
            },
            returnProperty: 'magicResist'
        },
        {
            attributeName: 'maximum_attack_speed',
            label: 'ATTACK SPEED BONUS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var v = Math.min(v, 100);
                v = Math.max(v, 10);
                var hp_threshold_max = abilityModel.getAbilityAttributeValue(ability.attributes(), 'hp_threshold_max',0);
                var d = 100 - hp_threshold_max;
                var c = (v - hp_threshold_max) / d;
                c = 1 - c;
                return c*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'huskar_life_break': [
        {
            label: 'Enemy Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'health_damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            label: 'Huskar Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'health_cost_percent',
            label: 'DAMAGE TAKEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'movespeed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'invoker_quas': [
        {
            label: 'Instances',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_strength',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'health_regen_per_instance',
            label: 'HP REGEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'healthregen'
        }
    ],
    'invoker_wex': [
        {
            label: 'Instances',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_agility',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'move_speed_per_instance',
            label: '%MOVE SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'attack_speed_per_instance',
            label: '%ATTACK SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'invoker_exort': [
        {
            label: 'Instances',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_intelligence',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusInt'
        },
        {
            attributeName: 'bonus_damage_per_instance',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'invoker_ghost_walk': [
        {
            label: 'Quas Level',
            controlType: 'input'
        },
        {
            attributeName: 'enemy_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'enemy_slow',v);
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            label: 'Wex Level',
            controlType: 'input',
            display: 'ability'
        },
        {
            attributeName: 'self_slow',
            label: 'Total Damage',
            controlType: 'text',
            display: 'ability',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'self_slow',v);
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'invoker_alacrity': [
        {
            label: 'Wex Level',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'bonus_attack_speed',v);
            },
            returnProperty: 'attackspeed'
        },
        {
            label: 'Exort Level',
            controlType: 'input',
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'bonus_damage',v);
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'invoker_ice_wall': [
        {
            label: 'Quas Level',
            controlType: 'input'
        },
        {
            attributeName: 'slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'slow',v);
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            label: 'Exort Level',
            controlType: 'input',
            display: 'ability'
        },
        {
            label: 'Duration',
            controlType: 'input',
            display: 'ability'
        },
        {
            attributeName: 'damage_per_second',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            display: 'ability',
            controls: [1,2],
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v[0] == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_per_second',v[0])*v[1];
            }
        }
    ],
    'jakiro_dual_breath': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*2 + 
                abilityModel.getAbilityAttributeValue(ability.attributes(), 'burn_damage',ability.level())*v;
            }
        },
        {
            attributeName: 'slow_movement_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'slow_attack_speed_pct',
            label: '%ATTACK SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'jakiro_liquid_fire': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_attack_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'jakiro_macropyre': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'juggernaut_blade_fury': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'juggernaut_healing_ward': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'healing_ward_heal_amount',
            label: 'HEAL OVER TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        }
    ],
    'juggernaut_omni_slash': [
        {
            label: 'Jumps',
            controlType: 'input'
        },
        {
            label: 'MIN DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'omni_slash_damage',1)*v;
            }
        },
        {
            label: 'MAX DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'omni_slash_damage',2)*v;
            }
        }
    ],
    'keeper_of_the_light_illuminate': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'keeper_of_the_light_mana_leak': [
        {
            label: 'Distance Moved',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Mana',
            controlType: 'input'
        },
        {
            attributeName: 'mana_leak_pct',
            label: 'MANA LEAKED:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]/100*v[1]*a/100;
            }
        }
    ],
    'legion_commander_duel': [
        {
            label: 'Duel Wins',
            controlType: 'input'
        },
        {
            attributeName: 'reward_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'leshrac_pulse_nova': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_cost_per_second',
            label: 'MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'lich_chain_frost': [
        {
            label: 'Bounce Hits',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'slow_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'life_stealer_feast': [
        {
            label: 'Enemy Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'hp_leech_percent',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'life_stealer_open_wounds': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'heal_percent',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'lifesteal'
        },
        {
            attributeName: 'slow_steps',
            label: '%SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'slow_steps',v+1);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'lina_fiery_soul': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'fiery_soul_move_speed_bonus',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'fiery_soul_attack_speed_bonus',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'lion_mana_drain': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'mana_per_second',
            label: 'MANA DRAINED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'luna_moon_glaive': [
        {
            label: 'Damage',
            controlType: 'input'
        },
        {
            attributeName: 'damage_reduction_percent',
            label: 'BOUNCE DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var result = [];
                for (var i = 1; i < 6; i++) {
                    result.push((v*Math.pow(a/100,i)).toFixed(2))
                }
                return result.join('<br>');
            }
        }
    ],
    'luna_eclipse': [
        {
            label: 'Beam Count',
            controlType: 'input'
        },
        {
            attributeName: 'beams',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var lucentBeamAbility = abilityModel.abilities().find(function(b) {
                    return b.name() == 'luna_lucent_beam';
                });
                if (lucentBeamAbility.level() == 0) return 0;
                var damage = abilityModel.getAbilityPropertyValue(lucentBeamAbility, 'damage');
                return v*damage;
            }
        }
    ],
    'medusa_mystic_snake': [
        {
            label: 'Jump Count',
            controlType: 'input'
        },
        {
            attributeName: 'snake_damage',
            label: 'Damage Per Jump:',
            ignoreTooltip: true,
            controlType: 'method',
            display: 'none',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var snake_jumps = abilityModel.getAbilityAttributeValue(ability.attributes(), 'snake_jumps',ability.level());
                var snake_scale = abilityModel.getAbilityAttributeValue(ability.attributes(), 'snake_scale',0);
                var damage = [];
                for (var i = 0; i < snake_jumps; i++) {
                    damage.push(a + a * i * snake_scale/100);
                }
                return damage;
            }
        },
        {
            attributeName: 'snake_damage',
            label: 'Damage Per Jump:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[1].join(' / ');
            }
        },
        {
            attributeName: 'snake_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[1].slice(0, v[0]).reduce(function (memo, o) { return memo + o }, 0);
            }
        },
        {
            attributeName: 'snake_damage',
            label: 'Max Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[1].reduce(function (memo, o) { return memo + o }, 0);
            }
        }
    ],
    'medusa_mana_shield': [
        {
            label: 'Damage',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_mana',
            label: 'MANA USED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return (v/a).toFixed(2);
            }
        },
        {
            attributeName: 'absorption_tooltip',
            label: '%DAMAGE REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'meepo_poof': [
        {
            label: 'Meepo Count',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'meepo_geostrike': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            attributeName: 'slow',
            label: '%SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'slow',ability.level())*v;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'mirana_arrow': [
        {
            label: 'Arrow Travel Distance',
            controlType: 'input'
        },
        {
            attributeName: 'arrow_max_stun',
            label: 'STUN DURATION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var arrow_min_stun = abilityModel.getAbilityAttributeValue(ability.attributes(), 'arrow_min_stun',0);
                var arrow_max_stunrange = abilityModel.getAbilityAttributeValue(ability.attributes(), 'arrow_max_stunrange',0);
                var scale = Math.min(v, arrow_max_stunrange) / arrow_max_stunrange;
                return Math.max(arrow_min_stun, Math.floor(a * scale / 0.1) * 0.1);
            }
        },
        {
            attributeName: 'arrow_bonus_damage',
            label: 'TOTAL DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var ability = ability;
                var damage = ability.damage()[ability.level()-1];
                var arrow_max_stunrange = abilityModel.getAbilityAttributeValue(ability.attributes(), 'arrow_max_stunrange',0);
                var scale = Math.min(v, arrow_max_stunrange) / arrow_max_stunrange;
                var bonus_damage = Math.floor(a * scale / 2.8) * 2.8;
                return damage + ' + ' + bonus_damage + ' = ' + (damage + bonus_damage);
            }
        }
    ],
    'morphling_morph_agi': [
        {
            label: 'Shifts',
            controlType: 'input'
        },
        {
            attributeName: 'points_per_tick',
            label: 'AGI SHIFT GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'points_per_tick',
            label: 'STR SHIFT LOSS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'bonus_attributes',
            label: 'SHIFT TIME:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusAgility2'
        },
        {
            attributeName: 'morph_cooldown',
            label: 'SHIFT TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_cost',
            label: 'SHIFT MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a*abilityModel.getAbilityAttributeValue(ability.attributes(), 'morph_cooldown',ability.level());
            }
        }
    ],
    'morphling_morph_str': [
        {
            label: 'Shifts',
            controlType: 'input'
        },
        {
            attributeName: 'points_per_tick',
            label: 'STR SHIFT GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'points_per_tick',
            label: 'AGI SHIFT LOSS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'bonus_attributes',
            label: 'SHIFT TIME:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusStrength2'
        },
        {
            attributeName: 'morph_cooldown',
            label: 'SHIFT TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_cost',
            label: 'SHIFT MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a*abilityModel.getAbilityAttributeValue(ability.attributes(), 'morph_cooldown',ability.level());
            }
        }
    ],
    'furion_wrath_of_nature': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'necrolyte_heartstopper_aura': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'aura_damage',
            label: 'HEALTH LOST:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        }
    ],
    'necrolyte_sadist': [
        {
            label: 'Unit Kills',
            controlType: 'input'
        },
        {
            label: 'Hero Kills',
            controlType: 'input'
        },
        {
            attributeName: 'health_regen',
            label: 'Total Damage',
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var hero_multiplier = abilityModel.getAbilityAttributeValue(ability.attributes(), 'hero_multiplier',0)
                return (v[0]+v[1]*hero_multiplier)*a;
            },
            returnProperty: 'healthregen'
        },
        {
            attributeName: 'mana_regen',
            label: 'Total Damage',
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var hero_multiplier = abilityModel.getAbilityAttributeValue(ability.attributes(), 'hero_multiplier',0)
                return (v[0]+v[1]*hero_multiplier)*a;
            },
            returnProperty: 'manaregen'
        }
    ],
    'night_stalker_crippling_fear': [
        {
            label: 'Is Night',
            controlType: 'checkbox'
        },
        {
            attributeName: 'miss_rate_night',
            label: '%CHANCE TO MISS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return abilityModel.getAbilityAttributeValue(ability.attributes(), 'miss_rate_night',ability.level());
                }
                else {
                    return abilityModel.getAbilityAttributeValue(ability.attributes(), 'miss_rate_day',ability.level());
                }
            },
            returnProperty: 'missChance'
        }
    ],    
    'night_stalker_hunter_in_the_night': [
        {
            label: 'Is Night',
            controlType: 'checkbox'
        },
        {
            attributeName: 'bonus_attack_speed_night',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'attackspeed'
        },
        {
            attributeName: 'bonus_movement_speed_pct_night',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'movementSpeedPct'
        }
    ],    
    'obsidian_destroyer_arcane_orb': [
        {
            label: 'Current Mana',
            controlType: 'input'
        },
        {
            attributeName: 'mana_pool_damage_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusDamageOrb'
        }
    ],
    'ogre_magi_ignite': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'burn_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'pudge_rot': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            attributeName: 'rot_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'pudge_flesh_heap': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'flesh_heap_strength_buff_amount',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'flesh_heap_magic_resist',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'magicResist'
        }
    ],
    'pudge_dismember': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'dismember_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'pugna_nether_ward': [
        {
            label: 'Enemy Mana Spent',
            controlType: 'input'
        },
        {
            attributeName: 'mana_multiplier',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_regen',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'manaregenreduction'
        }
    ],
    'pugna_life_drain': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'health_drain',
            label: 'HEALTH DRAINED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'queenofpain_shadow_strike': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'movement_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'strike_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var duration_damage = abilityModel.getAbilityAttributeValue(ability.attributes(), 'duration_damage',ability.level());
                var ticks = Math.floor(v/3);
                return a + duration_damage * ticks;
            }
        }
    ],
    'razor_plasma_field': [
        {
            label: 'Distance',
            controlType: 'input'
        },
        {
            attributeName: 'radius',
            label: 'MIN DISTANCE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return 200;
            }
        },
        {
            attributeName: 'radius',
            label: 'MAX DISTANCE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return 200 + a;
            }
        },
        {
            attributeName: 'radius',
            label: 'Instance Damage',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var max_radius = a + 200;
                var scale = (Math.min(Math.max(v, 200), max_radius) - 200) / (max_radius - 200);
                var damage_min = abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_min',ability.level());
                var damage_max = abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_max',ability.level());
                return damage_min + (damage_max - damage_min) * scale;
            }
        }
    ],
    'razor_static_link': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'drain_length',
            label: 'Damage Drained:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var tick_duration = Math.floor(v * 4) + 1;
                var ticks = Math.min(a * 4 + 1, tick_duration);
                var drain_rate = abilityModel.getAbilityAttributeValue(ability.attributes(), 'drain_rate',ability.level());
                return ticks * drain_rate/4;
            },
            returnProperty: 'bonusDamage'
        },
        {
            attributeName: 'drain_length',
            label: 'Enemy Damage Lost:',
            ignoreTooltip: true,
            controlType: 'text',
            display: 'hidden',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var tick_duration = Math.floor(v * 4) + 1;
                var ticks = Math.min(a * 4 + 1, tick_duration);
                var drain_rate = abilityModel.getAbilityAttributeValue(ability.attributes(), 'drain_rate',ability.level());
                return ticks * drain_rate/4;
            },
            returnProperty: 'bonusDamageReduction'
        }
    ],
    'razor_eye_of_the_storm': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'rubick_fade_bolt': [
        {
            label: 'Jumps',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a * (1 - v*abilityModel.getAbilityAttributeValue(ability.attributes(), 'jump_damage_reduction_pct',ability.level())/100);
            }
        },
        {
            attributeName: 'hero_attack_damage_reduction',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusDamageReduction'
        }
    ],
    'sandking_sand_storm': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'sandking_epicenter': [
        {
            label: 'Pulses',
            controlType: 'input'
        },
        {
            attributeName: 'epicenter_damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'epicenter_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'epicenter_slow_as',
            label: '%ATTACK SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'shadow_demon_shadow_poison': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'stack_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var stackmult = [1,2,4,8];
                if (v > 4) {
                    return a * stackmult[3] + 50 * (v - 4);
                }
                else if (v <= 0) {
                    return 0
                }
                else {
                    return a * stackmult[v-1]
                }
            }
        }
    ],
    'nevermore_necromastery': [
        {
            label: 'Souls',
            controlType: 'input'
        },
        {
            attributeName: 'necromastery_damage_per_soul',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'nevermore_requiem': [
        {
            label: 'Line Hit Count',
            controlType: 'input'
        },
        {
            attributeName: 'requiem_reduction_damage',
            label: 'Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            label: 'Return Line Hit Count (Scepter)',
            controlType: 'input'
        },
        {
            attributeName: 'requiem_damage_pct_scepter',
            label: 'Damage/Heal:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v*a/100;
            }
        },
        {
            attributeName: 'requiem_damage_pct_scepter',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return damage*v[0] + damage*v[1]*a/100;
            }
        },
        {
            attributeName: 'requiem_reduction_damage',
            label: '%DAMAGE REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'baseDamageReductionPct'
        },
        {
            attributeName: 'requiem_reduction_ms',
            label: '%DAMAGE REDUCTION:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'shadow_shaman_shackles': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'silencer_curse_of_the_silent': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return Math.floor(v)*a;
            }
        },
        {
            attributeName: 'movespeed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
/*        'silencer_glaives_of_wisdom': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],*/
    'skywrath_mage_mystic_flare': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'slark_essence_shift': [
        {
            label: 'Attacks',
            controlType: 'input'
        },
        {
            attributeName: 'agi_gain',
            label: 'Total Damage',
            controlType: 'text',
            display: 'ability',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'stat_loss',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'bonusAllStatsReduction'
        }
    ],
    'slark_shadow_dance': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_regen_pct',
            label: 'TOTAL HEALTH REGENERATED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*parent.health()*a/100;
            }
        },
        {
            attributeName: 'bonus_regen_pct',
            label: 'HEALTH GAINED PER SECOND:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return parent.health()*a/100;
            },
            returnProperty: 'healthregen'
        },
        {
            attributeName: 'bonus_movement_speed',
            label: '%MOVE SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'sniper_shrapnel': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            attributeName: 'building_damage',
            label: 'BUILDING DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'spectre_desolate': [
        {
            label: 'Enemy Alone',
            controlType: 'checkbox'
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'spectre_dispersion': [
        {
            label: 'Damage Taken',
            controlType: 'input'
        },
        {
            attributeName: 'damage_reflection_pct',
            label: 'DAMAGE REFLECTED:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'damageReduction'
        },
        {
            attributeName: 'damage_reflection_pct',
            label: 'DAMAGE REFLECTED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        }
    ],
    'storm_spirit_ball_lightning': [
        {
            label: 'MAX MANA',
            controlType: 'input'
        },
        {
            label: 'Distance',
            controlType: 'input'
        },
        {
            attributeName: 'ball_lightning_initial_mana_base',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0, 1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')/100*v[1];
            }
        },
        {
            attributeName: 'ball_lightning_initial_mana_base',
            label: 'FLAT MANA COST:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var distance_intervals = Math.floor(v[1]/100);
                var travel_cost_base = abilityModel.getAbilityAttributeValue(ability.attributes(), 'ball_lightning_travel_cost_base',0);
                return a + distance_intervals * travel_cost_base;
            }
        },
        {
            attributeName: 'ball_lightning_initial_mana_percentage',
            label: '%MAX MANA COST:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var distance_intervals = Math.floor(v[1]/100);
                var travel_cost_percent = abilityModel.getAbilityAttributeValue(ability.attributes(), 'ball_lightning_travel_cost_percent',0);
                return a + distance_intervals * travel_cost_percent;
            }
        },
        {
            attributeName: 'ball_lightning_initial_mana_base',
            label: 'TOTAL MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0, 1, 2, 3],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[2] + ' + ' + (v[3]/100 * v[0]) + ' (' + v[3] + '% of max) = ' + (v[2] + v[3]/100 * v[0]);
            }
        }
    ],
    'templar_assassin_psionic_trap': [
        {
            label: 'Charge Time',
            controlType: 'input'
        },
        {
            attributeName: 'movement_speed_min_tooltip',
            label: '%MOVE SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var max_slow = abilityModel.getAbilityAttributeValue(ability.attributes(), 'movement_speed_max_tooltip',0);
                var slow_per_tick = (max_slow - a)/40;
                return -(a + slow_per_tick * Math.min(Math.max(0, v), 4) * 10);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'shredder_reactive_armor': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_armor',
            label: 'Total Armor Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'armor'
        },
        {
            attributeName: 'bonus_hp_regen',
            label: 'Total HP Regen Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'healthregen'
        }
    ],
    'shredder_chakram': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_interval',0);
                var ticks = Math.floor(v / interval);
                return a*interval*ticks;
            }
        },
        {
            attributeName: 'mana_per_second',
            label: 'MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes(), 'damage_interval',0);
                var ticks = Math.floor(v / interval);
                return a*interval*ticks;
            }
        },
        {
            label: 'ENEMY %HP',
            controlType: 'input'
        },
        {
            attributeName: 'slow',
            label: 'MANA COST:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var ticks = 20 - Math.floor(Math.min(Math.max(v-1, 0), 99) / 5);
                return -a*ticks;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'spirit_breaker_greater_bash': [
        {
            label: 'Bash Proc',
            controlType: 'checkbox'
        },
        {
            attributeName: 'damage',
            label: '%MOVESPEED AS DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'bashBonusDamage'
        },
        {
            attributeName: 'bonus_movespeed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'chance_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a
            },
            returnProperty: 'bash'
        }
    ],
    'techies_land_mines': [
        {
            label: 'Number of Mines',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'damage',
            label: 'AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var phys_reduction = parent.enemy().totalArmorPhysicalReduction(),
                    magic_reduction = parent.enemy().totalMagicResistance();
                return (v * a * (1 - phys_reduction / 100) * (1 - magic_reduction / 100)).toFixed(2);
            }
        }
    ],
    'techies_suicide': [
        {
            attributeName: 'damage',
            label: 'FULL DAMAGE AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var phys_reduction = parent.enemy().totalArmorPhysicalReduction(),
                    magic_reduction = parent.enemy().totalMagicResistance();
                return (a * (1 - phys_reduction / 100) * (1 - magic_reduction / 100)).toFixed(2);
            }
        },
        {
            attributeName: 'partial_damage',
            label: 'PARTIAL DAMAGE AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var phys_reduction = parent.enemy().totalArmorPhysicalReduction(),
                    magic_reduction = parent.enemy().totalMagicResistance();
                return (a * (1 - phys_reduction / 100) * (1 - magic_reduction / 100)).toFixed(2);
            }
        },
        {
            attributeName: 'damage',
            label: 'RESPAWN TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return (parent.respawnTime() / 2).toFixed(0) + ' seconds';
            }
        }
    ],
    'techies_remote_mines': [
        {
            label: 'Number of Mines',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'damage',
            label: 'AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var magic_reduction = parent.enemy().totalMagicResistance();
                return (v * a * (1 - magic_reduction / 100)).toFixed(2);
            }
        }
    ],
    'tinker_march_of_the_machines': [
        {
            label: 'Robot Explosions',
            controlType: 'input'
        },
        {
            attributeName: 'machines_per_sec',
            label: 'TOTAL DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'treant_leech_seed': [
        {
            label: 'Pulses',
            controlType: 'input'
        },
        {
            attributeName: 'leech_damage',
            label: 'DAMAGE/HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'movement_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'troll_warlord_fervor': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'attack_speed',
            label: 'ATTACK SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'undying_decay': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'str_steal',
            label: 'STRENGTH STOLEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    var str_steal_scepter = abilityModel.getAbilityAttributeValue(ability.attributes(), 'str_steal_scepter',0);
                    return v*str_steal_scepter;
                }
                else {
                    return v*a;
                }
            },
            returnProperty: 'bonusStrength'
        },
    ],
    'undying_soul_rip': [
        {
            label: 'Units',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_unit',
            label: 'DAMAGE/HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'undying_flesh_golem': [
        {
            label: 'Distance',
            controlType: 'input'
        },
        {
            attributeName: 'max_speed_slow',
            label: '%MOVE SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var min_speed_slow = abilityModel.getAbilityAttributeValue(ability.attributes(), 'min_speed_slow', 0);
                var radius = abilityModel.getAbilityAttributeValue(ability.attributes(), 'radius', 0);
                var full_power_radius = abilityModel.getAbilityAttributeValue(ability.attributes(), 'full_power_radius', 0);
                var distance = Math.min(Math.max(v, full_power_radius), radius);
                var scale = 1 - (distance - full_power_radius) / (radius - full_power_radius);
                return -Math.max(scale * a, min_speed_slow);
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'max_damage_amp',
            label: '%DAMAGE AMP:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var min_damage_amp = abilityModel.getAbilityAttributeValue(ability.attributes(), 'min_damage_amp', 0);
                var radius = abilityModel.getAbilityAttributeValue(ability.attributes(), 'radius', 0);
                var full_power_radius = abilityModel.getAbilityAttributeValue(ability.attributes(), 'full_power_radius', 0);
                var distance = Math.min(Math.max(v, full_power_radius), radius);
                var scale = 1 - (distance - full_power_radius) / (radius - full_power_radius);
                return Math.max(scale * a, min_damage_amp);
            },
            returnProperty: 'damageAmplification'
        },
        {
            label: 'MAX HP',
            controlType: 'input'
        },
        {
            label: 'Hero Death Count',
            controlType: 'input'
        },
        {
            label: 'Creep Death Count',
            controlType: 'input'
        },
        {
            attributeName: 'death_heal',
            label: 'DEATH HEAL (HEROES):',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [1, 2],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        },
        {
            attributeName: 'death_heal_creep',
            label: 'DEATH HEAL (CREEPS):',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [1, 3],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        },
        {
            attributeName: 'death_heal_creep',
            label: 'TOTAL DEATH HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [4, 5],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]+v[1];
            }
        }
    ],
    'ursa_fury_swipes': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_stack',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var enrageAbility = abilityModel.abilities().find(function(b) {
                    return b.name() == 'ursa_enrage';
                });
                if (enrageAbility.isActive() && enrageAbility.level() > 0) {
                    var enrage_multiplier = abilityModel.getAbilityAttributeValue(enrageAbility.attributes(), 'enrage_multiplier', enrageAbility.level());
                    return v*a*enrage_multiplier;
                }
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'ursa_enrage': [
        {
            attributeName: 'damage_reduction',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'venomancer_venomous_gale': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'tick_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes(), 'strike_damage',ability.level()) + Math.floor(v/3)*a;
            }
        },
        {
            attributeName: 'movement_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'venomancer_poison_sting': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'venomancer_poison_nova': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'viper_poison_attack': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'viper_corrosive_skin': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        },
        {
            attributeName: 'bonus_magic_resistance',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'magicResist'
        }
    ],
    'viper_viper_strike': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'visage_soul_assumption': [
        {
            label: 'Charges',
            controlType: 'input'
        },
        {
            attributeName: 'soul_charge_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var soul_base_damage = abilityModel.getAbilityAttributeValue(ability.attributes(), 'soul_base_damage',0);
                var stack_limit = abilityModel.getAbilityAttributeValue(ability.attributes(), 'stack_limit', ability.level());
                stack_limit = Math.max(Math.min(v, stack_limit), 0);
                return soul_base_damage + stack_limit*a;
            }
        }
    ],
    'visage_gravekeepers_cloak': [
        {
            label: 'Layers',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_armor',
            label: 'ARMOR:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'armor'
        },
        {
            attributeName: 'bonus_resist',
            label: '%RESIST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'magicResist'
        }
    ],
    'warlock_shadow_word': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'warlock_upheaval': [
        {
            label: 'Channel Duration',
            controlType: 'input'
        },
        {
            attributeName: 'slow_rate_duration',
            label: '%MOVE SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var max_slow = abilityModel.getAbilityAttributeValue(ability.attributes(), 'max_slow',0);
                var slow_per_tick = max_slow / (a - 0.5) / 2;
                var ticks = Math.max(Math.floor(v * 2) - 1, 0);
                return -Math.min(ticks * slow_per_tick, max_slow);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'weaver_the_swarm': [
        {
            label: 'Attacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'armor_reduction',
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'armorReduction'
        }
    ],
    'windrunner_powershot': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'winter_wyvern_cold_embrace': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Ally Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'heal_percentage',
            label: 'TOTAL HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var base_heal = abilityModel.getAbilityAttributeValue(ability.attributes(), 'heal_additive',ability.level());
                return (base_heal + v[1] * a/100) * v[0];
            }
        }
    ],
    'wisp_spirits': [
        {
            label: 'Collision Count',
            controlType: 'input'
        },
        {
            attributeName: 'hero_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'creep_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'wisp_overcharge': [
        {
            label: 'Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'drain_pct',
            label: 'HP DRAINED:',
            ignoreTooltip: true, 
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            label: 'Current MP',
            controlType: 'input'
        },
        {
            attributeName: 'drain_pct',
            label: 'MP DRAINED:',
            ignoreTooltip: true, 
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeed'
        },
        {
            attributeName: 'bonus_damage_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'witch_doctor_paralyzing_cask': [
        {
            label: 'Hero Bounce Count',
            controlType: 'input'
        },
        {
            attributeName: 'hero_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var bounces = abilityModel.getAbilityAttributeValue(ability.attributes(), 'bounces',ability.level());
                return Math.min(Math.max(v, 0), bounces)*a;
            }
        },
        {
            label: 'Creep Bounce Count',
            controlType: 'input'
        },
        {
            attributeName: 'hero_damage',
            label: 'CREEP DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var bounces = abilityModel.getAbilityAttributeValue(ability.attributes(), 'bounces',ability.level());
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return Math.min(Math.max(v, 0), bounces)*damage;
            }
        }
    ],
    'witch_doctor_voodoo_restoration': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'heal',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes(), 'heal_interval',ability.level());
                var heal_per_tick = a * interval;
                var ticks = Math.max(Math.floor(v / interval) - 1, 0);
                return heal_per_tick * ticks;
            }
        },
        {
            attributeName: 'mana_per_second',
            label: 'MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes(), 'heal_interval',ability.level());
                var mana_per_tick = a * interval;
                var ticks = Math.max(Math.floor(v / interval) - 1, 0);
                return mana_per_tick * ticks;
            }
        }
    ],
    'witch_doctor_maledict': [
        {
            label: 'damage 0-4s',
            controlType: 'input'
        },
        {
            label: 'damage 4-8s',
            controlType: 'input'
        },
        {
            label: 'damage 8-12s',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_damage',
            label: 'Dot Damage after 3s:',
            ignoreTooltip: true,
            controlType: 'method',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return 3*damage;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Burst Damage at 4s:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 3],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                var d = v.reduce(function (memo, o) { return memo + o }, 0);
                return Math.max(d, 0) * a/100;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Dot Damage after 7s:',
            ignoreTooltip: true,
            controlType: 'method',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return 7*damage;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Burst Damage at 8s:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1, 4, 5],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                var d = v.reduce(function (memo, o) { return memo + o }, 0);
                return Math.max(d, 0) * a/100;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Dot Damage after 11s:',
            ignoreTooltip: true,
            controlType: 'method',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return 11*damage;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Burst Damage at 12s:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1, 2, 4, 6, 7],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                var d = v.reduce(function (memo, o) { return memo + o }, 0);
                return Math.max(d, 0) * a/100;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Burst Damage:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [4, 6, 8],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v.reduce(function (memo, o) { return memo + o }, 0);
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Maledict Damage:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [9],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var duration = abilityModel.getAbilityAttributeValue(ability.attributes(), 'duration_tooltip',0);
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return damage * duration + v[0];
            }
        },
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_damage',
            label: 'DOT Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var duration = abilityModel.getAbilityAttributeValue(ability.attributes(), 'duration_tooltip',0);
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*Math.min(Math.max(v, 0), duration);
            }
        }
    ],
    'witch_doctor_death_ward': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'zuus_static_field': [
        {
            label: 'Enemy HP',
            controlType: 'input'
        },
        {
            attributeName: 'damage_health_pct',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        }
    ]
}
},{"./herocalc_core":47}],46:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.BuffOption = function (hero, ability) {
    this.buffName = ability;
    if (my.prototype.heroData['npc_dota_hero_' + hero] == undefined) {
        this.hero = hero;
        this.abilityData = my.prototype.findWhere(my.prototype.unitData[hero].abilities, {name: ability})
        this.buffDisplayName = my.prototype.unitData[hero].displayname + ' - ' + this.abilityData.displayname;
    }
    else {
        this.hero = 'npc_dota_hero_' + hero;
        this.abilityData = my.prototype.findWhere(my.prototype.heroData['npc_dota_hero_' + hero].abilities, {name: ability})
        this.buffDisplayName = my.prototype.heroData['npc_dota_hero_' + hero].displayname + ' - ' + this.abilityData.displayname;        
        if (ability == 'sven_gods_strength') {
            this.buffDisplayName += ' (Aura for allies)';
        }
    }

};

my.prototype.ItemBuffOption = function (item) {
    this.buffName = item;
    if (my.prototype.heroData['npc_dota_hero_' + hero] == undefined) {
        this.hero = hero;
        this.abilityData = my.prototype.findWhere(my.prototype.unitData[hero].abilities, {name: item})
        this.buffDisplayName = my.prototype.unitData[hero].displayname + ' - ' + this.abilityData.displayname;        
    }
    else {
        this.hero = 'npc_dota_hero_' + hero;
        this.abilityData = my.prototype.findWhere(my.prototype.heroData['npc_dota_hero_' + hero].abilities, {name: item})
        this.buffDisplayName = my.prototype.heroData['npc_dota_hero_' + hero].displayname + ' - ' + this.abilityData.displayname;        
    }

};

my.prototype.BuffViewModel = function (a) {
    var self = new my.prototype.AbilityModel(ko.observableArray([]));
    self.availableBuffs = ko.observableArray(my.prototype.availableBuffs);
    self.availableDebuffs = ko.observableArray(my.prototype.availableDebuffs);
    self.selectedBuff = ko.observable(self.availableBuffs()[0]);
    
    self.buffs = ko.observableArray([]);
    self.itemBuffs = new my.prototype.InventoryViewModel();
    
    self.addBuff = function (data, event) {
        if (my.prototype.findWhere(self.buffs(), { name: self.selectedBuff().buffName })  == undefined) {
            var a = ko.wrap.fromJS(self.selectedBuff().abilityData);
            a.isActive = ko.observable(false);
            a.isDetail = ko.observable(false);
            a.baseDamage = ko.observable(0);
            a.bash = ko.observable(0);
            a.bashBonusDamage = ko.observable(0);
            a.bonusDamage = ko.observable(0);
            a.bonusDamageOrb = ko.observable(0);
            a.bonusDamagePct = ko.observable(0);
            a.bonusDamagePrecisionAura = ko.observable(0);
            a.bonusDamageReduction = ko.observable(0);
            a.bonusHealth = ko.observable(0);
            a.bonusStrength = ko.observable(0);
            a.bonusStrength2 = ko.observable(0);
            a.bonusAgility = ko.observable(0);
            a.bonusAgility2 = ko.observable(0);
            a.bonusInt = ko.observable(0);
            a.bonusAllStatsReduction = ko.observable(0);
            a.damageAmplification = ko.observable(0);
            a.damageReduction = ko.observable(0);
            a.evasion = ko.observable(0);
            a.magicResist = ko.observable(0);
            a.manaregen = ko.observable(0);
            a.manaregenreduction = ko.observable(0);
            a.missChance = ko.observable(0);
            a.movementSpeedFlat = ko.observable(0);
            a.movementSpeedPct = ko.observable(0);
            a.movementSpeedPctReduction = ko.observable(0);
            a.turnRateReduction = ko.observable(0);
            a.attackrange = ko.observable(0);
            a.attackspeed = ko.observable(0);
            a.attackspeedreduction = ko.observable(0);
            a.armor = ko.observable(0);
            a.armorReduction = ko.observable(0);
            a.healthregen = ko.observable(0);
            a.lifesteal = ko.observable(0);
            a.visionnight = ko.observable(0);
            a.visionday = ko.observable(0);
            switch (a.name()) {
                case 'invoker_cold_snap':
                case 'invoker_ghost_walk':
                case 'invoker_tornado':
                case 'invoker_emp':
                case 'invoker_alacrity':
                case 'invoker_chaos_meteor':
                case 'invoker_sun_strike':
                case 'invoker_forge_spirit':
                case 'invoker_ice_wall':
                case 'invoker_deafening_blast':
                    a.level(1);
                break;
            }
            self.abilities.push(a);
            self.buffs.push({ name: self.selectedBuff().buffName, hero: self.selectedBuff().hero, data: a });
        }
    };
    
    self.removeBuff = function (data, event, abilityName) {
        if (my.prototype.findWhere(self.buffs(), { name: abilityName })  != undefined) {
                self.buffs.remove(my.prototype.findWhere(self.buffs(), { name: abilityName }));
                if (self.abilityControlData[abilityName] != undefined) {
                    for (var i = 0; i < self.abilityControlData[abilityName].data.length; i++) {
                        if (self.abilityControlData[abilityName].data[i].controlVal.dispose != undefined) {
                            self.abilityControlData[abilityName].data[i].controlVal.dispose();
                        }
                        if (self.abilityControlData[abilityName].data[i].clean != undefined) {
                            self.abilityControlData[abilityName].data[i].clean.dispose();
                        }
                    }
                    self.abilityControlData[abilityName] = undefined;
                }
                for (var i = 0; i < self.abilities().length; i++) {
                    if (self.abilities()[i].name() == abilityName) {
                        self.abilities()[i].level(0);
                        self.abilities.remove(self.abilities()[i]);
                        break;
                    }
                }
        }
    };
    self.toggleBuff = function (index, data, event) {
        if (self.buffs()[index()].data.behavior().indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') < 0) {
            if (self.buffs()[index()].data.isActive()) {
                self.buffs()[index()].data.isActive(false);
                self.abilities()[index()].isActive(false);
            }
            else {
                self.buffs()[index()].data.isActive(true);
                self.abilities()[index()].isActive(true);
            }
        }
    }.bind(this);

    self.toggleBuffDetail = function (index, data, event) {
        if (self.buffs()[index()].data.isDetail()) {
            self.buffs()[index()].data.isDetail(false);
        }
        else {
            self.buffs()[index()].data.isDetail(true);
        }
    }.bind(this);

    // Overrides the ability module function to remove available skill point check
    self.levelUpAbility = function (index, data, event, hero) {
        if (self.abilities()[index()].level() < hero.getAbilityLevelMax(data)) {
            switch(self.abilities()[index()].abilitytype()) {
                case 'DOTA_ABILITY_TYPE_ULTIMATE':
                    self.abilities()[index()].level(self.abilities()[index()].level() + 1);
                break;
                default:
                    self.abilities()[index()].level(self.abilities()[index()].level() + 1);
                break;
            }
            switch (self.abilities()[index()].name()) {
                case 'beastmaster_call_of_the_wild':
                case 'chen_test_of_faith':
                case 'morphling_morph_agi':
                case 'shadow_demon_shadow_poison':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'morphling_morph_str':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
                case 'keeper_of_the_light_spirit_form':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                case 'nevermore_shadowraze1':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 2].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze2':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze3':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                break;
            }
        }
    };
    self.levelDownAbility = function (index, data, event, hero) {
        if (self.abilities()[index()].level() > 0) {
            self.abilities()[index()].level(self.abilities()[index()].level() - 1);
            switch (self.abilities()[index()].name()) {
                case 'beastmaster_call_of_the_wild':
                case 'chen_test_of_faith':
                case 'morphling_morph_agi':
                case 'shadow_demon_shadow_poison':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'morphling_morph_str':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
                case 'keeper_of_the_light_spirit_form':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                case 'nevermore_shadowraze1':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 2].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze2':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze3':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                break;
                case 'ember_spirit_fire_remnant':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
                case 'lone_druid_true_form':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
            }
        }
    };
    
    return self;
}
},{"./herocalc_core":47,"./herocalc_knockout":53}],47:[function(require,module,exports){
'use strict';
require('./polyfill');

function HEROCALCULATOR () {
   // ...
}

var my = HEROCALCULATOR;

my.prototype.heroData = {};
my.prototype.itemData = {};
my.prototype.unitData = {};
my.prototype.abilityData = {};

my.prototype.HeroOptions = [];

my.prototype.HeroOption = function (name, displayname, hero) {
    this.heroName = name;
    this.heroDisplayName = displayname;
    this.hero = hero;
};

my.prototype.idCounter = 0;
my.prototype.uniqueId = function (prefix) {
    var id = ++my.prototype.idCounter + '';
    return prefix ? prefix + id : id;
};
my.prototype.findWhere = function (arr, obj) {
    arrLoop: for (var i = 0; i < arr.length; i++) {
        objLoop: for (var key in obj) {
            if (arr[i][key] != obj[key]) {
                continue arrLoop;
            }
        }
        return arr[i];
    }
}
my.prototype.uniques = function (arr) {
    var a = [];
    for (var i=0, l=arr.length; i<l; i++)
        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')
            a.push(arr[i]);
    return a;
}
my.prototype.union = function (a, b) {
    var arr = a.concat(b);
    return my.prototype.uniques(arr);
}

my.prototype.totalResources = 3;
my.prototype.numResourcesLoaded = 0;
my.prototype.onResourceLoaded = function (callback) {
    my.prototype.numResourcesLoaded++;
    if (my.prototype.numResourcesLoaded == my.prototype.totalResources) {
        
        my.prototype.availableBuffs = [
            new my.prototype.BuffOption('abaddon', 'abaddon_frostmourne'),
            new my.prototype.BuffOption('axe', 'axe_culling_blade'),
            new my.prototype.BuffOption('beastmaster', 'beastmaster_inner_beast'),
            new my.prototype.BuffOption('bloodseeker', 'bloodseeker_bloodrage'),
            new my.prototype.BuffOption('bounty_hunter', 'bounty_hunter_track'),
            new my.prototype.BuffOption('centaur', 'centaur_stampede'),
            new my.prototype.BuffOption('crystal_maiden', 'crystal_maiden_brilliance_aura'),
            new my.prototype.BuffOption('dark_seer', 'dark_seer_surge'),
            new my.prototype.BuffOption('dazzle', 'dazzle_weave'),
            new my.prototype.BuffOption('drow_ranger', 'drow_ranger_trueshot'),
            new my.prototype.BuffOption('invoker', 'invoker_alacrity'),
            new my.prototype.BuffOption('wisp', 'wisp_tether'),
            new my.prototype.BuffOption('wisp', 'wisp_overcharge'),
            new my.prototype.BuffOption('kunkka', 'kunkka_ghostship'),
            new my.prototype.BuffOption('lich', 'lich_frost_armor'),
            new my.prototype.BuffOption('life_stealer', 'life_stealer_open_wounds'),
            new my.prototype.BuffOption('luna', 'luna_lunar_blessing'),
            new my.prototype.BuffOption('lycan', 'lycan_howl'),
            new my.prototype.BuffOption('magnataur', 'magnataur_empower'),
            new my.prototype.BuffOption('mirana', 'mirana_leap'),
            new my.prototype.BuffOption('ogre_magi', 'ogre_magi_bloodlust'),
            new my.prototype.BuffOption('omniknight', 'omniknight_guardian_angel'),
            new my.prototype.BuffOption('rubick', 'rubick_null_field'),
            new my.prototype.BuffOption('skeleton_king', 'skeleton_king_vampiric_aura'),
            new my.prototype.BuffOption('spirit_breaker', 'spirit_breaker_empowering_haste'),
            new my.prototype.BuffOption('sven', 'sven_warcry'),
            new my.prototype.BuffOption('sven', 'sven_gods_strength'),
            new my.prototype.BuffOption('treant', 'treant_living_armor'),
            new my.prototype.BuffOption('troll_warlord', 'troll_warlord_battle_trance'),
            new my.prototype.BuffOption('vengefulspirit', 'vengefulspirit_command_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_alpha_wolf', 'alpha_wolf_critical_strike'),
            new my.prototype.BuffOption('npc_dota_neutral_alpha_wolf', 'alpha_wolf_command_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_polar_furbolg_ursa_warrior', 'centaur_khan_endurance_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_giant_wolf', 'giant_wolf_critical_strike'),
            new my.prototype.BuffOption('npc_dota_neutral_kobold_taskmaster', 'kobold_taskmaster_speed_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_ogre_magi', 'ogre_magi_frost_armor'),
            new my.prototype.BuffOption('npc_dota_neutral_satyr_hellcaller', 'satyr_hellcaller_unholy_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_enraged_wildkin', 'enraged_wildkin_toughness_aura'),
            new my.prototype.BuffOption('npc_dota_necronomicon_archer_1', 'necronomicon_archer_aoe')
        ];

        my.prototype.availableDebuffs = [
            new my.prototype.BuffOption('abaddon', 'abaddon_frostmourne'),
            new my.prototype.BuffOption('alchemist', 'alchemist_acid_spray'),
            new my.prototype.BuffOption('ancient_apparition', 'ancient_apparition_ice_vortex'),
            new my.prototype.BuffOption('axe', 'axe_battle_hunger'),
            new my.prototype.BuffOption('bane', 'bane_enfeeble'),
            new my.prototype.BuffOption('batrider', 'batrider_sticky_napalm'),
            new my.prototype.BuffOption('beastmaster', 'beastmaster_primal_roar'),
            new my.prototype.BuffOption('bounty_hunter', 'bounty_hunter_jinada'),
            new my.prototype.BuffOption('brewmaster', 'brewmaster_thunder_clap'),
            new my.prototype.BuffOption('brewmaster', 'brewmaster_drunken_haze'),
            new my.prototype.BuffOption('bristleback', 'bristleback_viscous_nasal_goo'),
            new my.prototype.BuffOption('broodmother', 'broodmother_incapacitating_bite'),
            new my.prototype.BuffOption('centaur', 'centaur_stampede'),
            new my.prototype.BuffOption('chen', 'chen_penitence'),
            new my.prototype.BuffOption('crystal_maiden', 'crystal_maiden_crystal_nova'),
            new my.prototype.BuffOption('crystal_maiden', 'crystal_maiden_freezing_field'),
            new my.prototype.BuffOption('dazzle', 'dazzle_weave'),
            new my.prototype.BuffOption('drow_ranger', 'drow_ranger_frost_arrows'),
            new my.prototype.BuffOption('earth_spirit', 'earth_spirit_rolling_boulder'),
            new my.prototype.BuffOption('elder_titan', 'elder_titan_natural_order'),
            new my.prototype.BuffOption('elder_titan', 'elder_titan_earth_splitter'),
            new my.prototype.BuffOption('enchantress', 'enchantress_untouchable'),
            new my.prototype.BuffOption('enchantress', 'enchantress_enchant'),
            new my.prototype.BuffOption('faceless_void', 'faceless_void_time_walk'),
            new my.prototype.BuffOption('huskar', 'huskar_life_break'),
            new my.prototype.BuffOption('invoker', 'invoker_ghost_walk'),
            new my.prototype.BuffOption('invoker', 'invoker_ice_wall'),
            new my.prototype.BuffOption('wisp', 'wisp_tether'),
            new my.prototype.BuffOption('jakiro', 'jakiro_dual_breath'),
            new my.prototype.BuffOption('jakiro', 'jakiro_liquid_fire'),
            new my.prototype.BuffOption('keeper_of_the_light', 'keeper_of_the_light_blinding_light'),
            new my.prototype.BuffOption('kunkka', 'kunkka_torrent'),
            new my.prototype.BuffOption('lich', 'lich_frost_nova'),
            new my.prototype.BuffOption('lich', 'lich_frost_armor'),
            new my.prototype.BuffOption('lich', 'lich_chain_frost'),
            new my.prototype.BuffOption('life_stealer', 'life_stealer_open_wounds'),
            new my.prototype.BuffOption('lion', 'lion_voodoo'),
            new my.prototype.BuffOption('magnataur', 'magnataur_skewer'),
            new my.prototype.BuffOption('medusa', 'medusa_stone_gaze'),
            new my.prototype.BuffOption('meepo', 'meepo_geostrike'),
            new my.prototype.BuffOption('naga_siren', 'naga_siren_rip_tide'),
            new my.prototype.BuffOption('night_stalker', 'night_stalker_void'),
            new my.prototype.BuffOption('night_stalker', 'night_stalker_crippling_fear'),
            new my.prototype.BuffOption('night_stalker', 'night_stalker_darkness'),
            new my.prototype.BuffOption('ogre_magi', 'ogre_magi_ignite'),
            new my.prototype.BuffOption('omniknight', 'omniknight_degen_aura'),
            new my.prototype.BuffOption('phantom_assassin', 'phantom_assassin_stifling_dagger'),
            new my.prototype.BuffOption('phantom_lancer', 'phantom_lancer_spirit_lance'),
            new my.prototype.BuffOption('pudge', 'pudge_rot'),
            new my.prototype.BuffOption('pugna', 'pugna_decrepify'),
            new my.prototype.BuffOption('queenofpain', 'queenofpain_shadow_strike'),
            new my.prototype.BuffOption('riki', 'riki_smoke_screen'),
            new my.prototype.BuffOption('rubick', 'rubick_fade_bolt'),
            new my.prototype.BuffOption('sand_king', 'sandking_epicenter'),
            new my.prototype.BuffOption('nevermore', 'nevermore_dark_lord'),
            new my.prototype.BuffOption('shadow_shaman', 'shadow_shaman_voodoo'),
            new my.prototype.BuffOption('skeleton_king', 'skeleton_king_hellfire_blast'),
            new my.prototype.BuffOption('skeleton_king', 'skeleton_king_reincarnation'),
            new my.prototype.BuffOption('skywrath_mage', 'skywrath_mage_concussive_shot'),
            new my.prototype.BuffOption('skywrath_mage', 'skywrath_mage_ancient_seal'),
            new my.prototype.BuffOption('slardar', 'slardar_slithereen_crush'),
            new my.prototype.BuffOption('slardar', 'slardar_amplify_damage'),
            new my.prototype.BuffOption('slark', 'slark_essence_shift'),
            new my.prototype.BuffOption('sniper', 'sniper_shrapnel'),
            new my.prototype.BuffOption('spectre', 'spectre_spectral_dagger'),
            new my.prototype.BuffOption('storm_spirit', 'storm_spirit_overload'),
            new my.prototype.BuffOption('templar_assassin', 'templar_assassin_meld'),
            new my.prototype.BuffOption('tidehunter', 'tidehunter_gush'),
            new my.prototype.BuffOption('tinker', 'tinker_laser'),
            new my.prototype.BuffOption('treant', 'treant_leech_seed'),
            new my.prototype.BuffOption('tusk', 'tusk_frozen_sigil'),
            new my.prototype.BuffOption('undying', 'undying_flesh_golem'),
            new my.prototype.BuffOption('ursa', 'ursa_earthshock'),
            new my.prototype.BuffOption('vengefulspirit', 'vengefulspirit_wave_of_terror'),
            new my.prototype.BuffOption('vengefulspirit', 'vengefulspirit_command_aura'),
            new my.prototype.BuffOption('venomancer', 'venomancer_venomous_gale'),
            new my.prototype.BuffOption('venomancer', 'venomancer_poison_sting'),
            new my.prototype.BuffOption('viper', 'viper_poison_attack'),
            new my.prototype.BuffOption('viper', 'viper_corrosive_skin'),
            new my.prototype.BuffOption('viper', 'viper_viper_strike'),
            new my.prototype.BuffOption('visage', 'visage_grave_chill'),
            new my.prototype.BuffOption('warlock', 'warlock_upheaval'),
            new my.prototype.BuffOption('weaver', 'weaver_the_swarm'),
            new my.prototype.BuffOption('windrunner', 'windrunner_windrun'),
            new my.prototype.BuffOption('winter_wyvern', 'winter_wyvern_arctic_burn'),
            new my.prototype.BuffOption('winter_wyvern', 'winter_wyvern_splinter_blast'),
            new my.prototype.BuffOption('npc_dota_neutral_ghost', 'ghost_frost_attack'),
            new my.prototype.BuffOption('npc_dota_neutral_polar_furbolg_ursa_warrior', 'polar_furbolg_ursa_warrior_thunder_clap'),
            new my.prototype.BuffOption('npc_dota_neutral_ogre_magi', 'ogre_magi_frost_armor'),
            new my.prototype.BuffOption('npc_dota_neutral_satyr_trickster', 'satyr_trickster_purge'),
            new my.prototype.BuffOption('npc_dota_neutral_enraged_wildkin', 'enraged_wildkin_tornado')
        ];
        
        my.prototype.itemOptionsArr = [];
        for (var i = 0; i < my.prototype.validItems.length; i++) {
            my.prototype.itemOptionsArr.push(new my.prototype.ItemInput(my.prototype.validItems[i], my.prototype.itemData['item_' + my.prototype.validItems[i]].displayname));
        }
        
        var itemBuffs = ['assault', 'ancient_janggo', 'headdress', 'mekansm', 'pipe', 'ring_of_aquila', 'vladmir', 'ring_of_basilius', 'buckler', 'solar_crest'];
        my.prototype.itemBuffOptions = itemBuffs.map(function(item) {
            return new my.prototype.ItemInput(item, my.prototype.itemData['item_' + item].displayname);
        });
        
        var itemDebuffs = [
            {item: 'assault', debuff: null},
            {item: 'shivas_guard', debuff: null},
            {item: 'desolator', debuff: null},
            {item: 'medallion_of_courage', debuff: null},
            {item: 'radiance', debuff: null},
            {item: 'sheepstick', debuff: null},
            {item: 'veil_of_discord', debuff: null},
            {item: 'solar_crest', debuff: null},
            {item: 'silver_edge', debuff: {id: 'shadow_walk', name: 'Shadow Walk'}},
            {item: 'silver_edge', debuff: {id: 'maim', name: 'Lesser Maim'}}
        ]
        my.prototype.itemDebuffOptions = itemDebuffs.map(function(item) {
            return new my.prototype.ItemInput(item.item, my.prototype.itemData['item_' + item.item].displayname, item.debuff);
        });
        if (callback) callback();
    }
}

my.prototype.init = function (HERODATA_PATH,ITEMDATA_PATH,UNITDATA_PATH, callback) {
    my.prototype.numResourcesLoaded = 0;
    my.prototype.getJSON(HERODATA_PATH, function (data) {
        my.prototype.heroData = data;
        my.prototype.heroData['npc_dota_hero_chen'].abilities[2].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_nevermore'].abilities[1].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_nevermore'].abilities[2].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_morphling'].abilities[3].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_ogre_magi'].abilities[3].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_techies'].abilities[4].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_beastmaster'].abilities[2].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        var index = my.prototype.heroData['npc_dota_hero_lone_druid'].abilities[3].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_HIDDEN');
        my.prototype.heroData['npc_dota_hero_lone_druid'].abilities[3].behavior.splice(index, 1);
        
        index = my.prototype.heroData['npc_dota_hero_abaddon'].abilities[2].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE');
        my.prototype.heroData['npc_dota_hero_abaddon'].abilities[2].behavior.splice(index, 1);
        
        index = my.prototype.heroData['npc_dota_hero_riki'].abilities[2].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE');
        my.prototype.heroData['npc_dota_hero_riki'].abilities[2].behavior.splice(index, 1);
        
        for (var h in my.prototype.heroData) {
            my.prototype.HeroOptions.push(new my.prototype.HeroOption(h.replace('npc_dota_hero_', ''), my.prototype.heroData[h].displayname));
        }
            
        my.prototype.onResourceLoaded(callback);
    });
    my.prototype.getJSON(ITEMDATA_PATH, function (data) {
        my.prototype.itemData = data;
        my.prototype.onResourceLoaded(callback);
    });
    my.prototype.getJSON(UNITDATA_PATH, function (data) {
        my.prototype.unitData = data;
        my.prototype.onResourceLoaded(callback);
    });
}

my.prototype.extend = function (out) {
    out = out || {};

    for (var i = 1; i < arguments.length; i++) {
        var obj = arguments[i];

        if (!obj)
            continue;

        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (typeof obj[key] === 'object')
                    out[key] = deepExtend(out[key], obj[key]);
                else
                    out[key] = obj[key];
            }
        }
    }

    return out;
};

my.prototype.getJSON = function (url, successCallback, errorCallback) {
    var request = new XMLHttpRequest();
    request.open('GET', url, true);

    request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
            // Success!
            var data = JSON.parse(request.responseText);
            successCallback(data);
        } else {
            // We reached our target server, but it returned an error
            errorCallback();
        }
    };

    request.onerror = function() {
        // There was a connection error of some sort
        errorCallback();
    };

    request.send();
}
module.exports = HEROCALCULATOR;
},{"./polyfill":58}],48:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.illusionData = {
    chaos_knight_phantasm: {
        hero: 'chaos_knight',
        displayName: 'Chaos Knight Phantasm',
        use_selected_hero: false,
        max_level: 3,
        outgoing_damage: 'outgoing_damage',
        incoming_damage: 'incoming_damage'
    },
    naga_siren_mirror_image: {
        hero: 'naga_siren',
        displayName: 'Naga Siren Mirror Image',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'outgoing_damage',
        incoming_damage: 'incoming_damage'
    },
    dark_seer_wall_of_replica: {
        hero: 'dark_seer',
        displayName: 'Dark Seer Wall of Replica',
        use_selected_hero: true,
        max_level: 3,
        outgoing_damage: 'replica_damage_outgoing',
        incoming_damage: 'replica_damage_incoming',
        outgoing_damage_scepter: 'replica_damage_outgoing_scepter'
    },
    morphling_replicate: {
        hero: 'morphling',
        displayName: 'Morphling Replicate',
        use_selected_hero: true,
        max_level: 3,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'
    },
    phantom_lancer_doppelwalk: {
        hero: 'phantom_lancer',
        displayName: 'Phantom Lancer Doppelwalk',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'        
    },
    phantom_lancer_juxtapose: {
        hero: 'phantom_lancer',
        displayName: 'Phantom Lancer Juxtapose',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'        
    },
    phantom_lancer_spirit_lance: {
        hero: 'phantom_lancer',
        displayName: 'Phantom Lancer Spirit Lance',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'        
    },
    shadow_demon_disruption: {
        hero: 'shadow_demon',
        displayName: 'Shadow Demon Disruption',
        use_selected_hero: true,
        max_level: 4,
        outgoing_damage: 'illusion_outgoing_damage',
        incoming_damage: 'illusion_incoming_damage'        
    },
    spectre_haunt: {
        hero: 'spectre',
        displayName: 'Spectre Haunt',
        use_selected_hero: false,
        max_level: 3,
        outgoing_damage: 'illusion_damage_outgoing',
        incoming_damage: 'illusion_damage_incoming'        
    },
    terrorblade_conjure_image: {
        hero: 'terrorblade',
        displayName: 'Terrorblade Conjure Image',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_outgoing_damage',
        incoming_damage: 'illusion_incoming_damage'        
    },
    terrorblade_reflection: {
        hero: 'terrorblade',
        displayName: 'Terrorblade Reflection',
        use_selected_hero: true,
        max_level: 4,
        outgoing_damage: 'illusion_outgoing_damage'     
    },
    item_manta: {
        hero: '',
        is_item: true,
        displayName: 'Manta Style Illusion',
        use_selected_hero: true,
        max_level: 1,
        outgoing_damage_melee: 'images_do_damage_percent_melee',
        incoming_damage_melee: 'images_take_damage_percent_melee',
        outgoing_damage_ranged: 'images_do_damage_percent_ranged',
        incoming_damage_ranged: 'images_take_damage_percent_ranged'
    }
}

my.prototype.IllusionViewModel = function (h, p, abilityLevel) {
    var self = new my.prototype.HeroModel(0);
    self.parent = p;
    self.inventory = self.parent.inventory;
    self.illusionType = ko.observable(self.parent.selectedIllusion().illusionName);
    self.illusionDisplayName = ko.observable(self.parent.selectedIllusion().illusionDisplayName);
    self.illusionAbilityLevel(abilityLevel);
    self.illusionAbilityMaxLevel = ko.observable(my.prototype.illusionData[self.parent.selectedIllusion().illusionName].max_level);
    if (!my.prototype.illusionData[self.illusionType()].use_selected_hero) {
        self.selectedHero(my.prototype.findWhere(self.availableHeroes(), {heroName: self.parent.selectedIllusion().baseHero}));
    }
    else {
        self.selectedHero(self.parent.selectedHero());
    }
    self.selectedHeroLevel(self.parent.selectedHeroLevel());
    self.hero = ko.computed(function() {
        return ko.wrap.fromJS(my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName]);
    });
    
    self.ability().getAttributeBonusLevel = self.parent.ability().getAttributeBonusLevel;
    self.totalAgi = ko.computed(function () {
        return (self.heroData().attributebaseagility
                + self.heroData().attributeagilitygain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('agi') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getAgility()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.intStolen = ko.observable(0).extend({ numeric: 0 });
    self.totalInt = ko.computed(function () {
        return (self.heroData().attributebaseintelligence 
                + self.heroData().attributeintelligencegain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('int') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getIntelligence()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction() + self.intStolen()
               ).toFixed(2);
    });
    self.totalStr = ko.computed(function () {
        return (self.heroData().attributebasestrength 
                + self.heroData().attributestrengthgain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('str') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getStrength()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    
    self.getAbilityAttributeValue = function(hero, ability, attributeName, level) {
        if (ability == 'item_manta') {
            var abilityObj = my.prototype.itemData[ability];
        }
        else {
            var abilityObj = my.prototype.findWhere(my.prototype.heroData['npc_dota_hero_' + hero].abilities, {name: ability});
        }
        var attribute = my.prototype.findWhere(abilityObj.attributes, {name: attributeName});
        if (level == 0) {
            return parseFloat(attribute.value[0]);
        }
        else if (level > attribute.length) {
            return parseFloat(attribute.value[0]);
        }
        else {
            return parseFloat(attribute.value[level - 1]);
        }
    }
    
    self.getIncomingDamageMultiplier = function(illusionType, hasScepter, attackType) {
        if (illusionType == 'item_manta') {
            if (attackType == 'DOTA_UNIT_CAP_MELEE_ATTACK') {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].incoming_damage_melee, self.illusionAbilityLevel())/100)
            }
            else {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].incoming_damage_ranged, self.illusionAbilityLevel())/100)
            }
        }
        else {
            return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].incoming_damage, self.illusionAbilityLevel())/100)
        }
    }
    self.getOutgoingDamageMultiplier = function(illusionType, hasScepter, attackType) {
        if (illusionType == 'item_manta') {
            if (attackType == 'DOTA_UNIT_CAP_MELEE_ATTACK') {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].outgoing_damage_melee, self.illusionAbilityLevel())/100);
            }
            else {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].outgoing_damage_ranged, self.illusionAbilityLevel())/100);
            }
        }
        else {
            return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].outgoing_damage, self.illusionAbilityLevel())/100);
        }
    }

    self.baseDamage = ko.computed(function() {
        return [Math.floor(my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName].attackdamagemin + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total)
                * self.getOutgoingDamageMultiplier(self.illusionType(), false, self.hero().attacktype()),
                Math.floor(my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName].attackdamagemax + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total)
                * self.getOutgoingDamageMultiplier(self.illusionType(), false, self.hero().attacktype())];
    });
    
    self.damage = ko.computed(function() {
        return [self.baseDamage()[0],
                self.baseDamage()[1]];
    });
    
    self.ehpPhysical = ko.computed(function() {
        var ehp = (self.health() * (1 + .06 * self.totalArmorPhysical())) / (1 - (1 - (self.inventory.getEvasion() * self.ability().getEvasion())))
        ehp *= (self.inventory.activeItems().some(function(item) {return item.item == 'mask_of_madness';}) ? (1 / 1.3) : 1);
        ehp *= (1 / self.getIncomingDamageMultiplier(self.illusionType(), false, self.hero().attacktype()));
        return ehp.toFixed(2);
    });
    self.ehpMagical = ko.computed(function() {
        var ehp = self.health() / self.totalMagicResistanceProduct();
        ehp *= (1 / self.getIncomingDamageMultiplier(self.illusionType(), false, self.hero().attacktype()));
        return ehp.toFixed(2);
    });
    
    self.totalArmorPhysical = ko.computed(function() {
        return (self.enemy().ability().getArmorBaseReduction() * self.debuffs.getArmorBaseReduction() * (my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName].armorphysical + self.totalAgi() * .14)
                + self.ability().getArmor() + self.enemy().ability().getArmorReduction() + self.buffs.getArmor() + self.debuffs.getArmorReduction()).toFixed(2);
    });
    
    self.ias = ko.computed(function() {
        var val = parseFloat(self.totalAgi()) 
                + self.ability().getAttackSpeed() 
                + self.enemy().ability().getAttackSpeedReduction() 
                + self.buffs.getAttackSpeed() 
                + self.debuffs.getAttackSpeedReduction()
                + self.unit().ability().getAttackSpeed(); 
        if (val < -80) {
            return -80;
        }
        else if (val > 400) {
            return 400;
        }
        return val.toFixed(2);
    });
    
    return self;
}
},{"./herocalc_core":47,"./herocalc_knockout":53}],49:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');

var my = require("./herocalc_core");
require("./herocalc_hero_damage");

my.prototype.totalExp = [0, 200, 500, 900, 1400, 2000, 2600, 3400, 4400, 5400, 6000, 8200, 9000, 10400, 11900, 13500, 15200, 17000, 18900, 20900, 23000, 25200, 27500, 29900, 32400];
my.prototype.nextLevelExp = [200, 300, 400, 500, 600, 600, 800, 1000, 1000, 600, 2200, 800, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, '&mdash;'];
my.prototype.diffProperties = [
    'totalAgi',
    'totalInt',
    'totalStr',
    'health',
    'healthregen',
    'mana',
    'manaregen',
    'totalArmorPhysical',
    'totalArmorPhysicalReduction',
    'totalMovementSpeed',
    'totalTurnRate',
    'baseDamage',
    'bonusDamage',
    'bonusDamageReduction',
    'damage',
    'totalMagicResistanceProduct',
    'totalMagicResistance',
    'bat',
    'ias',
    'attackTime',
    'attacksPerSecond',
    'evasion',
    'ehpPhysical',
    'ehpMagical',
    'bash',
    'critChance',
    //'critDamage',
    'missChance',
    'totalattackrange',
    'visionrangeday',
    'visionrangenight',
    'lifesteal'
];

my.prototype.IllusionOption = function (name, displayname, baseHero) {
    this.illusionName = name;
    this.illusionDisplayName = displayname;
    this.baseHero = baseHero;
};

my.prototype.createIllusionOptions = function () {
    var options = [];
    for (var h in my.prototype.illusionData) {
        options.push(new my.prototype.IllusionOption(h, my.prototype.illusionData[h].displayName, my.prototype.illusionData[h].hero));
    }
    return options;
}

my.prototype.HeroModel = function (h) {
    var self = this;
    self.heroId = ko.observable(h);
    self.selectedHeroLevel = ko.observable(1);
    self.inventory = new my.prototype.InventoryViewModel(self);
    self.selectedInventory = ko.observable(-1);
    self.buffs = new my.prototype.BuffViewModel();
    self.buffs.hasScepter = self.inventory.hasScepter;
    self.debuffs = new my.prototype.BuffViewModel();
    /*self.hero = ko.computed(function () {
        return ko.mapping.fromJS(my.prototype.heroData['npc_dota_hero_' + self.heroId()]);
    });*/
    self.heroData = ko.computed(function () {
      return my.prototype.heroData['npc_dota_hero_' + self.heroId()];
    });
    self.heroCompare = ko.observable(self);
    self.enemy = ko.observable(self);
    self.unit = ko.observable(self);
    self.clone = ko.observable(self);
    self.illusions = ko.observableArray([]);
    self.availableIllusions = ko.observableArray(my.prototype.createIllusionOptions());
    self.selectedIllusion = ko.observable(self.availableIllusions()[0]);
    self.illusionAbilityLevel = ko.observable(1);
    self.illusionAbilityMaxLevel = ko.computed(function () {
        return my.prototype.illusionData[self.selectedIllusion().illusionName].max_level;
    });
    
    self.skillPointHistory = ko.observableArray();
    
    self.ability = ko.computed(function () {
        var a = new my.prototype.AbilityModel(ko.wrap.fromJS(self.heroData().abilities), self);
        if (self.heroId() === 'earth_spirit' || self.heroId() === 'ogre_magi') {
            a.abilities()[3].level(1);
        }
        else if (self.heroId() === 'invoker') {
            for (var i = 6; i < 16; i++) {
                a.abilities()[i].level(1);
            }
        }
        self.skillPointHistory.removeAll();
        a.hasScepter = self.inventory.hasScepter
        return a;
    });

    self.availableSkillPoints = ko.computed(function () {
        var c = self.selectedHeroLevel();
        for (var i = 0; i < self.ability().abilities().length; i++) {
            var getIndex = function () {
                return i;
            };
            switch(self.ability().abilities()[i].abilitytype()) {
                case 'DOTA_ABILITY_TYPE_ULTIMATE':
                    if (self.heroId() === 'invoker') {
                        while (
                            ((self.ability().abilities()[i].level() == 1) && (parseInt(self.selectedHeroLevel()) < 2)) ||
                            ((self.ability().abilities()[i].level() == 2) && (parseInt(self.selectedHeroLevel()) < 7)) ||
                            ((self.ability().abilities()[i].level() == 3) && (parseInt(self.selectedHeroLevel()) < 11)) ||
                            ((self.ability().abilities()[i].level() == 4) && (parseInt(self.selectedHeroLevel()) < 17))
                        ) {
                            self.ability().levelDownAbility(getIndex, null, null, self);
                        }
                    }
                    else if (self.heroId() === 'meepo') {
                        while ((self.ability().abilities()[i].level()-1) * 7 + 3 > parseInt(self.selectedHeroLevel())) {
                            self.ability().levelDownAbility(getIndex, null, null, self);
                        }
                    }
                    else {
                        while (self.ability().abilities()[i].level() * 5 + 1 > parseInt(self.selectedHeroLevel())) {
                            self.ability().levelDownAbility(getIndex, null, null, self);
                        }
                    }
                break;
                default:
                    while (self.ability().abilities()[i].level() * 2 - 1 > parseInt(self.selectedHeroLevel())) {
                        self.ability().levelDownAbility(getIndex, null, null, self);
                    }
                break;
            }
        }
        var getIndex = function () {
            return self.skillPointHistory()[self.skillPointHistory().length-1];
        };
        while (self.skillPointHistory().length > c) {
            self.ability().levelDownAbility(getIndex, null, null, self);
        }
        return c-self.skillPointHistory().length;
    }, this);
    self.primaryAttribute = ko.pureComputed(function () {
        var v = self.heroData().attributeprimary;
        if (v === 'DOTA_ATTRIBUTE_AGILITY') return 'agi';
        if (v === 'DOTA_ATTRIBUTE_INTELLECT') return 'int';
        if (v === 'DOTA_ATTRIBUTE_STRENGTH') return 'str';
        return '';
    });
    self.totalExp = ko.pureComputed(function () {
        return my.prototype.totalExp[self.selectedHeroLevel() - 1];
    });
    self.nextLevelExp = ko.pureComputed(function () {
        return my.prototype.nextLevelExp[self.selectedHeroLevel() - 1];
    });
    self.startingArmor = ko.pureComputed(function () {
        return (self.heroData().attributebaseagility * .14 + self.heroData().armorphysical).toFixed(2);
    });
    self.respawnTime = ko.pureComputed(function () {
        return 5 + 3.8 * self.selectedHeroLevel();
    });
    self.totalAttribute = function (a) {
        if (a === 'agi') return parseFloat(self.totalAgi());
        if (a === 'int') return parseFloat(self.totalInt());
        if (a === 'str') return parseFloat(self.totalStr());
        return 0;
    };
    self.totalAgi = ko.pureComputed(function () {
        return (self.heroData().attributebaseagility
                + self.heroData().attributeagilitygain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('agi') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getAgility()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.intStolen = ko.observable(0).extend({ numeric: 0 });
    self.totalInt = ko.pureComputed(function () {
        return (self.heroData().attributebaseintelligence 
                + self.heroData().attributeintelligencegain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('int') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getIntelligence()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction() + self.intStolen()
               ).toFixed(2);
    });
    self.totalStr = ko.pureComputed(function () {
        return (self.heroData().attributebasestrength 
                + self.heroData().attributestrengthgain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('str') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getStrength()
                + self.enemy().ability().getStrengthReduction()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.health = ko.pureComputed(function () {
        return (self.heroData().statushealth + Math.floor(self.totalStr()) * 20 
                + self.inventory.getHealth()
                + self.ability().getHealth()).toFixed(2);
    });
    self.healthregen = ko.pureComputed(function () {
        var healthRegenAura = [self.inventory.getHealthRegenAura, self.buffs.itemBuffs.getHealthRegenAura].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value: 0, excludeList: []});
        return (self.heroData().statushealthregen + self.totalStr() * .03 
                + self.inventory.getHealthRegen() 
                + self.ability().getHealthRegen()
                + self.buffs.getHealthRegen()
                + healthRegenAura.value
                ).toFixed(2);
    });
    self.mana = ko.pureComputed(function () {
        return (self.heroData().statusmana
                + self.totalInt() * 12
                + self.inventory.getMana()
                + self.ability().getMana()).toFixed(2);
    });
    self.manaregen = ko.pureComputed(function () {
        return ((self.heroData().statusmanaregen 
                + self.totalInt() * .04 
                + self.ability().getManaRegen()) 
                * (1 + self.inventory.getManaRegenPercent()) 
                + (self.heroId() === 'crystal_maiden' ? self.ability().getManaRegenArcaneAura() * 2 : self.buffs.getManaRegenArcaneAura())
                + self.inventory.getManaRegenBloodstone()
                + self.inventory.getManaRegen()
                - self.enemy().ability().getManaRegenReduction()).toFixed(2);
    });
    self.totalArmorPhysical = ko.pureComputed(function () {
        var armorAura = [self.inventory.getArmorAura, self.buffs.itemBuffs.getArmorAura].reduce(function (memo, fn) {
            var obj = fn(memo.attributes);
            return obj;
        }, {value:0, attributes:[]});
        var armorReduction = [self.enemy().inventory.getArmorReduction, self.debuffs.itemBuffs.getArmorReduction].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value: 0, excludeList: []});
        return (self.enemy().ability().getArmorBaseReduction() * self.debuffs.getArmorBaseReduction() * (self.heroData().armorphysical + self.totalAgi() * .14)
                + self.inventory.getArmor()
                //+ self.inventory.getArmorAura().value
                //+ self.enemy().inventory.getArmorReduction()
                + self.ability().getArmor()
                + self.enemy().ability().getArmorReduction()
                + self.buffs.getArmor()
                + self.buffs.itemBuffs.getArmor()
                + self.debuffs.getArmorReduction()
                //+ self.buffs.itemBuffs.getArmorAura().value
                + armorAura.value
                + armorReduction.value
                //+ self.debuffs.getArmorReduction()
                ).toFixed(2);
    });
    self.totalArmorPhysicalReduction = ko.pureComputed(function () {
        var totalArmor = self.totalArmorPhysical();
        if (totalArmor >= 0) {
            return ((0.06 * self.totalArmorPhysical()) / (1 + 0.06 * self.totalArmorPhysical()) * 100).toFixed(2);
        }
        else {
            return -((0.06 * -self.totalArmorPhysical()) / (1 + 0.06 * -self.totalArmorPhysical()) * 100).toFixed(2);
        }
    });
    self.totalMovementSpeed = ko.pureComputed(function () {
        var MIN_MOVESPEED = 100;
        var ms = (self.ability().setMovementSpeed() > 0 ? self.ability().setMovementSpeed() : self.buffs.setMovementSpeed());
        if (ms > 0) {
            return ms;
        }
        else {
            var movementSpeedPercent = [self.inventory.getMovementSpeedPercent, self.buffs.itemBuffs.getMovementSpeedPercent].reduce(function (memo, fn) {
                var obj = fn(memo.excludeList);
                obj.value += memo.value;
                return obj;
            }, {value:0, excludeList:[]});
            var movementSpeedPercentReduction = [self.enemy().inventory.getMovementSpeedPercentReduction, self.debuffs.itemBuffs.getMovementSpeedPercentReduction].reduce(function (memo, fn) {
                var obj = fn(memo.excludeList);
                obj.value += memo.value;
                return obj;
            }, {value:0, excludeList:[]});
            return Math.max(
                self.enemy().inventory.isSheeped() || self.debuffs.itemBuffs.isSheeped() ? 140 :
                (self.heroData().movementspeed + self.inventory.getMovementSpeedFlat()+ self.ability().getMovementSpeedFlat()) * 
                (1 //+ self.inventory.getMovementSpeedPercent() 
                   + movementSpeedPercent.value
                   + movementSpeedPercentReduction.value
                   + self.ability().getMovementSpeedPercent() 
                   //+ self.enemy().inventory.getMovementSpeedPercentReduction() 
                   + self.enemy().ability().getMovementSpeedPercentReduction() 
                   + self.buffs.getMovementSpeedPercent() 
                   + self.debuffs.getMovementSpeedPercentReduction()
                   + self.unit().ability().getMovementSpeedPercent() 
                )
            , MIN_MOVESPEED).toFixed(2);
        }
    });
    self.totalTurnRate = ko.pureComputed(function () {
        return (self.heroData().movementturnrate 
                * (1 + self.enemy().ability().getTurnRateReduction()
                     + self.debuffs.getTurnRateReduction())).toFixed(2);
    });
    self.baseDamage = ko.pureComputed(function () {
        var totalAttribute = self.totalAttribute(self.primaryAttribute()),
            abilityBaseDamage = self.ability().getBaseDamage(),
            minDamage = self.heroData().attackdamagemin,
            maxDamage = self.heroData().attackdamagemax;
        return [Math.floor((minDamage + totalAttribute + abilityBaseDamage.total) * self.ability().getSelfBaseDamageReductionPct() * self.enemy().ability().getBaseDamageReductionPct() * self.debuffs.getBaseDamageReductionPct() * self.debuffs.itemBuffs.getBaseDamageReductionPct() * abilityBaseDamage.multiplier),
                Math.floor((maxDamage + totalAttribute + abilityBaseDamage.total) * self.ability().getSelfBaseDamageReductionPct() * self.enemy().ability().getBaseDamageReductionPct() * self.debuffs.getBaseDamageReductionPct() * self.debuffs.itemBuffs.getBaseDamageReductionPct() * abilityBaseDamage.multiplier)];
    });
    self.baseDamageAvg = ko.pureComputed(function () {
        return (self.baseDamage()[0] + self.baseDamage()[1]) / 2;
    });
    self.baseDamageMin = ko.pureComputed(function () {
        return self.baseDamage()[0];
    });
    self.baseDamageMax = ko.pureComputed(function () {
        return self.baseDamage()[1];
    });
    self.bonusDamage = ko.pureComputed(function () {
        return ((self.inventory.getBonusDamage().total
                + self.ability().getBonusDamage().total
                + self.buffs.getBonusDamage().total
                + Math.floor((self.baseDamage()[0] + self.baseDamage()[1]) / 2 
                              * (self.buffs.itemBuffs.getBonusDamagePercent(self.inventory.getBonusDamagePercent()).total
                                 + self.ability().getBonusDamagePercent().total
                                 + self.buffs.getBonusDamagePercent().total
                                )
                            )
                + Math.floor(
                    (self.heroData().attacktype == 'DOTA_UNIT_CAP_RANGED_ATTACK' 
                        ? ((self.heroId() == 'drow_ranger') ? self.ability().getBonusDamagePrecisionAura().total[0] * self.totalAgi() : self.buffs.getBonusDamagePrecisionAura().total[1])
                        : 0)
                  )
                + Math.floor(
                    ((self.heroId() == 'riki') ? self.ability().getBonusDamageBackstab().total[0] * self.totalAgi() : 0)
                  )
                ) * self.ability().getSelfBaseDamageReductionPct()
                  * self.enemy().ability().getBaseDamageReductionPct()
                  * self.debuffs.itemBuffs.getBaseDamageReductionPct());
    });
    self.bonusDamageReduction = ko.pureComputed(function () {
        return Math.abs(self.enemy().ability().getBonusDamageReduction() + self.debuffs.getBonusDamageReduction());
    });
    self.damageAvg = ko.pureComputed(function () {
        return (self.baseDamage()[0] + self.baseDamage()[1]) / 2 + self.bonusDamage();
    });
    self.damageMin = ko.pureComputed(function () {
        return self.baseDamage()[0] + self.bonusDamage();
    });
    self.damageMax = ko.pureComputed(function () {
        return self.baseDamage()[1] + self.bonusDamage();
    });
    self.damage = ko.pureComputed(function () {
        return [self.baseDamage()[0] + self.bonusDamage(),
                self.baseDamage()[1] + self.bonusDamage()];
    });
    self.totalMagicResistanceProduct = ko.pureComputed(function () {
        return (1 - self.heroData().magicalresistance / 100) 
                * self.inventory.getMagicResist()
                * self.ability().getMagicResist()
                * self.buffs.getMagicResist()
                * self.inventory.getMagicResistReductionSelf()
                * self.enemy().inventory.getMagicResistReduction()
                * self.enemy().ability().getMagicResistReduction()
                * self.debuffs.getMagicResistReduction()
                * self.debuffs.itemBuffs.getMagicResistReduction();
    });
    self.totalMagicResistance = ko.pureComputed(function () {
        return ((1 - self.totalMagicResistanceProduct()) * 100).toFixed(2);
    });
    self.bat = ko.pureComputed(function () {
        var abilityBAT = self.ability().getBAT();
        if (abilityBAT > 0) {
            return abilityBAT;
        }
        return self.heroData().attackrate;
    });
    self.ias = ko.pureComputed(function () {
        var attackSpeed = [self.inventory.getAttackSpeed, self.buffs.itemBuffs.getAttackSpeed].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value:0, excludeList:[]});
        var attackSpeedReduction = [self.enemy().inventory.getAttackSpeedReduction, self.debuffs.itemBuffs.getAttackSpeedReduction].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value:0, excludeList: []});
        var val = parseFloat(self.totalAgi()) 
                //+ self.inventory.getAttackSpeed() 
                + attackSpeed.value
                + attackSpeedReduction.value
                //+ self.enemy().inventory.getAttackSpeedReduction() 
                + self.ability().getAttackSpeed() 
                + self.enemy().ability().getAttackSpeedReduction() 
                + self.buffs.getAttackSpeed() 
                + self.debuffs.getAttackSpeedReduction()
                + self.unit().ability().getAttackSpeed(); 
        if (val < -80) {
            return -80;
        }
        else if (val > 500) {
            return 500;
        }
        return val.toFixed(2);
    });
    self.attackTime = ko.pureComputed(function () {
        return (self.bat() / (1 + self.ias() / 100)).toFixed(2);
    });
    self.attacksPerSecond = ko.pureComputed(function () {
        return ((1 + self.ias() / 100) / self.bat()).toFixed(2);
    });
    self.evasion = ko.pureComputed(function () {
        if (self.enemy().inventory.isSheeped() || self.debuffs.itemBuffs.isSheeped()) return 0;
        var e = self.ability().setEvasion();
        if (e) {
            return (e * 100).toFixed(2);
        }
        else {
            return ((1-(self.inventory.getEvasion() * self.ability().getEvasion() * self.ability().getEvasionBacktrack() * self.buffs.itemBuffs.getEvasion())) * 100).toFixed(2);
        }
    });
    self.ehpPhysical = ko.pureComputed(function () {
        var evasion = self.enemy().inventory.isSheeped() || self.debuffs.itemBuffs.isSheeped() ? 1 : self.inventory.getEvasion() * self.ability().getEvasion() * self.buffs.itemBuffs.getEvasion();
        if (self.totalArmorPhysical() >= 0) {
            var ehp = self.health() * (1 + .06 * self.totalArmorPhysical());
        }
        else {
            var ehp = self.health() * (1 - .06 * self.totalArmorPhysical()) / (1 - .12 * self.totalArmorPhysical());
        }
        ehp /= (1 - (1 - (evasion * self.ability().getEvasionBacktrack())));
        ehp /= (1 - parseFloat(self.enemy().missChance()) / 100);
        ehp *= (self.inventory.activeItems().some(function (item) {return item.item == 'mask_of_madness';}) ? (1 / 1.3) : 1);
        ehp *= (1 / self.ability().getDamageReduction());
        ehp *= (1 / self.buffs.getDamageReduction());
        ehp *= (1 / self.enemy().ability().getDamageAmplification());
        ehp *= (1 / self.debuffs.getDamageAmplification());
        return ehp.toFixed(2);
    });
    self.ehpMagical = ko.pureComputed(function () {
        var ehp = self.health() / self.totalMagicResistanceProduct();
        ehp *= (self.inventory.activeItems().some(function (item) {return item.item == 'mask_of_madness';}) ? (1 / 1.3) : 1);
        ehp *= (1 / self.ability().getDamageReduction());
        ehp *= (1 / self.buffs.getDamageReduction());
        ehp *= (1 / self.ability().getEvasionBacktrack());
        ehp *= (1 / self.enemy().ability().getDamageAmplification());
        ehp *= (1 / self.debuffs.getDamageAmplification());
        return ehp.toFixed(2);
    });
    self.bash = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        return ((1 - (self.inventory.getBash(attacktype) * self.ability().getBash())) * 100).toFixed(2);
    });
    
    self.critChance = ko.pureComputed(function () {
        return ((1 - (self.inventory.getCritChance() * self.ability().getCritChance())) * 100).toFixed(2);
    });

    my.prototype.HeroDamageMixin(self);
    
    /*self.critDamage = ko.computed(function () {
        self.critInfo();
        return 0;
    });*/
    self.missChance = ko.pureComputed(function () {
        var missDebuff = [self.enemy().inventory.getMissChance, self.debuffs.itemBuffs.getMissChance].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value *= memo.value;
            return obj;
        }, {value:1, excludeList:[]});
        return ((1 - (self.enemy().ability().getMissChance() * self.debuffs.getMissChance() * missDebuff.value)) * 100).toFixed(2);
    });
    self.totalattackrange = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        return self.heroData().attackrange + self.ability().getAttackRange() + self.inventory.getAttackRange(attacktype).value;
    });
    self.visionrangeday = ko.pureComputed(function () {
        return (self.heroData().visiondaytimerange) * (1 + self.enemy().ability().getVisionRangePctReduction() + self.debuffs.getVisionRangePctReduction());
    });
    self.visionrangenight = ko.pureComputed(function () {
        return (self.heroData().visionnighttimerange + self.inventory.getVisionRangeNight() + self.ability().getVisionRangeNight()) * (1 + self.enemy().ability().getVisionRangePctReduction() + self.debuffs.getVisionRangePctReduction());
    });
    self.lifesteal = ko.pureComputed(function () {
        var total = self.inventory.getLifesteal() + self.ability().getLifesteal() + self.buffs.getLifesteal();
        if (self.heroData().attacktype == 'DOTA_UNIT_CAP_MELEE_ATTACK') {
            var lifestealAura = [self.inventory.getLifestealAura, self.buffs.itemBuffs.getLifestealAura].reduce(function (memo, fn) {
                var obj = fn(memo.excludeList);
                obj.value += memo.value;
                return obj;
            }, {value: 0, excludeList: []});
            total += lifestealAura.value;
        }
        return (total).toFixed(2);
    });
    
    self.addIllusion = function (data, event) {
        self.illusions.push(ko.observable(new my.prototype.IllusionViewModel(0, self, self.illusionAbilityLevel())));
    };
    
    self.diffProperties = my.prototype.diffProperties;
    self.diff = {};

    for (var i = 0; i < self.diffProperties.length; i++) {
        var index = i;
        self.diff[self.diffProperties[index]] = self.getDiffFunction(self.diffProperties[index]);
    }
};

my.prototype.HeroModel.prototype.getDiffFunction = function (prop) {
    var self = this;
    return ko.computed(function () {
        if (prop == 'baseDamage') {
            return [self[prop]()[0] - self.heroCompare()[prop]()[0], self[prop]()[1] - self.heroCompare()[prop]()[1]];
        }
        else {
            return self[prop]() - self.heroCompare()[prop]();
        }
    }, this, { deferEvaluation: true });
}

my.prototype.HeroModel.prototype.getAbilityLevelMax = function (data) {
    if (data.abilitytype() === 'DOTA_ABILITY_TYPE_ATTRIBUTES') {
        return 10;
    }
    else if (data.name() === 'invoker_quas' || data.name() === 'invoker_wex' || data.name() === 'invoker_exort') {
        return 7;
    }
    else if (data.name() === 'invoker_invoke') {
        return 4;
    }
    else if (data.name() === 'earth_spirit_stone_caller' || data.name() === 'ogre_magi_unrefined_fireblast') {
        return 1;
    }
    else if (data.abilitytype() === 'DOTA_ABILITY_TYPE_ULTIMATE' || data.name() === 'keeper_of_the_light_recall' ||
             data.name() === 'keeper_of_the_light_blinding_light' || data.name() === 'ember_spirit_activate_fire_remnant' ||
             data.name() === 'lone_druid_true_form_battle_cry') {
        return 3;
    }
    else if (data.name() === 'puck_ethereal_jaunt'  || data.name() === 'shadow_demon_shadow_poison_release' ||
             data.name() === 'templar_assassin_trap' || data.name() === 'spectre_reality') {
        return 0;
    }
    else if (data.name() === 'invoker_cold_snap'  || data.name() === 'invoker_ghost_walk' || data.name() === 'invoker_tornado' || 
             data.name() === 'invoker_emp' || data.name() === 'invoker_alacrity' || data.name() === 'invoker_chaos_meteor' || 
             data.name() === 'invoker_sun_strike' || data.name() === 'invoker_forge_spirit' || data.name() === 'invoker_ice_wall' || 
             data.name() === 'invoker_deafening_blast') {
        return 0;
    }
    else if (data.name() === 'techies_minefield_sign' || data.name() === 'techies_focused_detonate') {
        return 0;
    }
    else {
        return 4;
    }
};
},{"./herocalc_core":47,"./herocalc_hero_damage":51,"./herocalc_knockout":53}],50:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');

var my = require("./herocalc_core");

my.prototype.CloneOption = function (name, displayname, levels, image, level) {
    this.heroName = ko.computed(function() {
        return (levels > 0) ? name + (level() <= levels ? level() : 1) : name;
    });
    this.heroDisplayName = displayname;
    this.image = image;
    this.levels = levels;
};

my.prototype.CloneViewModel = function (h,p) {
    var self = new my.prototype.HeroModel(h);
    self.parent = p;
    /*self.selectedHero(my.prototype.findWhere(self.availableHeroes(), {heroName: 'meepo'}));
    self.hero = ko.computed(function() {
        return ko.wrap.fromJS(my.prototype.heroData['npc_dota_hero_meepo']);
    });*/
    return self;
}
},{"./herocalc_core":47,"./herocalc_knockout":53}],51:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.DamageTypeColor = {
    'physical': '#979aa2',
    'pure': 'goldenrod',
    'magic': '#428bca',
    'default': '#979aa2'
}

my.prototype.HeroDamageMixin = function (self) {
    self.critInfo = ko.pureComputed(function () {
        var critSources = self.inventory.getCritSource();
        my.prototype.extend(critSources, self.ability().getCritSource());
        my.prototype.extend(critSources, self.buffs.getCritSource());
        var critSourcesArray = [];
        for (var prop in critSources) {
            var el = critSources[prop];
            el.name = prop
            critSourcesArray.push(el);
        }
        function compareByMultiplier(a,b) {
            if (a.multiplier < b.multiplier)
                return 1;
            if (a.multiplier > b.multiplier)
                return -1;
            return 0;
        }

        critSourcesArray.sort(compareByMultiplier);
        
        var result = [];
        var critTotal = 0;
        for (var i = 0; i < critSourcesArray.length; i++) {
            var total = 1;
            for (var j = 0; j < i; j++) {
                for (var k = 0; k <critSourcesArray[j].count; k++) {
                    total *= (1 - critSourcesArray[j].chance);
                }
            }
            var total2 = 1;
            for (var k = 0; k < critSourcesArray[i].count; k++) {
                total2 *= (1 - critSourcesArray[i].chance);
            }
            total *= (1 - total2);
            critTotal += total;
            if (critSourcesArray[i].count > 1) {
                result.push({
                    'name':critSourcesArray[i].displayname + ' x' + critSourcesArray[i].count,
                    'chance':critSourcesArray[i].chance,
                    'multiplier':critSourcesArray[i].multiplier,
                    'count':critSourcesArray[i].count,
                    'totalChance':total
                });
            }
            else {
                result.push({
                    'name':critSourcesArray[i].displayname,
                    'chance':critSourcesArray[i].chance,
                    'multiplier':critSourcesArray[i].multiplier,
                    'count':critSourcesArray[i].count,
                    'totalChance':total
                });
            }
        }
        return { sources: result, total: critTotal };
    });

    self.cleaveInfo = ko.pureComputed(function () {
        var cleaveSources = self.inventory.getCleaveSource();
        my.prototype.extend(cleaveSources, self.ability().getCleaveSource());
        my.prototype.extend(cleaveSources, self.buffs.getCleaveSource());
        var cleaveSourcesArray = [];
        for (var prop in cleaveSources) {
            var el = cleaveSources[prop];
            el.name = prop
            cleaveSourcesArray.push(el);
        }
        function compareByRadius(a,b) {
            if (a.radius < b.radius)
                return 1;
            if (a.radius > b.radius)
                return -1;
            return 0;
        }

        cleaveSourcesArray.sort(compareByRadius);
        var cleaveSourcesByRadius = {};
        for (var i = 0; i < cleaveSourcesArray.length; i++) {
            var total = 0;
            for (var j = 0; j <cleaveSourcesArray.length; j++) {
                if (cleaveSourcesArray[j].radius >= cleaveSourcesArray[i].radius) {
                    total += cleaveSourcesArray[j].magnitude * cleaveSourcesArray[j].count;
                }
            }
            cleaveSourcesByRadius[cleaveSourcesArray[i].radius] = total;
        }
        var result = [];
        for (var prop in cleaveSourcesByRadius) {
            result.push({
                'radius':prop,
                'magnitude':cleaveSourcesByRadius[prop]
            });
        }
        return result;
    });
    
    self.bashInfo = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        var bashSources = self.inventory.getBashSource(attacktype);
        my.prototype.extend(bashSources, self.ability().getBashSource());
        var bashSourcesArray = [];
        for (var prop in bashSources) {
            var el = bashSources[prop];
            el.name = prop
            bashSourcesArray.push(el);
        }
        function compareByDuration(a, b) {
            if (a.duration < b.duration)
                return 1;
            if (a.duration > b.duration)
                return -1;
            return 0;
        }

        //bashSourcesArray.sort(compareByDuration);
        
        var result = [];
        var bashTotal = 0;
        for (var i = 0;i < bashSourcesArray.length; i++) {
            var total = 1;
            for (var j = 0; j < i; j++) {
                for (var k = 0; k < bashSourcesArray[j].count; k++) {
                    total *= (1 - bashSourcesArray[j].chance);
                }
            }
            var total2 = 1;
            for (var k = 0; k < bashSourcesArray[i].count; k++) {
                total2 *= (1 - bashSourcesArray[i].chance);
            }
            total *= (1 - total2);
            bashTotal += total;
            if (bashSourcesArray[i].name === 'spirit_breaker_greater_bash') {
                var d = bashSourcesArray[i].damage * self.totalMovementSpeed();
            }
            else {
                var d = bashSourcesArray[i].damage;
            }
            if (bashSourcesArray[i].count > 1) {
                result.push({
                    'name':bashSourcesArray[i].displayname, // + ' x' + bashSourcesArray[i].count,
                    'chance':bashSourcesArray[i].chance,
                    'damage':d,
                    'count':bashSourcesArray[i].count,
                    'damageType':bashSourcesArray[i].damageType,
                    'totalChance':total
                });
            }
            else {
                result.push({
                    'name':bashSourcesArray[i].displayname,
                    'chance':bashSourcesArray[i].chance,
                    'damage':d,
                    'count':bashSourcesArray[i].count,
                    'damageType':bashSourcesArray[i].damageType,
                    'totalChance':total
                });
            }

        }
        return { sources: result, total: bashTotal };
    });
    
    self.orbProcInfo = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        var damageSources = self.inventory.getOrbProcSource();
        var damageSourcesArray = [];
        for (var prop in damageSources) {
            var el = damageSources[prop];
            el.name = prop
            damageSourcesArray.push(el);
        }
        function compareByDamage(a, b) {
            if (a.priority > b.priority) {
                return 1;
            }
            if (a.priority < b.priority) {
                return -1;
            }
            if (a.damage < b.damage)
                return 1;
            if (a.damage > b.damage)
                return -1;
            return 0;
        }

        damageSourcesArray.sort(compareByDamage);
        
        var result = [];
        var damageTotal = 0;
        for (var i=0 ; i < damageSourcesArray.length; i++) {
            var total = 1;
            for (var j = 0; j < i; j++) {
                for (var k = 0; k < damageSourcesArray[j].count; k++) {
                    total *= (1 - damageSourcesArray[j].chance);
                }
            }
            var total2 = 1;
            for (var k = 0; k < damageSourcesArray[i].count; k++) {
                total2 *= (1 - damageSourcesArray[i].chance);
            }
            total *= (1 - total2);
            damageTotal += total;
            if (damageSourcesArray[i].count > 1) {
                result.push({
                    'name':damageSourcesArray[i].displayname + ' x' + damageSourcesArray[i].count,
                    'chance':damageSourcesArray[i].chance,
                    'damage':damageSourcesArray[i].damage,
                    'count':damageSourcesArray[i].count,
                    'damageType':damageSourcesArray[i].damageType,
                    'totalChance':total
                });
            }
            else {
                result.push({
                    'name':damageSourcesArray[i].displayname,
                    'chance':damageSourcesArray[i].chance,
                    'damage':damageSourcesArray[i].damage,
                    'count':damageSourcesArray[i].count,
                    'damageType':damageSourcesArray[i].damageType,
                    'totalChance':total
                });
            }
        }
        return { sources: result, total: damageTotal };
    });
    
    self.getReducedDamage = function (value, type) {
        var result = value;
        switch (type) {
            case 'physical':
                result = value * (1 - (0.06 * self.enemy().totalArmorPhysical()) / (1 + 0.06 * Math.abs(self.enemy().totalArmorPhysical())));
            break;
            case 'magic':
                result = value * (1 - self.enemy().totalMagicResistance() / 100);
            break;
            case 'pure':
                result = value;
            break;
            case 'composite':
                result = value * (1 - (0.06 * self.enemy().totalArmorPhysical()) / (1 + 0.06 * Math.abs(self.enemy().totalArmorPhysical())));
                result *= (1 - self.enemy().totalMagicResistance() / 100);
            break;
        }
        result *= self.ability().getDamageAmplification() * self.debuffs.getDamageAmplification();
        result *= self.enemy().ability().getDamageReduction() * self.enemy().buffs.getDamageReduction();
        return result;
    }
    
    self.damageTotalInfo = ko.pureComputed(function () {
        var bonusDamageArray = [
            self.ability().getBonusDamage().sources,
            self.buffs.getBonusDamage().sources
        ],
        bonusDamagePctArray = [
            self.ability().getBonusDamagePercent().sources,
            self.buffs.getBonusDamagePercent().sources
        ],
        itemBonusDamage = self.inventory.getBonusDamage().sources,
        itemBonusDamagePct = self.buffs.itemBuffs.getBonusDamagePercent(self.inventory.getBonusDamagePercent()).sources,
        critSources = self.critInfo(),
        abilityOrbSources = self.ability().getOrbSource(),
        itemOrbSources = self.inventory.getOrbSource(),
        itemProcOrbSources = self.orbProcInfo(),
        bashSources = self.bashInfo(),
        
        attackSources = [];
        
        attackSources.push({
            name: 'Base Attack',
            cooldown: 1
        });
        
        // weaver_geminate_attack
        if (self.heroId() === 'weaver') {
            var a = self.ability().abilities().find(function (ability) {
                return ability.name() === 'weaver_geminate_attack';
            });
            if (a) {
                if (a.level() > 0) {
                    var cd = a.cooldown()[a.level() - 1];
                    attackSources.push({
                        name: a.displayname(),
                        cooldown: (1/cd)
                    });
                }
            }
        }
        
        // echo_sabre
        var item = self.inventory.items().find(function (o) { return o.item === "echo_sabre" && o.enabled(); });
        if (item && self.heroData().attacktype === 'DOTA_UNIT_CAP_MELEE_ATTACK') {
            var item_echo_sabre = my.prototype.itemData['item_echo_sabre'];
            attackSources.push({
                name: item_echo_sabre.displayname,
                cooldown: (1/item_echo_sabre.cooldown)
            });
        }

        var attacks = attackSources.map(function (a) {
            var baseDamage = (self.baseDamage()[0] + self.baseDamage()[1]) / 2,
            totalDamage = 0,
            totalCritableDamage = 0,
            totalCrit = 0,
            geminateAttack = { damage: 0, damageReduced: 0, cooldown: 6, active: false },
            echoSabreAttack = { damage: 0, damageReduced: 0, cooldown: my.prototype.itemData['item_echo_sabre'].cooldown[0], active: false },
            damage = {
                pure: 0,
                physical: 0,
                magic: 0
            },
            result = [],
            crits = [];
            
            // base damage
            result.push({
                name: 'Base Damage',
                damage: baseDamage,
                damageType: 'physical',
                damageReduced: self.getReducedDamage(baseDamage, 'physical'),
                enabled: ko.observable(true)
            });
            totalDamage += baseDamage;
            totalCritableDamage += baseDamage;
            damage.physical += baseDamage;
            
            // bonus damage from items
            for (i in itemBonusDamage) {
                var d = itemBonusDamage[i].damage*itemBonusDamage[i].count * self.ability().getSelfBaseDamageReductionPct() * self.enemy().ability().getBaseDamageReductionPct() * self.debuffs.itemBuffs.getBaseDamageReductionPct();
                result.push({
                    name: itemBonusDamage[i].displayname + (itemBonusDamage[i].count > 1 ? ' x' + itemBonusDamage[i].count : ''),
                    damage: d,
                    damageType: itemBonusDamage[i].damageType,
                    damageReduced: self.getReducedDamage(d, itemBonusDamage[i].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                totalCritableDamage += d;
                damage[itemBonusDamage[i].damageType] += d;
            }

            // bonus damage percent from items
            for (i in itemBonusDamagePct) {
                var d = baseDamage * itemBonusDamagePct[i].damage;
                result.push({
                    name: itemBonusDamagePct[i].displayname,
                    damage: d,
                    damageType: itemBonusDamagePct[i].damageType,
                    damageReduced: self.getReducedDamage(d, itemBonusDamagePct[i].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                totalCritableDamage += d;
                damage[itemBonusDamagePct[i].damageType] += d;
            }
            
            // bonus damage from abilities and buffs
            for (var i = 0; i < bonusDamageArray.length; i++) {
                for (j in bonusDamageArray[i]) {
                    var d = bonusDamageArray[i][j].damage;
                    result.push({
                        name: bonusDamageArray[i][j].displayname,
                        damage: d,
                        damageType: bonusDamageArray[i][j].damageType,
                        damageReduced: self.getReducedDamage(d, bonusDamageArray[i][j].damageType),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    totalCritableDamage += d;
                    damage[bonusDamageArray[i][j].damageType] += d;
                }
            }
            
            // bonus damage percent from abilities and buffs
            for (var i = 0; i < bonusDamagePctArray.length; i++) {
                for (j in bonusDamagePctArray[i]) {
                    var d = baseDamage * bonusDamagePctArray[i][j].damage;
                    result.push({
                        name: bonusDamagePctArray[i][j].displayname,
                        damage: d,
                        damageType: bonusDamagePctArray[i][j].damageType,
                        damageReduced: self.getReducedDamage(d, bonusDamagePctArray[i][j].damageType),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    totalCritableDamage += d;
                    damage[bonusDamagePctArray[i][j].damageType] += d;
                }
            }
            // drow_ranger_trueshot
            if (self.heroData().attacktype === 'DOTA_UNIT_CAP_RANGED_ATTACK') {
                if (self.heroId() === 'drow_ranger') {
                    var s = self.ability().getBonusDamagePrecisionAura().sources;
                    var index = 0;
                }
                else {
                    var s = self.buffs.getBonusDamagePrecisionAura().sources;
                    var index = 1;
                }
                if (s[index] != undefined) {
                    if (self.heroId() === 'drow_ranger') {
                        var d = s[index].damage * self.totalAgi();
                    }
                    else {
                        var d = s[index].damage;
                    }
                    result.push({
                        name: s[index].displayname,
                        damage: d,
                        damageType: 'physical',
                        damageReduced: self.getReducedDamage(d, 'physical'),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    totalCritableDamage += d;
                    damage.physical += d;                    
                }
            }
            
            // riki_backstab
            if (self.heroId() === 'riki') {
                var s = self.ability().getBonusDamageBackstab().sources;
                var index = 0;
            }
            else {
                var s = self.buffs.getBonusDamageBackstab().sources;
                var index = 1;
            }
            if (s[index] != undefined) {
                if (self.heroId() === 'riki') {
                    var d = s[index].damage * self.totalAgi();
                }
                else {
                    var d = s[index].damage;
                }
                result.push({
                    name: s[index].displayname,
                    damage: d,
                    damageType: 'physical',
                    damageReduced: self.getReducedDamage(d, 'physical'),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                //totalCritableDamage += d;
                damage.physical += d;                    
            }

            // bash damage
            for (var i = 0; i < bashSources.sources.length; i++) {
                var o = bashSources.sources[i];
                var d = bashSources.sources[i].damage;
                var cd = self.attacksPerSecond();
                if (o.cooldown) {
                    cd = Math.max(1/o.cooldown, cd);
                }
                for (var j = 0; j < bashSources.sources[i].count; j++) {
                    result.push({
                        name: bashSources.sources[i].name,
                        damage: d,
                        damageType: bashSources.sources[i].damageType,
                        damageReduced: self.getReducedDamage(d, bashSources.sources[i].damageType),
                        dps: d * cd * bashSources.sources[i].chance,
                        dpsReduced: self.getReducedDamage(d, bashSources.sources[i].damageType) * cd * bashSources.sources[i].chance,
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    damage[bashSources.sources[i].damageType] += d;
                }

            }
            
            // %-based orbs
            for (var i = 0; i < itemProcOrbSources.sources.length; i++) {
                var d = itemProcOrbSources.sources[i].damage * (1 - Math.pow(1 - itemProcOrbSources.sources[i].chance, itemProcOrbSources.sources[i].count));
                result.push({
                    name: itemProcOrbSources.sources[i].name,
                    damage: d,
                    damageType: itemProcOrbSources.sources[i].damageType,
                    damageReduced: self.getReducedDamage(d, itemProcOrbSources.sources[i].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                damage[itemProcOrbSources.sources[i].damageType] += d;
            }
            
            // ability orbs
            for (var orb in abilityOrbSources) {
                var d = abilityOrbSources[orb].damage * (1 - itemProcOrbSources.total);
                result.push({
                    name: abilityOrbSources[orb].displayname,
                    damage: d,
                    damageType: abilityOrbSources[orb].damageType,
                    damageReduced: self.getReducedDamage(d, abilityOrbSources[orb].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                damage[abilityOrbSources[orb].damageType] += d;
            }
            
            // item orbs
            if (Object.keys(abilityOrbSources).length === 0) {
                for (var orb in itemOrbSources) {
                    var d = itemOrbSources[orb].damage * (1 - itemProcOrbSources.total);
                    result.push({
                        name: itemOrbSources[orb].displayname,
                        damage: d,
                        damageType: itemOrbSources[orb].damageType,
                        damageReduced: self.getReducedDamage(d, itemOrbSources[orb].damageType),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    damage[itemOrbSources[orb].damageType] += d;
                }            
            }
            
            // crit damage
            for (var i = 0; i < critSources.sources.length; i++) {
                var d = totalCritableDamage * (critSources.sources[i].multiplier - 1);// * critSources.sources[i].totalChance;
                crits.push({
                    name: critSources.sources[i].name + ', ' + critSources.sources[i].multiplier + 'x, ' + (critSources.sources[i].totalChance * 100).toFixed(1) + '%',
                    damage: d,
                    damageType: 'physical',
                    damageReduced: self.getReducedDamage(d, 'physical'),
                    enabled: ko.observable(true),
                    chance: critSources.sources[i].totalChance
                });
                totalCrit += d;
            }

            var totalReduced = self.getReducedDamage(damage.pure, 'pure') 
                    + self.getReducedDamage(damage.physical, 'physical')
                    + self.getReducedDamage(damage.magic, 'magic'),
                totalCritReduced = self.getReducedDamage(totalCrit, 'physical'),
                dps = {
                    base: totalDamage * self.attacksPerSecond(),
                    crit: totalCrit * self.attacksPerSecond(),
                    geminateAttack: geminateAttack.active ? geminateAttack.damage / geminateAttack.cooldown : 0,
                    reduced: {
                        base: totalReduced * self.attacksPerSecond(),
                        crit: totalCritReduced * self.attacksPerSecond(),
                        geminateAttack: geminateAttack.active ? self.getReducedDamage(geminateAttack.damage, 'physical') / geminateAttack.cooldown : 0,
                    }
                }
                
            crits.forEach(function (o) {
                if (!o.dps) {
                    o.dps = o.damage * (o.cooldown || self.attacksPerSecond()) * o.chance;
                }
                if (!o.dpsReduced) {
                    o.dpsReduced = o.damageReduced * (o.cooldown || self.attacksPerSecond()) * o.chance;
                }
            });
                
            result.forEach(function (o) {
                if (!o.dps) {
                    o.dps = o.damage * (o.cooldown || self.attacksPerSecond());
                }
                if (!o.dpsReduced) {
                    o.dpsReduced = o.damageReduced * (o.cooldown || self.attacksPerSecond());
                }
            });
            
            var totalCritChance = crits.reduce(function (memo, o) { return memo + o.chance }, 0);
                
            var t1Crit = ko.computed(function () {
                var c = crits.find(function (o) { return o.enabled(); });
                return c ? c.damage : 0;
            });
            var t2Crit = ko.computed(function () {
                var c = crits.find(function (o) { return o.enabled(); });
                return c ? c.damageReduced : 0;
            });
            var t3Crit = ko.computed(function () {
                return crits.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dps }, 0);
            });
            var t4Crit = ko.computed(function () {
                return crits.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dpsReduced }, 0);
            });
                
            var t1 = ko.computed(function () {
                return result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.damage }, 0) + t1Crit();
            });
            var t2 = ko.computed(function () {
                return result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.damageReduced }, 0) + t2Crit();
            });
            var t3 = ko.computed(function () {
                return (result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dps }, 0) + t3Crit()) * a.cooldown;
            });
            var t4 = ko.computed(function () {
                return (result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dpsReduced }, 0) + t4Crit()) * a.cooldown;
            });
            
            var totalCritRow = [t1Crit, t2Crit, t3Crit, t4Crit];
            
            var totalRow = [t1, t2, t3, t4];

            return {
                name: a.name + ' Subtotal',
                cooldown: a.cooldown,
                enabled: ko.observable(true),
                visible: ko.observable(true),
                totalCritChance: totalCritChance,
                totalCritRow: totalCritRow,
                totalRow: totalRow,
                sources: result,
                sourcesCrit: crits,
                total: totalDamage,
                totalCrit: totalCrit,
                totalGeminateAttack: totalDamage + geminateAttack.damage,
                totalGeminateAttackReduced: totalReduced + geminateAttack.damageReduced,
                geminateAttack: geminateAttack,
                totalCritReduced: totalCritReduced,
                totalReduced: totalReduced,
                sumTotal: totalDamage + totalCrit,
                sumTotalReduced: totalReduced + totalCritReduced,
                dps: {
                    base: dps.base,
                    crit: dps.base + dps.crit,
                    geminateAttack: dps.base + dps.geminateAttack,
                    total: dps.base + dps.crit + dps.geminateAttack,
                    reduced: {
                        base: dps.reduced.base,
                        crit: dps.reduced.base + dps.reduced.crit,
                        geminateAttack: dps.reduced.base + dps.reduced.geminateAttack,
                        total: dps.reduced.base + dps.reduced.crit + dps.reduced.geminateAttack
                    }
                }
            };
        });
        
        var t1 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[0]() }, 0);
        });
        var t2 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[1]() }, 0);
        });
        var t3 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[2]() }, 0);
        });
        var t4 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[3]() }, 0);
        });
            
        return {
            attacks: attacks,
            totalRow: [t1, t2, t3, t4]
        }
    });
    
    self.getDamageTypeColor = function (damageType) {
        return my.prototype.DamageTypeColor[damageType] || my.prototype.DamageTypeColor['default'];
    }
    
}
},{"./herocalc_core":47,"./herocalc_knockout":53}],52:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
var my = require("./herocalc_core");

my.prototype.stackableItems = ['clarity','flask','dust','ward_observer','ward_sentry','tango','tpscroll','smoke_of_deceit'],
my.prototype.levelitems = ['necronomicon','dagon','diffusal_blade','travel_boots'],
my.prototype.validItems = ["abyssal_blade","ultimate_scepter","courier","arcane_boots","armlet","assault","boots_of_elves","bfury","belt_of_strength","black_king_bar","blade_mail","blade_of_alacrity","blades_of_attack","blink","bloodstone","boots","travel_boots","bottle","bracer","broadsword","buckler","butterfly","chainmail","circlet","clarity","claymore","cloak","lesser_crit","greater_crit","dagon","demon_edge","desolator","diffusal_blade","rapier","ancient_janggo","dust","eagle","energy_booster","ethereal_blade","cyclone","skadi","flying_courier","force_staff","gauntlets","gem","ghost","gloves","hand_of_midas","headdress","flask","heart","heavens_halberd","helm_of_iron_will","helm_of_the_dominator","hood_of_defiance","hyperstone","branches","javelin","sphere","maelstrom","magic_stick","magic_wand","manta","mantle","mask_of_madness","medallion_of_courage","mekansm","mithril_hammer","mjollnir","monkey_king_bar","lifesteal","mystic_staff","necronomicon","null_talisman","oblivion_staff","ward_observer","ogre_axe","orb_of_venom","orchid","pers","phase_boots","pipe","platemail","point_booster","poor_mans_shield","power_treads","quarterstaff","quelling_blade","radiance","reaver","refresher","ring_of_aquila","ring_of_basilius","ring_of_health","ring_of_protection","ring_of_regen","robe","rod_of_atos","relic","sobi_mask","sange","sange_and_yasha","satanic","sheepstick","ward_sentry","shadow_amulet","invis_sword","shivas_guard","basher","slippers","smoke_of_deceit","soul_booster","soul_ring","staff_of_wizardry","stout_shield","talisman_of_evasion","tango","tpscroll","tranquil_boots","ultimate_orb","urn_of_shadows","vanguard","veil_of_discord","vitality_booster","vladmir","void_stone","wraith_band","yasha","crimson_guard","enchanted_mango","lotus_orb","glimmer_cape","guardian_greaves","moon_shard","silver_edge","solar_crest","octarine_core","aether_lens","faerie_fire","iron_talon","dragon_lance","echo_sabre","infused_raindrop","blight_stone","wind_lace","tome_of_knowledge","bloodthorn","hurricane_pike"],
my.prototype.itemsWithActive = ['heart','smoke_of_deceit','dust','ghost','tranquil_boots','phase_boots','power_treads','buckler','medallion_of_courage','ancient_janggo','mekansm','pipe','veil_of_discord','rod_of_atos','orchid','sheepstick','armlet','invis_sword','ethereal_blade','shivas_guard','manta','mask_of_madness','diffusal_blade','mjollnir','satanic','ring_of_basilius','ring_of_aquila', 'butterfly', 'moon_shard', 'silver_edge','bloodthorn'];

my.prototype.ItemInput = function (value, name, debuff) {
    if (my.prototype.itemData['item_' + value].ItemAliases instanceof Array) {
        var itemAlias = my.prototype.itemData['item_' + value].ItemAliases.join(' ');
    }
    else {
        var itemAlias = my.prototype.itemData['item_' + value].ItemAliases;
    }
    this.value = ko.observable(value);
    this.debuff = ko.observable(debuff);
    if (this.debuff()) {
        this.value = ko.observable(value + '|' + debuff.id);
        this.name = ko.observable(name + ' (' + debuff.name + ')');
        this.displayname = ko.observable(name + ' (' + debuff.name + ') <span style="display:none">' + ';' + itemAlias + '</span>');
    }
    else {
        this.value = ko.observable(value);
        this.name = ko.observable(name);
        this.displayname = ko.observable(name + ' <span style="display:none">' + ';' + itemAlias + '</span>');
    }
};

my.prototype.BasicInventoryViewModel = function (h) {
    var self = this;
    self.items = ko.observableArray([]);
    self.activeItems = ko.observableArray([]);
    self.addItem = function (data, event) {
        if (data.selectedItem() != undefined) {
            var new_item = {
                item: data.selectedItem().split('|')[0],
                state: ko.observable(0),
                size: data.itemInputValue(),
                enabled: ko.observable(true)
            }
            switch (new_item.item) {
                case 'dagon':
                    new_item.size = Math.min(new_item.size, 5);
                break;
                break;
                case 'travel_boots':
                case 'diffusal_blade':
                    new_item.size = Math.min(new_item.size, 2);
                break;
                case 'necronomicon':
                    new_item.size = Math.min(new_item.size, 3);
                break;
            }
            self.items.push(new_item);
            if (data.selectedItem() === 'ring_of_aquila' || data.selectedItem() === 'ring_of_basilius' || data.selectedItem() === 'heart') {
                self.toggleItem(undefined, new_item, undefined);
            }
        }
    };
    self.toggleItem = function (index, data, event) {
        if (my.prototype.itemsWithActive.indexOf(data.item) >= 0) {
            if (self.activeItems.indexOf(data) < 0) {
                self.activeItems.push(data);
            }
            else {
                self.activeItems.remove(data);
            }
            switch (data.item) {
                case 'power_treads':
                    if (data.state() < 2) {
                        data.state(data.state() + 1);
                    }
                    else {
                        data.state(0);
                    }                
                break;
                default:
                    if (data.state() == 0) {
                        data.state(1);
                    }
                    else {
                        data.state(0);
                    }                
                break;
            }
        }
    }.bind(this);
    self.removeItem = function (item) {
        self.activeItems.remove(item);
        self.items.remove(item);
    }.bind(this);
    self.toggleMuteItem = function (item) {
        item.enabled(!item.enabled());
    }.bind(this);      
    self.removeAll = function () {
        self.activeItems.removeAll();
        self.items.removeAll();
    }.bind(this);
}
my.prototype.BasicInventoryViewModel.prototype.getItemImage = function (data) {
    var state = ko.utils.unwrapObservable(data.state);
    switch (data.item) {
        case 'power_treads':
            if (state == 0) {
                return '/media/images/items/' + data.item + '_str.png';
            }
            else if (state == 1) {
                return '/media/images/items/' + data.item + '_int.png';
            }
            else {
                return '/media/images/items/' + data.item + '_agi.png';
            }
        break;
        case 'tranquil_boots':
        case 'ring_of_basilius':
            if (state == 0) {
                return '/media/images/items/' + data.item + '.png';
            }
            else {
                return '/media/images/items/' + data.item + '_active.png';
            }
        break;
        case 'armlet':
            if (state == 0) {
                return '/media/images/items/' + data.item + '.png';
            }
            else {
                return '/media/images/items/' + data.item + '_active.png';
            }
        break;
        case 'ring_of_aquila':
            if (state == 0) {
                return '/media/images/items/' + data.item + '_active.png';
            }
            else {
                return '/media/images/items/' + data.item + '.png';
            }
        break;
        case 'dagon':
        case 'diffusal_blade':
        case 'travel_boots':
        case 'necronomicon':
            if (data.size > 1) {
                return '/media/images/items/' + data.item + '_' + data.size + '.png';
            }
            else {
                return '/media/images/items/' + data.item + '.png';
            }
        break;
        default:
            return '/media/images/items/' + data.item + '.png';            
        break;
    }
};
my.prototype.BasicInventoryViewModel.prototype.getItemSizeLabel = function (data) {
    if (my.prototype.stackableItems.indexOf(data.item) != -1) {
        return '<span style="font-size:10px">Qty: </span>' + data.size;
    }
    else if (my.prototype.levelitems.indexOf(data.item) != -1) {
        return '<span style="font-size:10px">Lvl: </span>' + data.size;
    }
    else if (data.item == 'bloodstone') {
        return '<span style="font-size:10px">Charges: </span>' + data.size;
    }
    else {
        return '';
    }
};
my.prototype.BasicInventoryViewModel.prototype.getActiveBorder = function (data) {
    switch (data.item) {
        case 'power_treads':
        case 'tranquil_boots':
        case 'ring_of_basilius':
        case 'ring_of_aquila':
        case 'armlet':
            return 0;
        break;
        default:
            return ko.utils.unwrapObservable(data.state);    
        break;
    }
}
my.prototype.BasicInventoryViewModel.prototype.getItemAttributeValue = function (attributes, attributeName, level) {
    for (var i = 0; i < attributes.length; i++) {
        if (attributes[i].name == attributeName) {
            if (level == 0) {
                return parseFloat(attributes[i].value[0]);
            }
            else if (level > attributes[i].value.length) {
                return parseFloat(attributes[i].value[0]);
            }
            else {
                return parseFloat(attributes[i].value[level - 1]);
            }
        }
    }
}

my.prototype.InventoryViewModel = function (h) {
    var self = new my.prototype.BasicInventoryViewModel();
    self.hero = h;
    self.hasInventory = ko.observable(true);
    self.items = ko.observableArray([]);
    self.activeItems = ko.observableArray([]);
    self.hasScepter = ko.computed(function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (item === 'ultimate_scepter' && self.items()[i].enabled()) {
                return true;
            }
            
        }
        return false;
    }, this);
    self.isEthereal = ko.computed(function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if ((item === 'ghost' || item === 'ethereal_blade') && self.items()[i].enabled() && isActive) {
                return true;
            }
        }
        return false;
    }, this);
    self.isSheeped = ko.computed(function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (item === 'sheepstick' && self.items()[i].enabled() && isActive) {
                return true;
            }
        }
        return false;
    }, this);
    self.totalCost = ko.computed(function () {
        var c = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            if (my.prototype.stackableItems.indexOf(item) != -1) {
                c += my.prototype.itemData['item_' + item].itemcost * self.items()[i].size;
            }
            else if (my.prototype.levelitems.indexOf(item) != -1) {
                switch(item) {
                    case 'diffusal_blade':
                        c += my.prototype.itemData['item_' + item].itemcost + (self.items()[i].size - 1) * 700;
                    break;
                    case 'necronomicon':
                    case 'dagon':
                        c += my.prototype.itemData['item_' + item].itemcost + (self.items()[i].size - 1) * 1250;
                    break;
                    default:
                        c += my.prototype.itemData['item_' + item].itemcost;
                    break;
                }
            }
            else {
                c += my.prototype.itemData['item_' + item].itemcost;
            }
            
        }
        return c;
    }, this);
    self.addItemBuff = function (data, event) {
        if (self.hasInventory() && self.selectedItemBuff() != undefined) {
            var new_item = {
                item: self.selectedItemBuff(),
                state: ko.observable(0),
                size: 1,
                enabled: ko.observable(true)
            }
            self.items.push(new_item);
            if (self.selectedItemBuff() === 'ring_of_aquila' || self.selectedItemBuff() === 'ring_of_basilius') {
                self.toggleItem(undefined, new_item, undefined);
            }
        }
    };
    self.addItemDebuff = function (data, event) {
        if (self.hasInventory() && self.selectedItemDebuff() != undefined) {
            var new_item = {
                item: self.selectedItemDebuff().split('|')[0],
                state: ko.observable(0),
                size: 1,
                enabled: ko.observable(true)
            }
            if (self.selectedItemDebuff().split('|').length == 2) {
                new_item.debuff = self.selectedItemDebuff().split('|')[1]
            }
            self.items.push(new_item);
            if (self.selectedItemDebuff() === 'ring_of_aquila' || self.selectedItemDebuff() === 'ring_of_basilius') {
                self.toggleItem(undefined, new_item, undefined);
            }
        }
    };
    
    self.getAttributes = function (attributetype) {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            var size = self.items()[i].size;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_all_stats':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'bonus_stats':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                }
                switch(attributetype) {
                    case 'agi':
                        if (attribute.name == 'bonus_agility') {
                            if (item == 'diffusal_blade') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        if (attribute.name == 'bonus_stat' && self.items()[i].state() == 2) {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_agi') {totalAttribute += parseInt(attribute.value[0]);};
                    break;
                    case 'int':
                        if (attribute.name == 'bonus_intellect') {
                            if (item == 'necronomicon') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else if (item == 'diffusal_blade') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else if (item == 'dagon') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        if (attribute.name == 'bonus_intelligence') {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_int') {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_stat' && self.items()[i].state() == 1) {totalAttribute += parseInt(attribute.value[0]);};
                    break;
                    case 'str':
                        if (attribute.name == 'bonus_strength') {
                            if (item == 'necronomicon') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        if (attribute.name == 'bonus_stat' && self.items()[i].state() == 0) {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_str') {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'unholy_bonus_strength' && isActive) {totalAttribute += parseInt(attribute.value[0]);};
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getBash = function (attacktype) {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bash_chance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                    case 'bash_chance_melee':
                        if (attacktype == 'DOTA_UNIT_CAP_MELEE_ATTACK') { totalAttribute *= (1 - parseInt(attribute.value[0]) / 100); };
                    break;
                    case 'bash_chance_ranged':
                        if (attacktype == 'DOTA_UNIT_CAP_RANGED_ATTACK') { totalAttribute *= (1 - parseInt(attribute.value[0]) / 100); };
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getCritChance = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'crit_chance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getCritSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'lesser_crit':
                case 'greater_crit':
                case 'bloodthorn':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'crit_chance', 0) / 100,
                            'multiplier': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'crit_multiplier', 0) / 100,
                            'count': 1,
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }
            if (item === 'bloodthorn' && isActive) {
                if (sources['soul_rend'] == undefined) {
                    sources['soul_rend'] = {
                        'chance': 1,
                        'multiplier': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'target_crit_multiplier', 0) / 100,
                        'count': 1,
                        'displayname': 'Soul Rend'
                    }
                }
                else {
                    sources['soul_rend'].count += 1;
                }
            }
        }
        return sources;
    };

    self.getCleaveSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'bfury':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'radius': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'cleave_radius', 0),
                            'magnitude': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'cleave_damage_percent', 0) / 100,
                            'count': 1,
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };
    
    self.getBashSource = function (attacktype) {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'javelin':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bonus_chance_damage', 1),
                            'damageType': 'magic',
                            'count': 1,
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bonus_chance', 1) / 100,
                            'displayname': my.prototype.itemData['item_' + item].displayname + ' Pierce'
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
                case 'monkey_king_bar':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'item': item,
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_chance', 0) / 100,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_damage', 0),
                            'duration': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_stun', 0),
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': 'Mini-Bash' //my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
                case 'abyssal_blade':
                case 'basher':
                    if (!sources.hasOwnProperty('bash')) {
                        sources['bash'] = {
                            'item': item,
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, (attacktype == 'DOTA_UNIT_CAP_MELEE_ATTACK') ?'bash_chance_melee' : 'bash_chance_ranged', 0) / 100,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bonus_chance_damage', 0),
                            'duration': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_duration', 0),
                            'count': 1,
                            'damageType': 'physical',
                            'displayname': 'Bash' //my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        //sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };
    
    self.getOrbProcSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'maelstrom':
                case 'mjollnir':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'chain_chance', 0) / 100,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'chain_damage', 0),
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };

    self.getOrbSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'diffusal_blade':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'chance': 1,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'feedback_mana_burn', self.items()[i].size),
                            'count': 1,
                            'damageType': 'physical',
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };
    
    self.getHealth = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_health':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getHealthRegen = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'health_regen':
                    case 'bonus_regen':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'bonus_health_regen':
                        if (item == 'tranquil_boots' && !isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                        else if (item != 'tranquil_boots') {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'hp_regen':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'health_regen_rate':
                        if (item == 'heart' && isActive) {
                            totalAttribute += (parseInt(attribute.value[0]) / 100) * self.hero.health();
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getHealthRegenAura = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(item + attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'aura_health_regen':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(item + attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    
    self.getMana = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_mana':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getManaRegen = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'aura_mana_regen':
                    case 'mana_regen_aura':
                        totalAttribute += parseFloat(attribute.value[0]);
                    break;
                    case 'mana_regen':
                        if (item == 'infused_raindrop') totalAttribute += parseFloat(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute;    
    };
    self.getManaRegenPercent = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_mana_regen':
                    case 'mana_regen':
                    case 'bonus_mana_regen_pct':
                        if (item != 'infused_raindrop') totalAttribute += parseFloat(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute / 100;    
    };
    self.getManaRegenBloodstone = function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            if (item.indexOf('bloodstone') != -1) {
                return parseInt(self.items()[i].size);
            }
        }
        return 0;
    };
    
    self.getArmor = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_armor':
                        if (!isActive || item != 'medallion_of_courage') { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                    case 'unholy_bonus_armor':
                        if (isActive && item == 'armlet') { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getArmorAura = function (aList) {
        var totalAttribute = 0,
            attributeList = aList || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0;j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (attributeList.find(function (a) { return attribute.name == a.name; })) continue;
                switch(attribute.name) {
                    // buckler
                    case 'bonus_aoe_armor':
                        if (isActive) {
                            attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                        }
                    break;
                    // assault
                    case 'aura_positive_armor':
                        attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                    break;
                    // ring_of_aquila,ring_of_basilius
                    case 'aura_bonus_armor':
                        if (isActive) {
                            attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                        }
                    break;
                    // vladmir
                    case 'armor_aura':
                        attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                    break;
                    // mekansm
                    case 'heal_bonus_armor':
                        if (isActive) {
                            attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                        }
                    break;
                }
            }
        }
        // remove buckler if there is a mekansm
        if (attributeList.find(function (attribute) { return attribute.name == 'heal_bonus_armor'; })) {
            attributeList = attributeList.filter(function (attribute) {
                return attribute.name !== 'bonus_aoe_armor';
            });
        }
        // remove ring_of_aquila,ring_of_basilius if there is a vladmir
        if (attributeList.find(function (attribute) { return attribute.name == 'armor_aura'; })) {
            attributeList = attributeList.filter(function (attribute) {
                return attribute.name !== 'aura_bonus_armor';
            });
        }
        
        totalAttribute = attributeList.reduce(function (memo, attribute) {
            return memo += attribute.value;
        }, 0);
        return {value: totalAttribute, attributes: attributeList};
    };
    self.getArmorReduction = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1 || excludeList.indexOf(item + '_' + attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'armor_reduction':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(item + '_' + attribute.name);
                    break;
                    case 'aura_negative_armor':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                    case 'corruption_armor':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getEvasion = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_evasion':
                        if (item != 'butterfly' || !isActive) totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getMovementSpeedFlat = function () {
        var totalAttribute = 0,
        hasBoots = false,
        hasEuls = false,
        hasWindLace = false,
        bootItems = ['boots','phase_boots','arcane_boots','travel_boots','power_treads','tranquil_boots','guardian_greaves'];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_movement_speed':
                        if (!hasBoots && bootItems.indexOf(item) >= 0) {
                            if (item != 'tranquil_boots' || (item == 'tranquil_boots' && !isActive)) {
                                totalAttribute += parseInt(attribute.value[0]);
                                hasBoots = true;
                            }
                        }
                        //else if (!hasEuls && item == 'cyclone') {
                        else if (item == 'cyclone') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasEuls = true;
                        }
                    break;
                    case 'broken_movement_speed':
                        if (!hasBoots && bootItems.indexOf(item) >= 0) {
                            if (item == 'tranquil_boots' && isActive) {
                                totalAttribute += parseInt(attribute.value[0]);
                                hasBoots = true;
                            }
                        }
                    break;
                    case 'bonus_movement':
                        if (!hasBoots && bootItems.indexOf(item) >= 0) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasBoots = true;
                        }
                    break;
                    case 'movement_speed':
                        if (!hasWindLace && item == 'wind_lace') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasWindLace = true;
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getMovementSpeedPercent = function (e) {
        var totalAttribute = 0,
            excludeList = e || [],
            hasYasha = false,
            hasDrums = false,
            hasDrumsActive = false,
            hasPhaseActive = false,
            hasShadowBladeActive = false,
            hasButterflyActive = false,
            hasMoMActive = false,
            yashaItems = ['manta','yasha','sange_and_yasha'];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'movement_speed_percent_bonus':
                        if (!hasYasha && yashaItems.indexOf(item) >= 0) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasYasha = true;
                        }
                    break;
                    case 'bonus_aura_movement_speed_pct':
                        if (!hasDrums && item == 'ancient_janggo') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasDrums = true;
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'phase_movement_speed':
                        if (isActive && !hasPhaseActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasPhaseActive = true;
                        }
                    break;
                    case 'bonus_movement_speed_pct':
                        if (isActive && !hasDrumsActive && item == 'ancient_janggo') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasDrumsActive = true;
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'windwalk_movement_speed':
                        if (isActive && !hasShadowBladeActive && (item == 'invis_sword' || item == 'silver_edge')) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasShadowBladeActive = true;
                        }
                    break;
                    case 'berserk_bonus_movement_speed':
                        if (isActive && !hasMoMActive && item == 'mask_of_madness') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasMoMActive = true;
                        }
                    break;
                    case 'bonus_movement_speed': //manta
                        if (!hasYasha && item == 'manta') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasYasha = true;
                        }
                        else if (item == 'smoke_of_deceit' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'bonus_move_speed':
                        if (isActive && !hasButterflyActive && item == 'butterfly') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasButterflyActive = true;
                        }
                    break;
                }
            }
        }
        return {value: totalAttribute/100, excludeList: excludeList};
    };
    
    self.getMovementSpeedPercentReduction = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'movespeed':
                        if (item == 'dust' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    case 'blast_movement_speed':
                        if (item == 'shivas_guard' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    case 'cold_movement_speed':
                        if (item == 'skadi') {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'maim_movement_speed':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'maim') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                }
            }
        }
        return {value: totalAttribute/100, excludeList: excludeList};
    };
    
    self.getBonusDamage = function () {
        var totalAttribute = 0;
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_damage':
                        totalAttribute += parseInt(attribute.value[0]);
                        if (sources[item] == undefined) {
                            sources[item] = {
                                'damage': parseInt(attribute.value[0]),
                                'damageType': 'physical',
                                'count':1,
                                'displayname': my.prototype.itemData['item_' + item].displayname
                            }                            
                        }
                        else {
                            sources[item].count += 1;
                        }
                    break;
                    case 'unholy_bonus_damage':
                        if (isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            if (sources[item + '_active'] == undefined) {
                                sources[item + '_active'] = {
                                    'damage': parseInt(attribute.value[0]),
                                    'damageType': 'physical',
                                    'count':1,
                                    'displayname': my.prototype.itemData['item_' + item].displayname + ' Unholy Strength'
                                }                            
                            }
                            else {
                                sources[item].count += 1;
                            }
                        }
                    break;
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    };
    self.getBonusDamagePercent = function (s) {
        s = s || {sources:{},total:0};
        var totalAttribute = s.total || 0;
        var sources = s.sources || {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'damage_aura':
                        if (sources[item] == undefined) {
                            totalAttribute += parseInt(attribute.value[0]) / 100;
                            sources[item] = {
                                'damage': parseInt(attribute.value[0]) / 100,
                                'damageType': 'physical',
                                'count':1,
                                'displayname': my.prototype.itemData['item_' + item].displayname
                            }
                        }
                        // else {
                            // sources[item].count += 1;
                        // }
                    break;
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    };
    self.getAttackSpeed = function (e) {
        var totalAttribute = 0,
            hasPowerTreads = false,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'bonus_attack_speed':
                        if (item == 'power_treads') {
                            if (!hasPowerTreads) {
                                totalAttribute += parseInt(attribute.value[0]);
                                hasPowerTreads = true;
                            }
                        }
                        else if (item == 'moon_shard') {
                            if (!isActive) {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        else {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'consumed_bonus':
                        if (item == 'moon_shard' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    break;
                    case 'bonus_speed':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'aura_attack_speed':
                        if (item != 'shivas_guard') { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                    // ancient_janggo
                    case 'bonus_aura_attack_speed_pct':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                    // ancient_janggo
                    case 'bonus_attack_speed_pct':
                        if (isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'unholy_bonus_attack_speed':
                        if (isActive) { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                    case 'berserk_bonus_attack_speed':
                        if (isActive) { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getAttackSpeedReduction = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'aura_attack_speed':
                        if (item == 'shivas_guard') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'cold_attack_speed':
                        if (item == 'skadi') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'maim_attack_speed':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'maim') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getLifesteal = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'lifesteal_percent':
                        if (item == 'satanic') {
                            if (!isActive) { return parseInt(attribute.value[0]); };
                        }
                        else {
                            return parseInt(attribute.value[0]);
                        }
                    break;
                    case 'unholy_lifesteal_percent':
                        if (isActive) { return parseInt(attribute.value[0]); };
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getLifestealAura = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'vampiric_aura':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getMagicResist = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_magical_armor':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                    case 'bonus_spell_resist':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                    case 'magic_resistance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getMagicResistReductionSelf = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            if (isActive) {
                for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                    var attribute = my.prototype.itemData['item_' + item].attributes[j];
                    switch(attribute.name) {
                        case 'extra_spell_damage_percent':
                        case 'ethereal_damage_bonus':
                            return (1 - parseInt(attribute.value[0]) / 100);
                        break;
                    }
                }
            }
        }
        return totalAttribute;
    };   
    self.getMagicResistReduction = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            if (isActive) {
                for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                    var attribute = my.prototype.itemData['item_' + item].attributes[j];
                    switch(attribute.name) {
                        case 'ethereal_damage_bonus':
                            if (!self.isEthereal()) totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        case 'resist_debuff':
                            totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        break;
                    }
                }
            }
        }
        return totalAttribute;
    };        

    self.getVisionRangeNight = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_night_vision':
                        if (item != 'moon_shard' || !isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAttackRange = function (attacktype, aList) {
        var totalAttribute = 0,
            attributeList = aList || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0;j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (attributeList.find(function (a) { return attribute.name == a.name; })) continue;
                switch(attribute.name) {
                    // dragon_lance
                    case 'base_attack_range':
                        if (attacktype == 'DOTA_UNIT_CAP_RANGED_ATTACK') attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                    break;
                }
            }
        }
        
        totalAttribute = attributeList.reduce(function (memo, attribute) {
            return memo += attribute.value;
        }, 0);
        return {value: totalAttribute, attributes: attributeList};
    };
    
    self.getMissChance = function (e) {
        var totalAttribute = 1,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'miss_chance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        excludeList.push(attribute.name);
                    break;
                    case 'blind_pct':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        excludeList.push(attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    
    self.getBaseDamageReductionPct = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'backstab_reduction':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'shadow_walk') {
                            totalAttribute *= (1 + parseInt(attribute.value[0]) / 100);
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };    
    self.getBonusDamageReductionPct = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'backstab_reduction':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'shadow_walk') {
                            totalAttribute *= (1 + parseInt(attribute.value[0]) / 100);
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };    
    
    self.itemOptions = ko.observableArray(my.prototype.itemOptionsArr);
    
    self.itemBuffOptions = ko.observableArray(my.prototype.itemBuffOptions);
    self.selectedItemBuff = ko.observable('assault');

    self.itemDebuffOptions = ko.observableArray(my.prototype.itemDebuffOptions);
    self.selectedItemDebuff = ko.observable('assault');
    
    return self;
};
},{"./herocalc_core":47,"./herocalc_knockout":53}],53:[function(require,module,exports){
(function (global){
'use strict';
var ko = (typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);

ko.mapping = require('../lib/knockout.mapping');
ko.wrap = require('../lib/knockout.wrap');

ko.extenders.numeric = function(target, precision) {
    //create a writeable computed observable to intercept writes to our observable
    var result = ko.computed({
        read: target,  //always return the original observables value
        write: function(newValue) {
            var current = target(),
                roundingMultiplier = Math.pow(10, precision),
                newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),
                valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;
 
            //only write if it changed
            if (valueToWrite !== current) {
                target(valueToWrite);
            } else {
                //if the rounded value is the same, but a different value was written, force a notification for the current field
                if (newValue !== current) {
                    target.notifySubscribers(valueToWrite);
                }
            }
        }
    }).extend({ notify: 'always' });
 
    //initialize with current value to make sure it is rounded appropriately
    result(target());
 
    //return the new computed observable
    return result;
};

module.exports = ko;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../lib/knockout.mapping":61,"../lib/knockout.wrap":62}],54:[function(require,module,exports){
(function (global){
'use strict';
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var ability_vars = {
    '$health': 'Health',
    '$mana': 'Mana',
    '$armor': 'Armor',
    '$damage': 'Damage',
    '$str': 'Strength',
    '$int': 'Intelligence',
    '$agi': 'Agility',
    '$all': 'All Attributes',
    '$attack': 'Attack Speed',
    '$hp_regen': 'HP Regeneration',
    '$mana_regen': 'Mana Regeneration',
    '$move_speed': 'Movement Speed',
    '$evasion': 'Evasion',
    '$spell_resist': 'Spell Resistance',
    '$selected_attribute': 'Selected Attribute',
    '$selected_attrib': 'Selected Attribute',
    '$cast_range': 'Cast Range',
    '$attack_range': 'Attack Range'
}
var abilityTooltipData = {};
var abilityDamageTypes = {
    'DAMAGE_TYPE_MAGICAL': 'Magical',
    'DAMAGE_TYPE_PURE': 'Pure',
    'DAMAGE_TYPE_PHYSICAL': 'Physical',
    'DAMAGE_TYPE_COMPOSITE': 'Composite',
    'DAMAGE_TYPE_HP_REMOVAL': 'HP Removal'
}

var getTooltipAbilityDescription = function (item) {
    var d = item.description;
    for (var i = 0; i < item.attributes.length; i++) {
        if (item.attributes[i].name != null) {
            var attributeName = item.attributes[i].name;
            var attributeValue = item.attributes[i].value[0];
            for (var j = 1; j < item.attributes[i].value.length; j++) {
                attributeValue += ' / ' + item.attributes[i].value[j];
            }
            regexp = new RegExp('%' + attributeName + '%', 'gi');
            d = d.replace(regexp, attributeValue);
        }
    }
    var regexp = new RegExp('%%', 'gi');
    d = d.replace(regexp, '%');
    regexp = new RegExp('\n', 'gi');
    d = d.replace(/\\n/g, '<br>');
    return d;
}

var getTooltipAbilityAttributes = function (item) {
    var a = '';
    if (item.damage.length > 0 && item.damage.reduce(function(memo, num){ return memo + num; }, 0) > 0) {
        var attributeTooltip = 'DAMAGE: ';
        var attributeValue = item.damage[0];
        for (var j = 1; j < item.damage.length; j++) {
            attributeValue += ' / ' + item.damage[j];
        }
        a = a + attributeTooltip + ' ' + attributeValue + '<br>';
    }
    for (var i = 0; i < item.attributes.length; i++) {
        if (item.attributes[i].tooltip != null) {
            var attributeTooltip = item.attributes[i].tooltip;
            attributeTooltip = attributeTooltip.replace(/\\n/g, '');
            var attributeValue = item.attributes[i].value[0];
            for (var j = 1; j < item.attributes[i].value.length; j++) {
                attributeValue += ' / ' + item.attributes[i].value[j];
            }
            var p = attributeTooltip.indexOf('%');
            if (p == 0) {
                if (attributeValue.toString().indexOf('/') == -1) {
                    attributeValue = attributeValue.toString().trim() + '%';
                } else {
                    //var regexp2 = new RegExp('/', 'gi');
                    //attributeValue = attributeValue.replace(regexp2, '%/') + '%';
                    var attributeValues = attributeValue.split('/');
                    var trimmedAttributeValues = attributeValues.map(function(v) {
                        return v.trim();
                    });
                    attributeValue = trimmedAttributeValues.join('% / ') + '%';
                }
                attributeTooltip = attributeTooltip.slice(1);
            }
            var d = attributeTooltip.indexOf('$');
            a = a + attributeTooltip + ' ' + attributeValue + '<br>';
        }
    }
    return a.trim('<br>');
}

var getTooltipAbilityManaCost = function (item) {
    var c = '';
    if (item.manacost.reduce(function(memo, num){ return memo + num; }, 0) == 0) {
        return c;
    }
    if (item.manacost.every(function(num) { return num == item.manacost[0]; })) {
        return item.manacost[0].toString();
    }
    for (var i = 0; i < 4; i++) {
        if (item.manacost[i] != null) {
            c = c + ' ' + item.manacost[i];
        }
    }
    return c;
}

var getTooltipAbilityCooldown = function (item) {
    var c = '';
    if (item.cooldown.reduce(function(memo, num){ return memo + num; }, 0) == 0) {
        return c;
    }
    if (item.cooldown.every(function(num) { return num == item.cooldown[0]; })) {
        return item.cooldown[0].toString();
    }
    for (var i = 0; i < 4; i++) {
        if (item.cooldown[i] != null) {
            c = c + ' ' + item.cooldown[i];
        }
    }
    return c;
}
    
var getAbilityTooltipData = function(heroData, unitData, hero, el) {
    if (abilityTooltipData[el] == undefined) {
        var abilityName = el
        var ability = {};
        if (heroData[hero] == undefined) {
            for (var i = 0; i < unitData[hero].abilities.length; i++) {
                if (unitData[hero].abilities[i].name == el) {
                    ability = unitData[hero].abilities[i];
                }
            }            
        }
        else {
            for (var i = 0; i < heroData[hero].abilities.length; i++) {
                if (heroData[hero].abilities[i].name == el) {
                    ability = heroData[hero].abilities[i];
                }
            }
        }
        var data = $('<div>')
        data.append($('<span>').html(ability.displayname).addClass('item_field pull-left item_name'));
        if (ability.abilityunitdamagetype) {
            data.append($('<span>').html(abilityDamageTypes[ability.abilityunitdamagetype]).addClass('item_field pull-right item_ability_damage_type').css('margin-right','10px'));
        }
        data.append($('<hr>').css('clear', 'both'));
        if (ability.description != null) {
            data.append($('<div>').html(getTooltipAbilityDescription(ability)).addClass('item_field item_description'));
        }
        var attributedata = getTooltipAbilityAttributes(ability);
        if (attributedata != '') {
            data.append($('<div>').html(attributedata).addClass('item_field item_attributes'));
        }
        var cd = getTooltipAbilityCooldown(ability);
        var mana = getTooltipAbilityManaCost(ability);
        if (cd != '' || mana != '') {
            var cdmanacost = $('<div>').addClass('item_cdmana');
            if (mana != '') {
                cdmanacost.append($('<span>').html(mana.trim()).addClass('item_field item_manacost'));
            }
            if (cd != '') {
                cdmanacost.append($('<span>').html(cd.trim()).addClass('item_field item_cooldown'));
            }
            data.append(cdmanacost);
        }
        if (ability.lore != null) {
            data.append($('<div>').html(ability.lore).addClass('item_field item_lore'));
        }
        abilityTooltipData[el] = data.html();
        return data.html();
    }
    else {
        return abilityTooltipData[el];
    }
}

module.exports = getAbilityTooltipData;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],55:[function(require,module,exports){
(function (global){
'use strict';
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var itemtooltipdata = {};
var ability_vars = {
    '$health': 'Health',
    '$mana': 'Mana',
    '$armor': 'Armor',
    '$damage': 'Damage',
    '$str': 'Strength',
    '$int': 'Intelligence',
    '$agi': 'Agility',
    '$all': 'All Attributes',
    '$attack': 'Attack Speed',
    '$hp_regen': 'HP Regeneration',
    '$mana_regen': 'Mana Regeneration',
    '$move_speed': 'Movement Speed',
    '$evasion': 'Evasion',
    '$spell_resist': 'Spell Resistance',
    '$selected_attribute': 'Selected Attribute',
    '$selected_attrib': 'Selected Attribute',
    '$cast_range': 'Cast Range',
    '$attack_range': 'Attack Range'
}

var getTooltipItemDescription = function (item) {
    var d = item.description;
    for (var i = 0; i < item.attributes.length; i++) {
        if (item.attributes[i].name != null) {
            var attributeName = item.attributes[i].name;
            var attributeValue = item.attributes[i].value[0];
            for (var j = 1; j < item.attributes[i].value.length; j++) {
                attributeValue += ' / ' + item.attributes[i].value[j];
            }
            var regexp = new RegExp('%' + attributeName + '%', 'gi');
            d = d.replace(regexp, attributeValue );
        }
    }
    var regexp = new RegExp('%%', 'gi');
    d = d.replace(regexp,'%');
    regexp = new RegExp('\n', 'gi');
    d = d.replace(/\\n/g, '<br>');
    return d;
}

var getTooltipItemAttributes = function (item) {
    var a = '';
    for (var i = 0; i < item.attributes.length; i++) {
        if (item.attributes[i].tooltip != null) {
            var attributeTooltip = item.attributes[i].tooltip;
            var attributeValue = item.attributes[i].value[0];
            for (var j = 1; j < item.attributes[i].value.length; j++) {
                attributeValue += ' / ' + item.attributes[i].value[j];
            }
            var p = attributeTooltip.indexOf('%');
            if (p == 0) {
                attributeValue = attributeValue + '%';
                attributeTooltip = attributeTooltip.slice(1);
            }
            var d = attributeTooltip.indexOf('$');
            if (d != -1) {
                a = a + attributeTooltip.slice(0, d) + ' ' + attributeValue + ' ' + ability_vars[attributeTooltip.slice(d)] + '<br>';
            }
            else {
                a = a + attributeTooltip + ' ' + attributeValue + '<br>';
            }
        }
    }
    return a.trim('<br>');
}

var getTooltipItemCooldown = function (item) {
    var c = '';
    for (var i = 0; i < item.cooldown.length; i++) {
        c = c + ' ' + item.cooldown[i];
    }
    return c;
}

var getTooltipItemManaCost = function (item) {
    var c = '';
    for (var i = 0; i < item.manacost.length; i++) {
        if (item.manacost[i] > 0) {
            c = c + ' ' + item.manacost[i];
        }
    }
    return c;
}

var getItemTooltipData = function(itemData, el) {
    if (itemData['item_' + el] == undefined) {
        return undefined;
    }
    if (itemtooltipdata[el] == undefined) {
        var item = itemData['item_' + el];
        var data = $('<div>');
        data.append($('<span>').html(item.displayname).addClass('item_field item_name'));
        data.append($('<span>').html(item.itemcost).addClass('item_field item_cost'));
        data.append($('<hr>'));
        if (item.description != null) {
            data.append($('<div>').html(getTooltipItemDescription(item)).addClass('item_field item_description'));
        }
        var attributedata = getTooltipItemAttributes(item);
        if (attributedata != '') {
            data.append($('<div>').html(attributedata).addClass('item_field item_attributes'));
        }
        var cd = getTooltipItemCooldown(item);
        var mana = getTooltipItemManaCost(item);
        if (cd != '' || mana != '') {
            var cdmanacost = $('<div>').addClass('item_cdmana');
            if (cd != '') {
                cdmanacost.append($('<span>').html(cd).addClass('item_field item_cooldown'));
            }
            if (mana != '') {
                cdmanacost.append($('<span>').html(mana).addClass('item_field item_manacost'));
            }
            data.append(cdmanacost);
        }
        if (item.lore != null) {
            data.append($('<div>').html(item.lore).addClass('item_field item_lore'));
        }
        itemtooltipdata[el] = data.html();
        return data.html();
    }
    else {
        return itemtooltipdata[el];
    }
}

module.exports = getItemTooltipData;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],56:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.UnitOption = function (name, displayname, levels, image, level) {
    this.heroName = ko.computed(function() {
        return (levels > 0) ? name + (level() <= levels ? level() : 1) : name;
    });
    this.heroDisplayName = displayname;
    this.image = image;
    this.levels = levels;
};

my.prototype.UnitViewModel = function (h,p) {
    var self = new my.prototype.HeroModel(h);
    self.parent = p;
    self.selectedUnitLevel = ko.observable(1);
    self.availableUnits = ko.observableArray([
        new my.prototype.UnitOption('npc_dota_lone_druid_bear', 'Lone Druid Spirit Bear',4,'/media/images/units/spirit_bear.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_brewmaster_earth_','Brewmaster Earth Warrior',3,'/media/images/units/npc_dota_brewmaster_earth.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_brewmaster_fire_','Brewmaster Fire Warrior',3,'/media/images/units/npc_dota_brewmaster_fire.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_brewmaster_storm_','Brewmaster Storm Warrior',3,'/media/images/units/npc_dota_brewmaster_storm.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_necronomicon_archer_','Necronomicon Archer',3,'/media/images/units/npc_dota_necronomicon_archer.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_necronomicon_warrior_','Necronomicon Warrior',3,'/media/images/units/npc_dota_necronomicon_warrior.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_lycan_wolf','Lycan Wolf',4,'/media/images/units/npc_dota_lycan_wolf.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_visage_familiar','Visage Familiar',3,'/media/images/units/npc_dota_visage_familiar.png', self.selectedUnitLevel)
    ]);
    self.selectedUnit = ko.observable(self.availableUnits()[0]);
    self.selectedUnit.subscribe(function(newValue) {
        if (newValue.heroName().indexOf('npc_dota_lone_druid_bear') != -1) {
            self.inventory.hasInventory(true);
            self.inventory.items.removeAll();
            self.inventory.activeItems.removeAll();
        }
        else {
            self.inventory.hasInventory(false);
            self.inventory.items.removeAll();
            self.inventory.activeItems.removeAll();
        }
    });
    self.hero = ko.computed(function() {
        return ko.wrap.fromJS(my.prototype.unitData[self.selectedUnit().heroName()]);
    });
    self.heroData = ko.computed(function() {
        return my.prototype.unitData[self.selectedUnit().heroName()];
    });
    self.getAbilityLevelMax = function(data) {
        if (data.abilitytype() == 'DOTA_ABILITY_TYPE_ATTRIBUTES') {
            return 10;
        }
        else if (data.name() == 'necronomicon_archer_mana_burn' || data.name() == 'necronomicon_archer_aoe'
            || data.name() == 'necronomicon_warrior_mana_burn' || data.name() == 'necronomicon_warrior_last_will') {
            return 3;
        }
        else if (data.name() == 'necronomicon_warrior_sight') {
            return 1;
        }
        else {
            return 4;
        }
    };
    self.ability = ko.computed(function() {
        var a = new my.prototype.AbilityModel(ko.mapping.fromJS(my.prototype.unitData[self.selectedUnit().heroName()].abilities));
        a.hasScepter = self.inventory.hasScepter
        switch (self.selectedUnit().heroName()) {
            case 'npc_dota_necronomicon_archer_1':
            case 'npc_dota_necronomicon_warrior_1':
                a.abilities()[0].level(1);
                a.abilities()[1].level(1);
            break;
            case 'npc_dota_necronomicon_archer_2':
            case 'npc_dota_necronomicon_warrior_2':
                a.abilities()[0].level(2);
                a.abilities()[1].level(2);
            break;
            case 'npc_dota_necronomicon_archer_3':
                a.abilities()[0].level(3);
                a.abilities()[1].level(3);
            break;
            case 'npc_dota_necronomicon_warrior_3':
                a.abilities()[0].level(3);
                a.abilities()[1].level(3);
                a.abilities()[2].level(1);
            break;
        }
        a.levelUpAbility = function(index, data, event, hero) {
            switch (a.abilities()[index()].name()) {
                case 'necronomicon_archer_mana_burn':
                case 'necronomicon_archer_aoe':
                case 'necronomicon_warrior_mana_burn':
                case 'necronomicon_warrior_last_will':
                case 'necronomicon_warrior_sight':
                break;
                default:
                    if (a.abilities()[index()].level() < hero.getAbilityLevelMax(data)) {
                        a.abilities()[index()].level(a.abilities()[index()].level()+1);
                    }                    
                break;
            }

        };
        a.levelDownAbility = function(index, data, event, hero) {            
            switch (a.abilities()[index()].name()) {
                case 'necronomicon_archer_mana_burn':
                case 'necronomicon_archer_aoe':
                case 'necronomicon_warrior_mana_burn':
                case 'necronomicon_warrior_last_will':
                case 'necronomicon_warrior_sight':
                break;
                default:
                    if (a.abilities()[index()].level()>0) {
                        a.abilities()[index()].level(a.abilities()[index()].level()-1);
                    }
                break;
            }
        };
        return a;
    });        
    self.primaryAttribute = ko.computed(function() {
        //var v = my.prototype.unitData[self.selectedUnit().heroName()].attributeprimary;
        var v = 0;
        if (v == 'DOTA_ATTRIBUTE_AGILITY') {
            return 'agi'
        }
        else if (v == 'DOTA_ATTRIBUTE_INTELLECT') {
            return 'int'
        }
        else if (v == 'DOTA_ATTRIBUTE_STRENGTH') {
            return 'str'
        }
        else {
            return ''
        }
    });
    self.totalAttribute = function(a) {
        if (a == 'agi') {
            return parseFloat(self.totalAgi());
        }
        if (a == 'int') {
            return parseFloat(self.totalInt());
        }
        if (a == 'str') {
            return parseFloat(self.totalStr());
        }
        return 0;
    };
    self.totalAgi = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].attributebaseagility
                + my.prototype.unitData[self.selectedUnit().heroName()].attributeagilitygain * (self.selectedHeroLevel() - 1) 
                //+ self.inventory.getAttributes('agi') 
                + self.ability().getAttributeBonusLevel()*2
                + self.ability().getAgility()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.totalInt = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].attributebaseintelligence 
                + my.prototype.unitData[self.selectedUnit().heroName()].attributeintelligencegain * (self.selectedHeroLevel() - 1) 
                //+ self.inventory.getAttributes('int') 
                + self.ability().getAttributeBonusLevel()*2
                + self.ability().getIntelligence()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.totalStr = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].attributebasestrength 
                + my.prototype.unitData[self.selectedUnit().heroName()].attributestrengthgain * (self.selectedHeroLevel() - 1) 
                //+ self.inventory.getAttributes('str') 
                + self.ability().getAttributeBonusLevel()*2
                + self.ability().getStrength()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    /*self.health = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].statushealth + self.totalStr()*19 
                + self.inventory.getHealth()
                + self.ability().getHealth()).toFixed(2);
    });
    self.healthregen = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].statushealthregen + self.totalStr()*.03 
                + self.inventory.getHealthRegen() 
                + self.ability().getHealthRegen()
                + self.buffs.getHealthRegen()).toFixed(2);
    });
    self.mana = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].statusmana + self.totalInt()*13 + self.inventory.getMana()).toFixed(2);
    });
    self.manaregen = ko.computed(function() {
        return ((my.prototype.unitData[self.selectedUnit().heroName()].statusmanaregen 
                + self.totalInt()*.04 
                + self.ability().getManaRegen()) 
                * (1 + self.inventory.getManaRegenPercent()) 
                + (self.selectedHero().heroName == 'crystal_maiden' ? self.ability().getManaRegenArcaneAura() * 2 : self.buffs.getManaRegenArcaneAura())
                + self.inventory.getManaRegenBloodstone()
                - self.enemy().ability().getManaRegenReduction()).toFixed(2);
    });
    self.totalArmorPhysical = ko.computed(function() {
        return (self.enemy().ability().getArmorBaseReduction() * self.debuffs.getArmorBaseReduction() * (my.prototype.unitData[self.selectedUnit().heroName()].armorphysical + self.totalAgi()*.14)
                + self.inventory.getArmor() + self.ability().getArmor() + self.enemy().ability().getArmorReduction() + self.buffs.getArmor() + self.debuffs.getArmorReduction()).toFixed(2);
    });
    self.totalArmorPhysicalReduction = ko.computed(function() {
        return ((0.06 * self.totalArmorPhysical()) / (1 + 0.06 * self.totalArmorPhysical()) * 100).toFixed(2);
    });
    self.totalMovementSpeed = ko.computed(function() {
        if (self.parent.ability().isShapeShiftActive()) {
            return 522;
        }
        var ms = (self.ability().setMovementSpeed() > 0 ? self.ability().setMovementSpeed() : self.buffs.setMovementSpeed());
        if (ms > 0) {
            return ms;
        }
        else {
            return ((my.prototype.unitData[self.selectedUnit().heroName()].movementspeed + self.inventory.getMovementSpeedFlat()+ self.ability().getMovementSpeedFlat()) * 
                    (1 + self.inventory.getMovementSpeedPercent() 
                       + self.ability().getMovementSpeedPercent() 
                       + self.enemy().inventory.getMovementSpeedPercentReduction() 
                       + self.enemy().ability().getMovementSpeedPercentReduction() 
                       + self.buffs.getMovementSpeedPercent() 
                       + self.debuffs.getMovementSpeedPercentReduction()
                    )).toFixed(2);
        }
    });
    self.totalTurnRate = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].movementturnrate 
                * (1 + self.enemy().ability().getTurnRateReduction()
                     + self.debuffs.getTurnRateReduction())).toFixed(2);
    });
    */
    self.baseDamage = ko.computed(function() {
        return [Math.floor(my.prototype.unitData[self.selectedUnit().heroName()].attackdamagemin + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total),
                Math.floor(my.prototype.unitData[self.selectedUnit().heroName()].attackdamagemax + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total)];
    });
    /*self.bonusDamage = ko.computed(function() {
        return self.inventory.getBonusDamage().total
                + self.ability().getBonusDamage().total
                + self.buffs.getBonusDamage().total
                + Math.floor((self.baseDamage()[0] + self.baseDamage()[1])/2 
                              * (self.inventory.getBonusDamagePercent().total
                                 + self.ability().getBonusDamagePercent().total
                                 + self.buffs.getBonusDamagePercent().total
                                )
                            )
                + Math.floor(
                    (self.hero().attacktype() == 'DOTA_UNIT_CAP_RANGED_ATTACK' 
                        ? ((self.selectedHero().heroName == 'drow_ranger') ? self.ability().getBonusDamagePrecisionAura().total[0] * self.totalAgi() : self.buffs.getBonusDamagePrecisionAura().total[1])
                        : 0)
                  );
    });*/
    /*self.bonusDamageReduction = ko.computed(function() {
        return Math.abs(self.enemy().ability().getBonusDamageReduction() + self.debuffs.getBonusDamageReduction());
    });
    self.damage = ko.computed(function() {
        return [self.baseDamage()[0] + self.bonusDamage()[0],
                self.baseDamage()[1] + self.bonusDamage()[1]];
    });*/
    self.totalMagicResistanceProduct = ko.computed(function() {
        return (1 - my.prototype.unitData[self.selectedUnit().heroName()].magicalresistance / 100) 
                   * (1 - self.inventory.getMagicResist() / 100) 
                   * (1 - self.ability().getMagicResist() / 100) 
                   * (1 - self.buffs.getMagicResist() / 100) 
                   * self.enemy().inventory.getMagicResistReduction()
                   * self.enemy().ability().getMagicResistReduction() 
                   * self.debuffs.getMagicResistReduction();
    });
    self.totalMagicResistance = ko.computed(function() {
        return (1 - self.totalMagicResistanceProduct());
    });
    self.bat = ko.computed(function() {
        var abilityBAT = self.ability().getBAT();
        if (abilityBAT > 0) {
            return abilityBAT;
        }
        return my.prototype.unitData[self.selectedUnit().heroName()].attackrate;
    });
    /*
    self.ias = ko.computed(function() {
        var val = parseFloat(self.totalAgi()) 
                + self.inventory.getAttackSpeed() 
                + self.ability().getAttackSpeed() 
                + self.enemy().ability().getAttackSpeedReduction() 
                + self.buffs.getAttackSpeed() 
                + self.debuffs.getAttackSpeedReduction();
        if (val < -80) {
            return -80;
        }
        else if (val > 400) {
            return 400;
        }
        return (val).toFixed(2);
    });*/
    self.attackTime = ko.computed(function() {
        return (self.bat() / (1 + self.ias() / 100)).toFixed(2);
    });
    self.attacksPerSecond = ko.computed(function() {
        return (1 + self.ias() / 100) / self.bat();
    });
    self.evasion = ko.computed(function() {
        var e = self.ability().setEvasion();
        if (e) {
            return (e * 100).toFixed(2) + '%';
        }
        else {
            return ((1-(self.inventory.getEvasion() * self.ability().getEvasion())) * 100).toFixed(2) + '%';
        }
    });
    self.ehpPhysical = ko.computed(function() {
        return ((self.health() * (1 + .06 * self.totalArmorPhysical())) / (1-(1-(self.inventory.getEvasion() * self.ability().getEvasion())))).toFixed(2);
    });
    self.ehpMagical = ko.computed(function() {
        return (self.health() / self.totalMagicResistanceProduct()).toFixed(2);
    });
    
    return self;
}
},{"./herocalc_core":47,"./herocalc_knockout":53}],57:[function(require,module,exports){
'use strict';

var core = require("./herocalc_core");
require("./herocalc_inventory");
require("./herocalc_abilitydata");
require("./herocalc_abilities");
require("./herocalc_buffs");
require("./herocalc_hero");
require("./herocalc_hero.illusion");
require("./herocalc_hero.meepo");
require("./herocalc_unit");

module.exports = core;
},{"./herocalc_abilities":44,"./herocalc_abilitydata":45,"./herocalc_buffs":46,"./herocalc_core":47,"./herocalc_hero":49,"./herocalc_hero.illusion":48,"./herocalc_hero.meepo":50,"./herocalc_inventory":52,"./herocalc_unit":56}],58:[function(require,module,exports){
if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    'use strict';
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}
},{}],59:[function(require,module,exports){
/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 1.0.1
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
(function(){"use strict";var t=this,i=t.Chart,e=function(t){this.canvas=t.canvas,this.ctx=t;this.width=t.canvas.width,this.height=t.canvas.height;return this.aspectRatio=this.width/this.height,s.retinaScale(this),this};e.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= value %>",multiTooltipKeyBackground:"#fff",onAnimationProgress:function(){},onAnimationComplete:function(){}}},e.types={};var s=e.helpers={},n=s.each=function(t,i,e){var s=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var n;for(n=0;n<t.length;n++)i.apply(e,[t[n],n].concat(s))}else for(var o in t)i.apply(e,[t[o],o].concat(s))},o=s.clone=function(t){var i={};return n(t,function(e,s){t.hasOwnProperty(s)&&(i[s]=e)}),i},a=s.extend=function(t){return n(Array.prototype.slice.call(arguments,1),function(i){n(i,function(e,s){i.hasOwnProperty(s)&&(t[s]=e)})}),t},h=s.merge=function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift({}),a.apply(null,t)},l=s.indexOf=function(t,i){if(Array.prototype.indexOf)return t.indexOf(i);for(var e=0;e<t.length;e++)if(t[e]===i)return e;return-1},r=(s.where=function(t,i){var e=[];return s.each(t,function(t){i(t)&&e.push(t)}),e},s.findNextWhere=function(t,i,e){e||(e=-1);for(var s=e+1;s<t.length;s++){var n=t[s];if(i(n))return n}},s.findPreviousWhere=function(t,i,e){e||(e=t.length);for(var s=e-1;s>=0;s--){var n=t[s];if(i(n))return n}},s.inherits=function(t){var i=this,e=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return i.apply(this,arguments)},s=function(){this.constructor=e};return s.prototype=i.prototype,e.prototype=new s,e.extend=r,t&&a(e.prototype,t),e.__super__=i.prototype,e}),c=s.noop=function(){},u=s.uid=function(){var t=0;return function(){return"chart-"+t++}}(),d=s.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},p=s.amd="function"==typeof define&&define.amd,f=s.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},g=s.max=function(t){return Math.max.apply(Math,t)},m=s.min=function(t){return Math.min.apply(Math,t)},v=(s.cap=function(t,i,e){if(f(i)){if(t>i)return i}else if(f(e)&&e>t)return e;return t},s.getDecimalPlaces=function(t){return t%1!==0&&f(t)?t.toString().split(".")[1].length:0}),S=s.radians=function(t){return t*(Math.PI/180)},x=(s.getAngleFromPoint=function(t,i){var e=i.x-t.x,s=i.y-t.y,n=Math.sqrt(e*e+s*s),o=2*Math.PI+Math.atan2(s,e);return 0>e&&0>s&&(o+=2*Math.PI),{angle:o,distance:n}},s.aliasPixel=function(t){return t%2===0?0:.5}),y=(s.splineCurve=function(t,i,e,s){var n=Math.sqrt(Math.pow(i.x-t.x,2)+Math.pow(i.y-t.y,2)),o=Math.sqrt(Math.pow(e.x-i.x,2)+Math.pow(e.y-i.y,2)),a=s*n/(n+o),h=s*o/(n+o);return{inner:{x:i.x-a*(e.x-t.x),y:i.y-a*(e.y-t.y)},outer:{x:i.x+h*(e.x-t.x),y:i.y+h*(e.y-t.y)}}},s.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),C=(s.calculateScaleRange=function(t,i,e,s,n){var o=2,a=Math.floor(i/(1.5*e)),h=o>=a,l=g(t),r=m(t);l===r&&(l+=.5,r>=.5&&!s?r-=.5:l+=.5);for(var c=Math.abs(l-r),u=y(c),d=Math.ceil(l/(1*Math.pow(10,u)))*Math.pow(10,u),p=s?0:Math.floor(r/(1*Math.pow(10,u)))*Math.pow(10,u),f=d-p,v=Math.pow(10,u),S=Math.round(f/v);(S>a||a>2*S)&&!h;)if(S>a)v*=2,S=Math.round(f/v),S%1!==0&&(h=!0);else if(n&&u>=0){if(v/2%1!==0)break;v/=2,S=Math.round(f/v)}else v/=2,S=Math.round(f/v);return h&&(S=o,v=f/S),{steps:S,stepValue:v,min:p,max:p+S*v}},s.template=function(t,i){function e(t,i){var e=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):s[t]=s[t];return i?e(i):e}if(t instanceof Function)return t(i);var s={};return e(t,i)}),w=(s.generateLabels=function(t,i,e,s){var o=new Array(i);return labelTemplateString&&n(o,function(i,n){o[n]=C(t,{value:e+s*(n+1)})}),o},s.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-0.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-0.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-0.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-0.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var i=1.70158,e=0,s=1;return 0===t?0:1==(t/=1)?1:(e||(e=.3),s<Math.abs(1)?(s=1,i=e/4):i=e/(2*Math.PI)*Math.asin(1/s),-(s*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-i)*Math.PI/e)))},easeOutElastic:function(t){var i=1.70158,e=0,s=1;return 0===t?0:1==(t/=1)?1:(e||(e=.3),s<Math.abs(1)?(s=1,i=e/4):i=e/(2*Math.PI)*Math.asin(1/s),s*Math.pow(2,-10*t)*Math.sin(2*(1*t-i)*Math.PI/e)+1)},easeInOutElastic:function(t){var i=1.70158,e=0,s=1;return 0===t?0:2==(t/=.5)?1:(e||(e=.3*1.5),s<Math.abs(1)?(s=1,i=e/4):i=e/(2*Math.PI)*Math.asin(1/s),1>t?-.5*s*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-i)*Math.PI/e):s*Math.pow(2,-10*(t-=1))*Math.sin(2*(1*t-i)*Math.PI/e)*.5+1)},easeInBack:function(t){var i=1.70158;return 1*(t/=1)*t*((i+1)*t-i)},easeOutBack:function(t){var i=1.70158;return 1*((t=t/1-1)*t*((i+1)*t+i)+1)},easeInOutBack:function(t){var i=1.70158;return(t/=.5)<1?.5*t*t*(((i*=1.525)+1)*t-i):.5*((t-=2)*t*(((i*=1.525)+1)*t+i)+2)},easeInBounce:function(t){return 1-w.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?7.5625*t*t:2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*w.easeInBounce(2*t):.5*w.easeOutBounce(2*t-1)+.5}}),b=s.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),P=(s.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),s.animationLoop=function(t,i,e,s,n,o){var a=0,h=w[e]||w.linear,l=function(){a++;var e=a/i,r=h(e);t.call(o,r,e,a),s.call(o,r,e),i>a?o.animationFrame=b(l):n.apply(o)};b(l)},s.getRelativePosition=function(t){var i,e,s=t.originalEvent||t,n=t.currentTarget||t.srcElement,o=n.getBoundingClientRect();return s.touches?(i=s.touches[0].clientX-o.left,e=s.touches[0].clientY-o.top):(i=s.clientX-o.left,e=s.clientY-o.top),{x:i,y:e}},s.addEvent=function(t,i,e){t.addEventListener?t.addEventListener(i,e):t.attachEvent?t.attachEvent("on"+i,e):t["on"+i]=e}),L=s.removeEvent=function(t,i,e){t.removeEventListener?t.removeEventListener(i,e,!1):t.detachEvent?t.detachEvent("on"+i,e):t["on"+i]=c},k=(s.bindEvents=function(t,i,e){t.events||(t.events={}),n(i,function(i){t.events[i]=function(){e.apply(t,arguments)},P(t.chart.canvas,i,t.events[i])})},s.unbindEvents=function(t,i){n(i,function(i,e){L(t.chart.canvas,e,i)})}),F=s.getMaximumWidth=function(t){var i=t.parentNode;return i.clientWidth},R=s.getMaximumHeight=function(t){var i=t.parentNode;return i.clientHeight},T=(s.getMaximumSize=s.getMaximumWidth,s.retinaScale=function(t){var i=t.ctx,e=t.canvas.width,s=t.canvas.height;window.devicePixelRatio&&(i.canvas.style.width=e+"px",i.canvas.style.height=s+"px",i.canvas.height=s*window.devicePixelRatio,i.canvas.width=e*window.devicePixelRatio,i.scale(window.devicePixelRatio,window.devicePixelRatio))}),A=s.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},M=s.fontString=function(t,i,e){return i+" "+t+"px "+e},W=s.longestText=function(t,i,e){t.font=i;var s=0;return n(e,function(i){var e=t.measureText(i).width;s=e>s?e:s}),s},z=s.drawRoundedRectangle=function(t,i,e,s,n,o){t.beginPath(),t.moveTo(i+o,e),t.lineTo(i+s-o,e),t.quadraticCurveTo(i+s,e,i+s,e+o),t.lineTo(i+s,e+n-o),t.quadraticCurveTo(i+s,e+n,i+s-o,e+n),t.lineTo(i+o,e+n),t.quadraticCurveTo(i,e+n,i,e+n-o),t.lineTo(i,e+o),t.quadraticCurveTo(i,e,i+o,e),t.closePath()};e.instances={},e.Type=function(t,i,s){this.options=i,this.chart=s,this.id=u(),e.instances[this.id]=this,i.responsive&&this.resize(),this.initialize.call(this,t)},a(e.Type.prototype,{initialize:function(){return this},clear:function(){return A(this.chart),this},stop:function(){return s.cancelAnimFrame.call(t,this.animationFrame),this},resize:function(t){this.stop();var i=this.chart.canvas,e=F(this.chart.canvas),s=this.options.maintainAspectRatio?e/this.chart.aspectRatio:R(this.chart.canvas);return i.width=this.chart.width=e,i.height=this.chart.height=s,T(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:c,render:function(t){return t&&this.reflow(),this.options.animation&&!t?s.animationLoop(this.draw,this.options.animationSteps,this.options.animationEasing,this.options.onAnimationProgress,this.options.onAnimationComplete,this):(this.draw(),this.options.onAnimationComplete.call(this)),this},generateLegend:function(){return C(this.options.legendTemplate,this)},destroy:function(){this.clear(),k(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete e.instances[this.id]},showTooltip:function(t,i){"undefined"==typeof this.activeElements&&(this.activeElements=[]);var o=function(t){var i=!1;return t.length!==this.activeElements.length?i=!0:(n(t,function(t,e){t!==this.activeElements[e]&&(i=!0)},this),i)}.call(this,t);if(o||i){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var a,h,r=this.datasets.length-1;r>=0&&(a=this.datasets[r].points||this.datasets[r].bars||this.datasets[r].segments,h=l(a,t[0]),-1===h);r--);var c=[],u=[],d=function(){var t,i,e,n,o,a=[],l=[],r=[];return s.each(this.datasets,function(i){t=i.points||i.bars||i.segments,t[h]&&t[h].hasValue()&&a.push(t[h])}),s.each(a,function(t){l.push(t.x),r.push(t.y),c.push(s.template(this.options.multiTooltipTemplate,t)),u.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),o=m(r),e=g(r),n=m(l),i=g(l),{x:n>this.chart.width/2?n:i,y:(o+e)/2}}.call(this,h);new e.MultiTooltip({x:d.x,y:d.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:c,legendColors:u,legendColorBackground:this.options.multiTooltipKeyBackground,title:t[0].label,chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else n(t,function(t){var i=t.tooltipPosition();new e.Tooltip({x:Math.round(i.x),y:Math.round(i.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:C(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),e.Type.extend=function(t){var i=this,s=function(){return i.apply(this,arguments)};if(s.prototype=o(i.prototype),a(s.prototype,t),s.extend=e.Type.extend,t.name||i.prototype.name){var n=t.name||i.prototype.name,l=e.defaults[i.prototype.name]?o(e.defaults[i.prototype.name]):{};e.defaults[n]=a(l,t.defaults),e.types[n]=s,e.prototype[n]=function(t,i){var o=h(e.defaults.global,e.defaults[n],i||{});return new s(t,o,this)}}else d("Name not provided for this chart, so it hasn't been registered");return i},e.Element=function(t){a(this,t),this.initialize.apply(this,arguments),this.save()},a(e.Element.prototype,{initialize:function(){},restore:function(t){return t?n(t,function(t){this[t]=this._saved[t]},this):a(this,this._saved),this},save:function(){return this._saved=o(this),delete this._saved._saved,this},update:function(t){return n(t,function(t,i){this._saved[i]=this[i],this[i]=t},this),this},transition:function(t,i){return n(t,function(t,e){this[e]=(t-this._saved[e])*i+this._saved[e]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return f(this.value)}}),e.Element.extend=r,e.Point=e.Element.extend({display:!0,inRange:function(t,i){var e=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(i-this.y,2)<Math.pow(e,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),e.Arc=e.Element.extend({inRange:function(t,i){var e=s.getAngleFromPoint(this,{x:t,y:i}),n=e.angle>=this.startAngle&&e.angle<=this.endAngle,o=e.distance>=this.innerRadius&&e.distance<=this.outerRadius;return n&&o},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,i=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*i,y:this.y+Math.sin(t)*i}},draw:function(t){var i=this.ctx;i.beginPath(),i.arc(this.x,this.y,this.outerRadius,this.startAngle,this.endAngle),i.arc(this.x,this.y,this.innerRadius,this.endAngle,this.startAngle,!0),i.closePath(),i.strokeStyle=this.strokeColor,i.lineWidth=this.strokeWidth,i.fillStyle=this.fillColor,i.fill(),i.lineJoin="bevel",this.showStroke&&i.stroke()}}),e.Rectangle=e.Element.extend({draw:function(){var t=this.ctx,i=this.width/2,e=this.x-i,s=this.x+i,n=this.base-(this.base-this.y),o=this.strokeWidth/2;this.showStroke&&(e+=o,s-=o,n+=o),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(e,this.base),t.lineTo(e,n),t.lineTo(s,n),t.lineTo(s,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,i){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&i>=this.y&&i<=this.base}}),e.Tooltip=e.Element.extend({draw:function(){var t=this.chart.ctx;t.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var i=this.caretPadding=2,e=t.measureText(this.text).width+2*this.xPadding,s=this.fontSize+2*this.yPadding,n=s+this.caretHeight+i;this.x+e/2>this.chart.width?this.xAlign="left":this.x-e/2<0&&(this.xAlign="right"),this.y-n<0&&(this.yAlign="below");var o=this.x-e/2,a=this.y-n;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-i),t.lineTo(this.x+this.caretHeight,this.y-(i+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(i+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+i+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+i),t.lineTo(this.x+this.caretHeight,this.y+i+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+i+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":o=this.x-e+(this.cornerRadius+this.caretHeight);break;case"right":o=this.x-(this.cornerRadius+this.caretHeight)}z(t,o,a,e,s,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,o+e/2,a+s/2)}}}),e.MultiTooltip=e.Element.extend({initialize:function(){this.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=M(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+1.5*this.titleFontSize,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,i=W(this.ctx,this.font,this.labels)+this.fontSize+3,e=g([i,t]);this.width=e+2*this.xPadding;var s=this.height/2;this.y-s<0?this.y=s:this.y+s>this.chart.height&&(this.y=this.chart.height-s),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var i=this.y-this.height/2+this.yPadding,e=t-1;return 0===t?i+this.titleFontSize/2:i+(1.5*this.fontSize*e+this.fontSize/2)+1.5*this.titleFontSize},draw:function(){if(this.custom)this.custom(this);else{z(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,s.each(this.labels,function(i,e){t.fillStyle=this.textColor,t.fillText(i,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(e+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(e+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[e].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(e+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),e.Scale=e.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),i=0;i<=this.steps;i++)this.yLabels.push(C(this.templateString,{value:(this.min+i*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?W(this.ctx,this.font,this.yLabels):0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,i=this.endPoint-this.startPoint;for(this.calculateYRange(i),this.buildYLabels(),this.calculateXLabelRotation();i>this.endPoint-this.startPoint;)i=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(i),this.buildYLabels(),t<this.yLabelWidth&&this.calculateXLabelRotation()},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,i,e=this.ctx.measureText(this.xLabels[0]).width,s=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=s/2+3,this.xScalePaddingLeft=e/2>this.yLabelWidth+10?e/2:this.yLabelWidth+10,this.xLabelRotation=0,this.display){var n,o=W(this.ctx,this.font,this.xLabels);this.xLabelWidth=o;for(var a=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>a&&0===this.xLabelRotation||this.xLabelWidth>a&&this.xLabelRotation<=90&&this.xLabelRotation>0;)n=Math.cos(S(this.xLabelRotation)),t=n*e,i=n*s,t+this.fontSize/2>this.yLabelWidth+8&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=n*o;this.xLabelRotation>0&&(this.endPoint-=Math.sin(S(this.xLabelRotation))*o+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:c,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var i=this.drawingArea()/(this.min-this.max);return this.endPoint-i*(t-this.min)},calculateX:function(t){var i=(this.xLabelRotation>0,this.width-(this.xScalePaddingLeft+this.xScalePaddingRight)),e=i/(this.valuesCount-(this.offsetGridLines?0:1)),s=e*t+this.xScalePaddingLeft;return this.offsetGridLines&&(s+=e/2),Math.round(s)},update:function(t){s.extend(this,t),this.fit()},draw:function(){var t=this.ctx,i=(this.endPoint-this.startPoint)/this.steps,e=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,n(this.yLabels,function(n,o){var a=this.endPoint-i*o,h=Math.round(a),l=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(n,e-10,a),0!==o||l||(l=!0),l&&t.beginPath(),o>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),h+=s.aliasPixel(t.lineWidth),l&&(t.moveTo(e,h),t.lineTo(this.width,h),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(e-5,h),t.lineTo(e,h),t.stroke(),t.closePath()},this),n(this.xLabels,function(i,e){var s=this.calculateX(e)+x(this.lineWidth),n=this.calculateX(e-(this.offsetGridLines?.5:0))+x(this.lineWidth),o=this.xLabelRotation>0,a=this.showVerticalLines;0!==e||a||(a=!0),a&&t.beginPath(),e>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(n,this.endPoint),t.lineTo(n,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(n,this.endPoint),t.lineTo(n,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(s,o?this.endPoint+12:this.endPoint+8),t.rotate(-1*S(this.xLabelRotation)),t.font=this.font,t.textAlign=o?"right":"center",t.textBaseline=o?"middle":"top",t.fillText(i,0,0),t.restore()},this))}}),e.RadialScale=e.Element.extend({initialize:function(){this.size=m([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var i=this.drawingArea/(this.max-this.min);return(t-this.min)*i},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),i=0;i<=this.steps;i++)this.yLabels.push(C(this.templateString,{value:(this.min+i*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,i,e,s,n,o,a,h,l,r,c,u,d=m([this.height/2-this.pointLabelFontSize-5,this.width/2]),p=this.width,g=0;for(this.ctx.font=M(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),i=0;i<this.valuesCount;i++)t=this.getPointPosition(i,d),e=this.ctx.measureText(C(this.templateString,{value:this.labels[i]})).width+5,0===i||i===this.valuesCount/2?(s=e/2,t.x+s>p&&(p=t.x+s,n=i),t.x-s<g&&(g=t.x-s,a=i)):i<this.valuesCount/2?t.x+e>p&&(p=t.x+e,n=i):i>this.valuesCount/2&&t.x-e<g&&(g=t.x-e,a=i);l=g,r=Math.ceil(p-this.width),o=this.getIndexAngle(n),h=this.getIndexAngle(a),c=r/Math.sin(o+Math.PI/2),u=l/Math.sin(h+Math.PI/2),c=f(c)?c:0,u=f(u)?u:0,this.drawingArea=d-(u+c)/2,this.setCenterPoint(u,c)},setCenterPoint:function(t,i){var e=this.width-i-this.drawingArea,s=t+this.drawingArea;this.xCenter=(s+e)/2,this.yCenter=this.height/2},getIndexAngle:function(t){var i=2*Math.PI/this.valuesCount;return t*i-Math.PI/2},getPointPosition:function(t,i){var e=this.getIndexAngle(t);return{x:Math.cos(e)*i+this.xCenter,y:Math.sin(e)*i+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(n(this.yLabels,function(i,e){if(e>0){var s,n=e*(this.drawingArea/this.steps),o=this.yCenter-n;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,n,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)s=this.getPointPosition(a,this.calculateCenterOffset(this.min+e*this.stepValue)),0===a?t.moveTo(s.x,s.y):t.lineTo(s.x,s.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var h=t.measureText(i).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-h/2-this.backdropPaddingX,o-this.fontSize/2-this.backdropPaddingY,h+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY)}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(i,this.xCenter,o)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var i=this.valuesCount-1;i>=0;i--){if(this.angleLineWidth>0){var e=this.getPointPosition(i,this.calculateCenterOffset(this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(e.x,e.y),t.stroke(),t.closePath()}var s=this.getPointPosition(i,this.calculateCenterOffset(this.max)+5);t.font=M(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var o=this.labels.length,a=this.labels.length/2,h=a/2,l=h>i||i>o-h,r=i===h||i===o-h;t.textAlign=0===i?"center":i===a?"center":a>i?"left":"right",t.textBaseline=r?"middle":l?"bottom":"top",t.fillText(this.labels[i],s.x,s.y)}}}}}),s.addEvent(window,"resize",function(){var t;return function(){clearTimeout(t),t=setTimeout(function(){n(e.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}}()),p?define(function(){return e}):"object"==typeof module&&module.exports&&(module.exports=e),t.Chart=e,e.noConflict=function(){return t.Chart=i,e}}).call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"Bar",defaults:s,initialize:function(t){var s=this.options;this.ScaleClass=i.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,i,e){var n=this.calculateBaseWidth(),o=this.calculateX(e)-n/2,a=this.calculateBarWidth(t);return o+a*i+i*s.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*s.barValueSpacing},calculateBarWidth:function(t){var i=this.calculateBaseWidth()-(t-1)*s.barDatasetSpacing;return i/t}}),this.datasets=[],this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),e.each(i,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(i)}),this.BarClass=i.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),e.each(t.datasets,function(i){var s={label:i.label||null,fillColor:i.fillColor,strokeColor:i.strokeColor,bars:[]};this.datasets.push(s),e.each(i.data,function(e,n){s.bars.push(new this.BarClass({value:e,label:t.labels[n],datasetLabel:i.label,strokeColor:i.strokeColor,fillColor:i.fillColor,highlightFill:i.highlightFill||i.fillColor,highlightStroke:i.highlightStroke||i.strokeColor}))},this)},this),this.buildScale(t.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,i,s){e.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,s,i),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),e.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){e.each(this.datasets,function(i,s){e.each(i.bars,t,this,s)},this)},getBarsAtEvent:function(t){for(var i,s=[],n=e.getRelativePosition(t),o=function(t){s.push(t.bars[i])},a=0;a<this.datasets.length;a++)for(i=0;i<this.datasets[a].bars.length;i++)if(this.datasets[a].bars[i].inRange(n.x,n.y))return e.each(this.datasets,o),s;return s},buildScale:function(t){var i=this,s=function(){var t=[];return i.eachBars(function(i){t.push(i.value)}),t},n={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var i=e.calculateScaleRange(s(),t,this.fontSize,this.beginAtZero,this.integersOnly);e.extend(this,i)},xLabels:t,font:e.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&e.extend(n,{calculateYRange:e.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(n)},addData:function(t,i){e.each(t,function(t,e){this.datasets[e].bars.push(new this.BarClass({value:t,label:i,x:this.scale.calculateBarX(this.datasets.length,e,this.scale.valuesCount+1),y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[e].strokeColor,fillColor:this.datasets[e].fillColor}))},this),this.scale.addXLabel(i),this.update()},removeData:function(){this.scale.removeXLabel(),e.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){e.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});
var t=e.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var i=t||1;this.clear();this.chart.ctx;this.scale.draw(i),e.each(this.datasets,function(t,s){e.each(t.bars,function(t,e){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,s,e),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},i).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"Doughnut",defaults:s,initialize:function(t){this.segments=[],this.outerRadius=(e.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=i.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];e.each(this.segments,function(t){t.restore(["fillColor"])}),e.each(i,function(t){t.fillColor=t.highlightColor}),this.showTooltip(i)}),this.calculateTotal(t),e.each(t,function(t,i){this.addData(t,i,!0)},this),this.render()},getSegmentsAtEvent:function(t){var i=[],s=e.getRelativePosition(t);return e.each(this.segments,function(t){t.inRange(s.x,s.y)&&i.push(t)},this),i},addData:function(t,i,e){var s=i||this.segments.length;this.segments.splice(s,0,new this.SegmentArc({value:t.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:t.color,highlightColor:t.highlight||t.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(t.value),label:t.label})),e||(this.reflow(),this.update())},calculateCircumference:function(t){return 2*Math.PI*(t/this.total)},calculateTotal:function(t){this.total=0,e.each(t,function(t){this.total+=t.value},this)},update:function(){this.calculateTotal(this.segments),e.each(this.activeElements,function(t){t.restore(["fillColor"])}),e.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var i=e.isNumber(t)?t:this.segments.length-1;this.segments.splice(i,1),this.reflow(),this.update()},reflow:function(){e.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(e.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,e.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var i=t?t:1;this.clear(),e.each(this.segments,function(t,e){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},i),t.endAngle=t.startAngle+t.circumference,t.draw(),0===e&&(t.startAngle=1.5*Math.PI),e<this.segments.length-1&&(this.segments[e+1].startAngle=t.endAngle)},this)}}),i.types.Doughnut.extend({name:"Pie",defaults:e.merge(s,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"Line",defaults:s,initialize:function(t){this.PointClass=i.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),e.each(i,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(i)}),e.each(t.datasets,function(i){var s={label:i.label||null,fillColor:i.fillColor,strokeColor:i.strokeColor,pointColor:i.pointColor,pointStrokeColor:i.pointStrokeColor,points:[]};this.datasets.push(s),e.each(i.data,function(e,n){s.points.push(new this.PointClass({value:e,label:t.labels[n],datasetLabel:i.label,strokeColor:i.pointStrokeColor,fillColor:i.pointColor,highlightFill:i.pointHighlightFill||i.pointColor,highlightStroke:i.pointHighlightStroke||i.pointStrokeColor}))},this),this.buildScale(t.labels),this.eachPoints(function(t,i){e.extend(t,{x:this.scale.calculateX(i),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),e.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){e.each(this.datasets,function(i){e.each(i.points,t,this)},this)},getPointsAtEvent:function(t){var i=[],s=e.getRelativePosition(t);return e.each(this.datasets,function(t){e.each(t.points,function(t){t.inRange(s.x,s.y)&&i.push(t)})},this),i},buildScale:function(t){var s=this,n=function(){var t=[];return s.eachPoints(function(i){t.push(i.value)}),t},o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var i=e.calculateScaleRange(n(),t,this.fontSize,this.beginAtZero,this.integersOnly);e.extend(this,i)},xLabels:t,font:e.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&e.extend(o,{calculateYRange:e.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new i.Scale(o)},addData:function(t,i){e.each(t,function(t,e){this.datasets[e].points.push(new this.PointClass({value:t,label:i,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[e].pointStrokeColor,fillColor:this.datasets[e].pointColor}))},this),this.scale.addXLabel(i),this.update()},removeData:function(){this.scale.removeXLabel(),e.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=e.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var i=t||1;this.clear();var s=this.chart.ctx,n=function(t){return null!==t.value},o=function(t,i,s){return e.findNextWhere(i,n,s)||t},a=function(t,i,s){return e.findPreviousWhere(i,n,s)||t};this.scale.draw(i),e.each(this.datasets,function(t){var h=e.where(t.points,n);e.each(t.points,function(t,e){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(e)},i)},this),this.options.bezierCurve&&e.each(h,function(t,i){var s=i>0&&i<h.length-1?this.options.bezierCurveTension:0;t.controlPoints=e.splineCurve(a(t,h,i),t,o(t,h,i),s),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),s.lineWidth=this.options.datasetStrokeWidth,s.strokeStyle=t.strokeColor,s.beginPath(),e.each(h,function(t,i){if(0===i)s.moveTo(t.x,t.y);else if(this.options.bezierCurve){var e=a(t,h,i);s.bezierCurveTo(e.controlPoints.outer.x,e.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else s.lineTo(t.x,t.y)},this),s.stroke(),this.options.datasetFill&&h.length>0&&(s.lineTo(h[h.length-1].x,this.scale.endPoint),s.lineTo(h[0].x,this.scale.endPoint),s.fillStyle=t.fillColor,s.closePath(),s.fill()),e.each(h,function(t){t.draw()})},this)}})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"PolarArea",defaults:s,initialize:function(t){this.segments=[],this.SegmentArc=i.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new i.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:t.length}),this.updateScaleRange(t),this.scale.update(),e.each(t,function(t,i){this.addData(t,i,!0)},this),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];e.each(this.segments,function(t){t.restore(["fillColor"])}),e.each(i,function(t){t.fillColor=t.highlightColor}),this.showTooltip(i)}),this.render()},getSegmentsAtEvent:function(t){var i=[],s=e.getRelativePosition(t);return e.each(this.segments,function(t){t.inRange(s.x,s.y)&&i.push(t)},this),i},addData:function(t,i,e){var s=i||this.segments.length;this.segments.splice(s,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),e||(this.reflow(),this.update())},removeData:function(t){var i=e.isNumber(t)?t:this.segments.length-1;this.segments.splice(i,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,e.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var i=[];e.each(t,function(t){i.push(t.value)});var s=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:e.calculateScaleRange(i,e.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);e.extend(this.scale,s,{size:e.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),e.each(this.segments,function(t){t.save()}),this.render()},reflow:function(){e.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),e.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),e.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var i=t||1;this.clear(),e.each(this.segments,function(t,e){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},i),t.endAngle=t.startAngle+t.circumference,0===e&&(t.startAngle=1.5*Math.PI),e<this.segments.length-1&&(this.segments[e+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers;i.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'},initialize:function(t){this.PointClass=i.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(t),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),e.each(i,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(i)}),e.each(t.datasets,function(i){var s={label:i.label||null,fillColor:i.fillColor,strokeColor:i.strokeColor,pointColor:i.pointColor,pointStrokeColor:i.pointStrokeColor,points:[]};this.datasets.push(s),e.each(i.data,function(e,n){var o;this.scale.animation||(o=this.scale.getPointPosition(n,this.scale.calculateCenterOffset(e))),s.points.push(new this.PointClass({value:e,label:t.labels[n],datasetLabel:i.label,x:this.options.animation?this.scale.xCenter:o.x,y:this.options.animation?this.scale.yCenter:o.y,strokeColor:i.pointStrokeColor,fillColor:i.pointColor,highlightFill:i.pointHighlightFill||i.pointColor,highlightStroke:i.pointHighlightStroke||i.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){e.each(this.datasets,function(i){e.each(i.points,t,this)},this)},getPointsAtEvent:function(t){var i=e.getRelativePosition(t),s=e.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},i),n=2*Math.PI/this.scale.valuesCount,o=Math.round((s.angle-1.5*Math.PI)/n),a=[];return(o>=this.scale.valuesCount||0>o)&&(o=0),s.distance<=this.scale.drawingArea&&e.each(this.datasets,function(t){a.push(t.points[o])}),a},buildScale:function(t){this.scale=new i.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:t.labels,valuesCount:t.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(t.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var i=function(){var i=[];return e.each(t,function(t){t.data?i=i.concat(t.data):e.each(t.points,function(t){i.push(t.value)})}),i}(),s=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:e.calculateScaleRange(i,e.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);e.extend(this.scale,s)},addData:function(t,i){this.scale.valuesCount++,e.each(t,function(t,e){var s=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[e].points.push(new this.PointClass({value:t,label:i,x:s.x,y:s.y,strokeColor:this.datasets[e].pointStrokeColor,fillColor:this.datasets[e].pointColor}))},this),this.scale.labels.push(i),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),e.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){e.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:e.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var i=t||1,s=this.chart.ctx;this.clear(),this.scale.draw(),e.each(this.datasets,function(t){e.each(t.points,function(t,e){t.hasValue()&&t.transition(this.scale.getPointPosition(e,this.scale.calculateCenterOffset(t.value)),i)},this),s.lineWidth=this.options.datasetStrokeWidth,s.strokeStyle=t.strokeColor,s.beginPath(),e.each(t.points,function(t,i){0===i?s.moveTo(t.x,t.y):s.lineTo(t.x,t.y)},this),s.closePath(),s.stroke(),s.fillStyle=t.fillColor,s.fill(),e.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this);
},{}],60:[function(require,module,exports){
var Chart = require('./Chart.min');
Chart.types.Line.extend({
    // Passing in a name registers this chart in the Chart namespace in the same way
    name: "Scatter",
    draw : function(ease){
            var easingDecimal = ease || 1;
            this.clear();

            var ctx = this.chart.ctx;

            // Some helper methods for getting the next/prev points
            var hasValue = function(item){
                return item.value !== null;
            },
            nextPoint = function(point, collection, index){
                return Chart.helpers.findNextWhere(collection, hasValue, index) || point;
            },
            previousPoint = function(point, collection, index){
                return Chart.helpers.findPreviousWhere(collection, hasValue, index) || point;
            };

            this.scale.draw(easingDecimal);


            Chart.helpers.each(this.datasets,function(dataset){
                var pointsWithValues = Chart.helpers.where(dataset.points, hasValue);

                //Transition each point first so that the line and point drawing isn't out of sync
                //We can use this extra loop to calculate the control points of this dataset also in this loop

                Chart.helpers.each(dataset.points, function(point, index){
                    if (point.hasValue()){
                        point.transition({
                            y : this.scale.calculateY(point.value),
                            x : this.scale.calculateX(index)
                        }, easingDecimal);
                    }
                },this);


                // Control points need to be calculated in a seperate loop, because we need to know the current x/y of the point
                // This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed
                if (this.options.bezierCurve){
                    Chart.helpers.each(pointsWithValues, function(point, index){
                        var tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;
                        point.controlPoints = Chart.helpers.splineCurve(
                            previousPoint(point, pointsWithValues, index),
                            point,
                            nextPoint(point, pointsWithValues, index),
                            tension
                        );

                        // Prevent the bezier going outside of the bounds of the graph

                        // Cap puter bezier handles to the upper/lower scale bounds
                        if (point.controlPoints.outer.y > this.scale.endPoint){
                            point.controlPoints.outer.y = this.scale.endPoint;
                        }
                        else if (point.controlPoints.outer.y < this.scale.startPoint){
                            point.controlPoints.outer.y = this.scale.startPoint;
                        }

                        // Cap inner bezier handles to the upper/lower scale bounds
                        if (point.controlPoints.inner.y > this.scale.endPoint){
                            point.controlPoints.inner.y = this.scale.endPoint;
                        }
                        else if (point.controlPoints.inner.y < this.scale.startPoint){
                            point.controlPoints.inner.y = this.scale.startPoint;
                        }
                    },this);
                }

                if (this.options.datasetFill && pointsWithValues.length > 0){
                    //Round off the line by going to the base of the chart, back to the start, then fill.
                    ctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);
                    ctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);
                    ctx.fillStyle = dataset.fillColor;
                    ctx.closePath();
                    ctx.fill();
                }

                //Now draw the points over the line
                //A little inefficient double looping, but better than the line
                //lagging behind the point positions
                Chart.helpers.each(pointsWithValues,function(point){
                    point.draw();
                });
            },this);
        }
});
},{"./Chart.min":59}],61:[function(require,module,exports){
(function (global){
(function (factory) {
	// Module systems magic dance.

	if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
		// CommonJS or Node: hard-coded dependency on "knockout"
		factory((typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null), exports);
	} else if (typeof define === "function" && define["amd"]) {
		// AMD anonymous module with hard-coded dependency on "knockout"
		define(["knockout", "exports"], factory);
	} else {
		// <script> tag: use the global `ko` object, attaching a `mapping` property
		factory(ko, ko.mapping = {});
	}
}(function (ko, exports) {
	var DEBUG=true;
	var mappingProperty = "__ko_mapping__";
	var realKoDependentObservable = ko.dependentObservable;
	var mappingNesting = 0;
	var dependentObservables;
	var visitedObjects;
	var recognizedRootProperties = ["create", "update", "key", "arrayChanged"];
	var emptyReturn = {};

	var _defaultOptions = {
		include: ["_destroy"],
		ignore: [],
		copy: [],
		observe: []
	};
	var defaultOptions = _defaultOptions;

	// Author: KennyTM @ StackOverflow
	function unionArrays (x, y) {
		var obj = {};
		for (var i = x.length - 1; i >= 0; -- i) obj[x[i]] = x[i];
		for (var i = y.length - 1; i >= 0; -- i) obj[y[i]] = y[i];
		var res = [];

		for (var k in obj) {
			res.push(obj[k]);
		};

		return res;
	}

	function extendObject(destination, source) {
		var destType;

		for (var key in source) {
			if (source.hasOwnProperty(key) && source[key]) {
				destType = exports.getType(destination[key]);
				if (key && destination[key] && destType !== "array" && destType !== "string") {
					extendObject(destination[key], source[key]);
				} else {
					var bothArrays = exports.getType(destination[key]) === "array" && exports.getType(source[key]) === "array";
					if (bothArrays) {
						destination[key] = unionArrays(destination[key], source[key]);
					} else {
						destination[key] = source[key];
					}
				}
			}
		}
	}

	function merge(obj1, obj2) {
		var merged = {};
		extendObject(merged, obj1);
		extendObject(merged, obj2);

		return merged;
	}

	exports.isMapped = function (viewModel) {
		var unwrapped = ko.utils.unwrapObservable(viewModel);
		return unwrapped && unwrapped[mappingProperty];
	}

	exports.fromJS = function (jsObject /*, inputOptions, target*/ ) {
		if (arguments.length == 0) throw new Error("When calling ko.fromJS, pass the object you want to convert.");

		try {
			if (!mappingNesting++) {
				dependentObservables = [];
				visitedObjects = new objectLookup();
			}

			var options;
			var target;

			if (arguments.length == 2) {
				if (arguments[1][mappingProperty]) {
					target = arguments[1];
				} else {
					options = arguments[1];
				}
			}
			if (arguments.length == 3) {
				options = arguments[1];
				target = arguments[2];
			}

			if (target) {
				options = merge(options, target[mappingProperty]);
			}
			options = fillOptions(options);

			var result = updateViewModel(target, jsObject, options);
			if (target) {
				result = target;
			}

			// Evaluate any dependent observables that were proxied.
			// Do this after the model's observables have been created
			if (!--mappingNesting) {
				while (dependentObservables.length) {
					var DO = dependentObservables.pop();
					if (DO) {
						DO();
						
						// Move this magic property to the underlying dependent observable
						DO.__DO["throttleEvaluation"] = DO["throttleEvaluation"];
					}
				}
			}

			// Save any new mapping options in the view model, so that updateFromJS can use them later.
			result[mappingProperty] = merge(result[mappingProperty], options);

			return result;
		} catch(e) {
			mappingNesting = 0;
			throw e;
		}
	};

	exports.fromJSON = function (jsonString /*, options, target*/ ) {
		var parsed = ko.utils.parseJson(jsonString);
		arguments[0] = parsed;
		return exports.fromJS.apply(this, arguments);
	};

	exports.updateFromJS = function (viewModel) {
		throw new Error("ko.mapping.updateFromJS, use ko.mapping.fromJS instead. Please note that the order of parameters is different!");
	};

	exports.updateFromJSON = function (viewModel) {
		throw new Error("ko.mapping.updateFromJSON, use ko.mapping.fromJSON instead. Please note that the order of parameters is different!");
	};

	exports.toJS = function (rootObject, options) {
		if (!defaultOptions) exports.resetDefaultOptions();

		if (arguments.length == 0) throw new Error("When calling ko.mapping.toJS, pass the object you want to convert.");
		if (exports.getType(defaultOptions.ignore) !== "array") throw new Error("ko.mapping.defaultOptions().ignore should be an array.");
		if (exports.getType(defaultOptions.include) !== "array") throw new Error("ko.mapping.defaultOptions().include should be an array.");
		if (exports.getType(defaultOptions.copy) !== "array") throw new Error("ko.mapping.defaultOptions().copy should be an array.");

		// Merge in the options used in fromJS
		options = fillOptions(options, rootObject[mappingProperty]);

		// We just unwrap everything at every level in the object graph
		return exports.visitModel(rootObject, function (x) {
			return ko.utils.unwrapObservable(x)
		}, options);
	};

	exports.toJSON = function (rootObject, options) {
		var plainJavaScriptObject = exports.toJS(rootObject, options);
		return ko.utils.stringifyJson(plainJavaScriptObject);
	};

	exports.defaultOptions = function () {
		if (arguments.length > 0) {
			defaultOptions = arguments[0];
		} else {
			return defaultOptions;
		}
	};

	exports.resetDefaultOptions = function () {
		defaultOptions = {
			include: _defaultOptions.include.slice(0),
			ignore: _defaultOptions.ignore.slice(0),
			copy: _defaultOptions.copy.slice(0)
		};
	};

	exports.getType = function(x) {
		if ((x) && (typeof (x) === "object")) {
			if (x.constructor === Date) return "date";
			if (x.constructor === Array) return "array";
		}
		return typeof x;
	}

	function fillOptions(rawOptions, otherOptions) {
		var options = merge({}, rawOptions);

		// Move recognized root-level properties into a root namespace
		for (var i = recognizedRootProperties.length - 1; i >= 0; i--) {
			var property = recognizedRootProperties[i];
			
			// Carry on, unless this property is present
			if (!options[property]) continue;
			
			// Move the property into the root namespace
			if (!(options[""] instanceof Object)) options[""] = {};
			options[""][property] = options[property];
			delete options[property];
		}

		if (otherOptions) {
			options.ignore = mergeArrays(otherOptions.ignore, options.ignore);
			options.include = mergeArrays(otherOptions.include, options.include);
			options.copy = mergeArrays(otherOptions.copy, options.copy);
			options.observe = mergeArrays(otherOptions.observe, options.observe);
		}
		options.ignore = mergeArrays(options.ignore, defaultOptions.ignore);
		options.include = mergeArrays(options.include, defaultOptions.include);
		options.copy = mergeArrays(options.copy, defaultOptions.copy);
		options.observe = mergeArrays(options.observe, defaultOptions.observe);

		options.mappedProperties = options.mappedProperties || {};
		options.copiedProperties = options.copiedProperties || {};
		return options;
	}

	function mergeArrays(a, b) {
		if (exports.getType(a) !== "array") {
			if (exports.getType(a) === "undefined") a = [];
			else a = [a];
		}
		if (exports.getType(b) !== "array") {
			if (exports.getType(b) === "undefined") b = [];
			else b = [b];
		}

		return ko.utils.arrayGetDistinctValues(a.concat(b));
	}

	// When using a 'create' callback, we proxy the dependent observable so that it doesn't immediately evaluate on creation.
	// The reason is that the dependent observables in the user-specified callback may contain references to properties that have not been mapped yet.
	function withProxyDependentObservable(dependentObservables, callback) {
		var localDO = ko.dependentObservable;
		ko.dependentObservable = function (read, owner, options) {
			options = options || {};

			if (read && typeof read == "object") { // mirrors condition in knockout implementation of DO's
				options = read;
			}

			var realDeferEvaluation = options.deferEvaluation;

			var isRemoved = false;

			// We wrap the original dependent observable so that we can remove it from the 'dependentObservables' list we need to evaluate after mapping has
			// completed if the user already evaluated the DO themselves in the meantime.
			var wrap = function (DO) {
				// Temporarily revert ko.dependentObservable, since it is used in ko.isWriteableObservable
				var tmp = ko.dependentObservable;
				ko.dependentObservable = realKoDependentObservable;
				var isWriteable = ko.isWriteableObservable(DO);
				ko.dependentObservable = tmp;

				var wrapped = realKoDependentObservable({
					read: function () {
						if (!isRemoved) {
							ko.utils.arrayRemoveItem(dependentObservables, DO);
							isRemoved = true;
						}
						return DO.apply(DO, arguments);
					},
					write: isWriteable && function (val) {
						return DO(val);
					},
					deferEvaluation: true
				});
				if (DEBUG) wrapped._wrapper = true;
				wrapped.__DO = DO;
				return wrapped;
			};
			
			options.deferEvaluation = true; // will either set for just options, or both read/options.
			var realDependentObservable = new realKoDependentObservable(read, owner, options);

			if (!realDeferEvaluation) {
				realDependentObservable = wrap(realDependentObservable);
				dependentObservables.push(realDependentObservable);
			}

			return realDependentObservable;
		}
		ko.dependentObservable.fn = realKoDependentObservable.fn;
		ko.computed = ko.dependentObservable;
		var result = callback();
		ko.dependentObservable = localDO;
		ko.computed = ko.dependentObservable;
		return result;
	}

	function updateViewModel(mappedRootObject, rootObject, options, parentName, parent, parentPropertyName, mappedParent) {
		var isArray = exports.getType(ko.utils.unwrapObservable(rootObject)) === "array";

		parentPropertyName = parentPropertyName || "";

		// If this object was already mapped previously, take the options from there and merge them with our existing ones.
		if (exports.isMapped(mappedRootObject)) {
			var previousMapping = ko.utils.unwrapObservable(mappedRootObject)[mappingProperty];
			options = merge(previousMapping, options);
		}

		var callbackParams = {
			data: rootObject,
			parent: mappedParent || parent
		};

		var hasCreateCallback = function () {
			return options[parentName] && options[parentName].create instanceof Function;
		};

		var createCallback = function (data) {
			return withProxyDependentObservable(dependentObservables, function () {
				
				if (ko.utils.unwrapObservable(parent) instanceof Array) {
					return options[parentName].create({
						data: data || callbackParams.data,
						parent: callbackParams.parent,
						skip: emptyReturn
					});
				} else {
					return options[parentName].create({
						data: data || callbackParams.data,
						parent: callbackParams.parent
					});
				}				
			});
		};

		var hasUpdateCallback = function () {
			return options[parentName] && options[parentName].update instanceof Function;
		};

		var updateCallback = function (obj, data) {
			var params = {
				data: data || callbackParams.data,
				parent: callbackParams.parent,
				target: ko.utils.unwrapObservable(obj)
			};

			if (ko.isWriteableObservable(obj)) {
				params.observable = obj;
			}

			return options[parentName].update(params);
		}

		var alreadyMapped = visitedObjects.get(rootObject);
		if (alreadyMapped) {
			return alreadyMapped;
		}

		parentName = parentName || "";

		if (!isArray) {
			// For atomic types, do a direct update on the observable
			if (!canHaveProperties(rootObject)) {
				switch (exports.getType(rootObject)) {
				case "function":
					if (hasUpdateCallback()) {
						if (ko.isWriteableObservable(rootObject)) {
							rootObject(updateCallback(rootObject));
							mappedRootObject = rootObject;
						} else {
							mappedRootObject = updateCallback(rootObject);
						}
					} else {
						mappedRootObject = rootObject;
					}
					break;
				default:
					if (ko.isWriteableObservable(mappedRootObject)) {
						if (hasUpdateCallback()) {
							var valueToWrite = updateCallback(mappedRootObject);
							mappedRootObject(valueToWrite);
							return valueToWrite;
						} else {
							var valueToWrite = ko.utils.unwrapObservable(rootObject);
							mappedRootObject(valueToWrite);
							return valueToWrite;
						}
					} else {
						var hasCreateOrUpdateCallback = hasCreateCallback() || hasUpdateCallback();
						
						if (hasCreateCallback()) {
							mappedRootObject = createCallback();
						} else {
							mappedRootObject = ko.observable(ko.utils.unwrapObservable(rootObject));
						}

						if (hasUpdateCallback()) {
							mappedRootObject(updateCallback(mappedRootObject));
						}
						
						if (hasCreateOrUpdateCallback) return mappedRootObject;
					}
				}

			} else {
				mappedRootObject = ko.utils.unwrapObservable(mappedRootObject);
				if (!mappedRootObject) {
					if (hasCreateCallback()) {
						var result = createCallback();

						if (hasUpdateCallback()) {
							result = updateCallback(result);
						}

						return result;
					} else {
						if (hasUpdateCallback()) {
							return updateCallback(result);
						}

						mappedRootObject = {};
					}
				}

				if (hasUpdateCallback()) {
					mappedRootObject = updateCallback(mappedRootObject);
				}

				visitedObjects.save(rootObject, mappedRootObject);
				if (hasUpdateCallback()) return mappedRootObject;

				// For non-atomic types, visit all properties and update recursively
				visitPropertiesOrArrayEntries(rootObject, function (indexer) {
					var fullPropertyName = parentPropertyName.length ? parentPropertyName + "." + indexer : indexer;

					if (ko.utils.arrayIndexOf(options.ignore, fullPropertyName) != -1) {
						return;
					}

					if (ko.utils.arrayIndexOf(options.copy, fullPropertyName) != -1) {
						mappedRootObject[indexer] = rootObject[indexer];
						return;
					}

					if(typeof rootObject[indexer] != "object" && typeof rootObject[indexer] != "array" && options.observe.length > 0 && ko.utils.arrayIndexOf(options.observe, fullPropertyName) == -1)
					{
						mappedRootObject[indexer] = rootObject[indexer];
						options.copiedProperties[fullPropertyName] = true;
						return;
					}
					
					// In case we are adding an already mapped property, fill it with the previously mapped property value to prevent recursion.
					// If this is a property that was generated by fromJS, we should use the options specified there
					var prevMappedProperty = visitedObjects.get(rootObject[indexer]);
					var retval = updateViewModel(mappedRootObject[indexer], rootObject[indexer], options, indexer, mappedRootObject, fullPropertyName, mappedRootObject);
					var value = prevMappedProperty || retval;
					
					if(options.observe.length > 0 && ko.utils.arrayIndexOf(options.observe, fullPropertyName) == -1)
					{
						mappedRootObject[indexer] = value();
						options.copiedProperties[fullPropertyName] = true;
						return;
					}
					
					if (ko.isWriteableObservable(mappedRootObject[indexer])) {
						value = ko.utils.unwrapObservable(value);
						if (mappedRootObject[indexer]() !== value) {
							mappedRootObject[indexer](value);
						}
					} else {
						value = mappedRootObject[indexer] === undefined ? value : ko.utils.unwrapObservable(value);
						mappedRootObject[indexer] = value;
					}

					options.mappedProperties[fullPropertyName] = true;
				});
			}
		} else { //mappedRootObject is an array
			var changes = [];

			var hasKeyCallback = false;
			var keyCallback = function (x) {
				return x;
			}
			if (options[parentName] && options[parentName].key) {
				keyCallback = options[parentName].key;
				hasKeyCallback = true;
			}

			if (!ko.isObservable(mappedRootObject)) {
				// When creating the new observable array, also add a bunch of utility functions that take the 'key' of the array items into account.
				mappedRootObject = ko.observableArray([]);

				mappedRootObject.mappedRemove = function (valueOrPredicate) {
					var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) {
							return value === keyCallback(valueOrPredicate);
						};
					return mappedRootObject.remove(function (item) {
						return predicate(keyCallback(item));
					});
				}

				mappedRootObject.mappedRemoveAll = function (arrayOfValues) {
					var arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);
					return mappedRootObject.remove(function (item) {
						return ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) != -1;
					});
				}

				mappedRootObject.mappedDestroy = function (valueOrPredicate) {
					var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) {
							return value === keyCallback(valueOrPredicate);
						};
					return mappedRootObject.destroy(function (item) {
						return predicate(keyCallback(item));
					});
				}

				mappedRootObject.mappedDestroyAll = function (arrayOfValues) {
					var arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);
					return mappedRootObject.destroy(function (item) {
						return ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) != -1;
					});
				}

				mappedRootObject.mappedIndexOf = function (item) {
					var keys = filterArrayByKey(mappedRootObject(), keyCallback);
					var key = keyCallback(item);
					return ko.utils.arrayIndexOf(keys, key);
				}

				mappedRootObject.mappedGet = function (item) {
					return mappedRootObject()[mappedRootObject.mappedIndexOf(item)];
				}

				mappedRootObject.mappedCreate = function (value) {
					if (mappedRootObject.mappedIndexOf(value) !== -1) {
						throw new Error("There already is an object with the key that you specified.");
					}

					var item = hasCreateCallback() ? createCallback(value) : value;
					if (hasUpdateCallback()) {
						var newValue = updateCallback(item, value);
						if (ko.isWriteableObservable(item)) {
							item(newValue);
						} else {
							item = newValue;
						}
					}
					mappedRootObject.push(item);
					return item;
				}
			}

			var currentArrayKeys = filterArrayByKey(ko.utils.unwrapObservable(mappedRootObject), keyCallback).sort();
			var newArrayKeys = filterArrayByKey(rootObject, keyCallback);
			if (hasKeyCallback) newArrayKeys.sort();
			var editScript = ko.utils.compareArrays(currentArrayKeys, newArrayKeys);

			var ignoreIndexOf = {};
			
			var i, j;

			var unwrappedRootObject = ko.utils.unwrapObservable(rootObject);
			var itemsByKey = {};
			var optimizedKeys = true;
			for (i = 0, j = unwrappedRootObject.length; i < j; i++) {
				var key = keyCallback(unwrappedRootObject[i]);
				if (key === undefined || key instanceof Object) {
					optimizedKeys = false;
					break;
				}
				itemsByKey[key] = unwrappedRootObject[i];
			}

			var newContents = [];
			var passedOver = 0;
			for (i = 0, j = editScript.length; i < j; i++) {
				var key = editScript[i];
				var mappedItem;
				var fullPropertyName = parentPropertyName + "[" + i + "]";
				switch (key.status) {
				case "added":
					var item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);
					mappedItem = updateViewModel(undefined, item, options, parentName, mappedRootObject, fullPropertyName, parent);
					if(!hasCreateCallback()) {
						mappedItem = ko.utils.unwrapObservable(mappedItem);
					}

					var index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);
					
					if (mappedItem === emptyReturn) {
						passedOver++;
					} else {
						newContents[index - passedOver] = mappedItem;
					}
						
					ignoreIndexOf[index] = true;
					break;
				case "retained":
					var item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);
					mappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);
					updateViewModel(mappedItem, item, options, parentName, mappedRootObject, fullPropertyName, parent);

					var index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);
					newContents[index] = mappedItem;
					ignoreIndexOf[index] = true;
					break;
				case "deleted":
					mappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);
					break;
				}

				changes.push({
					event: key.status,
					item: mappedItem
				});
			}

			mappedRootObject(newContents);

			if (options[parentName] && options[parentName].arrayChanged) {
				ko.utils.arrayForEach(changes, function (change) {
					options[parentName].arrayChanged(change.event, change.item);
				});
			}
		}

		return mappedRootObject;
	}

	function ignorableIndexOf(array, item, ignoreIndices) {
		for (var i = 0, j = array.length; i < j; i++) {
			if (ignoreIndices[i] === true) continue;
			if (array[i] === item) return i;
		}
		return null;
	}

	function mapKey(item, callback) {
		var mappedItem;
		if (callback) mappedItem = callback(item);
		if (exports.getType(mappedItem) === "undefined") mappedItem = item;

		return ko.utils.unwrapObservable(mappedItem);
	}

	function getItemByKey(array, key, callback) {
		array = ko.utils.unwrapObservable(array);
		for (var i = 0, j = array.length; i < j; i++) {
			var item = array[i];
			if (mapKey(item, callback) === key) return item;
		}

		throw new Error("When calling ko.update*, the key '" + key + "' was not found!");
	}

	function filterArrayByKey(array, callback) {
		return ko.utils.arrayMap(ko.utils.unwrapObservable(array), function (item) {
			if (callback) {
				return mapKey(item, callback);
			} else {
				return item;
			}
		});
	}

	function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
		if (exports.getType(rootObject) === "array") {
			for (var i = 0; i < rootObject.length; i++)
			visitorCallback(i);
		} else {
			for (var propertyName in rootObject)
			visitorCallback(propertyName);
		}
	};

	function canHaveProperties(object) {
		var type = exports.getType(object);
		return ((type === "object") || (type === "array")) && (object !== null);
	}

	// Based on the parentName, this creates a fully classified name of a property

	function getPropertyName(parentName, parent, indexer) {
		var propertyName = parentName || "";
		if (exports.getType(parent) === "array") {
			if (parentName) {
				propertyName += "[" + indexer + "]";
			}
		} else {
			if (parentName) {
				propertyName += ".";
			}
			propertyName += indexer;
		}
		return propertyName;
	}

	exports.visitModel = function (rootObject, callback, options) {
		options = options || {};
		options.visitedObjects = options.visitedObjects || new objectLookup();

		var mappedRootObject;
		var unwrappedRootObject = ko.utils.unwrapObservable(rootObject);

		if (!canHaveProperties(unwrappedRootObject)) {
			return callback(rootObject, options.parentName);
		} else {
			options = fillOptions(options, unwrappedRootObject[mappingProperty]);

			// Only do a callback, but ignore the results
			callback(rootObject, options.parentName);
			mappedRootObject = exports.getType(unwrappedRootObject) === "array" ? [] : {};
		}

		options.visitedObjects.save(rootObject, mappedRootObject);

		var parentName = options.parentName;
		visitPropertiesOrArrayEntries(unwrappedRootObject, function (indexer) {
			if (options.ignore && ko.utils.arrayIndexOf(options.ignore, indexer) != -1) return;

			var propertyValue = unwrappedRootObject[indexer];
			options.parentName = getPropertyName(parentName, unwrappedRootObject, indexer);

			// If we don't want to explicitly copy the unmapped property...
			if (ko.utils.arrayIndexOf(options.copy, indexer) === -1) {
				// ...find out if it's a property we want to explicitly include
				if (ko.utils.arrayIndexOf(options.include, indexer) === -1) {
					// The mapped properties object contains all the properties that were part of the original object.
					// If a property does not exist, and it is not because it is part of an array (e.g. "myProp[3]"), then it should not be unmapped.
				    if (unwrappedRootObject[mappingProperty]
				        && unwrappedRootObject[mappingProperty].mappedProperties && !unwrappedRootObject[mappingProperty].mappedProperties[indexer]
				        && unwrappedRootObject[mappingProperty].copiedProperties && !unwrappedRootObject[mappingProperty].copiedProperties[indexer]
				        && !(exports.getType(unwrappedRootObject) === "array")) {
						return;
					}
				}
			}

			var outputProperty;
			switch (exports.getType(ko.utils.unwrapObservable(propertyValue))) {
			case "object":
			case "array":
			case "undefined":
				var previouslyMappedValue = options.visitedObjects.get(propertyValue);
				mappedRootObject[indexer] = (exports.getType(previouslyMappedValue) !== "undefined") ? previouslyMappedValue : exports.visitModel(propertyValue, callback, options);
				break;
			default:
				mappedRootObject[indexer] = callback(propertyValue, options.parentName);
			}
		});

		return mappedRootObject;
	}

	function simpleObjectLookup() {
		var keys = [];
		var values = [];
		this.save = function (key, value) {
			var existingIndex = ko.utils.arrayIndexOf(keys, key);
			if (existingIndex >= 0) values[existingIndex] = value;
			else {
				keys.push(key);
				values.push(value);
			}
		};
		this.get = function (key) {
			var existingIndex = ko.utils.arrayIndexOf(keys, key);
			var value = (existingIndex >= 0) ? values[existingIndex] : undefined;
			return value;
		};
	};
	
	function objectLookup() {
		var buckets = {};
		
		var findBucket = function(key) {
			var bucketKey;
			try {
				bucketKey = key;//JSON.stringify(key);
			}
			catch (e) {
				bucketKey = "$$$";
			}

			var bucket = buckets[bucketKey];
			if (bucket === undefined) {
				bucket = new simpleObjectLookup();
				buckets[bucketKey] = bucket;
			}
			return bucket;
		};
		
		this.save = function (key, value) {
			findBucket(key).save(key, value);
		};
		this.get = function (key) {
			return findBucket(key).get(key);
		};
	};
}));
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],62:[function(require,module,exports){
(function (global){
// Knockout Fast Mapping v0.1
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function (factory) {
	// Module systems magic dance.

	if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
		// CommonJS or Node: hard-coded dependency on "knockout"
		factory((typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null), exports);
	} else if (typeof define === "function" && define["amd"]) {
		// AMD anonymous module with hard-coded dependency on "knockout"
		define(["knockout", "exports"], factory);
	} else {
		// <script> tag: use the global `ko` object, attaching a `wrap` property
		factory(ko, ko.wrap = {});
	}
}(function (ko, exports) {
    
    // this function mimics ko.mapping
    exports.fromJS = function(jsObject, computedFunctions)
    {
        reset();
	return wrap(jsObject, computedFunctions);
    }

    // this function unwraps the outer for assigning the result to an observable
    // see https://github.com/SteveSanderson/knockout/issues/517
    exports.updateFromJS = function(observable, jsObject, computedFunctions)
    {
        reset();
	return observable(ko.utils.unwrapObservable(wrap(jsObject, computedFunctions)));
    }

    exports.fromJSON = function (jsonString, computedFunctions) {
	var parsed = ko.utils.parseJson(jsonString);
	arguments[0] = parsed;
	return exports.fromJS.apply(this, computedFunctions);
    };
    
    exports.toJS = function (observable) {
	return unwrap(observable);
    }

    exports.toJSON = function (observable) {
	var plainJavaScriptObject = exports.toJS(observable);
	return ko.utils.stringifyJson(plainJavaScriptObject);
    };

    function typeOf(value) {
	var s = typeof value;
	if (s === 'object') {
            if (value) {
                if (value.constructor == Date)
                    s = 'date';
		else if (Object.prototype.toString.call(value) == '[object Array]')
                    s = 'array';
            } else {
		s = 'null';
            }
	}
	return s;
    }

    // unwrapping
    function unwrapObject(o)
    {
	var t = {};

	for (var k in o)
	{
	    var v = o[k];

	    if (ko.isComputed(v))
		continue;

	    t[k] = unwrap(v);
	}

	return t;
    }

    function unwrapArray(a)
    {
	var r = [];

	if (!a || a.length == 0)
	    return r;
	
	for (var i = 0, l = a.length; i < l; ++i)
	    r.push(unwrap(a[i]));

	return r;
    }

    function unwrap(v)
    {
	var isObservable = ko.isObservable(v);

	if (isObservable)
	{
	    var val = v();

	    return unwrap(val);
	}
	else
	{
	    if (typeOf(v) == "array")
	    {
		return unwrapArray(v);
	    }
	    else if (typeOf(v) == "object")
	    {
		return unwrapObject(v);
	    }
	    else
	    {
		return v;
	    }
	}
    }

    function reset()
    {
        parents = [{obj: null, wrapped: null, lvl: ""}];
    }    
    
    // wrapping

    function wrapObject(o, computedFunctions)
    {
        // check for infinite recursion
        for (var i = 0; i < parents.length; ++i) {
            if (parents[i].obj === o) {
                return parents[i].wrapped;
            }
        }

	var t = {};

	for (var k in o)
	{
	    var v = o[k];

            parents.push({obj: o, wrapped: t, lvl: currentLvl() + "/" + k});

	    t[k] = wrap(v, computedFunctions);

            parents.pop();
	}

	if (computedFunctions && computedFunctions[currentLvl()])
	    t = computedFunctions[currentLvl()](t);

        if (hasES5Plugin())
            ko.track(t);

	return t;
    }

    function wrapArray(a, computedFunctions)
    {
	var r = ko.observableArray();

	if (!a || a.length == 0)
	    return r;

	for (var i = 0, l = a.length; i < l; ++i)
	    r.push(wrap(a[i], computedFunctions));

	return r;
    }

    // a stack, used for two purposes:
    //  - circular reference checking
    //  - computed functions
    var parents;

    function currentLvl()
    {
	return parents[parents.length-1].lvl;
    }

    function wrap(v, computedFunctions)
    {
	if (typeOf(v) == "array")
	{
	    return wrapArray(v, computedFunctions);
	}
	else if (typeOf(v) == "object")
	{
	    return wrapObject(v, computedFunctions);
	}
	else
	{
            if (!hasES5Plugin() && typeof v !== 'function')
            {
	        var t = ko.observable();
	        t(v);
	        return t;
            } else
                return v;
	}
    }

    function hasES5Plugin()
    {
        return ko.track != null;
    }
}));
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],63:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var HEROCALCULATOR = require('./app/main');
hc = new HEROCALCULATOR();
var lastUpdate = "#DEV_BUILD";
$('#last-update').text(lastUpdate);
hc.init("/media/js/herodata.json","/media/js/itemdata.json","/media/js/unitdata.json", hc.run);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./app/main":42}]},{},[63])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvanMvbnBtLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9hZmZpeC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvYWxlcnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2J1dHRvbi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvY2Fyb3VzZWwuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2NvbGxhcHNlLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9kcm9wZG93bi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvbW9kYWwuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3BvcG92ZXIuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3Njcm9sbHNweS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvdGFiLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy90b29sdGlwLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy90cmFuc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9kYXRhLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9kaXNhYmxlLXNlbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvZm9jdXNhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9pZS5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkva2V5Y29kZS5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvcGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9wb3NpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvc2FmZS1hY3RpdmUtZWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvc2FmZS1ibHVyLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9zY3JvbGwtcGFyZW50LmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS90YWJiYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvdW5pcXVlLWlkLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS92ZXJzaW9uLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXQuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3dpZGdldHMvYXV0b2NvbXBsZXRlLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL2J1dHRvbi5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvd2lkZ2V0cy9kaWFsb2cuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3dpZGdldHMvZHJhZ2dhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL21lbnUuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3dpZGdldHMvbW91c2UuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3dpZGdldHMvcmVzaXphYmxlLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL3NwaW5uZXIuanMiLCJ3d3cvanMvYXBwL2hlcm9jYWxjX2J1ZmZzLmFtcGxpZmljYXRpb24ucmVkdWN0aW9uLmpzIiwid3d3L2pzL2FwcC9oZXJvY2FsY19idWlsZGV4cGxvcmVyLmpzIiwid3d3L2pzL2FwcC9oZXJvY2FsY19oZXJvX2RhbWFnZWFtcC5qcyIsInd3dy9qcy9hcHAvaGVyb2NhbGNfa25vY2tvdXQuanMiLCJ3d3cvanMvYXBwL2hlcm92aWV3bW9kZWwuanMiLCJ3d3cvanMvYXBwL2pxdWVyeS11aS5jdXN0b20uanMiLCJ3d3cvanMvYXBwL21haW4uanMiLCJ3d3cvanMvY29tcG9uZW50cy9zaG9wLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2FiaWxpdGllcy5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY19hYmlsaXR5ZGF0YS5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY19idWZmcy5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY19jb3JlLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2hlcm8uaWxsdXNpb24uanMiLCJ3d3cvanMvaGVyb2NhbGMvaGVyb2NhbGNfaGVyby5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY19oZXJvLm1lZXBvLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2hlcm9fZGFtYWdlLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2ludmVudG9yeS5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY19rbm9ja291dC5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY190b29sdGlwc19hYmlsaXR5LmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX3Rvb2x0aXBzX2l0ZW0uanMiLCJ3d3cvanMvaGVyb2NhbGMvaGVyb2NhbGNfdW5pdC5qcyIsInd3dy9qcy9oZXJvY2FsYy9tYWluLmpzIiwid3d3L2pzL2hlcm9jYWxjL3BvbHlmaWxsLmpzIiwid3d3L2pzL2xpYi9DaGFydC5taW4uanMiLCJ3d3cvanMvbGliL0NoYXJ0LnNjYXR0ZXIuanMiLCJ3d3cvanMvbGliL2tub2Nrb3V0Lm1hcHBpbmcuanMiLCJ3d3cvanMvbGliL2tub2Nrb3V0LndyYXAuanMiLCJ3d3cvanMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Z0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Z0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6c0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2w2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbnVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNyR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzFmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzFwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2o0RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzMrR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDampCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDenBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDcjRDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDbExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3J5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNoTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIFRoaXMgZmlsZSBpcyBhdXRvZ2VuZXJhdGVkIHZpYSB0aGUgYGNvbW1vbmpzYCBHcnVudCB0YXNrLiBZb3UgY2FuIHJlcXVpcmUoKSB0aGlzIGZpbGUgaW4gYSBDb21tb25KUyBlbnZpcm9ubWVudC5cbnJlcXVpcmUoJy4uLy4uL2pzL3RyYW5zaXRpb24uanMnKVxucmVxdWlyZSgnLi4vLi4vanMvYWxlcnQuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvYnV0dG9uLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2Nhcm91c2VsLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2NvbGxhcHNlLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2Ryb3Bkb3duLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL21vZGFsLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3Rvb2x0aXAuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvcG9wb3Zlci5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9zY3JvbGxzcHkuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvdGFiLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2FmZml4LmpzJykiLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNydcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQUxFUlQgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc21pc3MgPSAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB2YXIgQWxlcnQgICA9IGZ1bmN0aW9uIChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXG4gIH1cblxuICBBbGVydC5WRVJTSU9OID0gJzMuMy43J1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgICA9ICQodGhpcylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gJChzZWxlY3RvciA9PT0gJyMnID8gW10gOiBzZWxlY3RvcilcblxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxuICAgIH1cblxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAvLyBkZXRhY2ggZnJvbSBwYXJlbnQsIGZpcmUgZXZlbnQgdGhlbiBjbGVhbiB1cCBkYXRhXG4gICAgICAkcGFyZW50LmRldGFjaCgpLnRyaWdnZXIoJ2Nsb3NlZC5icy5hbGVydCcpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHBhcmVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxuICB9XG5cblxuICAvLyBBTEVSVCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnRcblxuICAkLmZuLmFsZXJ0ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydFxuXG5cbiAgLy8gQUxFUlQgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFsZXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hbGVydCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFMRVJUIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmFsZXJ0LmRhdGEtYXBpJywgZGlzbWlzcywgQWxlcnQucHJvdG90eXBlLmNsb3NlKVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYnV0dG9uLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEJVVFRPTiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICB9XG5cbiAgQnV0dG9uLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIEJ1dHRvbi5ERUZBVUxUUyA9IHtcbiAgICBsb2FkaW5nVGV4dDogJ2xvYWRpbmcuLi4nXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIGQgICAgPSAnZGlzYWJsZWQnXG4gICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIHZhbCAgPSAkZWwuaXMoJ2lucHV0JykgPyAndmFsJyA6ICdodG1sJ1xuICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKVxuXG4gICAgc3RhdGUgKz0gJ1RleHQnXG5cbiAgICBpZiAoZGF0YS5yZXNldFRleHQgPT0gbnVsbCkgJGVsLmRhdGEoJ3Jlc2V0VGV4dCcsICRlbFt2YWxdKCkpXG5cbiAgICAvLyBwdXNoIHRvIGV2ZW50IGxvb3AgdG8gYWxsb3cgZm9ybXMgdG8gc3VibWl0XG4gICAgc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICRlbFt2YWxdKGRhdGFbc3RhdGVdID09IG51bGwgPyB0aGlzLm9wdGlvbnNbc3RhdGVdIDogZGF0YVtzdGF0ZV0pXG5cbiAgICAgIGlmIChzdGF0ZSA9PSAnbG9hZGluZ1RleHQnKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAkZWwuYWRkQ2xhc3MoZCkuYXR0cihkLCBkKS5wcm9wKGQsIHRydWUpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZCkucHJvcChkLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9LCB0aGlzKSwgMClcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VkID0gdHJ1ZVxuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJylcblxuICAgIGlmICgkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxuICAgICAgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ3JhZGlvJykge1xuICAgICAgICBpZiAoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICRwYXJlbnQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgfSBlbHNlIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdjaGVja2JveCcpIHtcbiAgICAgICAgaWYgKCgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSAhPT0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgfVxuICAgICAgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIGlmIChjaGFuZ2VkKSAkaW5wdXQudHJpZ2dlcignY2hhbmdlJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLXByZXNzZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgIH1cbiAgfVxuXG5cbiAgLy8gQlVUVE9OIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpXG5cbiAgICAgIGlmIChvcHRpb24gPT0gJ3RvZ2dsZScpIGRhdGEudG9nZ2xlKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbikgZGF0YS5zZXRTdGF0ZShvcHRpb24pXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmJ1dHRvblxuXG4gICQuZm4uYnV0dG9uICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYnV0dG9uLkNvbnN0cnVjdG9yID0gQnV0dG9uXG5cblxuICAvLyBCVVRUT04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5idXR0b24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmJ1dHRvbiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEJVVFRPTiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyICRidG4gPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJylcbiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKVxuICAgICAgaWYgKCEoJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXSwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykpKSB7XG4gICAgICAgIC8vIFByZXZlbnQgZG91YmxlIGNsaWNrIG9uIHJhZGlvcywgYW5kIHRoZSBkb3VibGUgc2VsZWN0aW9ucyAoc28gY2FuY2VsbGF0aW9uKSBvbiBjaGVja2JveGVzXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNvbXBvbmVudCBzdGlsbCByZWNlaXZlIHRoZSBmb2N1c1xuICAgICAgICBpZiAoJGJ0bi5pcygnaW5wdXQsYnV0dG9uJykpICRidG4udHJpZ2dlcignZm9jdXMnKVxuICAgICAgICBlbHNlICRidG4uZmluZCgnaW5wdXQ6dmlzaWJsZSxidXR0b246dmlzaWJsZScpLmZpcnN0KCkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKVxuICAgIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjYXJvdXNlbC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Nhcm91c2VsXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ0FST1VTRUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJylcbiAgICB0aGlzLm9wdGlvbnMgICAgID0gb3B0aW9uc1xuICAgIHRoaXMucGF1c2VkICAgICAgPSBudWxsXG4gICAgdGhpcy5zbGlkaW5nICAgICA9IG51bGxcbiAgICB0aGlzLmludGVydmFsICAgID0gbnVsbFxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPSBudWxsXG4gICAgdGhpcy4kaXRlbXMgICAgICA9IG51bGxcblxuICAgIHRoaXMub3B0aW9ucy5rZXlib2FyZCAmJiB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxuXG4gICAgdGhpcy5vcHRpb25zLnBhdXNlID09ICdob3ZlcicgJiYgISgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpICYmIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpXG4gICAgICAub24oJ21vdXNlbGVhdmUuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMuY3ljbGUsIHRoaXMpKVxuICB9XG5cbiAgQ2Fyb3VzZWwuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMFxuXG4gIENhcm91c2VsLkRFRkFVTFRTID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWVcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OiB0aGlzLnByZXYoKTsgYnJlYWtcbiAgICAgIGNhc2UgMzk6IHRoaXMubmV4dCgpOyBicmVha1xuICAgICAgZGVmYXVsdDogcmV0dXJuXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpXG5cbiAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHRoaXMub3B0aW9ucy5pbnRlcnZhbFxuICAgICAgJiYgIXRoaXMucGF1c2VkXG4gICAgICAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJylcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuaW5kZXgoaXRlbSB8fCB0aGlzLiRhY3RpdmUpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIGFjdGl2ZSkge1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSlcbiAgICB2YXIgd2lsbFdyYXAgPSAoZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICB8fCAoZGlyZWN0aW9uID09ICduZXh0JyAmJiBhY3RpdmVJbmRleCA9PSAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkpXG4gICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZVxuICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PSAncHJldicgPyAtMSA6IDFcbiAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy4kaXRlbXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKSlcblxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpcy5zbGlkZShwb3MgPiBhY3RpdmVJbmRleCA/ICduZXh0JyA6ICdwcmV2JywgdGhpcy4kaXRlbXMuZXEocG9zKSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZmluZCgnLm5leHQsIC5wcmV2JykubGVuZ3RoICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ25leHQnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ3ByZXYnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKVxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKVxuICAgIHZhciBpc0N5Y2xpbmcgPSB0aGlzLmludGVydmFsXG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0J1xuICAgIHZhciB0aGF0ICAgICAgPSB0aGlzXG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gKHRoaXMuc2xpZGluZyA9IGZhbHNlKVxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSAkbmV4dFswXVxuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxuICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLnBhdXNlKClcblxuICAgIGlmICh0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kaW5kaWNhdG9ycy5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxuICAgICAgJG5leHRJbmRpY2F0b3IgJiYgJG5leHRJbmRpY2F0b3IuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuXG4gICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoJ3NsaWQuYnMuY2Fyb3VzZWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsIGRpcmVjdGlvbjogZGlyZWN0aW9uIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xpZGUnKSkge1xuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcbiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgJGFjdGl2ZS5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkbmV4dC5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoWydhY3RpdmUnLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSlcbiAgICAgICAgICB0aGF0LnNsaWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICAgICAgICB9LCAwKVxuICAgICAgICB9KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgICB9IGVsc2Uge1xuICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICRuZXh0LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgdGhpcy5zbGlkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgfVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ2Fyb3VzZWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG4gICAgICB2YXIgYWN0aW9uICA9IHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgPyBvcHRpb24gOiBvcHRpb25zLnNsaWRlXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnLCAoZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnbnVtYmVyJykgZGF0YS50byhvcHRpb24pXG4gICAgICBlbHNlIGlmIChhY3Rpb24pIGRhdGFbYWN0aW9uXSgpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLmludGVydmFsKSBkYXRhLnBhdXNlKCkuY3ljbGUoKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jYXJvdXNlbFxuXG4gICQuZm4uY2Fyb3VzZWwgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jYXJvdXNlbC5Db25zdHJ1Y3RvciA9IENhcm91c2VsXG5cblxuICAvLyBDQVJPVVNFTCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY2Fyb3VzZWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNhcm91c2VsID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmID0gJHRoaXMuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIGlmICghJHRhcmdldC5oYXNDbGFzcygnY2Fyb3VzZWwnKSkgcmV0dXJuXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcbiAgICB2YXIgc2xpZGVJbmRleCA9ICR0aGlzLmF0dHIoJ2RhdGEtc2xpZGUtdG8nKVxuICAgIGlmIChzbGlkZUluZGV4KSBvcHRpb25zLmludGVydmFsID0gZmFsc2VcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbnMpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgJHRhcmdldC5kYXRhKCdicy5jYXJvdXNlbCcpLnRvKHNsaWRlSW5kZXgpXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGVdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGUtdG9dJywgY2xpY2tIYW5kbGVyKVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNvbGxhcHNlLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qIGpzaGludCBsYXRlZGVmOiBmYWxzZSAqL1xuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogZHJvcGRvd24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNkcm9wZG93bnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBEUk9QRE9XTiBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgYmFja2Ryb3AgPSAnLmRyb3Bkb3duLWJhY2tkcm9wJ1xuICB2YXIgdG9nZ2xlICAgPSAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nXG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgJChlbGVtZW50KS5vbignY2xpY2suYnMuZHJvcGRvd24nLCB0aGlzLnRvZ2dsZSlcbiAgfVxuXG4gIERyb3Bkb3duLlZFUlNJT04gPSAnMy4zLjcnXG5cbiAgZnVuY3Rpb24gZ2V0UGFyZW50KCR0aGlzKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgLyNbQS1aYS16XS8udGVzdChzZWxlY3RvcikgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9IHNlbGVjdG9yICYmICQoc2VsZWN0b3IpXG5cbiAgICByZXR1cm4gJHBhcmVudCAmJiAkcGFyZW50Lmxlbmd0aCA/ICRwYXJlbnQgOiAkdGhpcy5wYXJlbnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJNZW51cyhlKSB7XG4gICAgaWYgKGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuXG4gICAgJChiYWNrZHJvcCkucmVtb3ZlKClcbiAgICAkKHRvZ2dsZSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICAgICAgICA9ICQodGhpcylcbiAgICAgIHZhciAkcGFyZW50ICAgICAgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuXG4gICAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKSkgcmV0dXJuXG5cbiAgICAgIGlmIChlICYmIGUudHlwZSA9PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkgJiYgJC5jb250YWlucygkcGFyZW50WzBdLCBlLnRhcmdldCkpIHJldHVyblxuXG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2hpZGUuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCQuRXZlbnQoJ2hpZGRlbi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuICAgIH0pXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgY2xlYXJNZW51cygpXG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkcGFyZW50LmNsb3Nlc3QoJy5uYXZiYXItbmF2JykubGVuZ3RoKSB7XG4gICAgICAgIC8vIGlmIG1vYmlsZSB3ZSB1c2UgYSBiYWNrZHJvcCBiZWNhdXNlIGNsaWNrIGV2ZW50cyBkb24ndCBkZWxlZ2F0ZVxuICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAgIC5hZGRDbGFzcygnZHJvcGRvd24tYmFja2Ryb3AnKVxuICAgICAgICAgIC5pbnNlcnRBZnRlcigkKHRoaXMpKVxuICAgICAgICAgIC5vbignY2xpY2snLCBjbGVhck1lbnVzKVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ3Nob3cuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpc1xuICAgICAgICAudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJylcblxuICAgICAgJHBhcmVudFxuICAgICAgICAudG9nZ2xlQ2xhc3MoJ29wZW4nKVxuICAgICAgICAudHJpZ2dlcigkLkV2ZW50KCdzaG93bi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghLygzOHw0MHwyN3wzMikvLnRlc3QoZS53aGljaCkgfHwgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSAmJiBlLndoaWNoICE9IDI3IHx8IGlzQWN0aXZlICYmIGUud2hpY2ggPT0gMjcpIHtcbiAgICAgIGlmIChlLndoaWNoID09IDI3KSAkcGFyZW50LmZpbmQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICByZXR1cm4gJHRoaXMudHJpZ2dlcignY2xpY2snKVxuICAgIH1cblxuICAgIHZhciBkZXNjID0gJyBsaTpub3QoLmRpc2FibGVkKTp2aXNpYmxlIGEnXG4gICAgdmFyICRpdGVtcyA9ICRwYXJlbnQuZmluZCgnLmRyb3Bkb3duLW1lbnUnICsgZGVzYylcblxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuXG5cbiAgICB2YXIgaW5kZXggPSAkaXRlbXMuaW5kZXgoZS50YXJnZXQpXG5cbiAgICBpZiAoZS53aGljaCA9PSAzOCAmJiBpbmRleCA+IDApICAgICAgICAgICAgICAgICBpbmRleC0tICAgICAgICAgLy8gdXBcbiAgICBpZiAoZS53aGljaCA9PSA0MCAmJiBpbmRleCA8ICRpdGVtcy5sZW5ndGggLSAxKSBpbmRleCsrICAgICAgICAgLy8gZG93blxuICAgIGlmICghfmluZGV4KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMFxuXG4gICAgJGl0ZW1zLmVxKGluZGV4KS50cmlnZ2VyKCdmb2N1cycpXG4gIH1cblxuXG4gIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJywgKGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5kcm9wZG93blxuXG4gICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5kcm9wZG93bi5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG5cblxuICAvLyBEUk9QRE9XTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uZHJvcGRvd24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmRyb3Bkb3duID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQVBQTFkgVE8gU1RBTkRBUkQgRFJPUERPV04gRUxFTUVOVFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCBjbGVhck1lbnVzKVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSlcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24tbWVudScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogbW9kYWwuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNtb2RhbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBNT0RBTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnNcbiAgICB0aGlzLiRib2R5ICAgICAgICAgICAgICAgPSAkKGRvY3VtZW50LmJvZHkpXG4gICAgdGhpcy4kZWxlbWVudCAgICAgICAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGRpYWxvZyAgICAgICAgICAgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLm1vZGFsLWRpYWxvZycpXG4gICAgdGhpcy4kYmFja2Ryb3AgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuaXNTaG93biAgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCAgICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCAgICAgID0gMFxuICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW90ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuZmluZCgnLm1vZGFsLWNvbnRlbnQnKVxuICAgICAgICAubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlLCAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpXG4gICAgICAgIH0sIHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDBcbiAgTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBlICAgID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxuICAgIHRoaXMuc2V0U2Nyb2xsYmFyKClcbiAgICB0aGlzLiRib2R5LmFkZENsYXNzKCdtb2RhbC1vcGVuJylcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSlcblxuICAgIHRoaXMuJGRpYWxvZy5vbignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRlbGVtZW50Lm9uZSgnbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoYXQuJGVsZW1lbnQpKSB0aGF0Lmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhhdC4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpXG5cbiAgICAgIGlmICghdGhhdC4kZWxlbWVudC5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudC5hcHBlbmRUbyh0aGF0LiRib2R5KSAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMClcblxuICAgICAgdGhhdC5hZGp1c3REaWFsb2coKVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGF0LiRlbGVtZW50WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50LmFkZENsYXNzKCdpbicpXG5cbiAgICAgIHRoYXQuZW5mb3JjZUZvY3VzKClcblxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgICAgdHJhbnNpdGlvbiA/XG4gICAgICAgIHRoYXQuJGRpYWxvZyAvLyB3YWl0IGZvciBtb2RhbCB0byBzbGlkZSBpblxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgZSA9ICQuRXZlbnQoJ2hpZGUuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IGZhbHNlXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnaW4nKVxuICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgICAub2ZmKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZGlhbG9nLm9mZignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eSh0aGlzLmhpZGVNb2RhbCwgdGhpcykpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICB0aGlzLmhpZGVNb2RhbCgpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICQoZG9jdW1lbnQpXG4gICAgICAub2ZmKCdmb2N1c2luLmJzLm1vZGFsJykgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oJ2ZvY3VzaW4uYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChkb2N1bWVudCAhPT0gZS50YXJnZXQgJiZcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnRbMF0gIT09IGUudGFyZ2V0ICYmXG4gICAgICAgICAgICAhdGhpcy4kZWxlbWVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICB9XG4gICAgICB9LCB0aGlzKSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lc2NhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMua2V5Ym9hcmQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS53aGljaCA9PSAyNyAmJiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24pIHtcbiAgICAgICQod2luZG93KS5vbigncmVzaXplLmJzLm1vZGFsJywgJC5wcm94eSh0aGlzLmhhbmRsZVVwZGF0ZSwgdGhpcykpXG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKVxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kYm9keS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpXG4gICAgICB0aGF0LnJlc2V0QWRqdXN0bWVudHMoKVxuICAgICAgdGhhdC5yZXNldFNjcm9sbGJhcigpXG4gICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy5tb2RhbCcpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRiYWNrZHJvcCAmJiB0aGlzLiRiYWNrZHJvcC5yZW1vdmUoKVxuICAgIHRoaXMuJGJhY2tkcm9wID0gbnVsbFxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmJhY2tkcm9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdmFyIGFuaW1hdGUgPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgPyAnZmFkZScgOiAnJ1xuXG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMuYmFja2Ryb3ApIHtcbiAgICAgIHZhciBkb0FuaW1hdGUgPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiBhbmltYXRlXG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgLmFkZENsYXNzKCdtb2RhbC1iYWNrZHJvcCAnICsgYW5pbWF0ZSlcbiAgICAgICAgLmFwcGVuZFRvKHRoaXMuJGJvZHkpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSByZXR1cm5cbiAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tkcm9wID09ICdzdGF0aWMnXG4gICAgICAgICAgPyB0aGlzLiRlbGVtZW50WzBdLmZvY3VzKClcbiAgICAgICAgICA6IHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcblxuICAgICAgaWYgKGRvQW5pbWF0ZSkgdGhpcy4kYmFja2Ryb3BbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpXG5cbiAgICAgIGlmICghY2FsbGJhY2spIHJldHVyblxuXG4gICAgICBkb0FuaW1hdGUgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrKClcblxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93biAmJiB0aGlzLiRiYWNrZHJvcCkge1xuICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfVxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFja1JlbW92ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFja1JlbW92ZSgpXG5cbiAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLy8gdGhlc2UgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuXG4gIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGp1c3REaWFsb2coKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkanVzdERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogICF0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmIG1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAnJyxcbiAgICAgIHBhZGRpbmdSaWdodDogJydcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmNoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmdWxsV2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIGlmICghZnVsbFdpbmRvd1dpZHRoKSB7IC8vIHdvcmthcm91bmQgZm9yIG1pc3Npbmcgd2luZG93LmlubmVyV2lkdGggaW4gSUU4XG4gICAgICB2YXIgZG9jdW1lbnRFbGVtZW50UmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgZnVsbFdpbmRvd1dpZHRoID0gZG9jdW1lbnRFbGVtZW50UmVjdC5yaWdodCAtIE1hdGguYWJzKGRvY3VtZW50RWxlbWVudFJlY3QubGVmdClcbiAgICB9XG4gICAgdGhpcy5ib2R5SXNPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCBmdWxsV2luZG93V2lkdGhcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5tZWFzdXJlU2Nyb2xsYmFyKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvZHlQYWQgPSBwYXJzZUludCgodGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwKSwgMTApXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAnJ1xuICAgIGlmICh0aGlzLmJvZHlJc092ZXJmbG93aW5nKSB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIGJvZHlQYWQgKyB0aGlzLnNjcm9sbGJhcldpZHRoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgdGhpcy5vcmlnaW5hbEJvZHlQYWQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUubWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG4gICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSdcbiAgICB0aGlzLiRib2R5LmFwcGVuZChzY3JvbGxEaXYpXG4gICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgdGhpcy4kYm9keVswXS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoXG4gIH1cblxuXG4gIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5tb2RhbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5tb2RhbCcsIChkYXRhID0gbmV3IE1vZGFsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oX3JlbGF0ZWRUYXJnZXQpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLnNob3cpIGRhdGEuc2hvdyhfcmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ubW9kYWxcblxuICAkLmZuLm1vZGFsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4ubW9kYWwuQ29uc3RydWN0b3IgPSBNb2RhbFxuXG5cbiAgLy8gTU9EQUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLm1vZGFsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5tb2RhbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIE1PREFMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLm1vZGFsLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgaHJlZiAgICA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIHZhciBvcHRpb24gID0gJHRhcmdldC5kYXRhKCdicy5tb2RhbCcpID8gJ3RvZ2dsZScgOiAkLmV4dGVuZCh7IHJlbW90ZTogIS8jLy50ZXN0KGhyZWYpICYmIGhyZWYgfSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcblxuICAgIGlmICgkdGhpcy5pcygnYScpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICR0YXJnZXQub25lKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICR0YXJnZXQub25lKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICR0aGlzLmlzKCc6dmlzaWJsZScpICYmICR0aGlzLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIH0pXG4gICAgfSlcbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24sIHRoaXMpXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBwb3BvdmVyLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jcG9wb3ZlcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBQT1BPVkVSIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KCdwb3BvdmVyJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIGlmICghJC5mbi50b29sdGlwKSB0aHJvdyBuZXcgRXJyb3IoJ1BvcG92ZXIgcmVxdWlyZXMgdG9vbHRpcC5qcycpXG5cbiAgUG9wb3Zlci5WRVJTSU9OICA9ICczLjMuNydcblxuICBQb3BvdmVyLkRFRkFVTFRTID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5ERUZBVUxUUywge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItdGl0bGVcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWNvbnRlbnRcIj48L2Rpdj48L2Rpdj4nXG4gIH0pXG5cblxuICAvLyBOT1RFOiBQT1BPVkVSIEVYVEVORFMgdG9vbHRpcC5qc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFBvcG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUpXG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb3BvdmVyXG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFBvcG92ZXIuREVGQVVMVFNcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aXAgICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlICAgPSB0aGlzLmdldFRpdGxlKClcbiAgICB2YXIgY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpXG5cbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKVxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItY29udGVudCcpLmNoaWxkcmVuKCkuZGV0YWNoKCkuZW5kKClbIC8vIHdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcbiAgICAgIHRoaXMub3B0aW9ucy5odG1sID8gKHR5cGVvZiBjb250ZW50ID09ICdzdHJpbmcnID8gJ2h0bWwnIDogJ2FwcGVuZCcpIDogJ3RleHQnXG4gICAgXShjb250ZW50KVxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSB0b3AgYm90dG9tIGxlZnQgcmlnaHQgaW4nKVxuXG4gICAgLy8gSUU4IGRvZXNuJ3QgYWNjZXB0IGhpZGluZyB2aWEgdGhlIGA6ZW1wdHlgIHBzZXVkbyBzZWxlY3Rvciwgd2UgaGF2ZSB0byBkb1xuICAgIC8vIHRoaXMgbWFudWFsbHkgYnkgY2hlY2tpbmcgdGhlIGNvbnRlbnRzLlxuICAgIGlmICghJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmh0bWwoKSkgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmhpZGUoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuZ2V0Q29udGVudCgpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHJldHVybiAkZS5hdHRyKCdkYXRhLWNvbnRlbnQnKVxuICAgICAgfHwgKHR5cGVvZiBvLmNvbnRlbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICBvLmNvbnRlbnQuY2FsbCgkZVswXSkgOlxuICAgICAgICAgICAgby5jb250ZW50KVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLiRhcnJvdyA9IHRoaXMuJGFycm93IHx8IHRoaXMudGlwKCkuZmluZCgnLmFycm93JykpXG4gIH1cblxuXG4gIC8vIFBPUE9WRVIgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInLCAoZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5wb3BvdmVyXG5cbiAgJC5mbi5wb3BvdmVyICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4ucG9wb3Zlci5Db25zdHJ1Y3RvciA9IFBvcG92ZXJcblxuXG4gIC8vIFBPUE9WRVIgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4ucG9wb3Zlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ucG9wb3ZlciA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMy43J1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0YWJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVEFCIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVGFiID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBqc2NzOmRpc2FibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgLy8ganNjczplbmFibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgfVxuXG4gIFRhYi5WRVJTSU9OID0gJzMuMy43J1xuXG4gIFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGhpcyAgICA9IHRoaXMuZWxlbWVudFxuICAgIHZhciAkdWwgICAgICA9ICR0aGlzLmNsb3Nlc3QoJ3VsOm5vdCguZHJvcGRvd24tbWVudSknKVxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmRhdGEoJ3RhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIGlmICgkdGhpcy5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm5cblxuICAgIHZhciAkcHJldmlvdXMgPSAkdWwuZmluZCgnLmFjdGl2ZTpsYXN0IGEnKVxuICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgfSlcbiAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCgnc2hvdy5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICB9KVxuXG4gICAgJHByZXZpb3VzLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICR0aGlzLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHNlbGVjdG9yKVxuXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGhpcy5jbG9zZXN0KCdsaScpLCAkdWwpXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGFyZ2V0LCAkdGFyZ2V0LnBhcmVudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkcHJldmlvdXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICAgIH0pXG4gICAgICAkdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3Nob3duLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyICRhY3RpdmUgICAgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJylcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXG4gICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgJiYgKCRhY3RpdmUubGVuZ3RoICYmICRhY3RpdmUuaGFzQ2xhc3MoJ2ZhZGUnKSB8fCAhIWNvbnRhaW5lci5maW5kKCc+IC5mYWRlJykubGVuZ3RoKVxuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnPiAuZHJvcGRvd24tbWVudSA+IC5hY3RpdmUnKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmVuZCgpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gcmVmbG93IGZvciB0cmFuc2l0aW9uXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZhZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAuY2xvc2VzdCgnbGkuZHJvcGRvd24nKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgJGFjdGl2ZS5sZW5ndGggJiYgdHJhbnNpdGlvbiA/XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIG5leHQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUYWIuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgbmV4dCgpXG5cbiAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpXG4gIH1cblxuXG4gIC8vIFRBQiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy50YWInKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIChkYXRhID0gbmV3IFRhYih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udGFiXG5cbiAgJC5mbi50YWIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcblxuXG4gIC8vIFRBQiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gVEFCIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIFBsdWdpbi5jYWxsKCQodGhpcyksICdzaG93JylcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInBpbGxcIl0nLCBjbGlja0hhbmRsZXIpXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxuICogSW5zcGlyZWQgYnkgdGhlIG9yaWdpbmFsIGpRdWVyeS50aXBzeSBieSBKYXNvbiBGcmFtZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRPT0xUSVAgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcHRpb25zICAgID0gbnVsbFxuICAgIHRoaXMuZW5hYmxlZCAgICA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuICAgIHRoaXMuJGVsZW1lbnQgICA9IG51bGxcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjMuNydcblxuICBUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxuICAgIHRoaXMuaW5TdGF0ZSAgID0geyBjbGljazogZmFsc2UsIGhvdmVyOiBmYWxzZSwgZm9jdXM6IGZhbHNlIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyAnICsgdGhpcy50eXBlICsgJyBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCEnKVxuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV1cblxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnXG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50T3V0ICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5sZWF2ZSwgdGhpcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID9cbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XG4gICAgICB0aGlzLmZpeFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgID0ge31cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKClcblxuICAgIHRoaXMuX29wdGlvbnMgJiYgJC5lYWNoKHRoaXMuX29wdGlvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoZGVmYXVsdHNba2V5XSAhPSB2YWx1ZSkgb3B0aW9uc1trZXldID0gdmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XG4gICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5zaG93KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaXNJblN0YXRlVHJ1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pblN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgcmV0dXJuXG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCdcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSkgcmV0dXJuIHNlbGYuaGlkZSgpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ291dCcpIHNlbGYuaGlkZSgpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIHZhciBpbkRvbSA9ICQuY29udGFpbnModGhpcy4kZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy4kZWxlbWVudFswXSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXG4gICAgICB2YXIgdGhhdCA9IHRoaXNcblxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG5cbiAgICAgIHZhciB0aXBJZCA9IHRoaXMuZ2V0VUlEKHRoaXMudHlwZSlcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcbiAgICAgICR0aXAuYXR0cignaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpXG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxuXG4gICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaVxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcbiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnXG5cbiAgICAgICR0aXBcbiAgICAgICAgLmRldGFjaCgpXG4gICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpXG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudFxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MuYm90dG9tICsgYWN0dWFsSGVpZ2h0ID4gdmlld3BvcnREaW0uYm90dG9tID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCAgKyBhY3R1YWxXaWR0aCAgPiB2aWV3cG9ydERpbS53aWR0aCAgPyAnbGVmdCcgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgIC0gYWN0dWFsV2lkdGggIDwgdmlld3BvcnREaW0ubGVmdCAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgICAgdGhhdC5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KVxuICAgICAgfVxuXG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgICR0aXBcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xuICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIC8vIG1hbnVhbGx5IHJlYWQgbWFyZ2lucyBiZWNhdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpbmNsdWRlcyBkaWZmZXJlbmNlXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKVxuXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcbiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwXG4gICAgaWYgKGlzTmFOKG1hcmdpbkxlZnQpKSBtYXJnaW5MZWZ0ID0gMFxuXG4gICAgb2Zmc2V0LnRvcCAgKz0gbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgKz0gbWFyZ2luTGVmdFxuXG4gICAgLy8gJC5mbi5vZmZzZXQgZG9lc24ndCByb3VuZCBwaXhlbCB2YWx1ZXNcbiAgICAvLyBzbyB3ZSB1c2Ugc2V0T2Zmc2V0IGRpcmVjdGx5IHdpdGggb3VyIG93biBmdW5jdGlvbiBCLTBcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xuICAgICAgdXNpbmc6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIG9mZnNldCksIDApXG5cbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXG5cbiAgICAvLyBjaGVjayB0byBzZWUgaWYgcGxhY2luZyB0aXAgaW4gbmV3IG9mZnNldCBjYXVzZWQgdGhlIHRpcCB0byByZXNpemUgaXRzZWxmXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHRcbiAgICB9XG5cbiAgICB2YXIgZGVsdGEgPSB0aGlzLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YShwbGFjZW1lbnQsIG9mZnNldCwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XG4gICAgZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcFxuXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXG4gICAgdmFyIGFycm93RGVsdGEgICAgICAgICAgPSBpc1ZlcnRpY2FsID8gZGVsdGEubGVmdCAqIDIgLSB3aWR0aCArIGFjdHVhbFdpZHRoIDogZGVsdGEudG9wICogMiAtIGhlaWdodCArIGFjdHVhbEhlaWdodFxuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J1xuXG4gICAgJHRpcC5vZmZzZXQob2Zmc2V0KVxuICAgIHRoaXMucmVwbGFjZUFycm93KGFycm93RGVsdGEsICR0aXBbMF1bYXJyb3dPZmZzZXRQb3NpdGlvbl0sIGlzVmVydGljYWwpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5yZXBsYWNlQXJyb3cgPSBmdW5jdGlvbiAoZGVsdGEsIGRpbWVuc2lvbiwgaXNWZXJ0aWNhbCkge1xuICAgIHRoaXMuYXJyb3coKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKClcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgaWYgKHRoYXQuJGVsZW1lbnQpIHsgLy8gVE9ETzogQ2hlY2sgd2hldGhlciBndWFyZGluZyB0aGlzIGNvZGUgd2l0aCB0aGlzIGBpZmAgaXMgcmVhbGx5IG5lY2Vzc2FyeS5cbiAgICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGlzU3ZnID0gd2luZG93LlNWR0VsZW1lbnQgJiYgZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudFxuICAgIC8vIEF2b2lkIHVzaW5nICQub2Zmc2V0KCkgb24gU1ZHcyBzaW5jZSBpdCBnaXZlcyBpbmNvcnJlY3QgcmVzdWx0cyBpbiBqUXVlcnkgMy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yMDI4MFxuICAgIHZhciBlbE9mZnNldCAgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogKGlzU3ZnID8gbnVsbCA6ICRlbGVtZW50Lm9mZnNldCgpKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbFxuICAgIH0pXG4gIH1cblxuXG4gIC8vIFRPT0xUSVAgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy50b29sdGlwJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnLCAoZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50b29sdGlwXG5cbiAgJC5mbi50b29sdGlwICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udG9vbHRpcC5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcblxuXG4gIC8vIFRPT0xUSVAgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4udG9vbHRpcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udG9vbHRpcCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRyYW5zaXRpb24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0cmFuc2l0aW9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENTUyBUUkFOU0lUSU9OIFNVUFBPUlQgKFNob3V0b3V0OiBodHRwOi8vd3d3Lm1vZGVybml6ci5jb20vKVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jvb3RzdHJhcCcpXG5cbiAgICB2YXIgdHJhbnNFbmRFdmVudE5hbWVzID0ge1xuICAgICAgV2Via2l0VHJhbnNpdGlvbiA6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgIE1velRyYW5zaXRpb24gICAgOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICBPVHJhbnNpdGlvbiAgICAgIDogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcbiAgICAgIHRyYW5zaXRpb24gICAgICAgOiAndHJhbnNpdGlvbmVuZCdcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHRyYW5zRW5kRXZlbnROYW1lcykge1xuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgZW5kOiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV0gfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZSAvLyBleHBsaWNpdCBmb3IgaWU4ICggIC5fLilcbiAgfVxuXG4gIC8vIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xuICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlXG4gICAgdmFyICRlbCA9IHRoaXNcbiAgICAkKHRoaXMpLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlIH0pXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkgeyBpZiAoIWNhbGxlZCkgJCgkZWwpLnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKSB9XG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgZHVyYXRpb24pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gICQoZnVuY3Rpb24gKCkge1xuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZCgpXG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm5cblxuICAgICQuZXZlbnQuc3BlY2lhbC5ic1RyYW5zaXRpb25FbmQgPSB7XG4gICAgICBiaW5kVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgZGVsZWdhdGVUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGlzKSkgcmV0dXJuIGUuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgOmRhdGEgMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IDpkYXRhIFNlbGVjdG9yXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogU2VsZWN0cyBlbGVtZW50cyB3aGljaCBoYXZlIGRhdGEgc3RvcmVkIHVuZGVyIHRoZSBzcGVjaWZpZWQga2V5LlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2RhdGEtc2VsZWN0b3IvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcbnJldHVybiAkLmV4dGVuZCggJC5leHByWyBcIjpcIiBdLCB7XG5cdGRhdGE6ICQuZXhwci5jcmVhdGVQc2V1ZG8gP1xuXHRcdCQuZXhwci5jcmVhdGVQc2V1ZG8oIGZ1bmN0aW9uKCBkYXRhTmFtZSApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBkYXRhTmFtZSApO1xuXHRcdFx0fTtcblx0XHR9ICkgOlxuXG5cdFx0Ly8gU3VwcG9ydDogalF1ZXJ5IDwxLjhcblx0XHRmdW5jdGlvbiggZWxlbSwgaSwgbWF0Y2ggKSB7XG5cdFx0XHRyZXR1cm4gISEkLmRhdGEoIGVsZW0sIG1hdGNoWyAzIF0gKTtcblx0XHR9XG59ICk7XG59ICkgKTtcbiIsIi8qIVxuICogalF1ZXJ5IFVJIERpc2FibGUgU2VsZWN0aW9uIDEuMTIuMFxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBkaXNhYmxlU2VsZWN0aW9uXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogRGlzYWJsZSBzZWxlY3Rpb24gb2YgdGV4dCBjb250ZW50IHdpdGhpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZGlzYWJsZVNlbGVjdGlvbi9cblxuLy8gVGhpcyBmaWxlIGlzIGRlcHJlY2F0ZWRcbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcblxucmV0dXJuICQuZm4uZXh0ZW5kKCB7XG5cdGRpc2FibGVTZWxlY3Rpb246ICggZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGV2ZW50VHlwZSA9IFwib25zZWxlY3RzdGFydFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSA/XG5cdFx0XHRcInNlbGVjdHN0YXJ0XCIgOlxuXHRcdFx0XCJtb3VzZWRvd25cIjtcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLm9uKCBldmVudFR5cGUgKyBcIi51aS1kaXNhYmxlU2VsZWN0aW9uXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH0gKTtcblx0XHR9O1xuXHR9ICkoKSxcblxuXHRlbmFibGVTZWxlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggXCIudWktZGlzYWJsZVNlbGVjdGlvblwiICk7XG5cdH1cbn0gKTtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBGb2N1c2FibGUgMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IDpmb2N1c2FibGUgU2VsZWN0b3Jcbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBTZWxlY3RzIGVsZW1lbnRzIHdoaWNoIGNhbiBiZSBmb2N1c2VkLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2ZvY3VzYWJsZS1zZWxlY3Rvci9cblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiwgXCIuL3ZlcnNpb25cIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSAoIGZ1bmN0aW9uKCAkICkge1xuXG4vLyBTZWxlY3RvcnNcbiQudWkuZm9jdXNhYmxlID0gZnVuY3Rpb24oIGVsZW1lbnQsIGhhc1RhYmluZGV4ICkge1xuXHR2YXIgbWFwLCBtYXBOYW1lLCBpbWcsIGZvY3VzYWJsZUlmVmlzaWJsZSwgZmllbGRzZXQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0aWYgKCBcImFyZWFcIiA9PT0gbm9kZU5hbWUgKSB7XG5cdFx0bWFwID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHRcdG1hcE5hbWUgPSBtYXAubmFtZTtcblx0XHRpZiAoICFlbGVtZW50LmhyZWYgfHwgIW1hcE5hbWUgfHwgbWFwLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwibWFwXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGltZyA9ICQoIFwiaW1nW3VzZW1hcD0nI1wiICsgbWFwTmFtZSArIFwiJ11cIiApO1xuXHRcdHJldHVybiBpbWcubGVuZ3RoID4gMCAmJiBpbWcuaXMoIFwiOnZpc2libGVcIiApO1xuXHR9XG5cblx0aWYgKCAvXihpbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkLy50ZXN0KCBub2RlTmFtZSApICkge1xuXHRcdGZvY3VzYWJsZUlmVmlzaWJsZSA9ICFlbGVtZW50LmRpc2FibGVkO1xuXG5cdFx0aWYgKCBmb2N1c2FibGVJZlZpc2libGUgKSB7XG5cblx0XHRcdC8vIEZvcm0gY29udHJvbHMgd2l0aGluIGEgZGlzYWJsZWQgZmllbGRzZXQgYXJlIGRpc2FibGVkLlxuXHRcdFx0Ly8gSG93ZXZlciwgY29udHJvbHMgd2l0aGluIHRoZSBmaWVsZHNldCdzIGxlZ2VuZCBkbyBub3QgZ2V0IGRpc2FibGVkLlxuXHRcdFx0Ly8gU2luY2UgY29udHJvbHMgZ2VuZXJhbGx5IGFyZW4ndCBwbGFjZWQgaW5zaWRlIGxlZ2VuZHMsIHdlIHNraXBcblx0XHRcdC8vIHRoaXMgcG9ydGlvbiBvZiB0aGUgY2hlY2suXG5cdFx0XHRmaWVsZHNldCA9ICQoIGVsZW1lbnQgKS5jbG9zZXN0KCBcImZpZWxkc2V0XCIgKVsgMCBdO1xuXHRcdFx0aWYgKCBmaWVsZHNldCApIHtcblx0XHRcdFx0Zm9jdXNhYmxlSWZWaXNpYmxlID0gIWZpZWxkc2V0LmRpc2FibGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggXCJhXCIgPT09IG5vZGVOYW1lICkge1xuXHRcdGZvY3VzYWJsZUlmVmlzaWJsZSA9IGVsZW1lbnQuaHJlZiB8fCBoYXNUYWJpbmRleDtcblx0fSBlbHNlIHtcblx0XHRmb2N1c2FibGVJZlZpc2libGUgPSBoYXNUYWJpbmRleDtcblx0fVxuXG5cdHJldHVybiBmb2N1c2FibGVJZlZpc2libGUgJiYgJCggZWxlbWVudCApLmlzKCBcIjp2aXNpYmxlXCIgKSAmJiB2aXNpYmxlKCAkKCBlbGVtZW50ICkgKTtcbn07XG5cbi8vIFN1cHBvcnQ6IElFIDggb25seVxuLy8gSUUgOCBkb2Vzbid0IHJlc29sdmUgaW5oZXJpdCB0byB2aXNpYmxlL2hpZGRlbiBmb3IgY29tcHV0ZWQgdmFsdWVzXG5mdW5jdGlvbiB2aXNpYmxlKCBlbGVtZW50ICkge1xuXHR2YXIgdmlzaWJpbGl0eSA9IGVsZW1lbnQuY3NzKCBcInZpc2liaWxpdHlcIiApO1xuXHR3aGlsZSAoIHZpc2liaWxpdHkgPT09IFwiaW5oZXJpdFwiICkge1xuXHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudCgpO1xuXHRcdHZpc2liaWxpdHkgPSBlbGVtZW50LmNzcyggXCJ2aXNpYmlsaXR5XCIgKTtcblx0fVxuXHRyZXR1cm4gdmlzaWJpbGl0eSAhPT0gXCJoaWRkZW5cIjtcbn1cblxuJC5leHRlbmQoICQuZXhwclsgXCI6XCIgXSwge1xuXHRmb2N1c2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHJldHVybiAkLnVpLmZvY3VzYWJsZSggZWxlbWVudCwgJC5hdHRyKCBlbGVtZW50LCBcInRhYmluZGV4XCIgKSAhPSBudWxsICk7XG5cdH1cbn0gKTtcblxucmV0dXJuICQudWkuZm9jdXNhYmxlO1xuXG59ICkgKTtcbiIsIiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcblxuLy8gVGhpcyBmaWxlIGlzIGRlcHJlY2F0ZWRcbnJldHVybiAkLnVpLmllID0gISEvbXNpZSBbXFx3Ll0rLy5leGVjKCBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkgKTtcbn0gKSApO1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgS2V5Y29kZSAxLjEyLjBcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogS2V5Y29kZVxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IFByb3ZpZGUga2V5Y29kZXMgYXMga2V5bmFtZXNcbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9qUXVlcnkudWkua2V5Q29kZS9cblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiwgXCIuL3ZlcnNpb25cIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSAoIGZ1bmN0aW9uKCAkICkge1xucmV0dXJuICQudWkua2V5Q29kZSA9IHtcblx0QkFDS1NQQUNFOiA4LFxuXHRDT01NQTogMTg4LFxuXHRERUxFVEU6IDQ2LFxuXHRET1dOOiA0MCxcblx0RU5EOiAzNSxcblx0RU5URVI6IDEzLFxuXHRFU0NBUEU6IDI3LFxuXHRIT01FOiAzNixcblx0TEVGVDogMzcsXG5cdFBBR0VfRE9XTjogMzQsXG5cdFBBR0VfVVA6IDMzLFxuXHRQRVJJT0Q6IDE5MCxcblx0UklHSFQ6IDM5LFxuXHRTUEFDRTogMzIsXG5cdFRBQjogOSxcblx0VVA6IDM4XG59O1xuXG59ICkgKTtcbiIsIiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcblxuLy8gJC51aS5wbHVnaW4gaXMgZGVwcmVjYXRlZC4gVXNlICQud2lkZ2V0KCkgZXh0ZW5zaW9ucyBpbnN0ZWFkLlxucmV0dXJuICQudWkucGx1Z2luID0ge1xuXHRhZGQ6IGZ1bmN0aW9uKCBtb2R1bGUsIG9wdGlvbiwgc2V0ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0cHJvdG8gPSAkLnVpWyBtb2R1bGUgXS5wcm90b3R5cGU7XG5cdFx0Zm9yICggaSBpbiBzZXQgKSB7XG5cdFx0XHRwcm90by5wbHVnaW5zWyBpIF0gPSBwcm90by5wbHVnaW5zWyBpIF0gfHwgW107XG5cdFx0XHRwcm90by5wbHVnaW5zWyBpIF0ucHVzaCggWyBvcHRpb24sIHNldFsgaSBdIF0gKTtcblx0XHR9XG5cdH0sXG5cdGNhbGw6IGZ1bmN0aW9uKCBpbnN0YW5jZSwgbmFtZSwgYXJncywgYWxsb3dEaXNjb25uZWN0ZWQgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRzZXQgPSBpbnN0YW5jZS5wbHVnaW5zWyBuYW1lIF07XG5cblx0XHRpZiAoICFzZXQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCAhYWxsb3dEaXNjb25uZWN0ZWQgJiYgKCAhaW5zdGFuY2UuZWxlbWVudFsgMCBdLnBhcmVudE5vZGUgfHxcblx0XHRcdFx0aW5zdGFuY2UuZWxlbWVudFsgMCBdLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDExICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRpZiAoIGluc3RhbmNlLm9wdGlvbnNbIHNldFsgaSBdWyAwIF0gXSApIHtcblx0XHRcdFx0c2V0WyBpIF1bIDEgXS5hcHBseSggaW5zdGFuY2UuZWxlbWVudCwgYXJncyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBQb3NpdGlvbiAxLjEyLjBcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3Bvc2l0aW9uL1xuICovXG5cbi8vPj5sYWJlbDogUG9zaXRpb25cbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBQb3NpdGlvbnMgZWxlbWVudHMgcmVsYXRpdmUgdG8gb3RoZXIgZWxlbWVudHMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcG9zaXRpb24vXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vcG9zaXRpb24vXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuKCBmdW5jdGlvbigpIHtcbnZhciBjYWNoZWRTY3JvbGxiYXJXaWR0aCwgc3VwcG9ydHNPZmZzZXRGcmFjdGlvbnMsXG5cdG1heCA9IE1hdGgubWF4LFxuXHRhYnMgPSBNYXRoLmFicyxcblx0cm91bmQgPSBNYXRoLnJvdW5kLFxuXHRyaG9yaXpvbnRhbCA9IC9sZWZ0fGNlbnRlcnxyaWdodC8sXG5cdHJ2ZXJ0aWNhbCA9IC90b3B8Y2VudGVyfGJvdHRvbS8sXG5cdHJvZmZzZXQgPSAvW1xcK1xcLV1cXGQrKFxcLltcXGRdKyk/JT8vLFxuXHRycG9zaXRpb24gPSAvXlxcdysvLFxuXHRycGVyY2VudCA9IC8lJC8sXG5cdF9wb3NpdGlvbiA9ICQuZm4ucG9zaXRpb247XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5zdXBwb3J0c09mZnNldEZyYWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgZWxlbWVudCA9ICQoIFwiPGRpdj5cIiApXG5cdFx0XHQuY3NzKCBcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIiApXG5cdFx0XHQuYXBwZW5kVG8oIFwiYm9keVwiIClcblx0XHRcdC5vZmZzZXQoIHtcblx0XHRcdFx0dG9wOiAxLjUsXG5cdFx0XHRcdGxlZnQ6IDEuNVxuXHRcdFx0fSApLFxuXHRcdHN1cHBvcnQgPSBlbGVtZW50Lm9mZnNldCgpLnRvcCA9PT0gMS41O1xuXG5cdGVsZW1lbnQucmVtb3ZlKCk7XG5cblx0c3VwcG9ydHNPZmZzZXRGcmFjdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc3VwcG9ydDtcblx0fTtcblxuXHRyZXR1cm4gc3VwcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGdldE9mZnNldHMoIG9mZnNldHMsIHdpZHRoLCBoZWlnaHQgKSB7XG5cdHJldHVybiBbXG5cdFx0cGFyc2VGbG9hdCggb2Zmc2V0c1sgMCBdICkgKiAoIHJwZXJjZW50LnRlc3QoIG9mZnNldHNbIDAgXSApID8gd2lkdGggLyAxMDAgOiAxICksXG5cdFx0cGFyc2VGbG9hdCggb2Zmc2V0c1sgMSBdICkgKiAoIHJwZXJjZW50LnRlc3QoIG9mZnNldHNbIDEgXSApID8gaGVpZ2h0IC8gMTAwIDogMSApXG5cdF07XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ3NzKCBlbGVtZW50LCBwcm9wZXJ0eSApIHtcblx0cmV0dXJuIHBhcnNlSW50KCAkLmNzcyggZWxlbWVudCwgcHJvcGVydHkgKSwgMTAgKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb25zKCBlbGVtICkge1xuXHR2YXIgcmF3ID0gZWxlbVsgMCBdO1xuXHRpZiAoIHJhdy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IGVsZW0ud2lkdGgoKSxcblx0XHRcdGhlaWdodDogZWxlbS5oZWlnaHQoKSxcblx0XHRcdG9mZnNldDogeyB0b3A6IDAsIGxlZnQ6IDAgfVxuXHRcdH07XG5cdH1cblx0aWYgKCAkLmlzV2luZG93KCByYXcgKSApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IGVsZW0ud2lkdGgoKSxcblx0XHRcdGhlaWdodDogZWxlbS5oZWlnaHQoKSxcblx0XHRcdG9mZnNldDogeyB0b3A6IGVsZW0uc2Nyb2xsVG9wKCksIGxlZnQ6IGVsZW0uc2Nyb2xsTGVmdCgpIH1cblx0XHR9O1xuXHR9XG5cdGlmICggcmF3LnByZXZlbnREZWZhdWx0ICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogMCxcblx0XHRcdGhlaWdodDogMCxcblx0XHRcdG9mZnNldDogeyB0b3A6IHJhdy5wYWdlWSwgbGVmdDogcmF3LnBhZ2VYIH1cblx0XHR9O1xuXHR9XG5cdHJldHVybiB7XG5cdFx0d2lkdGg6IGVsZW0ub3V0ZXJXaWR0aCgpLFxuXHRcdGhlaWdodDogZWxlbS5vdXRlckhlaWdodCgpLFxuXHRcdG9mZnNldDogZWxlbS5vZmZzZXQoKVxuXHR9O1xufVxuXG4kLnBvc2l0aW9uID0ge1xuXHRzY3JvbGxiYXJXaWR0aDogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBjYWNoZWRTY3JvbGxiYXJXaWR0aCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGNhY2hlZFNjcm9sbGJhcldpZHRoO1xuXHRcdH1cblx0XHR2YXIgdzEsIHcyLFxuXHRcdFx0ZGl2ID0gJCggXCI8ZGl2IFwiICtcblx0XHRcdFx0XCJzdHlsZT0nZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O292ZXJmbG93OmhpZGRlbjsnPlwiICtcblx0XHRcdFx0XCI8ZGl2IHN0eWxlPSdoZWlnaHQ6MTAwcHg7d2lkdGg6YXV0bzsnPjwvZGl2PjwvZGl2PlwiICksXG5cdFx0XHRpbm5lckRpdiA9IGRpdi5jaGlsZHJlbigpWyAwIF07XG5cblx0XHQkKCBcImJvZHlcIiApLmFwcGVuZCggZGl2ICk7XG5cdFx0dzEgPSBpbm5lckRpdi5vZmZzZXRXaWR0aDtcblx0XHRkaXYuY3NzKCBcIm92ZXJmbG93XCIsIFwic2Nyb2xsXCIgKTtcblxuXHRcdHcyID0gaW5uZXJEaXYub2Zmc2V0V2lkdGg7XG5cblx0XHRpZiAoIHcxID09PSB3MiApIHtcblx0XHRcdHcyID0gZGl2WyAwIF0uY2xpZW50V2lkdGg7XG5cdFx0fVxuXG5cdFx0ZGl2LnJlbW92ZSgpO1xuXG5cdFx0cmV0dXJuICggY2FjaGVkU2Nyb2xsYmFyV2lkdGggPSB3MSAtIHcyICk7XG5cdH0sXG5cdGdldFNjcm9sbEluZm86IGZ1bmN0aW9uKCB3aXRoaW4gKSB7XG5cdFx0dmFyIG92ZXJmbG93WCA9IHdpdGhpbi5pc1dpbmRvdyB8fCB3aXRoaW4uaXNEb2N1bWVudCA/IFwiXCIgOlxuXHRcdFx0XHR3aXRoaW4uZWxlbWVudC5jc3MoIFwib3ZlcmZsb3cteFwiICksXG5cdFx0XHRvdmVyZmxvd1kgPSB3aXRoaW4uaXNXaW5kb3cgfHwgd2l0aGluLmlzRG9jdW1lbnQgPyBcIlwiIDpcblx0XHRcdFx0d2l0aGluLmVsZW1lbnQuY3NzKCBcIm92ZXJmbG93LXlcIiApLFxuXHRcdFx0aGFzT3ZlcmZsb3dYID0gb3ZlcmZsb3dYID09PSBcInNjcm9sbFwiIHx8XG5cdFx0XHRcdCggb3ZlcmZsb3dYID09PSBcImF1dG9cIiAmJiB3aXRoaW4ud2lkdGggPCB3aXRoaW4uZWxlbWVudFsgMCBdLnNjcm9sbFdpZHRoICksXG5cdFx0XHRoYXNPdmVyZmxvd1kgPSBvdmVyZmxvd1kgPT09IFwic2Nyb2xsXCIgfHxcblx0XHRcdFx0KCBvdmVyZmxvd1kgPT09IFwiYXV0b1wiICYmIHdpdGhpbi5oZWlnaHQgPCB3aXRoaW4uZWxlbWVudFsgMCBdLnNjcm9sbEhlaWdodCApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogaGFzT3ZlcmZsb3dZID8gJC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMCxcblx0XHRcdGhlaWdodDogaGFzT3ZlcmZsb3dYID8gJC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMFxuXHRcdH07XG5cdH0sXG5cdGdldFdpdGhpbkluZm86IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciB3aXRoaW5FbGVtZW50ID0gJCggZWxlbWVudCB8fCB3aW5kb3cgKSxcblx0XHRcdGlzV2luZG93ID0gJC5pc1dpbmRvdyggd2l0aGluRWxlbWVudFsgMCBdICksXG5cdFx0XHRpc0RvY3VtZW50ID0gISF3aXRoaW5FbGVtZW50WyAwIF0gJiYgd2l0aGluRWxlbWVudFsgMCBdLm5vZGVUeXBlID09PSA5LFxuXHRcdFx0aGFzT2Zmc2V0ID0gIWlzV2luZG93ICYmICFpc0RvY3VtZW50O1xuXHRcdHJldHVybiB7XG5cdFx0XHRlbGVtZW50OiB3aXRoaW5FbGVtZW50LFxuXHRcdFx0aXNXaW5kb3c6IGlzV2luZG93LFxuXHRcdFx0aXNEb2N1bWVudDogaXNEb2N1bWVudCxcblx0XHRcdG9mZnNldDogaGFzT2Zmc2V0ID8gJCggZWxlbWVudCApLm9mZnNldCgpIDogeyBsZWZ0OiAwLCB0b3A6IDAgfSxcblx0XHRcdHNjcm9sbExlZnQ6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsTGVmdCgpLFxuXHRcdFx0c2Nyb2xsVG9wOiB3aXRoaW5FbGVtZW50LnNjcm9sbFRvcCgpLFxuXHRcdFx0d2lkdGg6IHdpdGhpbkVsZW1lbnQub3V0ZXJXaWR0aCgpLFxuXHRcdFx0aGVpZ2h0OiB3aXRoaW5FbGVtZW50Lm91dGVySGVpZ2h0KClcblx0XHR9O1xuXHR9XG59O1xuXG4kLmZuLnBvc2l0aW9uID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdGlmICggIW9wdGlvbnMgfHwgIW9wdGlvbnMub2YgKSB7XG5cdFx0cmV0dXJuIF9wb3NpdGlvbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHQvLyBNYWtlIGEgY29weSwgd2UgZG9uJ3Qgd2FudCB0byBtb2RpZnkgYXJndW1lbnRzXG5cdG9wdGlvbnMgPSAkLmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgYXRPZmZzZXQsIHRhcmdldFdpZHRoLCB0YXJnZXRIZWlnaHQsIHRhcmdldE9mZnNldCwgYmFzZVBvc2l0aW9uLCBkaW1lbnNpb25zLFxuXHRcdHRhcmdldCA9ICQoIG9wdGlvbnMub2YgKSxcblx0XHR3aXRoaW4gPSAkLnBvc2l0aW9uLmdldFdpdGhpbkluZm8oIG9wdGlvbnMud2l0aGluICksXG5cdFx0c2Nyb2xsSW5mbyA9ICQucG9zaXRpb24uZ2V0U2Nyb2xsSW5mbyggd2l0aGluICksXG5cdFx0Y29sbGlzaW9uID0gKCBvcHRpb25zLmNvbGxpc2lvbiB8fCBcImZsaXBcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRcdG9mZnNldHMgPSB7fTtcblxuXHRkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggdGFyZ2V0ICk7XG5cdGlmICggdGFyZ2V0WyAwIF0ucHJldmVudERlZmF1bHQgKSB7XG5cblx0XHQvLyBGb3JjZSBsZWZ0IHRvcCB0byBhbGxvdyBmbGlwcGluZ1xuXHRcdG9wdGlvbnMuYXQgPSBcImxlZnQgdG9wXCI7XG5cdH1cblx0dGFyZ2V0V2lkdGggPSBkaW1lbnNpb25zLndpZHRoO1xuXHR0YXJnZXRIZWlnaHQgPSBkaW1lbnNpb25zLmhlaWdodDtcblx0dGFyZ2V0T2Zmc2V0ID0gZGltZW5zaW9ucy5vZmZzZXQ7XG5cblx0Ly8gQ2xvbmUgdG8gcmV1c2Ugb3JpZ2luYWwgdGFyZ2V0T2Zmc2V0IGxhdGVyXG5cdGJhc2VQb3NpdGlvbiA9ICQuZXh0ZW5kKCB7fSwgdGFyZ2V0T2Zmc2V0ICk7XG5cblx0Ly8gRm9yY2UgbXkgYW5kIGF0IHRvIGhhdmUgdmFsaWQgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgcG9zaXRpb25zXG5cdC8vIGlmIGEgdmFsdWUgaXMgbWlzc2luZyBvciBpbnZhbGlkLCBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBjZW50ZXJcblx0JC5lYWNoKCBbIFwibXlcIiwgXCJhdFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb3MgPSAoIG9wdGlvbnNbIHRoaXMgXSB8fCBcIlwiICkuc3BsaXQoIFwiIFwiICksXG5cdFx0XHRob3Jpem9udGFsT2Zmc2V0LFxuXHRcdFx0dmVydGljYWxPZmZzZXQ7XG5cblx0XHRpZiAoIHBvcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRwb3MgPSByaG9yaXpvbnRhbC50ZXN0KCBwb3NbIDAgXSApID9cblx0XHRcdFx0cG9zLmNvbmNhdCggWyBcImNlbnRlclwiIF0gKSA6XG5cdFx0XHRcdHJ2ZXJ0aWNhbC50ZXN0KCBwb3NbIDAgXSApID9cblx0XHRcdFx0XHRbIFwiY2VudGVyXCIgXS5jb25jYXQoIHBvcyApIDpcblx0XHRcdFx0XHRbIFwiY2VudGVyXCIsIFwiY2VudGVyXCIgXTtcblx0XHR9XG5cdFx0cG9zWyAwIF0gPSByaG9yaXpvbnRhbC50ZXN0KCBwb3NbIDAgXSApID8gcG9zWyAwIF0gOiBcImNlbnRlclwiO1xuXHRcdHBvc1sgMSBdID0gcnZlcnRpY2FsLnRlc3QoIHBvc1sgMSBdICkgPyBwb3NbIDEgXSA6IFwiY2VudGVyXCI7XG5cblx0XHQvLyBDYWxjdWxhdGUgb2Zmc2V0c1xuXHRcdGhvcml6b250YWxPZmZzZXQgPSByb2Zmc2V0LmV4ZWMoIHBvc1sgMCBdICk7XG5cdFx0dmVydGljYWxPZmZzZXQgPSByb2Zmc2V0LmV4ZWMoIHBvc1sgMSBdICk7XG5cdFx0b2Zmc2V0c1sgdGhpcyBdID0gW1xuXHRcdFx0aG9yaXpvbnRhbE9mZnNldCA/IGhvcml6b250YWxPZmZzZXRbIDAgXSA6IDAsXG5cdFx0XHR2ZXJ0aWNhbE9mZnNldCA/IHZlcnRpY2FsT2Zmc2V0WyAwIF0gOiAwXG5cdFx0XTtcblxuXHRcdC8vIFJlZHVjZSB0byBqdXN0IHRoZSBwb3NpdGlvbnMgd2l0aG91dCB0aGUgb2Zmc2V0c1xuXHRcdG9wdGlvbnNbIHRoaXMgXSA9IFtcblx0XHRcdHJwb3NpdGlvbi5leGVjKCBwb3NbIDAgXSApWyAwIF0sXG5cdFx0XHRycG9zaXRpb24uZXhlYyggcG9zWyAxIF0gKVsgMCBdXG5cdFx0XTtcblx0fSApO1xuXG5cdC8vIE5vcm1hbGl6ZSBjb2xsaXNpb24gb3B0aW9uXG5cdGlmICggY29sbGlzaW9uLmxlbmd0aCA9PT0gMSApIHtcblx0XHRjb2xsaXNpb25bIDEgXSA9IGNvbGxpc2lvblsgMCBdO1xuXHR9XG5cblx0aWYgKCBvcHRpb25zLmF0WyAwIF0gPT09IFwicmlnaHRcIiApIHtcblx0XHRiYXNlUG9zaXRpb24ubGVmdCArPSB0YXJnZXRXaWR0aDtcblx0fSBlbHNlIGlmICggb3B0aW9ucy5hdFsgMCBdID09PSBcImNlbnRlclwiICkge1xuXHRcdGJhc2VQb3NpdGlvbi5sZWZ0ICs9IHRhcmdldFdpZHRoIC8gMjtcblx0fVxuXG5cdGlmICggb3B0aW9ucy5hdFsgMSBdID09PSBcImJvdHRvbVwiICkge1xuXHRcdGJhc2VQb3NpdGlvbi50b3AgKz0gdGFyZ2V0SGVpZ2h0O1xuXHR9IGVsc2UgaWYgKCBvcHRpb25zLmF0WyAxIF0gPT09IFwiY2VudGVyXCIgKSB7XG5cdFx0YmFzZVBvc2l0aW9uLnRvcCArPSB0YXJnZXRIZWlnaHQgLyAyO1xuXHR9XG5cblx0YXRPZmZzZXQgPSBnZXRPZmZzZXRzKCBvZmZzZXRzLmF0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0ICk7XG5cdGJhc2VQb3NpdGlvbi5sZWZ0ICs9IGF0T2Zmc2V0WyAwIF07XG5cdGJhc2VQb3NpdGlvbi50b3AgKz0gYXRPZmZzZXRbIDEgXTtcblxuXHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHR2YXIgY29sbGlzaW9uUG9zaXRpb24sIHVzaW5nLFxuXHRcdFx0ZWxlbSA9ICQoIHRoaXMgKSxcblx0XHRcdGVsZW1XaWR0aCA9IGVsZW0ub3V0ZXJXaWR0aCgpLFxuXHRcdFx0ZWxlbUhlaWdodCA9IGVsZW0ub3V0ZXJIZWlnaHQoKSxcblx0XHRcdG1hcmdpbkxlZnQgPSBwYXJzZUNzcyggdGhpcywgXCJtYXJnaW5MZWZ0XCIgKSxcblx0XHRcdG1hcmdpblRvcCA9IHBhcnNlQ3NzKCB0aGlzLCBcIm1hcmdpblRvcFwiICksXG5cdFx0XHRjb2xsaXNpb25XaWR0aCA9IGVsZW1XaWR0aCArIG1hcmdpbkxlZnQgKyBwYXJzZUNzcyggdGhpcywgXCJtYXJnaW5SaWdodFwiICkgK1xuXHRcdFx0XHRzY3JvbGxJbmZvLndpZHRoLFxuXHRcdFx0Y29sbGlzaW9uSGVpZ2h0ID0gZWxlbUhlaWdodCArIG1hcmdpblRvcCArIHBhcnNlQ3NzKCB0aGlzLCBcIm1hcmdpbkJvdHRvbVwiICkgK1xuXHRcdFx0XHRzY3JvbGxJbmZvLmhlaWdodCxcblx0XHRcdHBvc2l0aW9uID0gJC5leHRlbmQoIHt9LCBiYXNlUG9zaXRpb24gKSxcblx0XHRcdG15T2Zmc2V0ID0gZ2V0T2Zmc2V0cyggb2Zmc2V0cy5teSwgZWxlbS5vdXRlcldpZHRoKCksIGVsZW0ub3V0ZXJIZWlnaHQoKSApO1xuXG5cdFx0aWYgKCBvcHRpb25zLm15WyAwIF0gPT09IFwicmlnaHRcIiApIHtcblx0XHRcdHBvc2l0aW9uLmxlZnQgLT0gZWxlbVdpZHRoO1xuXHRcdH0gZWxzZSBpZiAoIG9wdGlvbnMubXlbIDAgXSA9PT0gXCJjZW50ZXJcIiApIHtcblx0XHRcdHBvc2l0aW9uLmxlZnQgLT0gZWxlbVdpZHRoIC8gMjtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMubXlbIDEgXSA9PT0gXCJib3R0b21cIiApIHtcblx0XHRcdHBvc2l0aW9uLnRvcCAtPSBlbGVtSGVpZ2h0O1xuXHRcdH0gZWxzZSBpZiAoIG9wdGlvbnMubXlbIDEgXSA9PT0gXCJjZW50ZXJcIiApIHtcblx0XHRcdHBvc2l0aW9uLnRvcCAtPSBlbGVtSGVpZ2h0IC8gMjtcblx0XHR9XG5cblx0XHRwb3NpdGlvbi5sZWZ0ICs9IG15T2Zmc2V0WyAwIF07XG5cdFx0cG9zaXRpb24udG9wICs9IG15T2Zmc2V0WyAxIF07XG5cblx0XHQvLyBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgZnJhY3Rpb25zLCB0aGVuIHJvdW5kIGZvciBjb25zaXN0ZW50IHJlc3VsdHNcblx0XHRpZiAoICFzdXBwb3J0c09mZnNldEZyYWN0aW9ucygpICkge1xuXHRcdFx0cG9zaXRpb24ubGVmdCA9IHJvdW5kKCBwb3NpdGlvbi5sZWZ0ICk7XG5cdFx0XHRwb3NpdGlvbi50b3AgPSByb3VuZCggcG9zaXRpb24udG9wICk7XG5cdFx0fVxuXG5cdFx0Y29sbGlzaW9uUG9zaXRpb24gPSB7XG5cdFx0XHRtYXJnaW5MZWZ0OiBtYXJnaW5MZWZ0LFxuXHRcdFx0bWFyZ2luVG9wOiBtYXJnaW5Ub3Bcblx0XHR9O1xuXG5cdFx0JC5lYWNoKCBbIFwibGVmdFwiLCBcInRvcFwiIF0sIGZ1bmN0aW9uKCBpLCBkaXIgKSB7XG5cdFx0XHRpZiAoICQudWkucG9zaXRpb25bIGNvbGxpc2lvblsgaSBdIF0gKSB7XG5cdFx0XHRcdCQudWkucG9zaXRpb25bIGNvbGxpc2lvblsgaSBdIF1bIGRpciBdKCBwb3NpdGlvbiwge1xuXHRcdFx0XHRcdHRhcmdldFdpZHRoOiB0YXJnZXRXaWR0aCxcblx0XHRcdFx0XHR0YXJnZXRIZWlnaHQ6IHRhcmdldEhlaWdodCxcblx0XHRcdFx0XHRlbGVtV2lkdGg6IGVsZW1XaWR0aCxcblx0XHRcdFx0XHRlbGVtSGVpZ2h0OiBlbGVtSGVpZ2h0LFxuXHRcdFx0XHRcdGNvbGxpc2lvblBvc2l0aW9uOiBjb2xsaXNpb25Qb3NpdGlvbixcblx0XHRcdFx0XHRjb2xsaXNpb25XaWR0aDogY29sbGlzaW9uV2lkdGgsXG5cdFx0XHRcdFx0Y29sbGlzaW9uSGVpZ2h0OiBjb2xsaXNpb25IZWlnaHQsXG5cdFx0XHRcdFx0b2Zmc2V0OiBbIGF0T2Zmc2V0WyAwIF0gKyBteU9mZnNldFsgMCBdLCBhdE9mZnNldCBbIDEgXSArIG15T2Zmc2V0WyAxIF0gXSxcblx0XHRcdFx0XHRteTogb3B0aW9ucy5teSxcblx0XHRcdFx0XHRhdDogb3B0aW9ucy5hdCxcblx0XHRcdFx0XHR3aXRoaW46IHdpdGhpbixcblx0XHRcdFx0XHRlbGVtOiBlbGVtXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHRpZiAoIG9wdGlvbnMudXNpbmcgKSB7XG5cblx0XHRcdC8vIEFkZHMgZmVlZGJhY2sgYXMgc2Vjb25kIGFyZ3VtZW50IHRvIHVzaW5nIGNhbGxiYWNrLCBpZiBwcmVzZW50XG5cdFx0XHR1c2luZyA9IGZ1bmN0aW9uKCBwcm9wcyApIHtcblx0XHRcdFx0dmFyIGxlZnQgPSB0YXJnZXRPZmZzZXQubGVmdCAtIHBvc2l0aW9uLmxlZnQsXG5cdFx0XHRcdFx0cmlnaHQgPSBsZWZ0ICsgdGFyZ2V0V2lkdGggLSBlbGVtV2lkdGgsXG5cdFx0XHRcdFx0dG9wID0gdGFyZ2V0T2Zmc2V0LnRvcCAtIHBvc2l0aW9uLnRvcCxcblx0XHRcdFx0XHRib3R0b20gPSB0b3AgKyB0YXJnZXRIZWlnaHQgLSBlbGVtSGVpZ2h0LFxuXHRcdFx0XHRcdGZlZWRiYWNrID0ge1xuXHRcdFx0XHRcdFx0dGFyZ2V0OiB7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQ6IHRhcmdldCxcblx0XHRcdFx0XHRcdFx0bGVmdDogdGFyZ2V0T2Zmc2V0LmxlZnQsXG5cdFx0XHRcdFx0XHRcdHRvcDogdGFyZ2V0T2Zmc2V0LnRvcCxcblx0XHRcdFx0XHRcdFx0d2lkdGg6IHRhcmdldFdpZHRoLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IHRhcmdldEhlaWdodFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGVsZW1lbnQ6IHtcblx0XHRcdFx0XHRcdFx0ZWxlbWVudDogZWxlbSxcblx0XHRcdFx0XHRcdFx0bGVmdDogcG9zaXRpb24ubGVmdCxcblx0XHRcdFx0XHRcdFx0dG9wOiBwb3NpdGlvbi50b3AsXG5cdFx0XHRcdFx0XHRcdHdpZHRoOiBlbGVtV2lkdGgsXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogZWxlbUhlaWdodFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGhvcml6b250YWw6IHJpZ2h0IDwgMCA/IFwibGVmdFwiIDogbGVmdCA+IDAgPyBcInJpZ2h0XCIgOiBcImNlbnRlclwiLFxuXHRcdFx0XHRcdFx0dmVydGljYWw6IGJvdHRvbSA8IDAgPyBcInRvcFwiIDogdG9wID4gMCA/IFwiYm90dG9tXCIgOiBcIm1pZGRsZVwiXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKCB0YXJnZXRXaWR0aCA8IGVsZW1XaWR0aCAmJiBhYnMoIGxlZnQgKyByaWdodCApIDwgdGFyZ2V0V2lkdGggKSB7XG5cdFx0XHRcdFx0ZmVlZGJhY2suaG9yaXpvbnRhbCA9IFwiY2VudGVyXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0YXJnZXRIZWlnaHQgPCBlbGVtSGVpZ2h0ICYmIGFicyggdG9wICsgYm90dG9tICkgPCB0YXJnZXRIZWlnaHQgKSB7XG5cdFx0XHRcdFx0ZmVlZGJhY2sudmVydGljYWwgPSBcIm1pZGRsZVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggbWF4KCBhYnMoIGxlZnQgKSwgYWJzKCByaWdodCApICkgPiBtYXgoIGFicyggdG9wICksIGFicyggYm90dG9tICkgKSApIHtcblx0XHRcdFx0XHRmZWVkYmFjay5pbXBvcnRhbnQgPSBcImhvcml6b250YWxcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmZWVkYmFjay5pbXBvcnRhbnQgPSBcInZlcnRpY2FsXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCB0aGlzLCBwcm9wcywgZmVlZGJhY2sgKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0ZWxlbS5vZmZzZXQoICQuZXh0ZW5kKCBwb3NpdGlvbiwgeyB1c2luZzogdXNpbmcgfSApICk7XG5cdH0gKTtcbn07XG5cbiQudWkucG9zaXRpb24gPSB7XG5cdGZpdDoge1xuXHRcdGxlZnQ6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHtcblx0XHRcdHZhciB3aXRoaW4gPSBkYXRhLndpdGhpbixcblx0XHRcdFx0d2l0aGluT2Zmc2V0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbExlZnQgOiB3aXRoaW4ub2Zmc2V0LmxlZnQsXG5cdFx0XHRcdG91dGVyV2lkdGggPSB3aXRoaW4ud2lkdGgsXG5cdFx0XHRcdGNvbGxpc2lvblBvc0xlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LFxuXHRcdFx0XHRvdmVyTGVmdCA9IHdpdGhpbk9mZnNldCAtIGNvbGxpc2lvblBvc0xlZnQsXG5cdFx0XHRcdG92ZXJSaWdodCA9IGNvbGxpc2lvblBvc0xlZnQgKyBkYXRhLmNvbGxpc2lvbldpZHRoIC0gb3V0ZXJXaWR0aCAtIHdpdGhpbk9mZnNldCxcblx0XHRcdFx0bmV3T3ZlclJpZ2h0O1xuXG5cdFx0XHQvLyBFbGVtZW50IGlzIHdpZGVyIHRoYW4gd2l0aGluXG5cdFx0XHRpZiAoIGRhdGEuY29sbGlzaW9uV2lkdGggPiBvdXRlcldpZHRoICkge1xuXG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgdGhlIGxlZnQgc2lkZSBvZiB3aXRoaW5cblx0XHRcdFx0aWYgKCBvdmVyTGVmdCA+IDAgJiYgb3ZlclJpZ2h0IDw9IDAgKSB7XG5cdFx0XHRcdFx0bmV3T3ZlclJpZ2h0ID0gcG9zaXRpb24ubGVmdCArIG92ZXJMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLVxuXHRcdFx0XHRcdFx0d2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gb3ZlckxlZnQgLSBuZXdPdmVyUmlnaHQ7XG5cblx0XHRcdFx0Ly8gRWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciByaWdodCBzaWRlIG9mIHdpdGhpblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICYmIG92ZXJMZWZ0IDw9IDAgKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24ubGVmdCA9IHdpdGhpbk9mZnNldDtcblxuXHRcdFx0XHQvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIGJvdGggbGVmdCBhbmQgcmlnaHQgc2lkZXMgb2Ygd2l0aGluXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKCBvdmVyTGVmdCA+IG92ZXJSaWdodCApIHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgPSB3aXRoaW5PZmZzZXQgKyBvdXRlcldpZHRoIC0gZGF0YS5jb2xsaXNpb25XaWR0aDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cG9zaXRpb24ubGVmdCA9IHdpdGhpbk9mZnNldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9vIGZhciBsZWZ0IC0+IGFsaWduIHdpdGggbGVmdCBlZGdlXG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyTGVmdCA+IDAgKSB7XG5cdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gb3ZlckxlZnQ7XG5cblx0XHRcdC8vIFRvbyBmYXIgcmlnaHQgLT4gYWxpZ24gd2l0aCByaWdodCBlZGdlXG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICkge1xuXHRcdFx0XHRwb3NpdGlvbi5sZWZ0IC09IG92ZXJSaWdodDtcblxuXHRcdFx0Ly8gQWRqdXN0IGJhc2VkIG9uIHBvc2l0aW9uIGFuZCBtYXJnaW5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBvc2l0aW9uLmxlZnQgPSBtYXgoIHBvc2l0aW9uLmxlZnQgLSBjb2xsaXNpb25Qb3NMZWZ0LCBwb3NpdGlvbi5sZWZ0ICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0b3A6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHtcblx0XHRcdHZhciB3aXRoaW4gPSBkYXRhLndpdGhpbixcblx0XHRcdFx0d2l0aGluT2Zmc2V0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbFRvcCA6IHdpdGhpbi5vZmZzZXQudG9wLFxuXHRcdFx0XHRvdXRlckhlaWdodCA9IGRhdGEud2l0aGluLmhlaWdodCxcblx0XHRcdFx0Y29sbGlzaW9uUG9zVG9wID0gcG9zaXRpb24udG9wIC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AsXG5cdFx0XHRcdG92ZXJUb3AgPSB3aXRoaW5PZmZzZXQgLSBjb2xsaXNpb25Qb3NUb3AsXG5cdFx0XHRcdG92ZXJCb3R0b20gPSBjb2xsaXNpb25Qb3NUb3AgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtIG91dGVySGVpZ2h0IC0gd2l0aGluT2Zmc2V0LFxuXHRcdFx0XHRuZXdPdmVyQm90dG9tO1xuXG5cdFx0XHQvLyBFbGVtZW50IGlzIHRhbGxlciB0aGFuIHdpdGhpblxuXHRcdFx0aWYgKCBkYXRhLmNvbGxpc2lvbkhlaWdodCA+IG91dGVySGVpZ2h0ICkge1xuXG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgdGhlIHRvcCBvZiB3aXRoaW5cblx0XHRcdFx0aWYgKCBvdmVyVG9wID4gMCAmJiBvdmVyQm90dG9tIDw9IDAgKSB7XG5cdFx0XHRcdFx0bmV3T3ZlckJvdHRvbSA9IHBvc2l0aW9uLnRvcCArIG92ZXJUb3AgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtIG91dGVySGVpZ2h0IC1cblx0XHRcdFx0XHRcdHdpdGhpbk9mZnNldDtcblx0XHRcdFx0XHRwb3NpdGlvbi50b3AgKz0gb3ZlclRvcCAtIG5ld092ZXJCb3R0b207XG5cblx0XHRcdFx0Ly8gRWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3R0b20gb2Ygd2l0aGluXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICYmIG92ZXJUb3AgPD0gMCApIHtcblx0XHRcdFx0XHRwb3NpdGlvbi50b3AgPSB3aXRoaW5PZmZzZXQ7XG5cblx0XHRcdFx0Ly8gRWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3RoIHRvcCBhbmQgYm90dG9tIG9mIHdpdGhpblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmICggb3ZlclRvcCA+IG92ZXJCb3R0b20gKSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbi50b3AgPSB3aXRoaW5PZmZzZXQgKyBvdXRlckhlaWdodCAtIGRhdGEuY29sbGlzaW9uSGVpZ2h0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbi50b3AgPSB3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvbyBmYXIgdXAgLT4gYWxpZ24gd2l0aCB0b3Bcblx0XHRcdH0gZWxzZSBpZiAoIG92ZXJUb3AgPiAwICkge1xuXHRcdFx0XHRwb3NpdGlvbi50b3AgKz0gb3ZlclRvcDtcblxuXHRcdFx0Ly8gVG9vIGZhciBkb3duIC0+IGFsaWduIHdpdGggYm90dG9tIGVkZ2Vcblx0XHRcdH0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICkge1xuXHRcdFx0XHRwb3NpdGlvbi50b3AgLT0gb3ZlckJvdHRvbTtcblxuXHRcdFx0Ly8gQWRqdXN0IGJhc2VkIG9uIHBvc2l0aW9uIGFuZCBtYXJnaW5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBvc2l0aW9uLnRvcCA9IG1heCggcG9zaXRpb24udG9wIC0gY29sbGlzaW9uUG9zVG9wLCBwb3NpdGlvbi50b3AgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGZsaXA6IHtcblx0XHRsZWZ0OiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7XG5cdFx0XHR2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sXG5cdFx0XHRcdHdpdGhpbk9mZnNldCA9IHdpdGhpbi5vZmZzZXQubGVmdCArIHdpdGhpbi5zY3JvbGxMZWZ0LFxuXHRcdFx0XHRvdXRlcldpZHRoID0gd2l0aGluLndpZHRoLFxuXHRcdFx0XHRvZmZzZXRMZWZ0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbExlZnQgOiB3aXRoaW4ub2Zmc2V0LmxlZnQsXG5cdFx0XHRcdGNvbGxpc2lvblBvc0xlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LFxuXHRcdFx0XHRvdmVyTGVmdCA9IGNvbGxpc2lvblBvc0xlZnQgLSBvZmZzZXRMZWZ0LFxuXHRcdFx0XHRvdmVyUmlnaHQgPSBjb2xsaXNpb25Qb3NMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLSBvZmZzZXRMZWZ0LFxuXHRcdFx0XHRteU9mZnNldCA9IGRhdGEubXlbIDAgXSA9PT0gXCJsZWZ0XCIgP1xuXHRcdFx0XHRcdC1kYXRhLmVsZW1XaWR0aCA6XG5cdFx0XHRcdFx0ZGF0YS5teVsgMCBdID09PSBcInJpZ2h0XCIgP1xuXHRcdFx0XHRcdFx0ZGF0YS5lbGVtV2lkdGggOlxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0YXRPZmZzZXQgPSBkYXRhLmF0WyAwIF0gPT09IFwibGVmdFwiID9cblx0XHRcdFx0XHRkYXRhLnRhcmdldFdpZHRoIDpcblx0XHRcdFx0XHRkYXRhLmF0WyAwIF0gPT09IFwicmlnaHRcIiA/XG5cdFx0XHRcdFx0XHQtZGF0YS50YXJnZXRXaWR0aCA6XG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRvZmZzZXQgPSAtMiAqIGRhdGEub2Zmc2V0WyAwIF0sXG5cdFx0XHRcdG5ld092ZXJSaWdodCxcblx0XHRcdFx0bmV3T3ZlckxlZnQ7XG5cblx0XHRcdGlmICggb3ZlckxlZnQgPCAwICkge1xuXHRcdFx0XHRuZXdPdmVyUmlnaHQgPSBwb3NpdGlvbi5sZWZ0ICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCArIGRhdGEuY29sbGlzaW9uV2lkdGggLVxuXHRcdFx0XHRcdG91dGVyV2lkdGggLSB3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdGlmICggbmV3T3ZlclJpZ2h0IDwgMCB8fCBuZXdPdmVyUmlnaHQgPCBhYnMoIG92ZXJMZWZ0ICkgKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24ubGVmdCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICkge1xuXHRcdFx0XHRuZXdPdmVyTGVmdCA9IHBvc2l0aW9uLmxlZnQgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQgKyBteU9mZnNldCArXG5cdFx0XHRcdFx0YXRPZmZzZXQgKyBvZmZzZXQgLSBvZmZzZXRMZWZ0O1xuXHRcdFx0XHRpZiAoIG5ld092ZXJMZWZ0ID4gMCB8fCBhYnMoIG5ld092ZXJMZWZ0ICkgPCBvdmVyUmlnaHQgKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24ubGVmdCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0b3A6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHtcblx0XHRcdHZhciB3aXRoaW4gPSBkYXRhLndpdGhpbixcblx0XHRcdFx0d2l0aGluT2Zmc2V0ID0gd2l0aGluLm9mZnNldC50b3AgKyB3aXRoaW4uc2Nyb2xsVG9wLFxuXHRcdFx0XHRvdXRlckhlaWdodCA9IHdpdGhpbi5oZWlnaHQsXG5cdFx0XHRcdG9mZnNldFRvcCA9IHdpdGhpbi5pc1dpbmRvdyA/IHdpdGhpbi5zY3JvbGxUb3AgOiB3aXRoaW4ub2Zmc2V0LnRvcCxcblx0XHRcdFx0Y29sbGlzaW9uUG9zVG9wID0gcG9zaXRpb24udG9wIC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AsXG5cdFx0XHRcdG92ZXJUb3AgPSBjb2xsaXNpb25Qb3NUb3AgLSBvZmZzZXRUb3AsXG5cdFx0XHRcdG92ZXJCb3R0b20gPSBjb2xsaXNpb25Qb3NUb3AgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtIG91dGVySGVpZ2h0IC0gb2Zmc2V0VG9wLFxuXHRcdFx0XHR0b3AgPSBkYXRhLm15WyAxIF0gPT09IFwidG9wXCIsXG5cdFx0XHRcdG15T2Zmc2V0ID0gdG9wID9cblx0XHRcdFx0XHQtZGF0YS5lbGVtSGVpZ2h0IDpcblx0XHRcdFx0XHRkYXRhLm15WyAxIF0gPT09IFwiYm90dG9tXCIgP1xuXHRcdFx0XHRcdFx0ZGF0YS5lbGVtSGVpZ2h0IDpcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdGF0T2Zmc2V0ID0gZGF0YS5hdFsgMSBdID09PSBcInRvcFwiID9cblx0XHRcdFx0XHRkYXRhLnRhcmdldEhlaWdodCA6XG5cdFx0XHRcdFx0ZGF0YS5hdFsgMSBdID09PSBcImJvdHRvbVwiID9cblx0XHRcdFx0XHRcdC1kYXRhLnRhcmdldEhlaWdodCA6XG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRvZmZzZXQgPSAtMiAqIGRhdGEub2Zmc2V0WyAxIF0sXG5cdFx0XHRcdG5ld092ZXJUb3AsXG5cdFx0XHRcdG5ld092ZXJCb3R0b207XG5cdFx0XHRpZiAoIG92ZXJUb3AgPCAwICkge1xuXHRcdFx0XHRuZXdPdmVyQm90dG9tID0gcG9zaXRpb24udG9wICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCArIGRhdGEuY29sbGlzaW9uSGVpZ2h0IC1cblx0XHRcdFx0XHRvdXRlckhlaWdodCAtIHdpdGhpbk9mZnNldDtcblx0XHRcdFx0aWYgKCBuZXdPdmVyQm90dG9tIDwgMCB8fCBuZXdPdmVyQm90dG9tIDwgYWJzKCBvdmVyVG9wICkgKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24udG9wICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICkge1xuXHRcdFx0XHRuZXdPdmVyVG9wID0gcG9zaXRpb24udG9wIC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AgKyBteU9mZnNldCArIGF0T2Zmc2V0ICtcblx0XHRcdFx0XHRvZmZzZXQgLSBvZmZzZXRUb3A7XG5cdFx0XHRcdGlmICggbmV3T3ZlclRvcCA+IDAgfHwgYWJzKCBuZXdPdmVyVG9wICkgPCBvdmVyQm90dG9tICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLnRvcCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRmbGlwZml0OiB7XG5cdFx0bGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHQkLnVpLnBvc2l0aW9uLmZsaXAubGVmdC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHQkLnVpLnBvc2l0aW9uLmZpdC5sZWZ0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9LFxuXHRcdHRvcDogZnVuY3Rpb24oKSB7XG5cdFx0XHQkLnVpLnBvc2l0aW9uLmZsaXAudG9wLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdCQudWkucG9zaXRpb24uZml0LnRvcC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9XG59O1xuXG59ICkoKTtcblxucmV0dXJuICQudWkucG9zaXRpb247XG5cbn0gKSApO1xuIiwiKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiwgXCIuL3ZlcnNpb25cIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSAoIGZ1bmN0aW9uKCAkICkge1xucmV0dXJuICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiggZG9jdW1lbnQgKSB7XG5cdHZhciBhY3RpdmVFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHQvLyBJRTkgdGhyb3dzIGFuIFwiVW5zcGVjaWZpZWQgZXJyb3JcIiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBmcm9tIGFuIDxpZnJhbWU+XG5cdHRyeSB7XG5cdFx0YWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnJvciApIHtcblx0XHRhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIG1heSByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIGFuIGVsZW1lbnRcblx0Ly8gSW50ZXJlc3RpbmdseSwgdGhpcyBvbmx5IHNlZW1zIHRvIG9jY3VyIHdoZW4gTk9UIGluIGFuIGlmcmFtZVxuXHRpZiAoICFhY3RpdmVFbGVtZW50ICkge1xuXHRcdGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHQvLyBJRTExIHJldHVybnMgYSBzZWVtaW5nbHkgZW1wdHkgb2JqZWN0IGluIHNvbWUgY2FzZXMgd2hlbiBhY2Nlc3Npbmdcblx0Ly8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBmcm9tIGFuIDxpZnJhbWU+XG5cdGlmICggIWFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgKSB7XG5cdFx0YWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG5cdH1cblxuXHRyZXR1cm4gYWN0aXZlRWxlbWVudDtcbn07XG5cbn0gKSApO1xuIiwiKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiwgXCIuL3ZlcnNpb25cIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSAoIGZ1bmN0aW9uKCAkICkge1xucmV0dXJuICQudWkuc2FmZUJsdXIgPSBmdW5jdGlvbiggZWxlbWVudCApIHtcblxuXHQvLyBTdXBwb3J0OiBJRTkgLSAxMCBvbmx5XG5cdC8vIElmIHRoZSA8Ym9keT4gaXMgYmx1cnJlZCwgSUUgd2lsbCBzd2l0Y2ggd2luZG93cywgc2VlICM5NDIwXG5cdGlmICggZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwiYm9keVwiICkge1xuXHRcdCQoIGVsZW1lbnQgKS50cmlnZ2VyKCBcImJsdXJcIiApO1xuXHR9XG59O1xuXG59ICkgKTtcbiIsIi8qIVxuICogalF1ZXJ5IFVJIFNjcm9sbCBQYXJlbnQgMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IHNjcm9sbFBhcmVudFxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IEdldCB0aGUgY2xvc2VzdCBhbmNlc3RvciBlbGVtZW50IHRoYXQgaXMgc2Nyb2xsYWJsZS5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9zY3JvbGxQYXJlbnQvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcblxucmV0dXJuICQuZm4uc2Nyb2xsUGFyZW50ID0gZnVuY3Rpb24oIGluY2x1ZGVIaWRkZW4gKSB7XG5cdHZhciBwb3NpdGlvbiA9IHRoaXMuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRleGNsdWRlU3RhdGljUGFyZW50ID0gcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblx0XHRvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IC8oYXV0b3xzY3JvbGx8aGlkZGVuKS8gOiAvKGF1dG98c2Nyb2xsKS8sXG5cdFx0c2Nyb2xsUGFyZW50ID0gdGhpcy5wYXJlbnRzKCkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJlbnQgPSAkKCB0aGlzICk7XG5cdFx0XHRpZiAoIGV4Y2x1ZGVTdGF0aWNQYXJlbnQgJiYgcGFyZW50LmNzcyggXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvdmVyZmxvd1JlZ2V4LnRlc3QoIHBhcmVudC5jc3MoIFwib3ZlcmZsb3dcIiApICsgcGFyZW50LmNzcyggXCJvdmVyZmxvdy15XCIgKSArXG5cdFx0XHRcdHBhcmVudC5jc3MoIFwib3ZlcmZsb3cteFwiICkgKTtcblx0XHR9ICkuZXEoIDAgKTtcblxuXHRyZXR1cm4gcG9zaXRpb24gPT09IFwiZml4ZWRcIiB8fCAhc2Nyb2xsUGFyZW50Lmxlbmd0aCA/XG5cdFx0JCggdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSA6XG5cdFx0c2Nyb2xsUGFyZW50O1xufTtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBUYWJiYWJsZSAxLjEyLjBcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogOnRhYmJhYmxlIFNlbGVjdG9yXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogU2VsZWN0cyBlbGVtZW50cyB3aGljaCBjYW4gYmUgdGFiYmVkIHRvLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3RhYmJhYmxlLXNlbGVjdG9yL1xuXG4oIGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZSggWyBcImpxdWVyeVwiLCBcIi4vdmVyc2lvblwiLCBcIi4vZm9jdXNhYmxlXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcblxucmV0dXJuICQuZXh0ZW5kKCAkLmV4cHJbIFwiOlwiIF0sIHtcblx0dGFiYmFibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciB0YWJJbmRleCA9ICQuYXR0ciggZWxlbWVudCwgXCJ0YWJpbmRleFwiICksXG5cdFx0XHRoYXNUYWJpbmRleCA9IHRhYkluZGV4ICE9IG51bGw7XG5cdFx0cmV0dXJuICggIWhhc1RhYmluZGV4IHx8IHRhYkluZGV4ID49IDAgKSAmJiAkLnVpLmZvY3VzYWJsZSggZWxlbWVudCwgaGFzVGFiaW5kZXggKTtcblx0fVxufSApO1xuXG59ICkgKTtcbiIsIi8qIVxuICogalF1ZXJ5IFVJIFVuaXF1ZSBJRCAxLjEyLjBcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogdW5pcXVlSWRcbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBGdW5jdGlvbnMgdG8gZ2VuZXJhdGUgYW5kIHJlbW92ZSB1bmlxdWVJZCdzXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vdW5pcXVlSWQvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKCBmdW5jdGlvbiggJCApIHtcblxucmV0dXJuICQuZm4uZXh0ZW5kKCB7XG5cdHVuaXF1ZUlkOiAoIGZ1bmN0aW9uKCkge1xuXHRcdHZhciB1dWlkID0gMDtcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICF0aGlzLmlkICkge1xuXHRcdFx0XHRcdHRoaXMuaWQgPSBcInVpLWlkLVwiICsgKCArK3V1aWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH07XG5cdH0gKSgpLFxuXG5cdHJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggL151aS1pZC1cXGQrJC8udGVzdCggdGhpcy5pZCApICkge1xuXHRcdFx0XHQkKCB0aGlzICkucmVtb3ZlQXR0ciggXCJpZFwiICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbn0gKSApO1xuIiwiKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSAoIGZ1bmN0aW9uKCAkICkge1xuXG4kLnVpID0gJC51aSB8fCB7fTtcblxucmV0dXJuICQudWkudmVyc2lvbiA9IFwiMS4xMi4wXCI7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgV2lkZ2V0IDEuMTIuMFxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBXaWRnZXRcbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBQcm92aWRlcyBhIGZhY3RvcnkgZm9yIGNyZWF0aW5nIHN0YXRlZnVsIHdpZGdldHMgd2l0aCBhIGNvbW1vbiBBUEkuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20valF1ZXJ5LndpZGdldC9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS93aWRnZXQvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuXG52YXIgd2lkZ2V0VXVpZCA9IDA7XG52YXIgd2lkZ2V0U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiQuY2xlYW5EYXRhID0gKCBmdW5jdGlvbiggb3JpZyApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZXZlbnRzLCBlbGVtLCBpO1xuXHRcdGZvciAoIGkgPSAwOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHQvLyBPbmx5IHRyaWdnZXIgcmVtb3ZlIHdoZW4gbmVjZXNzYXJ5IHRvIHNhdmUgdGltZVxuXHRcdFx0XHRldmVudHMgPSAkLl9kYXRhKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0XHRcdGlmICggZXZlbnRzICYmIGV2ZW50cy5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0JCggZWxlbSApLnRyaWdnZXJIYW5kbGVyKCBcInJlbW92ZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvODIzNVxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdH1cblx0XHRvcmlnKCBlbGVtcyApO1xuXHR9O1xufSApKCAkLmNsZWFuRGF0YSApO1xuXG4kLndpZGdldCA9IGZ1bmN0aW9uKCBuYW1lLCBiYXNlLCBwcm90b3R5cGUgKSB7XG5cdHZhciBleGlzdGluZ0NvbnN0cnVjdG9yLCBjb25zdHJ1Y3RvciwgYmFzZVByb3RvdHlwZTtcblxuXHQvLyBQcm94aWVkUHJvdG90eXBlIGFsbG93cyB0aGUgcHJvdmlkZWQgcHJvdG90eXBlIHRvIHJlbWFpbiB1bm1vZGlmaWVkXG5cdC8vIHNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgYXMgYSBtaXhpbiBmb3IgbXVsdGlwbGUgd2lkZ2V0cyAoIzg4NzYpXG5cdHZhciBwcm94aWVkUHJvdG90eXBlID0ge307XG5cblx0dmFyIG5hbWVzcGFjZSA9IG5hbWUuc3BsaXQoIFwiLlwiIClbIDAgXTtcblx0bmFtZSA9IG5hbWUuc3BsaXQoIFwiLlwiIClbIDEgXTtcblx0dmFyIGZ1bGxOYW1lID0gbmFtZXNwYWNlICsgXCItXCIgKyBuYW1lO1xuXG5cdGlmICggIXByb3RvdHlwZSApIHtcblx0XHRwcm90b3R5cGUgPSBiYXNlO1xuXHRcdGJhc2UgPSAkLldpZGdldDtcblx0fVxuXG5cdGlmICggJC5pc0FycmF5KCBwcm90b3R5cGUgKSApIHtcblx0XHRwcm90b3R5cGUgPSAkLmV4dGVuZC5hcHBseSggbnVsbCwgWyB7fSBdLmNvbmNhdCggcHJvdG90eXBlICkgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBzZWxlY3RvciBmb3IgcGx1Z2luXG5cdCQuZXhwclsgXCI6XCIgXVsgZnVsbE5hbWUudG9Mb3dlckNhc2UoKSBdID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBmdWxsTmFtZSApO1xuXHR9O1xuXG5cdCRbIG5hbWVzcGFjZSBdID0gJFsgbmFtZXNwYWNlIF0gfHwge307XG5cdGV4aXN0aW5nQ29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdO1xuXHRjb25zdHJ1Y3RvciA9ICRbIG5hbWVzcGFjZSBdWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHtcblxuXHRcdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCBcIm5ld1wiIGtleXdvcmRcblx0XHRpZiAoICF0aGlzLl9jcmVhdGVXaWRnZXQgKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGNvbnN0cnVjdG9yKCBvcHRpb25zLCBlbGVtZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IGluaXRpYWxpemluZyBmb3Igc2ltcGxlIGluaGVyaXRhbmNlXG5cdFx0Ly8gbXVzdCB1c2UgXCJuZXdcIiBrZXl3b3JkICh0aGUgY29kZSBhYm92ZSBhbHdheXMgcGFzc2VzIGFyZ3MpXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5fY3JlYXRlV2lkZ2V0KCBvcHRpb25zLCBlbGVtZW50ICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEV4dGVuZCB3aXRoIHRoZSBleGlzdGluZyBjb25zdHJ1Y3RvciB0byBjYXJyeSBvdmVyIGFueSBzdGF0aWMgcHJvcGVydGllc1xuXHQkLmV4dGVuZCggY29uc3RydWN0b3IsIGV4aXN0aW5nQ29uc3RydWN0b3IsIHtcblx0XHR2ZXJzaW9uOiBwcm90b3R5cGUudmVyc2lvbixcblxuXHRcdC8vIENvcHkgdGhlIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvdG90eXBlIGluIGNhc2Ugd2UgbmVlZCB0b1xuXHRcdC8vIHJlZGVmaW5lIHRoZSB3aWRnZXQgbGF0ZXJcblx0XHRfcHJvdG86ICQuZXh0ZW5kKCB7fSwgcHJvdG90eXBlICksXG5cblx0XHQvLyBUcmFjayB3aWRnZXRzIHRoYXQgaW5oZXJpdCBmcm9tIHRoaXMgd2lkZ2V0IGluIGNhc2UgdGhpcyB3aWRnZXQgaXNcblx0XHQvLyByZWRlZmluZWQgYWZ0ZXIgYSB3aWRnZXQgaW5oZXJpdHMgZnJvbSBpdFxuXHRcdF9jaGlsZENvbnN0cnVjdG9yczogW11cblx0fSApO1xuXG5cdGJhc2VQcm90b3R5cGUgPSBuZXcgYmFzZSgpO1xuXG5cdC8vIFdlIG5lZWQgdG8gbWFrZSB0aGUgb3B0aW9ucyBoYXNoIGEgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIG5ldyBpbnN0YW5jZVxuXHQvLyBvdGhlcndpc2Ugd2UnbGwgbW9kaWZ5IHRoZSBvcHRpb25zIGhhc2ggb24gdGhlIHByb3RvdHlwZSB0aGF0IHdlJ3JlXG5cdC8vIGluaGVyaXRpbmcgZnJvbVxuXHRiYXNlUHJvdG90eXBlLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LCBiYXNlUHJvdG90eXBlLm9wdGlvbnMgKTtcblx0JC5lYWNoKCBwcm90b3R5cGUsIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRpZiAoICEkLmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRwcm94aWVkUHJvdG90eXBlWyBwcm9wIF0gPSB2YWx1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cHJveGllZFByb3RvdHlwZVsgcHJvcCBdID0gKCBmdW5jdGlvbigpIHtcblx0XHRcdGZ1bmN0aW9uIF9zdXBlcigpIHtcblx0XHRcdFx0cmV0dXJuIGJhc2UucHJvdG90eXBlWyBwcm9wIF0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBfc3VwZXJBcHBseSggYXJncyApIHtcblx0XHRcdFx0cmV0dXJuIGJhc2UucHJvdG90eXBlWyBwcm9wIF0uYXBwbHkoIHRoaXMsIGFyZ3MgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgX19zdXBlciA9IHRoaXMuX3N1cGVyO1xuXHRcdFx0XHR2YXIgX19zdXBlckFwcGx5ID0gdGhpcy5fc3VwZXJBcHBseTtcblx0XHRcdFx0dmFyIHJldHVyblZhbHVlO1xuXG5cdFx0XHRcdHRoaXMuX3N1cGVyID0gX3N1cGVyO1xuXHRcdFx0XHR0aGlzLl9zdXBlckFwcGx5ID0gX3N1cGVyQXBwbHk7XG5cblx0XHRcdFx0cmV0dXJuVmFsdWUgPSB2YWx1ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cblx0XHRcdFx0dGhpcy5fc3VwZXIgPSBfX3N1cGVyO1xuXHRcdFx0XHR0aGlzLl9zdXBlckFwcGx5ID0gX19zdXBlckFwcGx5O1xuXG5cdFx0XHRcdHJldHVybiByZXR1cm5WYWx1ZTtcblx0XHRcdH07XG5cdFx0fSApKCk7XG5cdH0gKTtcblx0Y29uc3RydWN0b3IucHJvdG90eXBlID0gJC53aWRnZXQuZXh0ZW5kKCBiYXNlUHJvdG90eXBlLCB7XG5cblx0XHQvLyBUT0RPOiByZW1vdmUgc3VwcG9ydCBmb3Igd2lkZ2V0RXZlbnRQcmVmaXhcblx0XHQvLyBhbHdheXMgdXNlIHRoZSBuYW1lICsgYSBjb2xvbiBhcyB0aGUgcHJlZml4LCBlLmcuLCBkcmFnZ2FibGU6c3RhcnRcblx0XHQvLyBkb24ndCBwcmVmaXggZm9yIHdpZGdldHMgdGhhdCBhcmVuJ3QgRE9NLWJhc2VkXG5cdFx0d2lkZ2V0RXZlbnRQcmVmaXg6IGV4aXN0aW5nQ29uc3RydWN0b3IgPyAoIGJhc2VQcm90b3R5cGUud2lkZ2V0RXZlbnRQcmVmaXggfHwgbmFtZSApIDogbmFtZVxuXHR9LCBwcm94aWVkUHJvdG90eXBlLCB7XG5cdFx0Y29uc3RydWN0b3I6IGNvbnN0cnVjdG9yLFxuXHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlLFxuXHRcdHdpZGdldE5hbWU6IG5hbWUsXG5cdFx0d2lkZ2V0RnVsbE5hbWU6IGZ1bGxOYW1lXG5cdH0gKTtcblxuXHQvLyBJZiB0aGlzIHdpZGdldCBpcyBiZWluZyByZWRlZmluZWQgdGhlbiB3ZSBuZWVkIHRvIGZpbmQgYWxsIHdpZGdldHMgdGhhdFxuXHQvLyBhcmUgaW5oZXJpdGluZyBmcm9tIGl0IGFuZCByZWRlZmluZSBhbGwgb2YgdGhlbSBzbyB0aGF0IHRoZXkgaW5oZXJpdCBmcm9tXG5cdC8vIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGlzIHdpZGdldC4gV2UncmUgZXNzZW50aWFsbHkgdHJ5aW5nIHRvIHJlcGxhY2Ugb25lXG5cdC8vIGxldmVsIGluIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5cdGlmICggZXhpc3RpbmdDb25zdHJ1Y3RvciApIHtcblx0XHQkLmVhY2goIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzLCBmdW5jdGlvbiggaSwgY2hpbGQgKSB7XG5cdFx0XHR2YXIgY2hpbGRQcm90b3R5cGUgPSBjaGlsZC5wcm90b3R5cGU7XG5cblx0XHRcdC8vIFJlZGVmaW5lIHRoZSBjaGlsZCB3aWRnZXQgdXNpbmcgdGhlIHNhbWUgcHJvdG90eXBlIHRoYXQgd2FzXG5cdFx0XHQvLyBvcmlnaW5hbGx5IHVzZWQsIGJ1dCBpbmhlcml0IGZyb20gdGhlIG5ldyB2ZXJzaW9uIG9mIHRoZSBiYXNlXG5cdFx0XHQkLndpZGdldCggY2hpbGRQcm90b3R5cGUubmFtZXNwYWNlICsgXCIuXCIgKyBjaGlsZFByb3RvdHlwZS53aWRnZXROYW1lLCBjb25zdHJ1Y3Rvcixcblx0XHRcdFx0Y2hpbGQuX3Byb3RvICk7XG5cdFx0fSApO1xuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBsaXN0IG9mIGV4aXN0aW5nIGNoaWxkIGNvbnN0cnVjdG9ycyBmcm9tIHRoZSBvbGQgY29uc3RydWN0b3Jcblx0XHQvLyBzbyB0aGUgb2xkIGNoaWxkIGNvbnN0cnVjdG9ycyBjYW4gYmUgZ2FyYmFnZSBjb2xsZWN0ZWRcblx0XHRkZWxldGUgZXhpc3RpbmdDb25zdHJ1Y3Rvci5fY2hpbGRDb25zdHJ1Y3RvcnM7XG5cdH0gZWxzZSB7XG5cdFx0YmFzZS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaCggY29uc3RydWN0b3IgKTtcblx0fVxuXG5cdCQud2lkZ2V0LmJyaWRnZSggbmFtZSwgY29uc3RydWN0b3IgKTtcblxuXHRyZXR1cm4gY29uc3RydWN0b3I7XG59O1xuXG4kLndpZGdldC5leHRlbmQgPSBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHR2YXIgaW5wdXQgPSB3aWRnZXRTbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcblx0dmFyIGlucHV0SW5kZXggPSAwO1xuXHR2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cdHZhciBrZXk7XG5cdHZhciB2YWx1ZTtcblxuXHRmb3IgKCA7IGlucHV0SW5kZXggPCBpbnB1dExlbmd0aDsgaW5wdXRJbmRleCsrICkge1xuXHRcdGZvciAoIGtleSBpbiBpbnB1dFsgaW5wdXRJbmRleCBdICkge1xuXHRcdFx0dmFsdWUgPSBpbnB1dFsgaW5wdXRJbmRleCBdWyBrZXkgXTtcblx0XHRcdGlmICggaW5wdXRbIGlucHV0SW5kZXggXS5oYXNPd25Qcm9wZXJ0eSgga2V5ICkgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBDbG9uZSBvYmplY3RzXG5cdFx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCB2YWx1ZSApICkge1xuXHRcdFx0XHRcdHRhcmdldFsga2V5IF0gPSAkLmlzUGxhaW5PYmplY3QoIHRhcmdldFsga2V5IF0gKSA/XG5cdFx0XHRcdFx0XHQkLndpZGdldC5leHRlbmQoIHt9LCB0YXJnZXRbIGtleSBdLCB2YWx1ZSApIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgZXh0ZW5kIHN0cmluZ3MsIGFycmF5cywgZXRjLiB3aXRoIG9iamVjdHNcblx0XHRcdFx0XHRcdCQud2lkZ2V0LmV4dGVuZCgge30sIHZhbHVlICk7XG5cblx0XHRcdFx0Ly8gQ29weSBldmVyeXRoaW5nIGVsc2UgYnkgcmVmZXJlbmNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBrZXkgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG4kLndpZGdldC5icmlkZ2UgPSBmdW5jdGlvbiggbmFtZSwgb2JqZWN0ICkge1xuXHR2YXIgZnVsbE5hbWUgPSBvYmplY3QucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lIHx8IG5hbWU7XG5cdCQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdHZhciBpc01ldGhvZENhbGwgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIjtcblx0XHR2YXIgYXJncyA9IHdpZGdldFNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApO1xuXHRcdHZhciByZXR1cm5WYWx1ZSA9IHRoaXM7XG5cblx0XHRpZiAoIGlzTWV0aG9kQ2FsbCApIHtcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBtZXRob2RWYWx1ZTtcblx0XHRcdFx0dmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBmdWxsTmFtZSApO1xuXG5cdFx0XHRcdGlmICggb3B0aW9ucyA9PT0gXCJpbnN0YW5jZVwiICkge1xuXHRcdFx0XHRcdHJldHVyblZhbHVlID0gaW5zdGFuY2U7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhaW5zdGFuY2UgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZXJyb3IoIFwiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiBcIiArIG5hbWUgK1xuXHRcdFx0XHRcdFx0XCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IFwiICtcblx0XHRcdFx0XHRcdFwiYXR0ZW1wdGVkIHRvIGNhbGwgbWV0aG9kICdcIiArIG9wdGlvbnMgKyBcIidcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVsgb3B0aW9ucyBdICkgfHwgb3B0aW9ucy5jaGFyQXQoIDAgKSA9PT0gXCJfXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZXJyb3IoIFwibm8gc3VjaCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJyBmb3IgXCIgKyBuYW1lICtcblx0XHRcdFx0XHRcdFwiIHdpZGdldCBpbnN0YW5jZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZXRob2RWYWx1ZSA9IGluc3RhbmNlWyBvcHRpb25zIF0uYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XG5cblx0XHRcdFx0aWYgKCBtZXRob2RWYWx1ZSAhPT0gaW5zdGFuY2UgJiYgbWV0aG9kVmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm5WYWx1ZSA9IG1ldGhvZFZhbHVlICYmIG1ldGhvZFZhbHVlLmpxdWVyeSA/XG5cdFx0XHRcdFx0XHRyZXR1cm5WYWx1ZS5wdXNoU3RhY2soIG1ldGhvZFZhbHVlLmdldCgpICkgOlxuXHRcdFx0XHRcdFx0bWV0aG9kVmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQWxsb3cgbXVsdGlwbGUgaGFzaGVzIHRvIGJlIHBhc3NlZCBvbiBpbml0XG5cdFx0XHRpZiAoIGFyZ3MubGVuZ3RoICkge1xuXHRcdFx0XHRvcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kLmFwcGx5KCBudWxsLCBbIG9wdGlvbnMgXS5jb25jYXQoIGFyZ3MgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIHRoaXMsIGZ1bGxOYW1lICk7XG5cdFx0XHRcdGlmICggaW5zdGFuY2UgKSB7XG5cdFx0XHRcdFx0aW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zIHx8IHt9ICk7XG5cdFx0XHRcdFx0aWYgKCBpbnN0YW5jZS5faW5pdCApIHtcblx0XHRcdFx0XHRcdGluc3RhbmNlLl9pbml0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCQuZGF0YSggdGhpcywgZnVsbE5hbWUsIG5ldyBvYmplY3QoIG9wdGlvbnMsIHRoaXMgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldHVyblZhbHVlO1xuXHR9O1xufTtcblxuJC5XaWRnZXQgPSBmdW5jdGlvbiggLyogb3B0aW9ucywgZWxlbWVudCAqLyApIHt9O1xuJC5XaWRnZXQuX2NoaWxkQ29uc3RydWN0b3JzID0gW107XG5cbiQuV2lkZ2V0LnByb3RvdHlwZSA9IHtcblx0d2lkZ2V0TmFtZTogXCJ3aWRnZXRcIixcblx0d2lkZ2V0RXZlbnRQcmVmaXg6IFwiXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjxkaXY+XCIsXG5cblx0b3B0aW9uczoge1xuXHRcdGNsYXNzZXM6IHt9LFxuXHRcdGRpc2FibGVkOiBmYWxzZSxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGNyZWF0ZTogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGVXaWRnZXQ6IGZ1bmN0aW9uKCBvcHRpb25zLCBlbGVtZW50ICkge1xuXHRcdGVsZW1lbnQgPSAkKCBlbGVtZW50IHx8IHRoaXMuZGVmYXVsdEVsZW1lbnQgfHwgdGhpcyApWyAwIF07XG5cdFx0dGhpcy5lbGVtZW50ID0gJCggZWxlbWVudCApO1xuXHRcdHRoaXMudXVpZCA9IHdpZGdldFV1aWQrKztcblx0XHR0aGlzLmV2ZW50TmFtZXNwYWNlID0gXCIuXCIgKyB0aGlzLndpZGdldE5hbWUgKyB0aGlzLnV1aWQ7XG5cblx0XHR0aGlzLmJpbmRpbmdzID0gJCgpO1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gJCgpO1xuXHRcdHRoaXMuZm9jdXNhYmxlID0gJCgpO1xuXHRcdHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAgPSB7fTtcblxuXHRcdGlmICggZWxlbWVudCAhPT0gdGhpcyApIHtcblx0XHRcdCQuZGF0YSggZWxlbWVudCwgdGhpcy53aWRnZXRGdWxsTmFtZSwgdGhpcyApO1xuXHRcdFx0dGhpcy5fb24oIHRydWUsIHRoaXMuZWxlbWVudCwge1xuXHRcdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRpZiAoIGV2ZW50LnRhcmdldCA9PT0gZWxlbWVudCApIHtcblx0XHRcdFx0XHRcdHRoaXMuZGVzdHJveSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0dGhpcy5kb2N1bWVudCA9ICQoIGVsZW1lbnQuc3R5bGUgP1xuXG5cdFx0XHRcdC8vIEVsZW1lbnQgd2l0aGluIHRoZSBkb2N1bWVudFxuXHRcdFx0XHRlbGVtZW50Lm93bmVyRG9jdW1lbnQgOlxuXG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgd2luZG93IG9yIGRvY3VtZW50XG5cdFx0XHRcdGVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudCApO1xuXHRcdFx0dGhpcy53aW5kb3cgPSAkKCB0aGlzLmRvY3VtZW50WyAwIF0uZGVmYXVsdFZpZXcgfHwgdGhpcy5kb2N1bWVudFsgMCBdLnBhcmVudFdpbmRvdyApO1xuXHRcdH1cblxuXHRcdHRoaXMub3B0aW9ucyA9ICQud2lkZ2V0LmV4dGVuZCgge30sXG5cdFx0XHR0aGlzLm9wdGlvbnMsXG5cdFx0XHR0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksXG5cdFx0XHRvcHRpb25zICk7XG5cblx0XHR0aGlzLl9jcmVhdGUoKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApO1xuXHRcdH1cblxuXHRcdHRoaXMuX3RyaWdnZXIoIFwiY3JlYXRlXCIsIG51bGwsIHRoaXMuX2dldENyZWF0ZUV2ZW50RGF0YSgpICk7XG5cdFx0dGhpcy5faW5pdCgpO1xuXHR9LFxuXG5cdF9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge307XG5cdH0sXG5cblx0X2dldENyZWF0ZUV2ZW50RGF0YTogJC5ub29wLFxuXG5cdF9jcmVhdGU6ICQubm9vcCxcblxuXHRfaW5pdDogJC5ub29wLFxuXG5cdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHRoaXMuX2Rlc3Ryb3koKTtcblx0XHQkLmVhY2goIHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIHZhbHVlLCBrZXkgKTtcblx0XHR9ICk7XG5cblx0XHQvLyBXZSBjYW4gcHJvYmFibHkgcmVtb3ZlIHRoZSB1bmJpbmQgY2FsbHMgaW4gMi4wXG5cdFx0Ly8gYWxsIGV2ZW50IGJpbmRpbmdzIHNob3VsZCBnbyB0aHJvdWdoIHRoaXMuX29uKClcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5vZmYoIHRoaXMuZXZlbnROYW1lc3BhY2UgKVxuXHRcdFx0LnJlbW92ZURhdGEoIHRoaXMud2lkZ2V0RnVsbE5hbWUgKTtcblx0XHR0aGlzLndpZGdldCgpXG5cdFx0XHQub2ZmKCB0aGlzLmV2ZW50TmFtZXNwYWNlIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtZGlzYWJsZWRcIiApO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgZXZlbnRzIGFuZCBzdGF0ZXNcblx0XHR0aGlzLmJpbmRpbmdzLm9mZiggdGhpcy5ldmVudE5hbWVzcGFjZSApO1xuXHR9LFxuXG5cdF9kZXN0cm95OiAkLm5vb3AsXG5cblx0d2lkZ2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9LFxuXG5cdG9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSBrZXk7XG5cdFx0dmFyIHBhcnRzO1xuXHRcdHZhciBjdXJPcHRpb247XG5cdFx0dmFyIGk7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdC8vIERvbid0IHJldHVybiBhIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgaGFzaFxuXHRcdFx0cmV0dXJuICQud2lkZ2V0LmV4dGVuZCgge30sIHRoaXMub3B0aW9ucyApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gSGFuZGxlIG5lc3RlZCBrZXlzLCBlLmcuLCBcImZvby5iYXJcIiA9PiB7IGZvbzogeyBiYXI6IF9fXyB9IH1cblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdHBhcnRzID0ga2V5LnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0a2V5ID0gcGFydHMuc2hpZnQoKTtcblx0XHRcdGlmICggcGFydHMubGVuZ3RoICkge1xuXHRcdFx0XHRjdXJPcHRpb24gPSBvcHRpb25zWyBrZXkgXSA9ICQud2lkZ2V0LmV4dGVuZCgge30sIHRoaXMub3B0aW9uc1sga2V5IF0gKTtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKysgKSB7XG5cdFx0XHRcdFx0Y3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF0gPSBjdXJPcHRpb25bIHBhcnRzWyBpIF0gXSB8fCB7fTtcblx0XHRcdFx0XHRjdXJPcHRpb24gPSBjdXJPcHRpb25bIHBhcnRzWyBpIF0gXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRrZXkgPSBwYXJ0cy5wb3AoKTtcblx0XHRcdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0XHRcdHJldHVybiBjdXJPcHRpb25bIGtleSBdID09PSB1bmRlZmluZWQgPyBudWxsIDogY3VyT3B0aW9uWyBrZXkgXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJPcHRpb25bIGtleSBdID0gdmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uc1sga2V5IF0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0aGlzLm9wdGlvbnNbIGtleSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wdGlvbnNbIGtleSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5fc2V0T3B0aW9ucyggb3B0aW9ucyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdHZhciBrZXk7XG5cblx0XHRmb3IgKCBrZXkgaW4gb3B0aW9ucyApIHtcblx0XHRcdHRoaXMuX3NldE9wdGlvbigga2V5LCBvcHRpb25zWyBrZXkgXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcImNsYXNzZXNcIiApIHtcblx0XHRcdHRoaXMuX3NldE9wdGlvbkNsYXNzZXMoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zWyBrZXkgXSA9IHZhbHVlO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiZGlzYWJsZWRcIiApIHtcblx0XHRcdHRoaXMuX3NldE9wdGlvbkRpc2FibGVkKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9zZXRPcHRpb25DbGFzc2VzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzS2V5LCBlbGVtZW50cywgY3VycmVudEVsZW1lbnRzO1xuXG5cdFx0Zm9yICggY2xhc3NLZXkgaW4gdmFsdWUgKSB7XG5cdFx0XHRjdXJyZW50RWxlbWVudHMgPSB0aGlzLmNsYXNzZXNFbGVtZW50TG9va3VwWyBjbGFzc0tleSBdO1xuXHRcdFx0aWYgKCB2YWx1ZVsgY2xhc3NLZXkgXSA9PT0gdGhpcy5vcHRpb25zLmNsYXNzZXNbIGNsYXNzS2V5IF0gfHxcblx0XHRcdFx0XHQhY3VycmVudEVsZW1lbnRzIHx8XG5cdFx0XHRcdFx0IWN1cnJlbnRFbGVtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZSBhcmUgZG9pbmcgdGhpcyB0byBjcmVhdGUgYSBuZXcgalF1ZXJ5IG9iamVjdCBiZWNhdXNlIHRoZSBfcmVtb3ZlQ2xhc3MoKSBjYWxsXG5cdFx0XHQvLyBvbiB0aGUgbmV4dCBsaW5lIGlzIGdvaW5nIHRvIGRlc3Ryb3kgdGhlIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBlbGVtZW50cyBiZWluZ1xuXHRcdFx0Ly8gdHJhY2tlZC4gV2UgbmVlZCB0byBzYXZlIGEgY29weSBvZiB0aGlzIGNvbGxlY3Rpb24gc28gdGhhdCB3ZSBjYW4gYWRkIHRoZSBuZXcgY2xhc3Nlc1xuXHRcdFx0Ly8gYmVsb3cuXG5cdFx0XHRlbGVtZW50cyA9ICQoIGN1cnJlbnRFbGVtZW50cy5nZXQoKSApO1xuXHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIGN1cnJlbnRFbGVtZW50cywgY2xhc3NLZXkgKTtcblxuXHRcdFx0Ly8gV2UgZG9uJ3QgdXNlIF9hZGRDbGFzcygpIGhlcmUsIGJlY2F1c2UgdGhhdCB1c2VzIHRoaXMub3B0aW9ucy5jbGFzc2VzXG5cdFx0XHQvLyBmb3IgZ2VuZXJhdGluZyB0aGUgc3RyaW5nIG9mIGNsYXNzZXMuIFdlIHdhbnQgdG8gdXNlIHRoZSB2YWx1ZSBwYXNzZWQgaW4gZnJvbVxuXHRcdFx0Ly8gX3NldE9wdGlvbigpLCB0aGlzIGlzIHRoZSBuZXcgdmFsdWUgb2YgdGhlIGNsYXNzZXMgb3B0aW9uIHdoaWNoIHdhcyBwYXNzZWQgdG9cblx0XHRcdC8vIF9zZXRPcHRpb24oKS4gV2UgcGFzcyB0aGlzIHZhbHVlIGRpcmVjdGx5IHRvIF9jbGFzc2VzKCkuXG5cdFx0XHRlbGVtZW50cy5hZGRDbGFzcyggdGhpcy5fY2xhc3Nlcygge1xuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50cyxcblx0XHRcdFx0a2V5czogY2xhc3NLZXksXG5cdFx0XHRcdGNsYXNzZXM6IHZhbHVlLFxuXHRcdFx0XHRhZGQ6IHRydWVcblx0XHRcdH0gKSApO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR0aGlzLl90b2dnbGVDbGFzcyggdGhpcy53aWRnZXQoKSwgdGhpcy53aWRnZXRGdWxsTmFtZSArIFwiLWRpc2FibGVkXCIsIG51bGwsICEhdmFsdWUgKTtcblxuXHRcdC8vIElmIHRoZSB3aWRnZXQgaXMgYmVjb21pbmcgZGlzYWJsZWQsIHRoZW4gbm90aGluZyBpcyBpbnRlcmFjdGl2ZVxuXHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5ob3ZlcmFibGUsIG51bGwsIFwidWktc3RhdGUtaG92ZXJcIiApO1xuXHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuZm9jdXNhYmxlLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZW5hYmxlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2V0T3B0aW9ucyggeyBkaXNhYmxlZDogZmFsc2UgfSApO1xuXHR9LFxuXG5cdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZXRPcHRpb25zKCB7IGRpc2FibGVkOiB0cnVlIH0gKTtcblx0fSxcblxuXHRfY2xhc3NlczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0dmFyIGZ1bGwgPSBbXTtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHRvcHRpb25zID0gJC5leHRlbmQoIHtcblx0XHRcdGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcblx0XHRcdGNsYXNzZXM6IHRoaXMub3B0aW9ucy5jbGFzc2VzIHx8IHt9XG5cdFx0fSwgb3B0aW9ucyApO1xuXG5cdFx0ZnVuY3Rpb24gcHJvY2Vzc0NsYXNzU3RyaW5nKCBjbGFzc2VzLCBjaGVja09wdGlvbiApIHtcblx0XHRcdHZhciBjdXJyZW50LCBpO1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRjdXJyZW50ID0gdGhhdC5jbGFzc2VzRWxlbWVudExvb2t1cFsgY2xhc3Nlc1sgaSBdIF0gfHwgJCgpO1xuXHRcdFx0XHRpZiAoIG9wdGlvbnMuYWRkICkge1xuXHRcdFx0XHRcdGN1cnJlbnQgPSAkKCAkLnVuaXF1ZSggY3VycmVudC5nZXQoKS5jb25jYXQoIG9wdGlvbnMuZWxlbWVudC5nZXQoKSApICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50ID0gJCggY3VycmVudC5ub3QoIG9wdGlvbnMuZWxlbWVudCApLmdldCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhhdC5jbGFzc2VzRWxlbWVudExvb2t1cFsgY2xhc3Nlc1sgaSBdIF0gPSBjdXJyZW50O1xuXHRcdFx0XHRmdWxsLnB1c2goIGNsYXNzZXNbIGkgXSApO1xuXHRcdFx0XHRpZiAoIGNoZWNrT3B0aW9uICYmIG9wdGlvbnMuY2xhc3Nlc1sgY2xhc3Nlc1sgaSBdIF0gKSB7XG5cdFx0XHRcdFx0ZnVsbC5wdXNoKCBvcHRpb25zLmNsYXNzZXNbIGNsYXNzZXNbIGkgXSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMua2V5cyApIHtcblx0XHRcdHByb2Nlc3NDbGFzc1N0cmluZyggb3B0aW9ucy5rZXlzLm1hdGNoKCAvXFxTKy9nICkgfHwgW10sIHRydWUgKTtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmV4dHJhICkge1xuXHRcdFx0cHJvY2Vzc0NsYXNzU3RyaW5nKCBvcHRpb25zLmV4dHJhLm1hdGNoKCAvXFxTKy9nICkgfHwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZnVsbC5qb2luKCBcIiBcIiApO1xuXHR9LFxuXG5cdF9yZW1vdmVDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGtleXMsIGV4dHJhICkge1xuXHRcdHJldHVybiB0aGlzLl90b2dnbGVDbGFzcyggZWxlbWVudCwga2V5cywgZXh0cmEsIGZhbHNlICk7XG5cdH0sXG5cblx0X2FkZENsYXNzOiBmdW5jdGlvbiggZWxlbWVudCwga2V5cywgZXh0cmEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3RvZ2dsZUNsYXNzKCBlbGVtZW50LCBrZXlzLCBleHRyYSwgdHJ1ZSApO1xuXHR9LFxuXG5cdF90b2dnbGVDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGtleXMsIGV4dHJhLCBhZGQgKSB7XG5cdFx0YWRkID0gKCB0eXBlb2YgYWRkID09PSBcImJvb2xlYW5cIiApID8gYWRkIDogZXh0cmE7XG5cdFx0dmFyIHNoaWZ0ID0gKCB0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIiB8fCBlbGVtZW50ID09PSBudWxsICksXG5cdFx0XHRvcHRpb25zID0ge1xuXHRcdFx0XHRleHRyYTogc2hpZnQgPyBrZXlzIDogZXh0cmEsXG5cdFx0XHRcdGtleXM6IHNoaWZ0ID8gZWxlbWVudCA6IGtleXMsXG5cdFx0XHRcdGVsZW1lbnQ6IHNoaWZ0ID8gdGhpcy5lbGVtZW50IDogZWxlbWVudCxcblx0XHRcdFx0YWRkOiBhZGRcblx0XHRcdH07XG5cdFx0b3B0aW9ucy5lbGVtZW50LnRvZ2dsZUNsYXNzKCB0aGlzLl9jbGFzc2VzKCBvcHRpb25zICksIGFkZCApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9vbjogZnVuY3Rpb24oIHN1cHByZXNzRGlzYWJsZWRDaGVjaywgZWxlbWVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGRlbGVnYXRlRWxlbWVudDtcblx0XHR2YXIgaW5zdGFuY2UgPSB0aGlzO1xuXG5cdFx0Ly8gTm8gc3VwcHJlc3NEaXNhYmxlZENoZWNrIGZsYWcsIHNodWZmbGUgYXJndW1lbnRzXG5cdFx0aWYgKCB0eXBlb2Ygc3VwcHJlc3NEaXNhYmxlZENoZWNrICE9PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdGhhbmRsZXJzID0gZWxlbWVudDtcblx0XHRcdGVsZW1lbnQgPSBzdXBwcmVzc0Rpc2FibGVkQ2hlY2s7XG5cdFx0XHRzdXBwcmVzc0Rpc2FibGVkQ2hlY2sgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBObyBlbGVtZW50IGFyZ3VtZW50LCBzaHVmZmxlIGFuZCB1c2UgdGhpcy5lbGVtZW50XG5cdFx0aWYgKCAhaGFuZGxlcnMgKSB7XG5cdFx0XHRoYW5kbGVycyA9IGVsZW1lbnQ7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0ZGVsZWdhdGVFbGVtZW50ID0gdGhpcy53aWRnZXQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudCA9IGRlbGVnYXRlRWxlbWVudCA9ICQoIGVsZW1lbnQgKTtcblx0XHRcdHRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmFkZCggZWxlbWVudCApO1xuXHRcdH1cblxuXHRcdCQuZWFjaCggaGFuZGxlcnMsIGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlciApIHtcblx0XHRcdGZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHtcblxuXHRcdFx0XHQvLyBBbGxvdyB3aWRnZXRzIHRvIGN1c3RvbWl6ZSB0aGUgZGlzYWJsZWQgaGFuZGxpbmdcblx0XHRcdFx0Ly8gLSBkaXNhYmxlZCBhcyBhbiBhcnJheSBpbnN0ZWFkIG9mIGJvb2xlYW5cblx0XHRcdFx0Ly8gLSBkaXNhYmxlZCBjbGFzcyBhcyBtZXRob2QgZm9yIGRpc2FibGluZyBpbmRpdmlkdWFsIHBhcnRzXG5cdFx0XHRcdGlmICggIXN1cHByZXNzRGlzYWJsZWRDaGVjayAmJlxuXHRcdFx0XHRcdFx0KCBpbnN0YW5jZS5vcHRpb25zLmRpc2FibGVkID09PSB0cnVlIHx8XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuaGFzQ2xhc3MoIFwidWktc3RhdGUtZGlzYWJsZWRcIiApICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAoIHR5cGVvZiBoYW5kbGVyID09PSBcInN0cmluZ1wiID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKVxuXHRcdFx0XHRcdC5hcHBseSggaW5zdGFuY2UsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb3B5IHRoZSBndWlkIHNvIGRpcmVjdCB1bmJpbmRpbmcgd29ya3Ncblx0XHRcdGlmICggdHlwZW9mIGhhbmRsZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdGhhbmRsZXJQcm94eS5ndWlkID0gaGFuZGxlci5ndWlkID1cblx0XHRcdFx0XHRoYW5kbGVyLmd1aWQgfHwgaGFuZGxlclByb3h5Lmd1aWQgfHwgJC5ndWlkKys7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBtYXRjaCA9IGV2ZW50Lm1hdGNoKCAvXihbXFx3Oi1dKilcXHMqKC4qKSQvICk7XG5cdFx0XHR2YXIgZXZlbnROYW1lID0gbWF0Y2hbIDEgXSArIGluc3RhbmNlLmV2ZW50TmFtZXNwYWNlO1xuXHRcdFx0dmFyIHNlbGVjdG9yID0gbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0ZGVsZWdhdGVFbGVtZW50Lm9uKCBldmVudE5hbWUsIHNlbGVjdG9yLCBoYW5kbGVyUHJveHkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnQub24oIGV2ZW50TmFtZSwgaGFuZGxlclByb3h5ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9vZmY6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudE5hbWUgKSB7XG5cdFx0ZXZlbnROYW1lID0gKCBldmVudE5hbWUgfHwgXCJcIiApLnNwbGl0KCBcIiBcIiApLmpvaW4oIHRoaXMuZXZlbnROYW1lc3BhY2UgKyBcIiBcIiApICtcblx0XHRcdHRoaXMuZXZlbnROYW1lc3BhY2U7XG5cdFx0ZWxlbWVudC5vZmYoIGV2ZW50TmFtZSApLm9mZiggZXZlbnROYW1lICk7XG5cblx0XHQvLyBDbGVhciB0aGUgc3RhY2sgdG8gYXZvaWQgbWVtb3J5IGxlYWtzICgjMTAwNTYpXG5cdFx0dGhpcy5iaW5kaW5ncyA9ICQoIHRoaXMuYmluZGluZ3Mubm90KCBlbGVtZW50ICkuZ2V0KCkgKTtcblx0XHR0aGlzLmZvY3VzYWJsZSA9ICQoIHRoaXMuZm9jdXNhYmxlLm5vdCggZWxlbWVudCApLmdldCgpICk7XG5cdFx0dGhpcy5ob3ZlcmFibGUgPSAkKCB0aGlzLmhvdmVyYWJsZS5ub3QoIGVsZW1lbnQgKS5nZXQoKSApO1xuXHR9LFxuXG5cdF9kZWxheTogZnVuY3Rpb24oIGhhbmRsZXIsIGRlbGF5ICkge1xuXHRcdGZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHtcblx0XHRcdHJldHVybiAoIHR5cGVvZiBoYW5kbGVyID09PSBcInN0cmluZ1wiID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKVxuXHRcdFx0XHQuYXBwbHkoIGluc3RhbmNlLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdFx0dmFyIGluc3RhbmNlID0gdGhpcztcblx0XHRyZXR1cm4gc2V0VGltZW91dCggaGFuZGxlclByb3h5LCBkZWxheSB8fCAwICk7XG5cdH0sXG5cblx0X2hvdmVyYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dGhpcy5ob3ZlcmFibGUgPSB0aGlzLmhvdmVyYWJsZS5hZGQoIGVsZW1lbnQgKTtcblx0XHR0aGlzLl9vbiggZWxlbWVudCwge1xuXHRcdFx0bW91c2VlbnRlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdH0sXG5cdFx0XHRtb3VzZWxlYXZlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksIG51bGwsIFwidWktc3RhdGUtaG92ZXJcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfZm9jdXNhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR0aGlzLmZvY3VzYWJsZSA9IHRoaXMuZm9jdXNhYmxlLmFkZCggZWxlbWVudCApO1xuXHRcdHRoaXMuX29uKCBlbGVtZW50LCB7XG5cdFx0XHRmb2N1c2luOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksIG51bGwsIFwidWktc3RhdGUtZm9jdXNcIiApO1xuXHRcdFx0fSxcblx0XHRcdGZvY3Vzb3V0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksIG51bGwsIFwidWktc3RhdGUtZm9jdXNcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfdHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBkYXRhICkge1xuXHRcdHZhciBwcm9wLCBvcmlnO1xuXHRcdHZhciBjYWxsYmFjayA9IHRoaXMub3B0aW9uc1sgdHlwZSBdO1xuXG5cdFx0ZGF0YSA9IGRhdGEgfHwge307XG5cdFx0ZXZlbnQgPSAkLkV2ZW50KCBldmVudCApO1xuXHRcdGV2ZW50LnR5cGUgPSAoIHR5cGUgPT09IHRoaXMud2lkZ2V0RXZlbnRQcmVmaXggP1xuXHRcdFx0dHlwZSA6XG5cdFx0XHR0aGlzLndpZGdldEV2ZW50UHJlZml4ICsgdHlwZSApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHQvLyBUaGUgb3JpZ2luYWwgZXZlbnQgbWF5IGNvbWUgZnJvbSBhbnkgZWxlbWVudFxuXHRcdC8vIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHRhcmdldCBvbiB0aGUgbmV3IGV2ZW50XG5cdFx0ZXZlbnQudGFyZ2V0ID0gdGhpcy5lbGVtZW50WyAwIF07XG5cblx0XHQvLyBDb3B5IG9yaWdpbmFsIGV2ZW50IHByb3BlcnRpZXMgb3ZlciB0byB0aGUgbmV3IGV2ZW50XG5cdFx0b3JpZyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG5cdFx0aWYgKCBvcmlnICkge1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRpZiAoICEoIHByb3AgaW4gZXZlbnQgKSApIHtcblx0XHRcdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ1sgcHJvcCBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIGV2ZW50LCBkYXRhICk7XG5cdFx0cmV0dXJuICEoICQuaXNGdW5jdGlvbiggY2FsbGJhY2sgKSAmJlxuXHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMuZWxlbWVudFsgMCBdLCBbIGV2ZW50IF0uY29uY2F0KCBkYXRhICkgKSA9PT0gZmFsc2UgfHxcblx0XHRcdGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICk7XG5cdH1cbn07XG5cbiQuZWFjaCggeyBzaG93OiBcImZhZGVJblwiLCBoaWRlOiBcImZhZGVPdXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBkZWZhdWx0RWZmZWN0ICkge1xuXHQkLldpZGdldC5wcm90b3R5cGVbIFwiX1wiICsgbWV0aG9kIF0gPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB7IGVmZmVjdDogb3B0aW9ucyB9O1xuXHRcdH1cblxuXHRcdHZhciBoYXNPcHRpb25zO1xuXHRcdHZhciBlZmZlY3ROYW1lID0gIW9wdGlvbnMgP1xuXHRcdFx0bWV0aG9kIDpcblx0XHRcdG9wdGlvbnMgPT09IHRydWUgfHwgdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgP1xuXHRcdFx0XHRkZWZhdWx0RWZmZWN0IDpcblx0XHRcdFx0b3B0aW9ucy5lZmZlY3QgfHwgZGVmYXVsdEVmZmVjdDtcblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRvcHRpb25zID0geyBkdXJhdGlvbjogb3B0aW9ucyB9O1xuXHRcdH1cblxuXHRcdGhhc09wdGlvbnMgPSAhJC5pc0VtcHR5T2JqZWN0KCBvcHRpb25zICk7XG5cdFx0b3B0aW9ucy5jb21wbGV0ZSA9IGNhbGxiYWNrO1xuXG5cdFx0aWYgKCBvcHRpb25zLmRlbGF5ICkge1xuXHRcdFx0ZWxlbWVudC5kZWxheSggb3B0aW9ucy5kZWxheSApO1xuXHRcdH1cblxuXHRcdGlmICggaGFzT3B0aW9ucyAmJiAkLmVmZmVjdHMgJiYgJC5lZmZlY3RzLmVmZmVjdFsgZWZmZWN0TmFtZSBdICkge1xuXHRcdFx0ZWxlbWVudFsgbWV0aG9kIF0oIG9wdGlvbnMgKTtcblx0XHR9IGVsc2UgaWYgKCBlZmZlY3ROYW1lICE9PSBtZXRob2QgJiYgZWxlbWVudFsgZWZmZWN0TmFtZSBdICkge1xuXHRcdFx0ZWxlbWVudFsgZWZmZWN0TmFtZSBdKCBvcHRpb25zLmR1cmF0aW9uLCBvcHRpb25zLmVhc2luZywgY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudC5xdWV1ZSggZnVuY3Rpb24oIG5leHQgKSB7XG5cdFx0XHRcdCQoIHRoaXMgKVsgbWV0aG9kIF0oKTtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKCBlbGVtZW50WyAwIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuZXh0KCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5yZXR1cm4gJC53aWRnZXQ7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgQXV0b2NvbXBsZXRlIDEuMTIuMFxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBBdXRvY29tcGxldGVcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBMaXN0cyBzdWdnZXN0ZWQgd29yZHMgYXMgdGhlIHVzZXIgaXMgdHlwaW5nLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2F1dG9jb21wbGV0ZS9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9hdXRvY29tcGxldGUvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9hdXRvY29tcGxldGUuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4vbWVudVwiLFxuXHRcdFx0XCIuLi9rZXljb2RlXCIsXG5cdFx0XHRcIi4uL3Bvc2l0aW9uXCIsXG5cdFx0XHRcIi4uL3NhZmUtYWN0aXZlLWVsZW1lbnRcIixcblx0XHRcdFwiLi4vdmVyc2lvblwiLFxuXHRcdFx0XCIuLi93aWRnZXRcIlxuXHRcdF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59KCBmdW5jdGlvbiggJCApIHtcblxuJC53aWRnZXQoIFwidWkuYXV0b2NvbXBsZXRlXCIsIHtcblx0dmVyc2lvbjogXCIxLjEyLjBcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGlucHV0PlwiLFxuXHRvcHRpb25zOiB7XG5cdFx0YXBwZW5kVG86IG51bGwsXG5cdFx0YXV0b0ZvY3VzOiBmYWxzZSxcblx0XHRkZWxheTogMzAwLFxuXHRcdG1pbkxlbmd0aDogMSxcblx0XHRwb3NpdGlvbjoge1xuXHRcdFx0bXk6IFwibGVmdCB0b3BcIixcblx0XHRcdGF0OiBcImxlZnQgYm90dG9tXCIsXG5cdFx0XHRjb2xsaXNpb246IFwibm9uZVwiXG5cdFx0fSxcblx0XHRzb3VyY2U6IG51bGwsXG5cblx0XHQvLyBDYWxsYmFja3Ncblx0XHRjaGFuZ2U6IG51bGwsXG5cdFx0Y2xvc2U6IG51bGwsXG5cdFx0Zm9jdXM6IG51bGwsXG5cdFx0b3BlbjogbnVsbCxcblx0XHRyZXNwb25zZTogbnVsbCxcblx0XHRzZWFyY2g6IG51bGwsXG5cdFx0c2VsZWN0OiBudWxsXG5cdH0sXG5cblx0cmVxdWVzdEluZGV4OiAwLFxuXHRwZW5kaW5nOiAwLFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gU29tZSBicm93c2VycyBvbmx5IHJlcGVhdCBrZXlkb3duIGV2ZW50cywgbm90IGtleXByZXNzIGV2ZW50cyxcblx0XHQvLyBzbyB3ZSB1c2UgdGhlIHN1cHByZXNzS2V5UHJlc3MgZmxhZyB0byBkZXRlcm1pbmUgaWYgd2UndmUgYWxyZWFkeVxuXHRcdC8vIGhhbmRsZWQgdGhlIGtleWRvd24gZXZlbnQuICM3MjY5XG5cdFx0Ly8gVW5mb3J0dW5hdGVseSB0aGUgY29kZSBmb3IgJiBpbiBrZXlwcmVzcyBpcyB0aGUgc2FtZSBhcyB0aGUgdXAgYXJyb3csXG5cdFx0Ly8gc28gd2UgdXNlIHRoZSBzdXBwcmVzc0tleVByZXNzUmVwZWF0IGZsYWcgdG8gYXZvaWQgaGFuZGxpbmcga2V5cHJlc3Ncblx0XHQvLyBldmVudHMgd2hlbiB3ZSBrbm93IHRoZSBrZXlkb3duIGV2ZW50IHdhcyB1c2VkIHRvIG1vZGlmeSB0aGVcblx0XHQvLyBzZWFyY2ggdGVybS4gIzc3OTlcblx0XHR2YXIgc3VwcHJlc3NLZXlQcmVzcywgc3VwcHJlc3NLZXlQcmVzc1JlcGVhdCwgc3VwcHJlc3NJbnB1dCxcblx0XHRcdG5vZGVOYW1lID0gdGhpcy5lbGVtZW50WyAwIF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdGlzVGV4dGFyZWEgPSBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiLFxuXHRcdFx0aXNJbnB1dCA9IG5vZGVOYW1lID09PSBcImlucHV0XCI7XG5cblx0XHQvLyBUZXh0YXJlYXMgYXJlIGFsd2F5cyBtdWx0aS1saW5lXG5cdFx0Ly8gSW5wdXRzIGFyZSBhbHdheXMgc2luZ2xlLWxpbmUsIGV2ZW4gaWYgaW5zaWRlIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnRcblx0XHQvLyBJRSBhbHNvIHRyZWF0cyBpbnB1dHMgYXMgY29udGVudEVkaXRhYmxlXG5cdFx0Ly8gQWxsIG90aGVyIGVsZW1lbnQgdHlwZXMgYXJlIGRldGVybWluZWQgYnkgd2hldGhlciBvciBub3QgdGhleSdyZSBjb250ZW50RWRpdGFibGVcblx0XHR0aGlzLmlzTXVsdGlMaW5lID0gaXNUZXh0YXJlYSB8fCAhaXNJbnB1dCAmJiB0aGlzLl9pc0NvbnRlbnRFZGl0YWJsZSggdGhpcy5lbGVtZW50ICk7XG5cblx0XHR0aGlzLnZhbHVlTWV0aG9kID0gdGhpcy5lbGVtZW50WyBpc1RleHRhcmVhIHx8IGlzSW5wdXQgPyBcInZhbFwiIDogXCJ0ZXh0XCIgXTtcblx0XHR0aGlzLmlzTmV3TWVudSA9IHRydWU7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1hdXRvY29tcGxldGUtaW5wdXRcIiApO1xuXHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiICk7XG5cblx0XHR0aGlzLl9vbiggdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRrZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5lbGVtZW50LnByb3AoIFwicmVhZE9ubHlcIiApICkge1xuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdHN1cHByZXNzSW5wdXQgPSB0cnVlO1xuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSBmYWxzZTtcblx0XHRcdFx0c3VwcHJlc3NJbnB1dCA9IGZhbHNlO1xuXHRcdFx0XHRzdXBwcmVzc0tleVByZXNzUmVwZWF0ID0gZmFsc2U7XG5cdFx0XHRcdHZhciBrZXlDb2RlID0gJC51aS5rZXlDb2RlO1xuXHRcdFx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuUEFHRV9VUDpcblx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9tb3ZlKCBcInByZXZpb3VzUGFnZVwiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuX21vdmUoIFwibmV4dFBhZ2VcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlVQOlxuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuX2tleUV2ZW50KCBcInByZXZpb3VzXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5ET1dOOlxuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuX2tleUV2ZW50KCBcIm5leHRcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLkVOVEVSOlxuXG5cdFx0XHRcdFx0Ly8gd2hlbiBtZW51IGlzIG9wZW4gYW5kIGhhcyBmb2N1c1xuXHRcdFx0XHRcdGlmICggdGhpcy5tZW51LmFjdGl2ZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gIzYwNTUgLSBPcGVyYSBzdGlsbCBhbGxvd3MgdGhlIGtleXByZXNzIHRvIG9jY3VyXG5cdFx0XHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgZm9ybXMgdG8gc3VibWl0XG5cdFx0XHRcdFx0XHRzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbnUuc2VsZWN0KCBldmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlRBQjpcblx0XHRcdFx0XHRpZiAoIHRoaXMubWVudS5hY3RpdmUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbnUuc2VsZWN0KCBldmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLkVTQ0FQRTpcblx0XHRcdFx0XHRpZiAoIHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdFx0XHRcdGlmICggIXRoaXMuaXNNdWx0aUxpbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlKCB0aGlzLnRlcm0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdC8vIERpZmZlcmVudCBicm93c2VycyBoYXZlIGRpZmZlcmVudCBkZWZhdWx0IGJlaGF2aW9yIGZvciBlc2NhcGVcblx0XHRcdFx0XHRcdC8vIFNpbmdsZSBwcmVzcyBjYW4gbWVhbiB1bmRvIG9yIGNsZWFyXG5cdFx0XHRcdFx0XHQvLyBEb3VibGUgcHJlc3MgaW4gSUUgbWVhbnMgY2xlYXIgdGhlIHdob2xlIGZvcm1cblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Ly8gc2VhcmNoIHRpbWVvdXQgc2hvdWxkIGJlIHRyaWdnZXJlZCBiZWZvcmUgdGhlIGlucHV0IHZhbHVlIGlzIGNoYW5nZWRcblx0XHRcdFx0XHR0aGlzLl9zZWFyY2hUaW1lb3V0KCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0a2V5cHJlc3M6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCBzdXBwcmVzc0tleVByZXNzICkge1xuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoICF0aGlzLmlzTXVsdGlMaW5lIHx8IHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVwbGljYXRlIHNvbWUga2V5IGhhbmRsZXJzIHRvIGFsbG93IHRoZW0gdG8gcmVwZWF0IGluIEZpcmVmb3ggYW5kIE9wZXJhXG5cdFx0XHRcdHZhciBrZXlDb2RlID0gJC51aS5rZXlDb2RlO1xuXHRcdFx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuUEFHRV9VUDpcblx0XHRcdFx0XHR0aGlzLl9tb3ZlKCBcInByZXZpb3VzUGFnZVwiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0XHRcdHRoaXMuX21vdmUoIFwibmV4dFBhZ2VcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLlVQOlxuXHRcdFx0XHRcdHRoaXMuX2tleUV2ZW50KCBcInByZXZpb3VzXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5ET1dOOlxuXHRcdFx0XHRcdHRoaXMuX2tleUV2ZW50KCBcIm5leHRcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGlucHV0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggc3VwcHJlc3NJbnB1dCApIHtcblx0XHRcdFx0XHRzdXBwcmVzc0lucHV0ID0gZmFsc2U7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fc2VhcmNoVGltZW91dCggZXZlbnQgKTtcblx0XHRcdH0sXG5cdFx0XHRmb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcblx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHRoaXMuX3ZhbHVlKCk7XG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuY2FuY2VsQmx1ciApIHtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5jYW5jZWxCbHVyO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5zZWFyY2hpbmcgKTtcblx0XHRcdFx0dGhpcy5jbG9zZSggZXZlbnQgKTtcblx0XHRcdFx0dGhpcy5fY2hhbmdlKCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuX2luaXRTb3VyY2UoKTtcblx0XHR0aGlzLm1lbnUgPSAkKCBcIjx1bD5cIiApXG5cdFx0XHQuYXBwZW5kVG8oIHRoaXMuX2FwcGVuZFRvKCkgKVxuXHRcdFx0Lm1lbnUoIHtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIEFSSUEgc3VwcG9ydCwgdGhlIGxpdmUgcmVnaW9uIHRha2VzIGNhcmUgb2YgdGhhdFxuXHRcdFx0XHRyb2xlOiBudWxsXG5cdFx0XHR9IClcblx0XHRcdC5oaWRlKClcblx0XHRcdC5tZW51KCBcImluc3RhbmNlXCIgKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLm1lbnUuZWxlbWVudCwgXCJ1aS1hdXRvY29tcGxldGVcIiwgXCJ1aS1mcm9udFwiICk7XG5cdFx0dGhpcy5fb24oIHRoaXMubWVudS5lbGVtZW50LCB7XG5cdFx0XHRtb3VzZWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBwcmV2ZW50IG1vdmluZyBmb2N1cyBvdXQgb2YgdGhlIHRleHQgZmllbGRcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHQvLyBJRSBkb2Vzbid0IHByZXZlbnQgbW92aW5nIGZvY3VzIGV2ZW4gd2l0aCBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0XHRcdC8vIHNvIHdlIHNldCBhIGZsYWcgdG8ga25vdyB3aGVuIHdlIHNob3VsZCBpZ25vcmUgdGhlIGJsdXIgZXZlbnRcblx0XHRcdFx0dGhpcy5jYW5jZWxCbHVyID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmNhbmNlbEJsdXI7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0XHQvLyBSaWdodCBjbGlja2luZyBhIG1lbnUgaXRlbSBvciBzZWxlY3RpbmcgdGV4dCBmcm9tIHRoZSBtZW51IGl0ZW1zIHdpbGxcblx0XHRcdFx0XHQvLyByZXN1bHQgaW4gZm9jdXMgbW92aW5nIG91dCBvZiB0aGUgaW5wdXQuIEhvd2V2ZXIsIHdlJ3ZlIGFscmVhZHkgcmVjZWl2ZWRcblx0XHRcdFx0XHQvLyBhbmQgaWdub3JlZCB0aGUgYmx1ciBldmVudCBiZWNhdXNlIG9mIHRoZSBjYW5jZWxCbHVyIGZsYWcgc2V0IGFib3ZlLiBTb1xuXHRcdFx0XHRcdC8vIHdlIHJlc3RvcmUgZm9jdXMgdG8gZW5zdXJlIHRoYXQgdGhlIG1lbnUgY2xvc2VzIHByb3Blcmx5IGJhc2VkIG9uIHRoZSB1c2VyJ3Ncblx0XHRcdFx0XHQvLyBuZXh0IGFjdGlvbnMuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVsZW1lbnRbIDAgXSAhPT0gJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9LFxuXHRcdFx0bWVudWZvY3VzOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR2YXIgbGFiZWwsIGl0ZW07XG5cblx0XHRcdFx0Ly8gc3VwcG9ydDogRmlyZWZveFxuXHRcdFx0XHQvLyBQcmV2ZW50IGFjY2lkZW50YWwgYWN0aXZhdGlvbiBvZiBtZW51IGl0ZW1zIGluIEZpcmVmb3ggKCM3MDI0ICM5MTE4KVxuXHRcdFx0XHRpZiAoIHRoaXMuaXNOZXdNZW51ICkge1xuXHRcdFx0XHRcdHRoaXMuaXNOZXdNZW51ID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKCBldmVudC5vcmlnaW5hbEV2ZW50ICYmIC9ebW91c2UvLnRlc3QoIGV2ZW50Lm9yaWdpbmFsRXZlbnQudHlwZSApICkge1xuXHRcdFx0XHRcdFx0dGhpcy5tZW51LmJsdXIoKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5kb2N1bWVudC5vbmUoIFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHQkKCBldmVudC50YXJnZXQgKS50cmlnZ2VyKCBldmVudC5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtID0gdWkuaXRlbS5kYXRhKCBcInVpLWF1dG9jb21wbGV0ZS1pdGVtXCIgKTtcblx0XHRcdFx0aWYgKCBmYWxzZSAhPT0gdGhpcy5fdHJpZ2dlciggXCJmb2N1c1wiLCBldmVudCwgeyBpdGVtOiBpdGVtIH0gKSApIHtcblxuXHRcdFx0XHRcdC8vIHVzZSB2YWx1ZSB0byBtYXRjaCB3aGF0IHdpbGwgZW5kIHVwIGluIHRoZSBpbnB1dCwgaWYgaXQgd2FzIGEga2V5IGV2ZW50XG5cdFx0XHRcdFx0aWYgKCBldmVudC5vcmlnaW5hbEV2ZW50ICYmIC9ea2V5Ly50ZXN0KCBldmVudC5vcmlnaW5hbEV2ZW50LnR5cGUgKSApIHtcblx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlKCBpdGVtLnZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQW5ub3VuY2UgdGhlIHZhbHVlIGluIHRoZSBsaXZlUmVnaW9uXG5cdFx0XHRcdGxhYmVsID0gdWkuaXRlbS5hdHRyKCBcImFyaWEtbGFiZWxcIiApIHx8IGl0ZW0udmFsdWU7XG5cdFx0XHRcdGlmICggbGFiZWwgJiYgJC50cmltKCBsYWJlbCApLmxlbmd0aCApIHtcblx0XHRcdFx0XHR0aGlzLmxpdmVSZWdpb24uY2hpbGRyZW4oKS5oaWRlKCk7XG5cdFx0XHRcdFx0JCggXCI8ZGl2PlwiICkudGV4dCggbGFiZWwgKS5hcHBlbmRUbyggdGhpcy5saXZlUmVnaW9uICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRtZW51c2VsZWN0OiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR2YXIgaXRlbSA9IHVpLml0ZW0uZGF0YSggXCJ1aS1hdXRvY29tcGxldGUtaXRlbVwiICksXG5cdFx0XHRcdFx0cHJldmlvdXMgPSB0aGlzLnByZXZpb3VzO1xuXG5cdFx0XHRcdC8vIE9ubHkgdHJpZ2dlciB3aGVuIGZvY3VzIHdhcyBsb3N0IChjbGljayBvbiBtZW51KVxuXHRcdFx0XHRpZiAoIHRoaXMuZWxlbWVudFsgMCBdICE9PSAkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKSApIHtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuXG5cdFx0XHRcdFx0Ly8gIzYxMDkgLSBJRSB0cmlnZ2VycyB0d28gZm9jdXMgZXZlbnRzIGFuZCB0aGUgc2Vjb25kXG5cdFx0XHRcdFx0Ly8gaXMgYXN5bmNocm9ub3VzLCBzbyB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBwcmV2aW91c1xuXHRcdFx0XHRcdC8vIHRlcm0gc3luY2hyb25vdXNseSBhbmQgYXN5bmNocm9ub3VzbHkgOi0oXG5cdFx0XHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuXHRcdFx0XHRcdFx0dGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZmFsc2UgIT09IHRoaXMuX3RyaWdnZXIoIFwic2VsZWN0XCIsIGV2ZW50LCB7IGl0ZW06IGl0ZW0gfSApICkge1xuXHRcdFx0XHRcdHRoaXMuX3ZhbHVlKCBpdGVtLnZhbHVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyByZXNldCB0aGUgdGVybSBhZnRlciB0aGUgc2VsZWN0IGV2ZW50XG5cdFx0XHRcdC8vIHRoaXMgYWxsb3dzIGN1c3RvbSBzZWxlY3QgaGFuZGxpbmcgdG8gd29yayBwcm9wZXJseVxuXHRcdFx0XHR0aGlzLnRlcm0gPSB0aGlzLl92YWx1ZSgpO1xuXG5cdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRJdGVtID0gaXRlbTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHR0aGlzLmxpdmVSZWdpb24gPSAkKCBcIjxkaXY+XCIsIHtcblx0XHRcdHJvbGU6IFwic3RhdHVzXCIsXG5cdFx0XHRcImFyaWEtbGl2ZVwiOiBcImFzc2VydGl2ZVwiLFxuXHRcdFx0XCJhcmlhLXJlbGV2YW50XCI6IFwiYWRkaXRpb25zXCJcblx0XHR9IClcblx0XHRcdC5hcHBlbmRUbyggdGhpcy5kb2N1bWVudFsgMCBdLmJvZHkgKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmxpdmVSZWdpb24sIG51bGwsIFwidWktaGVscGVyLWhpZGRlbi1hY2Nlc3NpYmxlXCIgKTtcblxuXHRcdC8vIFR1cm5pbmcgb2ZmIGF1dG9jb21wbGV0ZSBwcmV2ZW50cyB0aGUgYnJvd3NlciBmcm9tIHJlbWVtYmVyaW5nIHRoZVxuXHRcdC8vIHZhbHVlIHdoZW4gbmF2aWdhdGluZyB0aHJvdWdoIGhpc3RvcnksIHNvIHdlIHJlLWVuYWJsZSBhdXRvY29tcGxldGVcblx0XHQvLyBpZiB0aGUgcGFnZSBpcyB1bmxvYWRlZCBiZWZvcmUgdGhlIHdpZGdldCBpcyBkZXN0cm95ZWQuICM3NzkwXG5cdFx0dGhpcy5fb24oIHRoaXMud2luZG93LCB7XG5cdFx0XHRiZWZvcmV1bmxvYWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJhdXRvY29tcGxldGVcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnNlYXJjaGluZyApO1xuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImF1dG9jb21wbGV0ZVwiICk7XG5cdFx0dGhpcy5tZW51LmVsZW1lbnQucmVtb3ZlKCk7XG5cdFx0dGhpcy5saXZlUmVnaW9uLnJlbW92ZSgpO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cdFx0aWYgKCBrZXkgPT09IFwic291cmNlXCIgKSB7XG5cdFx0XHR0aGlzLl9pbml0U291cmNlKCk7XG5cdFx0fVxuXHRcdGlmICgga2V5ID09PSBcImFwcGVuZFRvXCIgKSB7XG5cdFx0XHR0aGlzLm1lbnUuZWxlbWVudC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApO1xuXHRcdH1cblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICYmIHZhbHVlICYmIHRoaXMueGhyICkge1xuXHRcdFx0dGhpcy54aHIuYWJvcnQoKTtcblx0XHR9XG5cdH0sXG5cblx0X2lzRXZlbnRUYXJnZXRJbldpZGdldDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBtZW51RWxlbWVudCA9IHRoaXMubWVudS5lbGVtZW50WyAwIF07XG5cblx0XHRyZXR1cm4gZXZlbnQudGFyZ2V0ID09PSB0aGlzLmVsZW1lbnRbIDAgXSB8fFxuXHRcdFx0ZXZlbnQudGFyZ2V0ID09PSBtZW51RWxlbWVudCB8fFxuXHRcdFx0JC5jb250YWlucyggbWVudUVsZW1lbnQsIGV2ZW50LnRhcmdldCApO1xuXHR9LFxuXG5cdF9jbG9zZU9uQ2xpY2tPdXRzaWRlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCAhdGhpcy5faXNFdmVudFRhcmdldEluV2lkZ2V0KCBldmVudCApICkge1xuXHRcdFx0dGhpcy5jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHRfYXBwZW5kVG86IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5vcHRpb25zLmFwcGVuZFRvO1xuXG5cdFx0aWYgKCBlbGVtZW50ICkge1xuXHRcdFx0ZWxlbWVudCA9IGVsZW1lbnQuanF1ZXJ5IHx8IGVsZW1lbnQubm9kZVR5cGUgP1xuXHRcdFx0XHQkKCBlbGVtZW50ICkgOlxuXHRcdFx0XHR0aGlzLmRvY3VtZW50LmZpbmQoIGVsZW1lbnQgKS5lcSggMCApO1xuXHRcdH1cblxuXHRcdGlmICggIWVsZW1lbnQgfHwgIWVsZW1lbnRbIDAgXSApIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuY2xvc2VzdCggXCIudWktZnJvbnQsIGRpYWxvZ1wiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhZWxlbWVudC5sZW5ndGggKSB7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy5kb2N1bWVudFsgMCBdLmJvZHk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdH0sXG5cblx0X2luaXRTb3VyY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcnJheSwgdXJsLFxuXHRcdFx0dGhhdCA9IHRoaXM7XG5cdFx0aWYgKCAkLmlzQXJyYXkoIHRoaXMub3B0aW9ucy5zb3VyY2UgKSApIHtcblx0XHRcdGFycmF5ID0gdGhpcy5vcHRpb25zLnNvdXJjZTtcblx0XHRcdHRoaXMuc291cmNlID0gZnVuY3Rpb24oIHJlcXVlc3QsIHJlc3BvbnNlICkge1xuXHRcdFx0XHRyZXNwb25zZSggJC51aS5hdXRvY29tcGxldGUuZmlsdGVyKCBhcnJheSwgcmVxdWVzdC50ZXJtICkgKTtcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5zb3VyY2UgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR1cmwgPSB0aGlzLm9wdGlvbnMuc291cmNlO1xuXHRcdFx0dGhpcy5zb3VyY2UgPSBmdW5jdGlvbiggcmVxdWVzdCwgcmVzcG9uc2UgKSB7XG5cdFx0XHRcdGlmICggdGhhdC54aHIgKSB7XG5cdFx0XHRcdFx0dGhhdC54aHIuYWJvcnQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGF0LnhociA9ICQuYWpheCgge1xuXHRcdFx0XHRcdHVybDogdXJsLFxuXHRcdFx0XHRcdGRhdGE6IHJlcXVlc3QsXG5cdFx0XHRcdFx0ZGF0YVR5cGU6IFwianNvblwiLFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UoIGRhdGEgKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlKCBbXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zb3VyY2UgPSB0aGlzLm9wdGlvbnMuc291cmNlO1xuXHRcdH1cblx0fSxcblxuXHRfc2VhcmNoVGltZW91dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy5zZWFyY2hpbmcgKTtcblx0XHR0aGlzLnNlYXJjaGluZyA9IHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU2VhcmNoIGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCwgb3IgaWYgdGhlIHVzZXIgcmV0eXBlcyB0aGUgc2FtZSB2YWx1ZSAoc2VlICM3NDM0KVxuXHRcdFx0dmFyIGVxdWFsVmFsdWVzID0gdGhpcy50ZXJtID09PSB0aGlzLl92YWx1ZSgpLFxuXHRcdFx0XHRtZW51VmlzaWJsZSA9IHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSxcblx0XHRcdFx0bW9kaWZpZXJLZXkgPSBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5O1xuXG5cdFx0XHRpZiAoICFlcXVhbFZhbHVlcyB8fCAoIGVxdWFsVmFsdWVzICYmICFtZW51VmlzaWJsZSAmJiAhbW9kaWZpZXJLZXkgKSApIHtcblx0XHRcdFx0dGhpcy5zZWxlY3RlZEl0ZW0gPSBudWxsO1xuXHRcdFx0XHR0aGlzLnNlYXJjaCggbnVsbCwgZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzLm9wdGlvbnMuZGVsYXkgKTtcblx0fSxcblxuXHRzZWFyY2g6IGZ1bmN0aW9uKCB2YWx1ZSwgZXZlbnQgKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiB0aGlzLl92YWx1ZSgpO1xuXG5cdFx0Ly8gQWx3YXlzIHNhdmUgdGhlIGFjdHVhbCB2YWx1ZSwgbm90IHRoZSBvbmUgcGFzc2VkIGFzIGFuIGFyZ3VtZW50XG5cdFx0dGhpcy50ZXJtID0gdGhpcy5fdmFsdWUoKTtcblxuXHRcdGlmICggdmFsdWUubGVuZ3RoIDwgdGhpcy5vcHRpb25zLm1pbkxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmNsb3NlKCBldmVudCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fdHJpZ2dlciggXCJzZWFyY2hcIiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3NlYXJjaCggdmFsdWUgKTtcblx0fSxcblxuXHRfc2VhcmNoOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dGhpcy5wZW5kaW5nKys7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktYXV0b2NvbXBsZXRlLWxvYWRpbmdcIiApO1xuXHRcdHRoaXMuY2FuY2VsU2VhcmNoID0gZmFsc2U7XG5cblx0XHR0aGlzLnNvdXJjZSggeyB0ZXJtOiB2YWx1ZSB9LCB0aGlzLl9yZXNwb25zZSgpICk7XG5cdH0sXG5cblx0X3Jlc3BvbnNlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5kZXggPSArK3RoaXMucmVxdWVzdEluZGV4O1xuXG5cdFx0cmV0dXJuICQucHJveHkoIGZ1bmN0aW9uKCBjb250ZW50ICkge1xuXHRcdFx0aWYgKCBpbmRleCA9PT0gdGhpcy5yZXF1ZXN0SW5kZXggKSB7XG5cdFx0XHRcdHRoaXMuX19yZXNwb25zZSggY29udGVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnBlbmRpbmctLTtcblx0XHRcdGlmICggIXRoaXMucGVuZGluZyApIHtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIFwidWktYXV0b2NvbXBsZXRlLWxvYWRpbmdcIiApO1xuXHRcdFx0fVxuXHRcdH0sIHRoaXMgKTtcblx0fSxcblxuXHRfX3Jlc3BvbnNlOiBmdW5jdGlvbiggY29udGVudCApIHtcblx0XHRpZiAoIGNvbnRlbnQgKSB7XG5cdFx0XHRjb250ZW50ID0gdGhpcy5fbm9ybWFsaXplKCBjb250ZW50ICk7XG5cdFx0fVxuXHRcdHRoaXMuX3RyaWdnZXIoIFwicmVzcG9uc2VcIiwgbnVsbCwgeyBjb250ZW50OiBjb250ZW50IH0gKTtcblx0XHRpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgY29udGVudCAmJiBjb250ZW50Lmxlbmd0aCAmJiAhdGhpcy5jYW5jZWxTZWFyY2ggKSB7XG5cdFx0XHR0aGlzLl9zdWdnZXN0KCBjb250ZW50ICk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcIm9wZW5cIiApO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHVzZSAuX2Nsb3NlKCkgaW5zdGVhZCBvZiAuY2xvc2UoKSBzbyB3ZSBkb24ndCBjYW5jZWwgZnV0dXJlIHNlYXJjaGVzXG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHRjbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuY2FuY2VsU2VhcmNoID0gdHJ1ZTtcblx0XHR0aGlzLl9jbG9zZSggZXZlbnQgKTtcblx0fSxcblxuXHRfY2xvc2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIFJlbW92ZSB0aGUgaGFuZGxlciB0aGF0IGNsb3NlcyB0aGUgbWVudSBvbiBvdXRzaWRlIGNsaWNrc1xuXHRcdHRoaXMuX29mZiggdGhpcy5kb2N1bWVudCwgXCJtb3VzZWRvd25cIiApO1xuXG5cdFx0aWYgKCB0aGlzLm1lbnUuZWxlbWVudC5pcyggXCI6dmlzaWJsZVwiICkgKSB7XG5cdFx0XHR0aGlzLm1lbnUuZWxlbWVudC5oaWRlKCk7XG5cdFx0XHR0aGlzLm1lbnUuYmx1cigpO1xuXHRcdFx0dGhpcy5pc05ld01lbnUgPSB0cnVlO1xuXHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjbG9zZVwiLCBldmVudCApO1xuXHRcdH1cblx0fSxcblxuXHRfY2hhbmdlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCB0aGlzLnByZXZpb3VzICE9PSB0aGlzLl92YWx1ZSgpICkge1xuXHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQsIHsgaXRlbTogdGhpcy5zZWxlY3RlZEl0ZW0gfSApO1xuXHRcdH1cblx0fSxcblxuXHRfbm9ybWFsaXplOiBmdW5jdGlvbiggaXRlbXMgKSB7XG5cblx0XHQvLyBhc3N1bWUgYWxsIGl0ZW1zIGhhdmUgdGhlIHJpZ2h0IGZvcm1hdCB3aGVuIHRoZSBmaXJzdCBpdGVtIGlzIGNvbXBsZXRlXG5cdFx0aWYgKCBpdGVtcy5sZW5ndGggJiYgaXRlbXNbIDAgXS5sYWJlbCAmJiBpdGVtc1sgMCBdLnZhbHVlICkge1xuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH1cblx0XHRyZXR1cm4gJC5tYXAoIGl0ZW1zLCBmdW5jdGlvbiggaXRlbSApIHtcblx0XHRcdGlmICggdHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bGFiZWw6IGl0ZW0sXG5cdFx0XHRcdFx0dmFsdWU6IGl0ZW1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAkLmV4dGVuZCgge30sIGl0ZW0sIHtcblx0XHRcdFx0bGFiZWw6IGl0ZW0ubGFiZWwgfHwgaXRlbS52YWx1ZSxcblx0XHRcdFx0dmFsdWU6IGl0ZW0udmFsdWUgfHwgaXRlbS5sYWJlbFxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRfc3VnZ2VzdDogZnVuY3Rpb24oIGl0ZW1zICkge1xuXHRcdHZhciB1bCA9IHRoaXMubWVudS5lbGVtZW50LmVtcHR5KCk7XG5cdFx0dGhpcy5fcmVuZGVyTWVudSggdWwsIGl0ZW1zICk7XG5cdFx0dGhpcy5pc05ld01lbnUgPSB0cnVlO1xuXHRcdHRoaXMubWVudS5yZWZyZXNoKCk7XG5cblx0XHQvLyBTaXplIGFuZCBwb3NpdGlvbiBtZW51XG5cdFx0dWwuc2hvdygpO1xuXHRcdHRoaXMuX3Jlc2l6ZU1lbnUoKTtcblx0XHR1bC5wb3NpdGlvbiggJC5leHRlbmQoIHtcblx0XHRcdG9mOiB0aGlzLmVsZW1lbnRcblx0XHR9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKSApO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzICkge1xuXHRcdFx0dGhpcy5tZW51Lm5leHQoKTtcblx0XHR9XG5cblx0XHQvLyBMaXN0ZW4gZm9yIGludGVyYWN0aW9ucyBvdXRzaWRlIG9mIHRoZSB3aWRnZXQgKCM2NjQyKVxuXHRcdHRoaXMuX29uKCB0aGlzLmRvY3VtZW50LCB7XG5cdFx0XHRtb3VzZWRvd246IFwiX2Nsb3NlT25DbGlja091dHNpZGVcIlxuXHRcdH0gKTtcblx0fSxcblxuXHRfcmVzaXplTWVudTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHVsID0gdGhpcy5tZW51LmVsZW1lbnQ7XG5cdFx0dWwub3V0ZXJXaWR0aCggTWF0aC5tYXgoXG5cblx0XHRcdC8vIEZpcmVmb3ggd3JhcHMgbG9uZyB0ZXh0IChwb3NzaWJseSBhIHJvdW5kaW5nIGJ1Zylcblx0XHRcdC8vIHNvIHdlIGFkZCAxcHggdG8gYXZvaWQgdGhlIHdyYXBwaW5nICgjNzUxMylcblx0XHRcdHVsLndpZHRoKCBcIlwiICkub3V0ZXJXaWR0aCgpICsgMSxcblx0XHRcdHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKClcblx0XHQpICk7XG5cdH0sXG5cblx0X3JlbmRlck1lbnU6IGZ1bmN0aW9uKCB1bCwgaXRlbXMgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcdCQuZWFjaCggaXRlbXMsIGZ1bmN0aW9uKCBpbmRleCwgaXRlbSApIHtcblx0XHRcdHRoYXQuX3JlbmRlckl0ZW1EYXRhKCB1bCwgaXRlbSApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRfcmVuZGVySXRlbURhdGE6IGZ1bmN0aW9uKCB1bCwgaXRlbSApIHtcblx0XHRyZXR1cm4gdGhpcy5fcmVuZGVySXRlbSggdWwsIGl0ZW0gKS5kYXRhKCBcInVpLWF1dG9jb21wbGV0ZS1pdGVtXCIsIGl0ZW0gKTtcblx0fSxcblxuXHRfcmVuZGVySXRlbTogZnVuY3Rpb24oIHVsLCBpdGVtICkge1xuXHRcdHJldHVybiAkKCBcIjxsaT5cIiApXG5cdFx0XHQuYXBwZW5kKCAkKCBcIjxkaXY+XCIgKS50ZXh0KCBpdGVtLmxhYmVsICkgKVxuXHRcdFx0LmFwcGVuZFRvKCB1bCApO1xuXHR9LFxuXG5cdF9tb3ZlOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLm1lbnUuZWxlbWVudC5pcyggXCI6dmlzaWJsZVwiICkgKSB7XG5cdFx0XHR0aGlzLnNlYXJjaCggbnVsbCwgZXZlbnQgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLm1lbnUuaXNGaXJzdEl0ZW0oKSAmJiAvXnByZXZpb3VzLy50ZXN0KCBkaXJlY3Rpb24gKSB8fFxuXHRcdFx0XHR0aGlzLm1lbnUuaXNMYXN0SXRlbSgpICYmIC9ebmV4dC8udGVzdCggZGlyZWN0aW9uICkgKSB7XG5cblx0XHRcdGlmICggIXRoaXMuaXNNdWx0aUxpbmUgKSB7XG5cdFx0XHRcdHRoaXMuX3ZhbHVlKCB0aGlzLnRlcm0gKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tZW51LmJsdXIoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5tZW51WyBkaXJlY3Rpb24gXSggZXZlbnQgKTtcblx0fSxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1lbnUuZWxlbWVudDtcblx0fSxcblxuXHRfdmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlTWV0aG9kLmFwcGx5KCB0aGlzLmVsZW1lbnQsIGFyZ3VtZW50cyApO1xuXHR9LFxuXG5cdF9rZXlFdmVudDogZnVuY3Rpb24oIGtleUV2ZW50LCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLmlzTXVsdGlMaW5lIHx8IHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdHRoaXMuX21vdmUoIGtleUV2ZW50LCBldmVudCApO1xuXG5cdFx0XHQvLyBQcmV2ZW50cyBtb3ZpbmcgY3Vyc29yIHRvIGJlZ2lubmluZy9lbmQgb2YgdGhlIHRleHQgZmllbGQgaW4gc29tZSBicm93c2Vyc1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTBcblx0Ly8gV2Ugc2hvdWxkIGJlIGFibGUgdG8ganVzdCB1c2UgdGhpcy5lbGVtZW50LnByb3AoIFwiaXNDb250ZW50RWRpdGFibGVcIiApXG5cdC8vIGJ1dCBoaWRkZW4gZWxlbWVudHMgYWx3YXlzIHJlcG9ydCBmYWxzZSBpbiBDaHJvbWUuXG5cdC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zMTMwODJcblx0X2lzQ29udGVudEVkaXRhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRpZiAoICFlbGVtZW50Lmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgZWRpdGFibGUgPSBlbGVtZW50LnByb3AoIFwiY29udGVudEVkaXRhYmxlXCIgKTtcblxuXHRcdGlmICggZWRpdGFibGUgPT09IFwiaW5oZXJpdFwiICkge1xuXHRcdCAgcmV0dXJuIHRoaXMuX2lzQ29udGVudEVkaXRhYmxlKCBlbGVtZW50LnBhcmVudCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVkaXRhYmxlID09PSBcInRydWVcIjtcblx0fVxufSApO1xuXG4kLmV4dGVuZCggJC51aS5hdXRvY29tcGxldGUsIHtcblx0ZXNjYXBlUmVnZXg6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gdmFsdWUucmVwbGFjZSggL1tcXC1cXFtcXF17fSgpKis/LixcXFxcXFxeJHwjXFxzXS9nLCBcIlxcXFwkJlwiICk7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIGFycmF5LCB0ZXJtICkge1xuXHRcdHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCggJC51aS5hdXRvY29tcGxldGUuZXNjYXBlUmVnZXgoIHRlcm0gKSwgXCJpXCIgKTtcblx0XHRyZXR1cm4gJC5ncmVwKCBhcnJheSwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIG1hdGNoZXIudGVzdCggdmFsdWUubGFiZWwgfHwgdmFsdWUudmFsdWUgfHwgdmFsdWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gTGl2ZSByZWdpb24gZXh0ZW5zaW9uLCBhZGRpbmcgYSBgbWVzc2FnZXNgIG9wdGlvblxuLy8gTk9URTogVGhpcyBpcyBhbiBleHBlcmltZW50YWwgQVBJLiBXZSBhcmUgc3RpbGwgaW52ZXN0aWdhdGluZ1xuLy8gYSBmdWxsIHNvbHV0aW9uIGZvciBzdHJpbmcgbWFuaXB1bGF0aW9uIGFuZCBpbnRlcm5hdGlvbmFsaXphdGlvbi5cbiQud2lkZ2V0KCBcInVpLmF1dG9jb21wbGV0ZVwiLCAkLnVpLmF1dG9jb21wbGV0ZSwge1xuXHRvcHRpb25zOiB7XG5cdFx0bWVzc2FnZXM6IHtcblx0XHRcdG5vUmVzdWx0czogXCJObyBzZWFyY2ggcmVzdWx0cy5cIixcblx0XHRcdHJlc3VsdHM6IGZ1bmN0aW9uKCBhbW91bnQgKSB7XG5cdFx0XHRcdHJldHVybiBhbW91bnQgKyAoIGFtb3VudCA+IDEgPyBcIiByZXN1bHRzIGFyZVwiIDogXCIgcmVzdWx0IGlzXCIgKSArXG5cdFx0XHRcdFx0XCIgYXZhaWxhYmxlLCB1c2UgdXAgYW5kIGRvd24gYXJyb3cga2V5cyB0byBuYXZpZ2F0ZS5cIjtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X19yZXNwb25zZTogZnVuY3Rpb24oIGNvbnRlbnQgKSB7XG5cdFx0dmFyIG1lc3NhZ2U7XG5cdFx0dGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5jYW5jZWxTZWFyY2ggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggY29udGVudCAmJiBjb250ZW50Lmxlbmd0aCApIHtcblx0XHRcdG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMubWVzc2FnZXMucmVzdWx0cyggY29udGVudC5sZW5ndGggKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWVzc2FnZSA9IHRoaXMub3B0aW9ucy5tZXNzYWdlcy5ub1Jlc3VsdHM7XG5cdFx0fVxuXHRcdHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKTtcblx0XHQkKCBcIjxkaXY+XCIgKS50ZXh0KCBtZXNzYWdlICkuYXBwZW5kVG8oIHRoaXMubGl2ZVJlZ2lvbiApO1xuXHR9XG59ICk7XG5cbnJldHVybiAkLnVpLmF1dG9jb21wbGV0ZTtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBCdXR0b24gMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEJ1dHRvblxuLy8+Pmdyb3VwOiBXaWRnZXRzXG4vLz4+ZGVzY3JpcHRpb246IEVuaGFuY2VzIGEgZm9ybSB3aXRoIHRoZW1lYWJsZSBidXR0b25zLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2J1dHRvbi9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9idXR0b24vXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9idXR0b24uY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cblx0XHRcdC8vIFRoZXNlIGFyZSBvbmx5IGZvciBiYWNrY29tcGF0XG5cdFx0XHQvLyBUT0RPOiBSZW1vdmUgYWZ0ZXIgMS4xMlxuXHRcdFx0XCIuL2NvbnRyb2xncm91cFwiLFxuXHRcdFx0XCIuL2NoZWNrYm94cmFkaW9cIixcblxuXHRcdFx0XCIuLi9rZXljb2RlXCIsXG5cdFx0XHRcIi4uL3dpZGdldFwiXG5cdFx0XSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuXG4kLndpZGdldCggXCJ1aS5idXR0b25cIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMFwiLFxuXHRkZWZhdWx0RWxlbWVudDogXCI8YnV0dG9uPlwiLFxuXHRvcHRpb25zOiB7XG5cdFx0Y2xhc3Nlczoge1xuXHRcdFx0XCJ1aS1idXR0b25cIjogXCJ1aS1jb3JuZXItYWxsXCJcblx0XHR9LFxuXHRcdGRpc2FibGVkOiBudWxsLFxuXHRcdGljb246IG51bGwsXG5cdFx0aWNvblBvc2l0aW9uOiBcImJlZ2lubmluZ1wiLFxuXHRcdGxhYmVsOiBudWxsLFxuXHRcdHNob3dMYWJlbDogdHJ1ZVxuXHR9LFxuXG5cdF9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGlzYWJsZWQsXG5cblx0XHRcdC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBjYXNlcyBsaWtlIGluIGpRdWVyeSBNb2JpbGUgd2hlcmUgdGhlIGJhc2Ugd2lkZ2V0IGRvZXMgaGF2ZVxuXHRcdFx0Ly8gYW4gaW1wbGVtZW50YXRpb24gb2YgX2dldENyZWF0ZU9wdGlvbnNcblx0XHRcdG9wdGlvbnMgPSB0aGlzLl9zdXBlcigpIHx8IHt9O1xuXG5cdFx0dGhpcy5pc0lucHV0ID0gdGhpcy5lbGVtZW50LmlzKCBcImlucHV0XCIgKTtcblxuXHRcdGRpc2FibGVkID0gdGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQ7XG5cdFx0aWYgKCBkaXNhYmxlZCAhPSBudWxsICkge1xuXHRcdFx0b3B0aW9ucy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdHRoaXMub3JpZ2luYWxMYWJlbCA9IHRoaXMuaXNJbnB1dCA/IHRoaXMuZWxlbWVudC52YWwoKSA6IHRoaXMuZWxlbWVudC5odG1sKCk7XG5cdFx0aWYgKCB0aGlzLm9yaWdpbmFsTGFiZWwgKSB7XG5cdFx0XHRvcHRpb25zLmxhYmVsID0gdGhpcy5vcmlnaW5hbExhYmVsO1xuXHRcdH1cblxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXMub3B0aW9uLnNob3dMYWJlbCAmICF0aGlzLm9wdGlvbnMuaWNvbiApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zaG93TGFiZWwgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIFdlIGhhdmUgdG8gY2hlY2sgdGhlIG9wdGlvbiBhZ2FpbiBoZXJlIGV2ZW4gdGhvdWdoIHdlIGRpZCBpbiBfZ2V0Q3JlYXRlT3B0aW9ucyxcblx0XHQvLyBiZWNhdXNlIG51bGwgbWF5IGhhdmUgYmVlbiBwYXNzZWQgb24gaW5pdCB3aGljaCB3b3VsZCBvdmVycmlkZSB3aGF0IHdhcyBzZXQgaW5cblx0XHQvLyBfZ2V0Q3JlYXRlT3B0aW9uc1xuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSB0aGlzLmVsZW1lbnRbIDAgXS5kaXNhYmxlZCB8fCBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmhhc1RpdGxlID0gISF0aGlzLmVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiICk7XG5cblx0XHQvLyBDaGVjayB0byBzZWUgaWYgdGhlIGxhYmVsIG5lZWRzIHRvIGJlIHNldCBvciBpZiBpdHMgYWxyZWFkeSBjb3JyZWN0XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMubGFiZWwgJiYgdGhpcy5vcHRpb25zLmxhYmVsICE9PSB0aGlzLm9yaWdpbmFsTGFiZWwgKSB7XG5cdFx0XHRpZiAoIHRoaXMuaXNJbnB1dCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnZhbCggdGhpcy5vcHRpb25zLmxhYmVsICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuaHRtbCggdGhpcy5vcHRpb25zLmxhYmVsICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLWJ1dHRvblwiLCBcInVpLXdpZGdldFwiICk7XG5cdFx0dGhpcy5fc2V0T3B0aW9uKCBcImRpc2FibGVkXCIsIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApO1xuXHRcdHRoaXMuX2VuaGFuY2UoKTtcblxuXHRcdGlmICggdGhpcy5lbGVtZW50LmlzKCBcImFcIiApICkge1xuXHRcdFx0dGhpcy5fb24oIHtcblx0XHRcdFx0XCJrZXl1cFwiOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuU1BBQ0UgKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQaGFudG9tSlMgPD0gMS45LCBJRSA4IE9ubHlcblx0XHRcdFx0XHRcdC8vIElmIGEgbmF0aXZlIGNsaWNrIGlzIGF2YWlsYWJsZSB1c2UgaXQgc28gd2UgYWN0dWFsbHkgY2F1c2UgbmF2aWdhdGlvblxuXHRcdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIGp1c3QgdHJpZ2dlciBhIGNsaWNrIGV2ZW50XG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuZWxlbWVudFsgMCBdLmNsaWNrICkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRbIDAgXS5jbGljaygpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIFwiY2xpY2tcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblx0fSxcblxuXHRfZW5oYW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpcy5lbGVtZW50LmlzKCBcImJ1dHRvblwiICkgKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXR0ciggXCJyb2xlXCIsIFwiYnV0dG9uXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5pY29uICkge1xuXHRcdFx0dGhpcy5fdXBkYXRlSWNvbiggXCJpY29uXCIsIHRoaXMub3B0aW9ucy5pY29uICk7XG5cdFx0XHR0aGlzLl91cGRhdGVUb29sdGlwKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF91cGRhdGVUb29sdGlwOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnRpdGxlID0gdGhpcy5lbGVtZW50LmF0dHIoIFwidGl0bGVcIiApO1xuXG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLnNob3dMYWJlbCAmJiAhdGhpcy50aXRsZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcInRpdGxlXCIsIHRoaXMub3B0aW9ucy5sYWJlbCApO1xuXHRcdH1cblx0fSxcblxuXHRfdXBkYXRlSWNvbjogZnVuY3Rpb24oIG9wdGlvbiwgdmFsdWUgKSB7XG5cdFx0dmFyIGljb24gPSBvcHRpb24gIT09IFwiaWNvblBvc2l0aW9uXCIsXG5cdFx0XHRwb3NpdGlvbiA9IGljb24gPyB0aGlzLm9wdGlvbnMuaWNvblBvc2l0aW9uIDogdmFsdWUsXG5cdFx0XHRkaXNwbGF5QmxvY2sgPSBwb3NpdGlvbiA9PT0gXCJ0b3BcIiB8fCBwb3NpdGlvbiA9PT0gXCJib3R0b21cIjtcblxuXHRcdC8vIENyZWF0ZSBpY29uXG5cdFx0aWYgKCAhdGhpcy5pY29uICkge1xuXHRcdFx0dGhpcy5pY29uID0gJCggXCI8c3Bhbj5cIiApO1xuXG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCBcInVpLWJ1dHRvbi1pY29uXCIsIFwidWktaWNvblwiICk7XG5cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5zaG93TGFiZWwgKSB7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLWJ1dHRvbi1pY29uLW9ubHlcIiApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIGljb24gKSB7XG5cblx0XHRcdC8vIElmIHdlIGFyZSB1cGRhdGluZyB0aGUgaWNvbiByZW1vdmUgdGhlIG9sZCBpY29uIGNsYXNzXG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5pY29uLCBudWxsLCB0aGlzLm9wdGlvbnMuaWNvbiApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGFyZSB1cGRhdGluZyB0aGUgaWNvbiBhZGQgdGhlIG5ldyBpY29uIGNsYXNzXG5cdFx0aWYgKCBpY29uICkge1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9hdHRhY2hJY29uKCBwb3NpdGlvbiApO1xuXG5cdFx0Ly8gSWYgdGhlIGljb24gaXMgb24gdG9wIG9yIGJvdHRvbSB3ZSBuZWVkIHRvIGFkZCB0aGUgdWktd2lkZ2V0LWljb24tYmxvY2sgY2xhc3MgYW5kIHJlbW92ZVxuXHRcdC8vIHRoZSBpY29uU3BhY2UgaWYgdGhlcmUgaXMgb25lLlxuXHRcdGlmICggZGlzcGxheUJsb2NrICkge1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgXCJ1aS13aWRnZXQtaWNvbi1ibG9ja1wiICk7XG5cdFx0XHRpZiAoIHRoaXMuaWNvblNwYWNlICkge1xuXHRcdFx0XHR0aGlzLmljb25TcGFjZS5yZW1vdmUoKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBQb3NpdGlvbiBpcyBiZWdpbm5pbmcgb3IgZW5kIHNvIHJlbW92ZSB0aGUgdWktd2lkZ2V0LWljb24tYmxvY2sgY2xhc3MgYW5kIGFkZCB0aGVcblx0XHRcdC8vIHNwYWNlIGlmIGl0IGRvZXMgbm90IGV4aXN0XG5cdFx0XHRpZiAoICF0aGlzLmljb25TcGFjZSApIHtcblx0XHRcdFx0dGhpcy5pY29uU3BhY2UgPSAkKCBcIjxzcGFuPiA8L3NwYW4+XCIgKTtcblx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaWNvblNwYWNlLCBcInVpLWJ1dHRvbi1pY29uLXNwYWNlXCIgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmljb24sIG51bGwsIFwidWktd2lnZXQtaWNvbi1ibG9ja1wiICk7XG5cdFx0XHR0aGlzLl9hdHRhY2hJY29uU3BhY2UoIHBvc2l0aW9uICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKTtcblxuXHRcdGlmICggdGhpcy5pY29uICkge1xuXHRcdFx0dGhpcy5pY29uLnJlbW92ZSgpO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuaWNvblNwYWNlICkge1xuXHRcdFx0dGhpcy5pY29uU3BhY2UucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdGlmICggIXRoaXMuaGFzVGl0bGUgKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJ0aXRsZVwiICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9hdHRhY2hJY29uU3BhY2U6IGZ1bmN0aW9uKCBpY29uUG9zaXRpb24gKSB7XG5cdFx0dGhpcy5pY29uWyAvXig/OmVuZHxib3R0b20pLy50ZXN0KCBpY29uUG9zaXRpb24gKSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIgXSggdGhpcy5pY29uU3BhY2UgKTtcblx0fSxcblxuXHRfYXR0YWNoSWNvbjogZnVuY3Rpb24oIGljb25Qb3NpdGlvbiApIHtcblx0XHR0aGlzLmVsZW1lbnRbIC9eKD86ZW5kfGJvdHRvbSkvLnRlc3QoIGljb25Qb3NpdGlvbiApID8gXCJhcHBlbmRcIiA6IFwicHJlcGVuZFwiIF0oIHRoaXMuaWNvbiApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgbmV3U2hvd0xhYmVsID0gb3B0aW9ucy5zaG93TGFiZWwgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zaG93TGFiZWwgOlxuXHRcdFx0XHRvcHRpb25zLnNob3dMYWJlbCxcblx0XHRcdG5ld0ljb24gPSBvcHRpb25zLmljb24gPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5pY29uIDogb3B0aW9ucy5pY29uO1xuXG5cdFx0aWYgKCAhbmV3U2hvd0xhYmVsICYmICFuZXdJY29uICkge1xuXHRcdFx0b3B0aW9ucy5zaG93TGFiZWwgPSB0cnVlO1xuXHRcdH1cblx0XHR0aGlzLl9zdXBlciggb3B0aW9ucyApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcImljb25cIiApIHtcblx0XHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHRcdHRoaXMuX3VwZGF0ZUljb24oIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuaWNvbiApIHtcblx0XHRcdFx0dGhpcy5pY29uLnJlbW92ZSgpO1xuXHRcdFx0XHRpZiAoIHRoaXMuaWNvblNwYWNlICkge1xuXHRcdFx0XHRcdHRoaXMuaWNvblNwYWNlLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiaWNvblBvc2l0aW9uXCIgKSB7XG5cdFx0XHR0aGlzLl91cGRhdGVJY29uKCBrZXksIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIGNhbid0IGVuZCB1cCB3aXRoIGEgYnV0dG9uIHRoYXQgaGFzIG5laXRoZXIgdGV4dCBub3IgaWNvblxuXHRcdGlmICgga2V5ID09PSBcInNob3dMYWJlbFwiICkge1xuXHRcdFx0XHR0aGlzLl90b2dnbGVDbGFzcyggXCJ1aS1idXR0b24taWNvbi1vbmx5XCIsIG51bGwsICF2YWx1ZSApO1xuXHRcdFx0XHR0aGlzLl91cGRhdGVUb29sdGlwKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwibGFiZWxcIiApIHtcblx0XHRcdGlmICggdGhpcy5pc0lucHV0ICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQudmFsKCB2YWx1ZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBpY29uLCBhcHBlbmQgaXQsIGVsc2Ugbm90aGluZyB0aGVuIGFwcGVuZCB0aGUgdmFsdWVcblx0XHRcdFx0Ly8gdGhpcyBhdm9pZHMgcmVtb3ZhbCBvZiB0aGUgaWNvbiB3aGVuIHNldHRpbmcgbGFiZWwgdGV4dFxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuaHRtbCggdmFsdWUgKTtcblx0XHRcdFx0aWYgKCB0aGlzLmljb24gKSB7XG5cdFx0XHRcdFx0dGhpcy5fYXR0YWNoSWNvbiggdGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiApO1xuXHRcdFx0XHRcdHRoaXMuX2F0dGFjaEljb25TcGFjZSggdGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgKSB7XG5cdFx0XHR0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCB2YWx1ZSApO1xuXHRcdFx0dGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQgPSB2YWx1ZTtcblx0XHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5ibHVyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRvIG9ubHkgY2hlY2sgZGlzYWJsZWQgaWYgaXRzIGFuIGVsZW1lbnQgdGhhdCBzdXBwb3J0cyB0aGlzIG90aGVyd2lzZVxuXHRcdC8vIGNoZWNrIGZvciB0aGUgZGlzYWJsZWQgY2xhc3MgdG8gZGV0ZXJtaW5lIHN0YXRlXG5cdFx0dmFyIGlzRGlzYWJsZWQgPSB0aGlzLmVsZW1lbnQuaXMoIFwiaW5wdXQsIGJ1dHRvblwiICkgP1xuXHRcdFx0dGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQgOiB0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoIFwidWktYnV0dG9uLWRpc2FibGVkXCIgKTtcblxuXHRcdGlmICggaXNEaXNhYmxlZCAhPT0gdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9ucyggeyBkaXNhYmxlZDogaXNEaXNhYmxlZCB9ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdXBkYXRlVG9vbHRpcCgpO1xuXHR9XG59ICk7XG5cbi8vIERFUFJFQ0FURURcbmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkge1xuXG5cdC8vIFRleHQgYW5kIEljb25zIG9wdGlvbnNcblx0JC53aWRnZXQoIFwidWkuYnV0dG9uXCIsICQudWkuYnV0dG9uLCB7XG5cdFx0b3B0aW9uczoge1xuXHRcdFx0dGV4dDogdHJ1ZSxcblx0XHRcdGljb25zOiB7XG5cdFx0XHRcdHByaW1hcnk6IG51bGwsXG5cdFx0XHRcdHNlY29uZGFyeTogbnVsbFxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnNob3dMYWJlbCAmJiAhdGhpcy5vcHRpb25zLnRleHQgKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zaG93TGFiZWwgPSB0aGlzLm9wdGlvbnMudGV4dDtcblx0XHRcdH1cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5zaG93TGFiZWwgJiYgdGhpcy5vcHRpb25zLnRleHQgKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy50ZXh0ID0gdGhpcy5vcHRpb25zLnNob3dMYWJlbDtcblx0XHRcdH1cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5pY29uICYmICggdGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgfHxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbnMuc2Vjb25kYXJ5ICkgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgKSB7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmljb24gPSB0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbiA9IHRoaXMub3B0aW9ucy5pY29ucy5zZWNvbmRhcnk7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiA9IFwiZW5kXCI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMub3B0aW9ucy5pY29uICkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeSA9IHRoaXMub3B0aW9ucy5pY29uO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fc3VwZXIoKTtcblx0XHR9LFxuXG5cdFx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGtleSA9PT0gXCJ0ZXh0XCIgKSB7XG5cdFx0XHRcdHRoaXMuX3N1cGVyKCBcInNob3dMYWJlbFwiLCB2YWx1ZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGtleSA9PT0gXCJzaG93TGFiZWxcIiApIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLnRleHQgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmICgga2V5ID09PSBcImljb25cIiApIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmICgga2V5ID09PSBcImljb25zXCIgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUucHJpbWFyeSApIHtcblx0XHRcdFx0XHR0aGlzLl9zdXBlciggXCJpY29uXCIsIHZhbHVlLnByaW1hcnkgKTtcblx0XHRcdFx0XHR0aGlzLl9zdXBlciggXCJpY29uUG9zaXRpb25cIiwgXCJiZWdpbm5pbmdcIiApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5zZWNvbmRhcnkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fc3VwZXIoIFwiaWNvblwiLCB2YWx1ZS5zZWNvbmRhcnkgKTtcblx0XHRcdFx0XHR0aGlzLl9zdXBlciggXCJpY29uUG9zaXRpb25cIiwgXCJlbmRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH0gKTtcblxuXHQkLmZuLmJ1dHRvbiA9ICggZnVuY3Rpb24oIG9yaWcgKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhdGhpcy5sZW5ndGggfHwgKCB0aGlzLmxlbmd0aCAmJiB0aGlzWyAwIF0udGFnTmFtZSAhPT0gXCJJTlBVVFwiICkgfHxcblx0XHRcdFx0XHQoIHRoaXMubGVuZ3RoICYmIHRoaXNbIDAgXS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgKFxuXHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBcInR5cGVcIiApICE9PSBcImNoZWNrYm94XCIgJiYgdGhpcy5hdHRyKCBcInR5cGVcIiApICE9PSBcInJhZGlvXCJcblx0XHRcdFx0XHQpICkgKSB7XG5cdFx0XHRcdHJldHVybiBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH1cblx0XHRcdGlmICggISQudWkuY2hlY2tib3hyYWRpbyApIHtcblx0XHRcdFx0JC5lcnJvciggXCJDaGVja2JveHJhZGlvIHdpZGdldCBtaXNzaW5nXCIgKTtcblx0XHRcdH1cblx0XHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY2hlY2tib3hyYWRpbygge1xuXHRcdFx0XHRcdFwiaWNvblwiOiBmYWxzZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5jaGVja2JveHJhZGlvLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXHR9ICkoICQuZm4uYnV0dG9uICk7XG5cblx0JC5mbi5idXR0b25zZXQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoICEkLnVpLmNvbnRyb2xncm91cCApIHtcblx0XHRcdCQuZXJyb3IoIFwiQ29udHJvbGdyb3VwIHdpZGdldCBtaXNzaW5nXCIgKTtcblx0XHR9XG5cdFx0aWYgKCBhcmd1bWVudHNbIDAgXSA9PT0gXCJvcHRpb25cIiAmJiBhcmd1bWVudHNbIDEgXSA9PT0gXCJpdGVtc1wiICYmIGFyZ3VtZW50c1sgMiBdICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udHJvbGdyb3VwLmFwcGx5KCB0aGlzLFxuXHRcdFx0XHRbIGFyZ3VtZW50c1sgMCBdLCBcIml0ZW1zLmJ1dHRvblwiLCBhcmd1bWVudHNbIDIgXSBdICk7XG5cdFx0fVxuXHRcdGlmICggYXJndW1lbnRzWyAwIF0gPT09IFwib3B0aW9uXCIgJiYgYXJndW1lbnRzWyAxIF0gPT09IFwiaXRlbXNcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRyb2xncm91cC5hcHBseSggdGhpcywgWyBhcmd1bWVudHNbIDAgXSwgXCJpdGVtcy5idXR0b25cIiBdICk7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIGFyZ3VtZW50c1sgMCBdID09PSBcIm9iamVjdFwiICYmIGFyZ3VtZW50c1sgMCBdLml0ZW1zICkge1xuXHRcdFx0YXJndW1lbnRzWyAwIF0uaXRlbXMgPSB7XG5cdFx0XHRcdGJ1dHRvbjogYXJndW1lbnRzWyAwIF0uaXRlbXNcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNvbnRyb2xncm91cC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH07XG59XG5cbnJldHVybiAkLnVpLmJ1dHRvbjtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBEaWFsb2cgMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IERpYWxvZ1xuLy8+Pmdyb3VwOiBXaWRnZXRzXG4vLz4+ZGVzY3JpcHRpb246IERpc3BsYXlzIGN1c3RvbWl6YWJsZSBkaWFsb2cgd2luZG93cy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kaWFsb2cvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZGlhbG9nL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvZGlhbG9nLmNzc1xuLy8+PmNzcy50aGVtZTogLi4vLi4vdGhlbWVzL2Jhc2UvdGhlbWUuY3NzXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbXG5cdFx0XHRcImpxdWVyeVwiLFxuXHRcdFx0XCIuL2J1dHRvblwiLFxuXHRcdFx0XCIuL2RyYWdnYWJsZVwiLFxuXHRcdFx0XCIuL21vdXNlXCIsXG5cdFx0XHRcIi4vcmVzaXphYmxlXCIsXG5cdFx0XHRcIi4uL2ZvY3VzYWJsZVwiLFxuXHRcdFx0XCIuLi9rZXljb2RlXCIsXG5cdFx0XHRcIi4uL3Bvc2l0aW9uXCIsXG5cdFx0XHRcIi4uL3NhZmUtYWN0aXZlLWVsZW1lbnRcIixcblx0XHRcdFwiLi4vc2FmZS1ibHVyXCIsXG5cdFx0XHRcIi4uL3RhYmJhYmxlXCIsXG5cdFx0XHRcIi4uL3VuaXF1ZS1pZFwiLFxuXHRcdFx0XCIuLi92ZXJzaW9uXCIsXG5cdFx0XHRcIi4uL3dpZGdldFwiXG5cdFx0XSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuXG4kLndpZGdldCggXCJ1aS5kaWFsb2dcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMFwiLFxuXHRvcHRpb25zOiB7XG5cdFx0YXBwZW5kVG86IFwiYm9keVwiLFxuXHRcdGF1dG9PcGVuOiB0cnVlLFxuXHRcdGJ1dHRvbnM6IFtdLFxuXHRcdGNsYXNzZXM6IHtcblx0XHRcdFwidWktZGlhbG9nXCI6IFwidWktY29ybmVyLWFsbFwiLFxuXHRcdFx0XCJ1aS1kaWFsb2ctdGl0bGViYXJcIjogXCJ1aS1jb3JuZXItYWxsXCJcblx0XHR9LFxuXHRcdGNsb3NlT25Fc2NhcGU6IHRydWUsXG5cdFx0Y2xvc2VUZXh0OiBcIkNsb3NlXCIsXG5cdFx0ZHJhZ2dhYmxlOiB0cnVlLFxuXHRcdGhpZGU6IG51bGwsXG5cdFx0aGVpZ2h0OiBcImF1dG9cIixcblx0XHRtYXhIZWlnaHQ6IG51bGwsXG5cdFx0bWF4V2lkdGg6IG51bGwsXG5cdFx0bWluSGVpZ2h0OiAxNTAsXG5cdFx0bWluV2lkdGg6IDE1MCxcblx0XHRtb2RhbDogZmFsc2UsXG5cdFx0cG9zaXRpb246IHtcblx0XHRcdG15OiBcImNlbnRlclwiLFxuXHRcdFx0YXQ6IFwiY2VudGVyXCIsXG5cdFx0XHRvZjogd2luZG93LFxuXHRcdFx0Y29sbGlzaW9uOiBcImZpdFwiLFxuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIHRpdGxlYmFyIGlzIGFsd2F5cyB2aXNpYmxlXG5cdFx0XHR1c2luZzogZnVuY3Rpb24oIHBvcyApIHtcblx0XHRcdFx0dmFyIHRvcE9mZnNldCA9ICQoIHRoaXMgKS5jc3MoIHBvcyApLm9mZnNldCgpLnRvcDtcblx0XHRcdFx0aWYgKCB0b3BPZmZzZXQgPCAwICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5jc3MoIFwidG9wXCIsIHBvcy50b3AgLSB0b3BPZmZzZXQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVzaXphYmxlOiB0cnVlLFxuXHRcdHNob3c6IG51bGwsXG5cdFx0dGl0bGU6IG51bGwsXG5cdFx0d2lkdGg6IDMwMCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGJlZm9yZUNsb3NlOiBudWxsLFxuXHRcdGNsb3NlOiBudWxsLFxuXHRcdGRyYWc6IG51bGwsXG5cdFx0ZHJhZ1N0YXJ0OiBudWxsLFxuXHRcdGRyYWdTdG9wOiBudWxsLFxuXHRcdGZvY3VzOiBudWxsLFxuXHRcdG9wZW46IG51bGwsXG5cdFx0cmVzaXplOiBudWxsLFxuXHRcdHJlc2l6ZVN0YXJ0OiBudWxsLFxuXHRcdHJlc2l6ZVN0b3A6IG51bGxcblx0fSxcblxuXHRzaXplUmVsYXRlZE9wdGlvbnM6IHtcblx0XHRidXR0b25zOiB0cnVlLFxuXHRcdGhlaWdodDogdHJ1ZSxcblx0XHRtYXhIZWlnaHQ6IHRydWUsXG5cdFx0bWF4V2lkdGg6IHRydWUsXG5cdFx0bWluSGVpZ2h0OiB0cnVlLFxuXHRcdG1pbldpZHRoOiB0cnVlLFxuXHRcdHdpZHRoOiB0cnVlXG5cdH0sXG5cblx0cmVzaXphYmxlUmVsYXRlZE9wdGlvbnM6IHtcblx0XHRtYXhIZWlnaHQ6IHRydWUsXG5cdFx0bWF4V2lkdGg6IHRydWUsXG5cdFx0bWluSGVpZ2h0OiB0cnVlLFxuXHRcdG1pbldpZHRoOiB0cnVlXG5cdH0sXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5vcmlnaW5hbENzcyA9IHtcblx0XHRcdGRpc3BsYXk6IHRoaXMuZWxlbWVudFsgMCBdLnN0eWxlLmRpc3BsYXksXG5cdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50WyAwIF0uc3R5bGUud2lkdGgsXG5cdFx0XHRtaW5IZWlnaHQ6IHRoaXMuZWxlbWVudFsgMCBdLnN0eWxlLm1pbkhlaWdodCxcblx0XHRcdG1heEhlaWdodDogdGhpcy5lbGVtZW50WyAwIF0uc3R5bGUubWF4SGVpZ2h0LFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmVsZW1lbnRbIDAgXS5zdHlsZS5oZWlnaHRcblx0XHR9O1xuXHRcdHRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IHtcblx0XHRcdHBhcmVudDogdGhpcy5lbGVtZW50LnBhcmVudCgpLFxuXHRcdFx0aW5kZXg6IHRoaXMuZWxlbWVudC5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4KCB0aGlzLmVsZW1lbnQgKVxuXHRcdH07XG5cdFx0dGhpcy5vcmlnaW5hbFRpdGxlID0gdGhpcy5lbGVtZW50LmF0dHIoIFwidGl0bGVcIiApO1xuXHRcdGlmICggdGhpcy5vcHRpb25zLnRpdGxlID09IG51bGwgJiYgdGhpcy5vcmlnaW5hbFRpdGxlICE9IG51bGwgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMudGl0bGUgPSB0aGlzLm9yaWdpbmFsVGl0bGU7XG5cdFx0fVxuXG5cdFx0Ly8gRGlhbG9ncyBjYW4ndCBiZSBkaXNhYmxlZFxuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5fY3JlYXRlV3JhcHBlcigpO1xuXG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQuc2hvdygpXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJ0aXRsZVwiIClcblx0XHRcdC5hcHBlbmRUbyggdGhpcy51aURpYWxvZyApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktZGlhbG9nLWNvbnRlbnRcIiwgXCJ1aS13aWRnZXQtY29udGVudFwiICk7XG5cblx0XHR0aGlzLl9jcmVhdGVUaXRsZWJhcigpO1xuXHRcdHRoaXMuX2NyZWF0ZUJ1dHRvblBhbmUoKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmRyYWdnYWJsZSAmJiAkLmZuLmRyYWdnYWJsZSApIHtcblx0XHRcdHRoaXMuX21ha2VEcmFnZ2FibGUoKTtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMucmVzaXphYmxlICYmICQuZm4ucmVzaXphYmxlICkge1xuXHRcdFx0dGhpcy5fbWFrZVJlc2l6YWJsZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fdHJhY2tGb2N1cygpO1xuXHR9LFxuXG5cdF9pbml0OiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5hdXRvT3BlbiApIHtcblx0XHRcdHRoaXMub3BlbigpO1xuXHRcdH1cblx0fSxcblxuXHRfYXBwZW5kVG86IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5vcHRpb25zLmFwcGVuZFRvO1xuXHRcdGlmICggZWxlbWVudCAmJiAoIGVsZW1lbnQuanF1ZXJ5IHx8IGVsZW1lbnQubm9kZVR5cGUgKSApIHtcblx0XHRcdHJldHVybiAkKCBlbGVtZW50ICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmRvY3VtZW50LmZpbmQoIGVsZW1lbnQgfHwgXCJib2R5XCIgKS5lcSggMCApO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV4dCxcblx0XHRcdG9yaWdpbmFsUG9zaXRpb24gPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247XG5cblx0XHR0aGlzLl91bnRyYWNrSW5zdGFuY2UoKTtcblx0XHR0aGlzLl9kZXN0cm95T3ZlcmxheSgpO1xuXG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQucmVtb3ZlVW5pcXVlSWQoKVxuXHRcdFx0LmNzcyggdGhpcy5vcmlnaW5hbENzcyApXG5cblx0XHRcdC8vIFdpdGhvdXQgZGV0YWNoaW5nIGZpcnN0LCB0aGUgZm9sbG93aW5nIGJlY29tZXMgcmVhbGx5IHNsb3dcblx0XHRcdC5kZXRhY2goKTtcblxuXHRcdHRoaXMudWlEaWFsb2cucmVtb3ZlKCk7XG5cblx0XHRpZiAoIHRoaXMub3JpZ2luYWxUaXRsZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcInRpdGxlXCIsIHRoaXMub3JpZ2luYWxUaXRsZSApO1xuXHRcdH1cblxuXHRcdG5leHQgPSBvcmlnaW5hbFBvc2l0aW9uLnBhcmVudC5jaGlsZHJlbigpLmVxKCBvcmlnaW5hbFBvc2l0aW9uLmluZGV4ICk7XG5cblx0XHQvLyBEb24ndCB0cnkgdG8gcGxhY2UgdGhlIGRpYWxvZyBuZXh0IHRvIGl0c2VsZiAoIzg2MTMpXG5cdFx0aWYgKCBuZXh0Lmxlbmd0aCAmJiBuZXh0WyAwIF0gIT09IHRoaXMuZWxlbWVudFsgMCBdICkge1xuXHRcdFx0bmV4dC5iZWZvcmUoIHRoaXMuZWxlbWVudCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcmlnaW5hbFBvc2l0aW9uLnBhcmVudC5hcHBlbmQoIHRoaXMuZWxlbWVudCApO1xuXHRcdH1cblx0fSxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnVpRGlhbG9nO1xuXHR9LFxuXG5cdGRpc2FibGU6ICQubm9vcCxcblx0ZW5hYmxlOiAkLm5vb3AsXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHRpZiAoICF0aGlzLl9pc09wZW4gfHwgdGhpcy5fdHJpZ2dlciggXCJiZWZvcmVDbG9zZVwiLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9pc09wZW4gPSBmYWxzZTtcblx0XHR0aGlzLl9mb2N1c2VkRWxlbWVudCA9IG51bGw7XG5cdFx0dGhpcy5fZGVzdHJveU92ZXJsYXkoKTtcblx0XHR0aGlzLl91bnRyYWNrSW5zdGFuY2UoKTtcblxuXHRcdGlmICggIXRoaXMub3BlbmVyLmZpbHRlciggXCI6Zm9jdXNhYmxlXCIgKS50cmlnZ2VyKCBcImZvY3VzXCIgKS5sZW5ndGggKSB7XG5cblx0XHRcdC8vIEhpZGluZyBhIGZvY3VzZWQgZWxlbWVudCBkb2Vzbid0IHRyaWdnZXIgYmx1ciBpbiBXZWJLaXRcblx0XHRcdC8vIHNvIGluIGNhc2Ugd2UgaGF2ZSBub3RoaW5nIHRvIGZvY3VzIG9uLCBleHBsaWNpdGx5IGJsdXIgdGhlIGFjdGl2ZSBlbGVtZW50XG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDcxODJcblx0XHRcdCQudWkuc2FmZUJsdXIoICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faGlkZSggdGhpcy51aURpYWxvZywgdGhpcy5vcHRpb25zLmhpZGUsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhhdC5fdHJpZ2dlciggXCJjbG9zZVwiLCBldmVudCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRpc09wZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pc09wZW47XG5cdH0sXG5cblx0bW92ZVRvVG9wOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9tb3ZlVG9Ub3AoKTtcblx0fSxcblxuXHRfbW92ZVRvVG9wOiBmdW5jdGlvbiggZXZlbnQsIHNpbGVudCApIHtcblx0XHR2YXIgbW92ZWQgPSBmYWxzZSxcblx0XHRcdHpJbmRpY2VzID0gdGhpcy51aURpYWxvZy5zaWJsaW5ncyggXCIudWktZnJvbnQ6dmlzaWJsZVwiICkubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICskKCB0aGlzICkuY3NzKCBcInotaW5kZXhcIiApO1xuXHRcdFx0fSApLmdldCgpLFxuXHRcdFx0ekluZGV4TWF4ID0gTWF0aC5tYXguYXBwbHkoIG51bGwsIHpJbmRpY2VzICk7XG5cblx0XHRpZiAoIHpJbmRleE1heCA+PSArdGhpcy51aURpYWxvZy5jc3MoIFwiei1pbmRleFwiICkgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLmNzcyggXCJ6LWluZGV4XCIsIHpJbmRleE1heCArIDEgKTtcblx0XHRcdG1vdmVkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIG1vdmVkICYmICFzaWxlbnQgKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImZvY3VzXCIsIGV2ZW50ICk7XG5cdFx0fVxuXHRcdHJldHVybiBtb3ZlZDtcblx0fSxcblxuXHRvcGVuOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCB0aGlzLl9pc09wZW4gKSB7XG5cdFx0XHRpZiAoIHRoaXMuX21vdmVUb1RvcCgpICkge1xuXHRcdFx0XHR0aGlzLl9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5faXNPcGVuID0gdHJ1ZTtcblx0XHR0aGlzLm9wZW5lciA9ICQoICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApICk7XG5cblx0XHR0aGlzLl9zaXplKCk7XG5cdFx0dGhpcy5fcG9zaXRpb24oKTtcblx0XHR0aGlzLl9jcmVhdGVPdmVybGF5KCk7XG5cdFx0dGhpcy5fbW92ZVRvVG9wKCBudWxsLCB0cnVlICk7XG5cblx0XHQvLyBFbnN1cmUgdGhlIG92ZXJsYXkgaXMgbW92ZWQgdG8gdGhlIHRvcCB3aXRoIHRoZSBkaWFsb2csIGJ1dCBvbmx5IHdoZW5cblx0XHQvLyBvcGVuaW5nLiBUaGUgb3ZlcmxheSBzaG91bGRuJ3QgbW92ZSBhZnRlciB0aGUgZGlhbG9nIGlzIG9wZW4gc28gdGhhdFxuXHRcdC8vIG1vZGVsZXNzIGRpYWxvZ3Mgb3BlbmVkIGFmdGVyIHRoZSBtb2RhbCBkaWFsb2cgc3RhY2sgcHJvcGVybHkuXG5cdFx0aWYgKCB0aGlzLm92ZXJsYXkgKSB7XG5cdFx0XHR0aGlzLm92ZXJsYXkuY3NzKCBcInotaW5kZXhcIiwgdGhpcy51aURpYWxvZy5jc3MoIFwiei1pbmRleFwiICkgLSAxICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc2hvdyggdGhpcy51aURpYWxvZywgdGhpcy5vcHRpb25zLnNob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhhdC5fZm9jdXNUYWJiYWJsZSgpO1xuXHRcdFx0dGhhdC5fdHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0fSApO1xuXG5cdFx0Ly8gVHJhY2sgdGhlIGRpYWxvZyBpbW1lZGlhdGVseSB1cG9uIG9wZW5lbmluZyBpbiBjYXNlIGEgZm9jdXMgZXZlbnRcblx0XHQvLyBzb21laG93IG9jY3VycyBvdXRzaWRlIG9mIHRoZSBkaWFsb2cgYmVmb3JlIGFuIGVsZW1lbnQgaW5zaWRlIHRoZVxuXHRcdC8vIGRpYWxvZyBpcyBmb2N1c2VkICgjMTAxNTIpXG5cdFx0dGhpcy5fbWFrZUZvY3VzVGFyZ2V0KCk7XG5cblx0XHR0aGlzLl90cmlnZ2VyKCBcIm9wZW5cIiApO1xuXHR9LFxuXG5cdF9mb2N1c1RhYmJhYmxlOiBmdW5jdGlvbigpIHtcblxuXHRcdC8vIFNldCBmb2N1cyB0byB0aGUgZmlyc3QgbWF0Y2g6XG5cdFx0Ly8gMS4gQW4gZWxlbWVudCB0aGF0IHdhcyBmb2N1c2VkIHByZXZpb3VzbHlcblx0XHQvLyAyLiBGaXJzdCBlbGVtZW50IGluc2lkZSB0aGUgZGlhbG9nIG1hdGNoaW5nIFthdXRvZm9jdXNdXG5cdFx0Ly8gMy4gVGFiYmFibGUgZWxlbWVudCBpbnNpZGUgdGhlIGNvbnRlbnQgZWxlbWVudFxuXHRcdC8vIDQuIFRhYmJhYmxlIGVsZW1lbnQgaW5zaWRlIHRoZSBidXR0b25wYW5lXG5cdFx0Ly8gNS4gVGhlIGNsb3NlIGJ1dHRvblxuXHRcdC8vIDYuIFRoZSBkaWFsb2cgaXRzZWxmXG5cdFx0dmFyIGhhc0ZvY3VzID0gdGhpcy5fZm9jdXNlZEVsZW1lbnQ7XG5cdFx0aWYgKCAhaGFzRm9jdXMgKSB7XG5cdFx0XHRoYXNGb2N1cyA9IHRoaXMuZWxlbWVudC5maW5kKCBcIlthdXRvZm9jdXNdXCIgKTtcblx0XHR9XG5cdFx0aWYgKCAhaGFzRm9jdXMubGVuZ3RoICkge1xuXHRcdFx0aGFzRm9jdXMgPSB0aGlzLmVsZW1lbnQuZmluZCggXCI6dGFiYmFibGVcIiApO1xuXHRcdH1cblx0XHRpZiAoICFoYXNGb2N1cy5sZW5ndGggKSB7XG5cdFx0XHRoYXNGb2N1cyA9IHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmZpbmQoIFwiOnRhYmJhYmxlXCIgKTtcblx0XHR9XG5cdFx0aWYgKCAhaGFzRm9jdXMubGVuZ3RoICkge1xuXHRcdFx0aGFzRm9jdXMgPSB0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZS5maWx0ZXIoIFwiOnRhYmJhYmxlXCIgKTtcblx0XHR9XG5cdFx0aWYgKCAhaGFzRm9jdXMubGVuZ3RoICkge1xuXHRcdFx0aGFzRm9jdXMgPSB0aGlzLnVpRGlhbG9nO1xuXHRcdH1cblx0XHRoYXNGb2N1cy5lcSggMCApLnRyaWdnZXIoIFwiZm9jdXNcIiApO1xuXHR9LFxuXG5cdF9rZWVwRm9jdXM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRmdW5jdGlvbiBjaGVja0ZvY3VzKCkge1xuXHRcdFx0dmFyIGFjdGl2ZUVsZW1lbnQgPSAkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKSxcblx0XHRcdFx0aXNBY3RpdmUgPSB0aGlzLnVpRGlhbG9nWyAwIF0gPT09IGFjdGl2ZUVsZW1lbnQgfHxcblx0XHRcdFx0XHQkLmNvbnRhaW5zKCB0aGlzLnVpRGlhbG9nWyAwIF0sIGFjdGl2ZUVsZW1lbnQgKTtcblx0XHRcdGlmICggIWlzQWN0aXZlICkge1xuXHRcdFx0XHR0aGlzLl9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7XG5cblx0XHQvLyBzdXBwb3J0OiBJRVxuXHRcdC8vIElFIDw9IDggZG9lc24ndCBwcmV2ZW50IG1vdmluZyBmb2N1cyBldmVuIHdpdGggZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdC8vIHNvIHdlIGNoZWNrIGFnYWluIGxhdGVyXG5cdFx0dGhpcy5fZGVsYXkoIGNoZWNrRm9jdXMgKTtcblx0fSxcblxuXHRfY3JlYXRlV3JhcHBlcjogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy51aURpYWxvZyA9ICQoIFwiPGRpdj5cIiApXG5cdFx0XHQuaGlkZSgpXG5cdFx0XHQuYXR0cigge1xuXG5cdFx0XHRcdC8vIFNldHRpbmcgdGFiSW5kZXggbWFrZXMgdGhlIGRpdiBmb2N1c2FibGVcblx0XHRcdFx0dGFiSW5kZXg6IC0xLFxuXHRcdFx0XHRyb2xlOiBcImRpYWxvZ1wiXG5cdFx0XHR9IClcblx0XHRcdC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlEaWFsb2csIFwidWktZGlhbG9nXCIsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWZyb250XCIgKTtcblx0XHR0aGlzLl9vbiggdGhpcy51aURpYWxvZywge1xuXHRcdFx0a2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjYXBlICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSAmJiBldmVudC5rZXlDb2RlICYmXG5cdFx0XHRcdFx0XHRldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuRVNDQVBFICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy5jbG9zZSggZXZlbnQgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcmV2ZW50IHRhYmJpbmcgb3V0IG9mIGRpYWxvZ3Ncblx0XHRcdFx0aWYgKCBldmVudC5rZXlDb2RlICE9PSAkLnVpLmtleUNvZGUuVEFCIHx8IGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdGFiYmFibGVzID0gdGhpcy51aURpYWxvZy5maW5kKCBcIjp0YWJiYWJsZVwiICksXG5cdFx0XHRcdFx0Zmlyc3QgPSB0YWJiYWJsZXMuZmlsdGVyKCBcIjpmaXJzdFwiICksXG5cdFx0XHRcdFx0bGFzdCA9IHRhYmJhYmxlcy5maWx0ZXIoIFwiOmxhc3RcIiApO1xuXG5cdFx0XHRcdGlmICggKCBldmVudC50YXJnZXQgPT09IGxhc3RbIDAgXSB8fCBldmVudC50YXJnZXQgPT09IHRoaXMudWlEaWFsb2dbIDAgXSApICYmXG5cdFx0XHRcdFx0XHQhZXZlbnQuc2hpZnRLZXkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0Zmlyc3QudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoICggZXZlbnQudGFyZ2V0ID09PSBmaXJzdFsgMCBdIHx8XG5cdFx0XHRcdFx0XHRldmVudC50YXJnZXQgPT09IHRoaXMudWlEaWFsb2dbIDAgXSApICYmIGV2ZW50LnNoaWZ0S2V5ICkge1xuXHRcdFx0XHRcdHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGxhc3QudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRtb3VzZWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLl9tb3ZlVG9Ub3AoIGV2ZW50ICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZm9jdXNUYWJiYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgYW55IGV4aXN0aW5nIGFyaWEtZGVzY3JpYmVkYnkgYXR0cmlidXRlIG1lYW5zXG5cdFx0Ly8gdGhhdCB0aGUgZGlhbG9nIGNvbnRlbnQgaXMgbWFya2VkIHVwIHByb3Blcmx5XG5cdFx0Ly8gb3RoZXJ3aXNlIHdlIGJydXRlIGZvcmNlIHRoZSBjb250ZW50IGFzIHRoZSBkZXNjcmlwdGlvblxuXHRcdGlmICggIXRoaXMuZWxlbWVudC5maW5kKCBcIlthcmlhLWRlc2NyaWJlZGJ5XVwiICkubGVuZ3RoICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5hdHRyKCB7XG5cdFx0XHRcdFwiYXJpYS1kZXNjcmliZWRieVwiOiB0aGlzLmVsZW1lbnQudW5pcXVlSWQoKS5hdHRyKCBcImlkXCIgKVxuXHRcdFx0fSApO1xuXHRcdH1cblx0fSxcblxuXHRfY3JlYXRlVGl0bGViYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB1aURpYWxvZ1RpdGxlO1xuXG5cdFx0dGhpcy51aURpYWxvZ1RpdGxlYmFyID0gJCggXCI8ZGl2PlwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlEaWFsb2dUaXRsZWJhcixcblx0XHRcdFwidWktZGlhbG9nLXRpdGxlYmFyXCIsIFwidWktd2lkZ2V0LWhlYWRlciB1aS1oZWxwZXItY2xlYXJmaXhcIiApO1xuXHRcdHRoaXMuX29uKCB0aGlzLnVpRGlhbG9nVGl0bGViYXIsIHtcblx0XHRcdG1vdXNlZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIERvbid0IHByZXZlbnQgY2xpY2sgb24gY2xvc2UgYnV0dG9uICgjODgzOClcblx0XHRcdFx0Ly8gRm9jdXNpbmcgYSBkaWFsb2cgdGhhdCBpcyBwYXJ0aWFsbHkgc2Nyb2xsZWQgb3V0IG9mIHZpZXdcblx0XHRcdFx0Ly8gY2F1c2VzIHRoZSBicm93c2VyIHRvIHNjcm9sbCBpdCBpbnRvIHZpZXcsIHByZXZlbnRpbmcgdGhlIGNsaWNrIGV2ZW50XG5cdFx0XHRcdGlmICggISQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIFwiLnVpLWRpYWxvZy10aXRsZWJhci1jbG9zZVwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEaWFsb2cgaXNuJ3QgZ2V0dGluZyBmb2N1cyB3aGVuIGRyYWdnaW5nICgjODA2Mylcblx0XHRcdFx0XHR0aGlzLnVpRGlhbG9nLnRyaWdnZXIoIFwiZm9jdXNcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBVc2UgdHlwZT1cImJ1dHRvblwiIHRvIHByZXZlbnQgZW50ZXIga2V5cHJlc3NlcyBpbiB0ZXh0Ym94ZXMgZnJvbSBjbG9zaW5nIHRoZVxuXHRcdC8vIGRpYWxvZyBpbiBJRSAoIzkzMTIpXG5cdFx0dGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UgPSAkKCBcIjxidXR0b24gdHlwZT0nYnV0dG9uJz48L2J1dHRvbj5cIiApXG5cdFx0XHQuYnV0dG9uKCB7XG5cdFx0XHRcdGxhYmVsOiAkKCBcIjxhPlwiICkudGV4dCggdGhpcy5vcHRpb25zLmNsb3NlVGV4dCApLmh0bWwoKSxcblx0XHRcdFx0aWNvbjogXCJ1aS1pY29uLWNsb3NldGhpY2tcIixcblx0XHRcdFx0c2hvd0xhYmVsOiBmYWxzZVxuXHRcdFx0fSApXG5cdFx0XHQuYXBwZW5kVG8oIHRoaXMudWlEaWFsb2dUaXRsZWJhciApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlLCBcInVpLWRpYWxvZy10aXRsZWJhci1jbG9zZVwiICk7XG5cdFx0dGhpcy5fb24oIHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlLCB7XG5cdFx0XHRjbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR0aGlzLmNsb3NlKCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHVpRGlhbG9nVGl0bGUgPSAkKCBcIjxzcGFuPlwiICkudW5pcXVlSWQoKS5wcmVwZW5kVG8oIHRoaXMudWlEaWFsb2dUaXRsZWJhciApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB1aURpYWxvZ1RpdGxlLCBcInVpLWRpYWxvZy10aXRsZVwiICk7XG5cdFx0dGhpcy5fdGl0bGUoIHVpRGlhbG9nVGl0bGUgKTtcblxuXHRcdHRoaXMudWlEaWFsb2dUaXRsZWJhci5wcmVwZW5kVG8oIHRoaXMudWlEaWFsb2cgKTtcblxuXHRcdHRoaXMudWlEaWFsb2cuYXR0cigge1xuXHRcdFx0XCJhcmlhLWxhYmVsbGVkYnlcIjogdWlEaWFsb2dUaXRsZS5hdHRyKCBcImlkXCIgKVxuXHRcdH0gKTtcblx0fSxcblxuXHRfdGl0bGU6IGZ1bmN0aW9uKCB0aXRsZSApIHtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy50aXRsZSApIHtcblx0XHRcdHRpdGxlLnRleHQoIHRoaXMub3B0aW9ucy50aXRsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aXRsZS5odG1sKCBcIiYjMTYwO1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9jcmVhdGVCdXR0b25QYW5lOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZSA9ICQoIFwiPGRpdj5cIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZSwgXCJ1aS1kaWFsb2ctYnV0dG9ucGFuZVwiLFxuXHRcdFx0XCJ1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXhcIiApO1xuXG5cdFx0dGhpcy51aUJ1dHRvblNldCA9ICQoIFwiPGRpdj5cIiApXG5cdFx0XHQuYXBwZW5kVG8oIHRoaXMudWlEaWFsb2dCdXR0b25QYW5lICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlCdXR0b25TZXQsIFwidWktZGlhbG9nLWJ1dHRvbnNldFwiICk7XG5cblx0XHR0aGlzLl9jcmVhdGVCdXR0b25zKCk7XG5cdH0sXG5cblx0X2NyZWF0ZUJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdGJ1dHRvbnMgPSB0aGlzLm9wdGlvbnMuYnV0dG9ucztcblxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhIGJ1dHRvbiBwYW5lLCByZW1vdmUgaXRcblx0XHR0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5yZW1vdmUoKTtcblx0XHR0aGlzLnVpQnV0dG9uU2V0LmVtcHR5KCk7XG5cblx0XHRpZiAoICQuaXNFbXB0eU9iamVjdCggYnV0dG9ucyApIHx8ICggJC5pc0FycmF5KCBidXR0b25zICkgJiYgIWJ1dHRvbnMubGVuZ3RoICkgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy51aURpYWxvZywgXCJ1aS1kaWFsb2ctYnV0dG9uc1wiICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0JC5lYWNoKCBidXR0b25zLCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdFx0XHR2YXIgY2xpY2ssIGJ1dHRvbk9wdGlvbnM7XG5cdFx0XHRwcm9wcyA9ICQuaXNGdW5jdGlvbiggcHJvcHMgKSA/XG5cdFx0XHRcdHsgY2xpY2s6IHByb3BzLCB0ZXh0OiBuYW1lIH0gOlxuXHRcdFx0XHRwcm9wcztcblxuXHRcdFx0Ly8gRGVmYXVsdCB0byBhIG5vbi1zdWJtaXR0aW5nIGJ1dHRvblxuXHRcdFx0cHJvcHMgPSAkLmV4dGVuZCggeyB0eXBlOiBcImJ1dHRvblwiIH0sIHByb3BzICk7XG5cblx0XHRcdC8vIENoYW5nZSB0aGUgY29udGV4dCBmb3IgdGhlIGNsaWNrIGNhbGxiYWNrIHRvIGJlIHRoZSBtYWluIGVsZW1lbnRcblx0XHRcdGNsaWNrID0gcHJvcHMuY2xpY2s7XG5cdFx0XHRidXR0b25PcHRpb25zID0ge1xuXHRcdFx0XHRpY29uOiBwcm9wcy5pY29uLFxuXHRcdFx0XHRpY29uUG9zaXRpb246IHByb3BzLmljb25Qb3NpdGlvbixcblx0XHRcdFx0c2hvd0xhYmVsOiBwcm9wcy5zaG93TGFiZWxcblx0XHRcdH07XG5cblx0XHRcdGRlbGV0ZSBwcm9wcy5jbGljaztcblx0XHRcdGRlbGV0ZSBwcm9wcy5pY29uO1xuXHRcdFx0ZGVsZXRlIHByb3BzLmljb25Qb3NpdGlvbjtcblx0XHRcdGRlbGV0ZSBwcm9wcy5zaG93TGFiZWw7XG5cblx0XHRcdCQoIFwiPGJ1dHRvbj48L2J1dHRvbj5cIiwgcHJvcHMgKVxuXHRcdFx0XHQuYnV0dG9uKCBidXR0b25PcHRpb25zIClcblx0XHRcdFx0LmFwcGVuZFRvKCB0aGF0LnVpQnV0dG9uU2V0IClcblx0XHRcdFx0Lm9uKCBcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGNsaWNrLmFwcGx5KCB0aGF0LmVsZW1lbnRbIDAgXSwgYXJndW1lbnRzICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlEaWFsb2csIFwidWktZGlhbG9nLWJ1dHRvbnNcIiApO1xuXHRcdHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmFwcGVuZFRvKCB0aGlzLnVpRGlhbG9nICk7XG5cdH0sXG5cblx0X21ha2VEcmFnZ2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRmdW5jdGlvbiBmaWx0ZXJlZFVpKCB1aSApIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHBvc2l0aW9uOiB1aS5wb3NpdGlvbixcblx0XHRcdFx0b2Zmc2V0OiB1aS5vZmZzZXRcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dGhpcy51aURpYWxvZy5kcmFnZ2FibGUoIHtcblx0XHRcdGNhbmNlbDogXCIudWktZGlhbG9nLWNvbnRlbnQsIC51aS1kaWFsb2ctdGl0bGViYXItY2xvc2VcIixcblx0XHRcdGhhbmRsZTogXCIudWktZGlhbG9nLXRpdGxlYmFyXCIsXG5cdFx0XHRjb250YWlubWVudDogXCJkb2N1bWVudFwiLFxuXHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHRoYXQuX2FkZENsYXNzKCAkKCB0aGlzICksIFwidWktZGlhbG9nLWRyYWdnaW5nXCIgKTtcblx0XHRcdFx0dGhhdC5fYmxvY2tGcmFtZXMoKTtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJkcmFnU3RhcnRcIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTtcblx0XHRcdH0sXG5cdFx0XHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImRyYWdcIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR2YXIgbGVmdCA9IHVpLm9mZnNldC5sZWZ0IC0gdGhhdC5kb2N1bWVudC5zY3JvbGxMZWZ0KCksXG5cdFx0XHRcdFx0dG9wID0gdWkub2Zmc2V0LnRvcCAtIHRoYXQuZG9jdW1lbnQuc2Nyb2xsVG9wKCk7XG5cblx0XHRcdFx0b3B0aW9ucy5wb3NpdGlvbiA9IHtcblx0XHRcdFx0XHRteTogXCJsZWZ0IHRvcFwiLFxuXHRcdFx0XHRcdGF0OiBcImxlZnRcIiArICggbGVmdCA+PSAwID8gXCIrXCIgOiBcIlwiICkgKyBsZWZ0ICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XCJ0b3BcIiArICggdG9wID49IDAgPyBcIitcIiA6IFwiXCIgKSArIHRvcCxcblx0XHRcdFx0XHRvZjogdGhhdC53aW5kb3dcblx0XHRcdFx0fTtcblx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoICQoIHRoaXMgKSwgXCJ1aS1kaWFsb2ctZHJhZ2dpbmdcIiApO1xuXHRcdFx0XHR0aGF0Ll91bmJsb2NrRnJhbWVzKCk7XG5cdFx0XHRcdHRoYXQuX3RyaWdnZXIoIFwiZHJhZ1N0b3BcIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X21ha2VSZXNpemFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRoYW5kbGVzID0gb3B0aW9ucy5yZXNpemFibGUsXG5cblx0XHRcdC8vIC51aS1yZXNpemFibGUgaGFzIHBvc2l0aW9uOiByZWxhdGl2ZSBkZWZpbmVkIGluIHRoZSBzdHlsZXNoZWV0XG5cdFx0XHQvLyBidXQgZGlhbG9ncyBoYXZlIHRvIHVzZSBhYnNvbHV0ZSBvciBmaXhlZCBwb3NpdGlvbmluZ1xuXHRcdFx0cG9zaXRpb24gPSB0aGlzLnVpRGlhbG9nLmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0XHRyZXNpemVIYW5kbGVzID0gdHlwZW9mIGhhbmRsZXMgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRoYW5kbGVzIDpcblx0XHRcdFx0XCJuLGUscyx3LHNlLHN3LG5lLG53XCI7XG5cblx0XHRmdW5jdGlvbiBmaWx0ZXJlZFVpKCB1aSApIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG9yaWdpbmFsUG9zaXRpb246IHVpLm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRcdG9yaWdpbmFsU2l6ZTogdWkub3JpZ2luYWxTaXplLFxuXHRcdFx0XHRwb3NpdGlvbjogdWkucG9zaXRpb24sXG5cdFx0XHRcdHNpemU6IHVpLnNpemVcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dGhpcy51aURpYWxvZy5yZXNpemFibGUoIHtcblx0XHRcdGNhbmNlbDogXCIudWktZGlhbG9nLWNvbnRlbnRcIixcblx0XHRcdGNvbnRhaW5tZW50OiBcImRvY3VtZW50XCIsXG5cdFx0XHRhbHNvUmVzaXplOiB0aGlzLmVsZW1lbnQsXG5cdFx0XHRtYXhXaWR0aDogb3B0aW9ucy5tYXhXaWR0aCxcblx0XHRcdG1heEhlaWdodDogb3B0aW9ucy5tYXhIZWlnaHQsXG5cdFx0XHRtaW5XaWR0aDogb3B0aW9ucy5taW5XaWR0aCxcblx0XHRcdG1pbkhlaWdodDogdGhpcy5fbWluSGVpZ2h0KCksXG5cdFx0XHRoYW5kbGVzOiByZXNpemVIYW5kbGVzLFxuXHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHRoYXQuX2FkZENsYXNzKCAkKCB0aGlzICksIFwidWktZGlhbG9nLXJlc2l6aW5nXCIgKTtcblx0XHRcdFx0dGhhdC5fYmxvY2tGcmFtZXMoKTtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJyZXNpemVTdGFydFwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fSxcblx0XHRcdHJlc2l6ZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJyZXNpemVcIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gdGhhdC51aURpYWxvZy5vZmZzZXQoKSxcblx0XHRcdFx0XHRsZWZ0ID0gb2Zmc2V0LmxlZnQgLSB0aGF0LmRvY3VtZW50LnNjcm9sbExlZnQoKSxcblx0XHRcdFx0XHR0b3AgPSBvZmZzZXQudG9wIC0gdGhhdC5kb2N1bWVudC5zY3JvbGxUb3AoKTtcblxuXHRcdFx0XHRvcHRpb25zLmhlaWdodCA9IHRoYXQudWlEaWFsb2cuaGVpZ2h0KCk7XG5cdFx0XHRcdG9wdGlvbnMud2lkdGggPSB0aGF0LnVpRGlhbG9nLndpZHRoKCk7XG5cdFx0XHRcdG9wdGlvbnMucG9zaXRpb24gPSB7XG5cdFx0XHRcdFx0bXk6IFwibGVmdCB0b3BcIixcblx0XHRcdFx0XHRhdDogXCJsZWZ0XCIgKyAoIGxlZnQgPj0gMCA/IFwiK1wiIDogXCJcIiApICsgbGVmdCArIFwiIFwiICtcblx0XHRcdFx0XHRcdFwidG9wXCIgKyAoIHRvcCA+PSAwID8gXCIrXCIgOiBcIlwiICkgKyB0b3AsXG5cdFx0XHRcdFx0b2Y6IHRoYXQud2luZG93XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoYXQuX3JlbW92ZUNsYXNzKCAkKCB0aGlzICksIFwidWktZGlhbG9nLXJlc2l6aW5nXCIgKTtcblx0XHRcdFx0dGhhdC5fdW5ibG9ja0ZyYW1lcygpO1xuXHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcInJlc2l6ZVN0b3BcIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTtcblx0XHRcdH1cblx0XHR9IClcblx0XHRcdC5jc3MoIFwicG9zaXRpb25cIiwgcG9zaXRpb24gKTtcblx0fSxcblxuXHRfdHJhY2tGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fb24oIHRoaXMud2lkZ2V0KCksIHtcblx0XHRcdGZvY3VzaW46IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dGhpcy5fbWFrZUZvY3VzVGFyZ2V0KCk7XG5cdFx0XHRcdHRoaXMuX2ZvY3VzZWRFbGVtZW50ID0gJCggZXZlbnQudGFyZ2V0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9tYWtlRm9jdXNUYXJnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3VudHJhY2tJbnN0YW5jZSgpO1xuXHRcdHRoaXMuX3RyYWNraW5nSW5zdGFuY2VzKCkudW5zaGlmdCggdGhpcyApO1xuXHR9LFxuXG5cdF91bnRyYWNrSW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnN0YW5jZXMgPSB0aGlzLl90cmFja2luZ0luc3RhbmNlcygpLFxuXHRcdFx0ZXhpc3RzID0gJC5pbkFycmF5KCB0aGlzLCBpbnN0YW5jZXMgKTtcblx0XHRpZiAoIGV4aXN0cyAhPT0gLTEgKSB7XG5cdFx0XHRpbnN0YW5jZXMuc3BsaWNlKCBleGlzdHMsIDEgKTtcblx0XHR9XG5cdH0sXG5cblx0X3RyYWNraW5nSW5zdGFuY2VzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5zdGFuY2VzID0gdGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1pbnN0YW5jZXNcIiApO1xuXHRcdGlmICggIWluc3RhbmNlcyApIHtcblx0XHRcdGluc3RhbmNlcyA9IFtdO1xuXHRcdFx0dGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1pbnN0YW5jZXNcIiwgaW5zdGFuY2VzICk7XG5cdFx0fVxuXHRcdHJldHVybiBpbnN0YW5jZXM7XG5cdH0sXG5cblx0X21pbkhlaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRyZXR1cm4gb3B0aW9ucy5oZWlnaHQgPT09IFwiYXV0b1wiID9cblx0XHRcdG9wdGlvbnMubWluSGVpZ2h0IDpcblx0XHRcdE1hdGgubWluKCBvcHRpb25zLm1pbkhlaWdodCwgb3B0aW9ucy5oZWlnaHQgKTtcblx0fSxcblxuXHRfcG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gTmVlZCB0byBzaG93IHRoZSBkaWFsb2cgdG8gZ2V0IHRoZSBhY3R1YWwgb2Zmc2V0IGluIHRoZSBwb3NpdGlvbiBwbHVnaW5cblx0XHR2YXIgaXNWaXNpYmxlID0gdGhpcy51aURpYWxvZy5pcyggXCI6dmlzaWJsZVwiICk7XG5cdFx0aWYgKCAhaXNWaXNpYmxlICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5zaG93KCk7XG5cdFx0fVxuXHRcdHRoaXMudWlEaWFsb2cucG9zaXRpb24oIHRoaXMub3B0aW9ucy5wb3NpdGlvbiApO1xuXHRcdGlmICggIWlzVmlzaWJsZSApIHtcblx0XHRcdHRoaXMudWlEaWFsb2cuaGlkZSgpO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0cmVzaXplID0gZmFsc2UsXG5cdFx0XHRyZXNpemFibGVPcHRpb25zID0ge307XG5cblx0XHQkLmVhY2goIG9wdGlvbnMsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0dGhhdC5fc2V0T3B0aW9uKCBrZXksIHZhbHVlICk7XG5cblx0XHRcdGlmICgga2V5IGluIHRoYXQuc2l6ZVJlbGF0ZWRPcHRpb25zICkge1xuXHRcdFx0XHRyZXNpemUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBrZXkgaW4gdGhhdC5yZXNpemFibGVSZWxhdGVkT3B0aW9ucyApIHtcblx0XHRcdFx0cmVzaXphYmxlT3B0aW9uc1sga2V5IF0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHRpZiAoIHJlc2l6ZSApIHtcblx0XHRcdHRoaXMuX3NpemUoKTtcblx0XHRcdHRoaXMuX3Bvc2l0aW9uKCk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy51aURpYWxvZy5pcyggXCI6ZGF0YSh1aS1yZXNpemFibGUpXCIgKSApIHtcblx0XHRcdHRoaXMudWlEaWFsb2cucmVzaXphYmxlKCBcIm9wdGlvblwiLCByZXNpemFibGVPcHRpb25zICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpc0RyYWdnYWJsZSwgaXNSZXNpemFibGUsXG5cdFx0XHR1aURpYWxvZyA9IHRoaXMudWlEaWFsb2c7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJhcHBlbmRUb1wiICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImJ1dHRvbnNcIiApIHtcblx0XHRcdHRoaXMuX2NyZWF0ZUJ1dHRvbnMoKTtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gXCJjbG9zZVRleHRcIiApIHtcblx0XHRcdHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlLmJ1dHRvbigge1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGF0IHdlIGFsd2F5cyBwYXNzIGEgc3RyaW5nXG5cdFx0XHRcdGxhYmVsOiAkKCBcIjxhPlwiICkudGV4dCggXCJcIiArIHRoaXMub3B0aW9ucy5jbG9zZVRleHQgKS5odG1sKClcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gXCJkcmFnZ2FibGVcIiApIHtcblx0XHRcdGlzRHJhZ2dhYmxlID0gdWlEaWFsb2cuaXMoIFwiOmRhdGEodWktZHJhZ2dhYmxlKVwiICk7XG5cdFx0XHRpZiAoIGlzRHJhZ2dhYmxlICYmICF2YWx1ZSApIHtcblx0XHRcdFx0dWlEaWFsb2cuZHJhZ2dhYmxlKCBcImRlc3Ryb3lcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFpc0RyYWdnYWJsZSAmJiB2YWx1ZSApIHtcblx0XHRcdFx0dGhpcy5fbWFrZURyYWdnYWJsZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcInBvc2l0aW9uXCIgKSB7XG5cdFx0XHR0aGlzLl9wb3NpdGlvbigpO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcInJlc2l6YWJsZVwiICkge1xuXG5cdFx0XHQvLyBjdXJyZW50bHkgcmVzaXphYmxlLCBiZWNvbWluZyBub24tcmVzaXphYmxlXG5cdFx0XHRpc1Jlc2l6YWJsZSA9IHVpRGlhbG9nLmlzKCBcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIiApO1xuXHRcdFx0aWYgKCBpc1Jlc2l6YWJsZSAmJiAhdmFsdWUgKSB7XG5cdFx0XHRcdHVpRGlhbG9nLnJlc2l6YWJsZSggXCJkZXN0cm95XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3VycmVudGx5IHJlc2l6YWJsZSwgY2hhbmdpbmcgaGFuZGxlc1xuXHRcdFx0aWYgKCBpc1Jlc2l6YWJsZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHVpRGlhbG9nLnJlc2l6YWJsZSggXCJvcHRpb25cIiwgXCJoYW5kbGVzXCIsIHZhbHVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEN1cnJlbnRseSBub24tcmVzaXphYmxlLCBiZWNvbWluZyByZXNpemFibGVcblx0XHRcdGlmICggIWlzUmVzaXphYmxlICYmIHZhbHVlICE9PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fbWFrZVJlc2l6YWJsZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcInRpdGxlXCIgKSB7XG5cdFx0XHR0aGlzLl90aXRsZSggdGhpcy51aURpYWxvZ1RpdGxlYmFyLmZpbmQoIFwiLnVpLWRpYWxvZy10aXRsZVwiICkgKTtcblx0XHR9XG5cdH0sXG5cblx0X3NpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gSWYgdGhlIHVzZXIgaGFzIHJlc2l6ZWQgdGhlIGRpYWxvZywgdGhlIC51aS1kaWFsb2cgYW5kIC51aS1kaWFsb2ctY29udGVudFxuXHRcdC8vIGRpdnMgd2lsbCBib3RoIGhhdmUgd2lkdGggYW5kIGhlaWdodCBzZXQsIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlbVxuXHRcdHZhciBub25Db250ZW50SGVpZ2h0LCBtaW5Db250ZW50SGVpZ2h0LCBtYXhDb250ZW50SGVpZ2h0LFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdC8vIFJlc2V0IGNvbnRlbnQgc2l6aW5nXG5cdFx0dGhpcy5lbGVtZW50LnNob3coKS5jc3MoIHtcblx0XHRcdHdpZHRoOiBcImF1dG9cIixcblx0XHRcdG1pbkhlaWdodDogMCxcblx0XHRcdG1heEhlaWdodDogXCJub25lXCIsXG5cdFx0XHRoZWlnaHQ6IDBcblx0XHR9ICk7XG5cblx0XHRpZiAoIG9wdGlvbnMubWluV2lkdGggPiBvcHRpb25zLndpZHRoICkge1xuXHRcdFx0b3B0aW9ucy53aWR0aCA9IG9wdGlvbnMubWluV2lkdGg7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgd3JhcHBlciBzaXppbmdcblx0XHQvLyBkZXRlcm1pbmUgdGhlIGhlaWdodCBvZiBhbGwgdGhlIG5vbi1jb250ZW50IGVsZW1lbnRzXG5cdFx0bm9uQ29udGVudEhlaWdodCA9IHRoaXMudWlEaWFsb2cuY3NzKCB7XG5cdFx0XHRoZWlnaHQ6IFwiYXV0b1wiLFxuXHRcdFx0d2lkdGg6IG9wdGlvbnMud2lkdGhcblx0XHR9IClcblx0XHRcdC5vdXRlckhlaWdodCgpO1xuXHRcdG1pbkNvbnRlbnRIZWlnaHQgPSBNYXRoLm1heCggMCwgb3B0aW9ucy5taW5IZWlnaHQgLSBub25Db250ZW50SGVpZ2h0ICk7XG5cdFx0bWF4Q29udGVudEhlaWdodCA9IHR5cGVvZiBvcHRpb25zLm1heEhlaWdodCA9PT0gXCJudW1iZXJcIiA/XG5cdFx0XHRNYXRoLm1heCggMCwgb3B0aW9ucy5tYXhIZWlnaHQgLSBub25Db250ZW50SGVpZ2h0ICkgOlxuXHRcdFx0XCJub25lXCI7XG5cblx0XHRpZiAoIG9wdGlvbnMuaGVpZ2h0ID09PSBcImF1dG9cIiApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5jc3MoIHtcblx0XHRcdFx0bWluSGVpZ2h0OiBtaW5Db250ZW50SGVpZ2h0LFxuXHRcdFx0XHRtYXhIZWlnaHQ6IG1heENvbnRlbnRIZWlnaHQsXG5cdFx0XHRcdGhlaWdodDogXCJhdXRvXCJcblx0XHRcdH0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmhlaWdodCggTWF0aC5tYXgoIDAsIG9wdGlvbnMuaGVpZ2h0IC0gbm9uQ29udGVudEhlaWdodCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnVpRGlhbG9nLmlzKCBcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIiApICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5yZXNpemFibGUoIFwib3B0aW9uXCIsIFwibWluSGVpZ2h0XCIsIHRoaXMuX21pbkhlaWdodCgpICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9ibG9ja0ZyYW1lczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5pZnJhbWVCbG9ja3MgPSB0aGlzLmRvY3VtZW50LmZpbmQoIFwiaWZyYW1lXCIgKS5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGlmcmFtZSA9ICQoIHRoaXMgKTtcblxuXHRcdFx0cmV0dXJuICQoIFwiPGRpdj5cIiApXG5cdFx0XHRcdC5jc3MoIHtcblx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdHdpZHRoOiBpZnJhbWUub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRcdGhlaWdodDogaWZyYW1lLm91dGVySGVpZ2h0KClcblx0XHRcdFx0fSApXG5cdFx0XHRcdC5hcHBlbmRUbyggaWZyYW1lLnBhcmVudCgpIClcblx0XHRcdFx0Lm9mZnNldCggaWZyYW1lLm9mZnNldCgpIClbIDAgXTtcblx0XHR9ICk7XG5cdH0sXG5cblx0X3VuYmxvY2tGcmFtZXM6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggdGhpcy5pZnJhbWVCbG9ja3MgKSB7XG5cdFx0XHR0aGlzLmlmcmFtZUJsb2Nrcy5yZW1vdmUoKTtcblx0XHRcdGRlbGV0ZSB0aGlzLmlmcmFtZUJsb2Nrcztcblx0XHR9XG5cdH0sXG5cblx0X2FsbG93SW50ZXJhY3Rpb246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIFwiLnVpLWRpYWxvZ1wiICkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogUmVtb3ZlIGhhY2sgd2hlbiBkYXRlcGlja2VyIGltcGxlbWVudHNcblx0XHQvLyB0aGUgLnVpLWZyb250IGxvZ2ljICgjODk4OSlcblx0XHRyZXR1cm4gISEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCBcIi51aS1kYXRlcGlja2VyXCIgKS5sZW5ndGg7XG5cdH0sXG5cblx0X2NyZWF0ZU92ZXJsYXk6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXMub3B0aW9ucy5tb2RhbCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBXZSB1c2UgYSBkZWxheSBpbiBjYXNlIHRoZSBvdmVybGF5IGlzIGNyZWF0ZWQgZnJvbSBhblxuXHRcdC8vIGV2ZW50IHRoYXQgd2UncmUgZ29pbmcgdG8gYmUgY2FuY2VsbGluZyAoIzI4MDQpXG5cdFx0dmFyIGlzT3BlbmluZyA9IHRydWU7XG5cdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0aXNPcGVuaW5nID0gZmFsc2U7XG5cdFx0fSApO1xuXG5cdFx0aWYgKCAhdGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1vdmVybGF5c1wiICkgKSB7XG5cblx0XHRcdC8vIFByZXZlbnQgdXNlIG9mIGFuY2hvcnMgYW5kIGlucHV0c1xuXHRcdFx0Ly8gVXNpbmcgX29uKCkgZm9yIGFuIGV2ZW50IGhhbmRsZXIgc2hhcmVkIGFjcm9zcyBtYW55IGluc3RhbmNlcyBpc1xuXHRcdFx0Ly8gc2FmZSBiZWNhdXNlIHRoZSBkaWFsb2dzIHN0YWNrIGFuZCBtdXN0IGJlIGNsb3NlZCBpbiByZXZlcnNlIG9yZGVyXG5cdFx0XHR0aGlzLl9vbiggdGhpcy5kb2N1bWVudCwge1xuXHRcdFx0XHRmb2N1c2luOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCBpc09wZW5pbmcgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhdGhpcy5fYWxsb3dJbnRlcmFjdGlvbiggZXZlbnQgKSApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHR0aGlzLl90cmFja2luZ0luc3RhbmNlcygpWyAwIF0uX2ZvY3VzVGFiYmFibGUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR0aGlzLm92ZXJsYXkgPSAkKCBcIjxkaXY+XCIgKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5vdmVybGF5LCBudWxsLCBcInVpLXdpZGdldC1vdmVybGF5IHVpLWZyb250XCIgKTtcblx0XHR0aGlzLl9vbiggdGhpcy5vdmVybGF5LCB7XG5cdFx0XHRtb3VzZWRvd246IFwiX2tlZXBGb2N1c1wiXG5cdFx0fSApO1xuXHRcdHRoaXMuZG9jdW1lbnQuZGF0YSggXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIixcblx0XHRcdCggdGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1vdmVybGF5c1wiICkgfHwgMCApICsgMSApO1xuXHR9LFxuXG5cdF9kZXN0cm95T3ZlcmxheTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLm1vZGFsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5vdmVybGF5ICkge1xuXHRcdFx0dmFyIG92ZXJsYXlzID0gdGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1vdmVybGF5c1wiICkgLSAxO1xuXG5cdFx0XHRpZiAoICFvdmVybGF5cyApIHtcblx0XHRcdFx0dGhpcy5fb2ZmKCB0aGlzLmRvY3VtZW50LCBcImZvY3VzaW5cIiApO1xuXHRcdFx0XHR0aGlzLmRvY3VtZW50LnJlbW92ZURhdGEoIFwidWktZGlhbG9nLW92ZXJsYXlzXCIgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZG9jdW1lbnQuZGF0YSggXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIiwgb3ZlcmxheXMgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5vdmVybGF5LnJlbW92ZSgpO1xuXHRcdFx0dGhpcy5vdmVybGF5ID0gbnVsbDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gREVQUkVDQVRFRFxuLy8gVE9ETzogc3dpdGNoIHJldHVybiBiYWNrIHRvIHdpZGdldCBkZWNsYXJhdGlvbiBhdCB0b3Agb2YgZmlsZSB3aGVuIHRoaXMgaXMgcmVtb3ZlZFxuaWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgKSB7XG5cblx0Ly8gQmFja2NvbXBhdCBmb3IgZGlhbG9nQ2xhc3Mgb3B0aW9uXG5cdCQud2lkZ2V0KCBcInVpLmRpYWxvZ1wiLCAkLnVpLmRpYWxvZywge1xuXHRcdG9wdGlvbnM6IHtcblx0XHRcdGRpYWxvZ0NsYXNzOiBcIlwiXG5cdFx0fSxcblx0XHRfY3JlYXRlV3JhcHBlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9zdXBlcigpO1xuXHRcdFx0dGhpcy51aURpYWxvZy5hZGRDbGFzcyggdGhpcy5vcHRpb25zLmRpYWxvZ0NsYXNzICk7XG5cdFx0fSxcblx0XHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdGlmICgga2V5ID09PSBcImRpYWxvZ0NsYXNzXCIgKSB7XG5cdFx0XHRcdHRoaXMudWlEaWFsb2dcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHRoaXMub3B0aW9ucy5kaWFsb2dDbGFzcyApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiAkLnVpLmRpYWxvZztcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBEcmFnZ2FibGUgMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IERyYWdnYWJsZVxuLy8+Pmdyb3VwOiBJbnRlcmFjdGlvbnNcbi8vPj5kZXNjcmlwdGlvbjogRW5hYmxlcyBkcmFnZ2luZyBmdW5jdGlvbmFsaXR5IGZvciBhbnkgZWxlbWVudC5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kcmFnZ2FibGUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZHJhZ2dhYmxlL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2RyYWdnYWJsZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4vbW91c2VcIixcblx0XHRcdFwiLi4vZGF0YVwiLFxuXHRcdFx0XCIuLi9wbHVnaW5cIixcblx0XHRcdFwiLi4vc2FmZS1hY3RpdmUtZWxlbWVudFwiLFxuXHRcdFx0XCIuLi9zYWZlLWJsdXJcIixcblx0XHRcdFwiLi4vc2Nyb2xsLXBhcmVudFwiLFxuXHRcdFx0XCIuLi92ZXJzaW9uXCIsXG5cdFx0XHRcIi4uL3dpZGdldFwiXG5cdFx0XSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuXG4kLndpZGdldCggXCJ1aS5kcmFnZ2FibGVcIiwgJC51aS5tb3VzZSwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMFwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJkcmFnXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhZGRDbGFzc2VzOiB0cnVlLFxuXHRcdGFwcGVuZFRvOiBcInBhcmVudFwiLFxuXHRcdGF4aXM6IGZhbHNlLFxuXHRcdGNvbm5lY3RUb1NvcnRhYmxlOiBmYWxzZSxcblx0XHRjb250YWlubWVudDogZmFsc2UsXG5cdFx0Y3Vyc29yOiBcImF1dG9cIixcblx0XHRjdXJzb3JBdDogZmFsc2UsXG5cdFx0Z3JpZDogZmFsc2UsXG5cdFx0aGFuZGxlOiBmYWxzZSxcblx0XHRoZWxwZXI6IFwib3JpZ2luYWxcIixcblx0XHRpZnJhbWVGaXg6IGZhbHNlLFxuXHRcdG9wYWNpdHk6IGZhbHNlLFxuXHRcdHJlZnJlc2hQb3NpdGlvbnM6IGZhbHNlLFxuXHRcdHJldmVydDogZmFsc2UsXG5cdFx0cmV2ZXJ0RHVyYXRpb246IDUwMCxcblx0XHRzY29wZTogXCJkZWZhdWx0XCIsXG5cdFx0c2Nyb2xsOiB0cnVlLFxuXHRcdHNjcm9sbFNlbnNpdGl2aXR5OiAyMCxcblx0XHRzY3JvbGxTcGVlZDogMjAsXG5cdFx0c25hcDogZmFsc2UsXG5cdFx0c25hcE1vZGU6IFwiYm90aFwiLFxuXHRcdHNuYXBUb2xlcmFuY2U6IDIwLFxuXHRcdHN0YWNrOiBmYWxzZSxcblx0XHR6SW5kZXg6IGZhbHNlLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0ZHJhZzogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsXG5cdH0sXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuaGVscGVyID09PSBcIm9yaWdpbmFsXCIgKSB7XG5cdFx0XHR0aGlzLl9zZXRQb3NpdGlvblJlbGF0aXZlKCk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5vcHRpb25zLmFkZENsYXNzZXMgKSB7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1kcmFnZ2FibGVcIiApO1xuXHRcdH1cblx0XHR0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKTtcblxuXHRcdHRoaXMuX21vdXNlSW5pdCgpO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cdFx0aWYgKCBrZXkgPT09IFwiaGFuZGxlXCIgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVIYW5kbGVDbGFzc05hbWUoKTtcblx0XHRcdHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpO1xuXHRcdH1cblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAoIHRoaXMuaGVscGVyIHx8IHRoaXMuZWxlbWVudCApLmlzKCBcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiApICkge1xuXHRcdFx0dGhpcy5kZXN0cm95T25DbGVhciA9IHRydWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX3JlbW92ZUhhbmRsZUNsYXNzTmFtZSgpO1xuXHRcdHRoaXMuX21vdXNlRGVzdHJveSgpO1xuXHR9LFxuXG5cdF9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucztcblxuXHRcdHRoaXMuX2JsdXJBY3RpdmVFbGVtZW50KCBldmVudCApO1xuXG5cdFx0Ly8gQW1vbmcgb3RoZXJzLCBwcmV2ZW50IGEgZHJhZyBvbiBhIHJlc2l6YWJsZS1oYW5kbGVcblx0XHRpZiAoIHRoaXMuaGVscGVyIHx8IG8uZGlzYWJsZWQgfHxcblx0XHRcdFx0JCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktcmVzaXphYmxlLWhhbmRsZVwiICkubGVuZ3RoID4gMCApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvL1F1aXQgaWYgd2UncmUgbm90IG9uIGEgdmFsaWQgaGFuZGxlXG5cdFx0dGhpcy5oYW5kbGUgPSB0aGlzLl9nZXRIYW5kbGUoIGV2ZW50ICk7XG5cdFx0aWYgKCAhdGhpcy5oYW5kbGUgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5fYmxvY2tGcmFtZXMoIG8uaWZyYW1lRml4ID09PSB0cnVlID8gXCJpZnJhbWVcIiA6IG8uaWZyYW1lRml4ICk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdF9ibG9ja0ZyYW1lczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMuaWZyYW1lQmxvY2tzID0gdGhpcy5kb2N1bWVudC5maW5kKCBzZWxlY3RvciApLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaWZyYW1lID0gJCggdGhpcyApO1xuXG5cdFx0XHRyZXR1cm4gJCggXCI8ZGl2PlwiIClcblx0XHRcdFx0LmNzcyggXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIGlmcmFtZS5wYXJlbnQoKSApXG5cdFx0XHRcdC5vdXRlcldpZHRoKCBpZnJhbWUub3V0ZXJXaWR0aCgpIClcblx0XHRcdFx0Lm91dGVySGVpZ2h0KCBpZnJhbWUub3V0ZXJIZWlnaHQoKSApXG5cdFx0XHRcdC5vZmZzZXQoIGlmcmFtZS5vZmZzZXQoKSApWyAwIF07XG5cdFx0fSApO1xuXHR9LFxuXG5cdF91bmJsb2NrRnJhbWVzOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHRoaXMuaWZyYW1lQmxvY2tzICkge1xuXHRcdFx0dGhpcy5pZnJhbWVCbG9ja3MucmVtb3ZlKCk7XG5cdFx0XHRkZWxldGUgdGhpcy5pZnJhbWVCbG9ja3M7XG5cdFx0fVxuXHR9LFxuXG5cdF9ibHVyQWN0aXZlRWxlbWVudDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBhY3RpdmVFbGVtZW50ID0gJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICksXG5cdFx0XHR0YXJnZXQgPSAkKCBldmVudC50YXJnZXQgKTtcblxuXHRcdC8vIE9ubHkgYmx1ciBpZiB0aGUgZXZlbnQgb2NjdXJyZWQgb24gYW4gZWxlbWVudCB0aGF0IGlzOlxuXHRcdC8vIDEpIHdpdGhpbiB0aGUgZHJhZ2dhYmxlIGhhbmRsZVxuXHRcdC8vIDIpIGJ1dCBub3Qgd2l0aGluIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBlbGVtZW50XG5cdFx0Ly8gU2VlICMxMDUyNywgIzEyNDcyXG5cdFx0aWYgKCB0aGlzLl9nZXRIYW5kbGUoIGV2ZW50ICkgJiYgdGFyZ2V0LmNsb3Nlc3QoIGFjdGl2ZUVsZW1lbnQgKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQmx1ciBhbnkgZWxlbWVudCB0aGF0IGN1cnJlbnRseSBoYXMgZm9jdXMsIHNlZSAjNDI2MVxuXHRcdCQudWkuc2FmZUJsdXIoIGFjdGl2ZUVsZW1lbnQgKTtcblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHQvL0NyZWF0ZSBhbmQgYXBwZW5kIHRoZSB2aXNpYmxlIGhlbHBlclxuXHRcdHRoaXMuaGVscGVyID0gdGhpcy5fY3JlYXRlSGVscGVyKCBldmVudCApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaGVscGVyLCBcInVpLWRyYWdnYWJsZS1kcmFnZ2luZ1wiICk7XG5cblx0XHQvL0NhY2hlIHRoZSBoZWxwZXIgc2l6ZVxuXHRcdHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTtcblxuXHRcdC8vSWYgZGRtYW5hZ2VyIGlzIHVzZWQgZm9yIGRyb3BwYWJsZXMsIHNldCB0aGUgZ2xvYmFsIGRyYWdnYWJsZVxuXHRcdGlmICggJC51aS5kZG1hbmFnZXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5jdXJyZW50ID0gdGhpcztcblx0XHR9XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gZ2VuZXJhdGlvbiAtXG5cdFx0ICogVGhpcyBibG9jayBnZW5lcmF0ZXMgZXZlcnl0aGluZyBwb3NpdGlvbiByZWxhdGVkIC0gaXQncyB0aGUgY29yZSBvZiBkcmFnZ2FibGVzLlxuXHRcdCAqL1xuXG5cdFx0Ly9DYWNoZSB0aGUgbWFyZ2lucyBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudFxuXHRcdHRoaXMuX2NhY2hlTWFyZ2lucygpO1xuXG5cdFx0Ly9TdG9yZSB0aGUgaGVscGVyJ3MgY3NzIHBvc2l0aW9uXG5cdFx0dGhpcy5jc3NQb3NpdGlvbiA9IHRoaXMuaGVscGVyLmNzcyggXCJwb3NpdGlvblwiICk7XG5cdFx0dGhpcy5zY3JvbGxQYXJlbnQgPSB0aGlzLmhlbHBlci5zY3JvbGxQYXJlbnQoIHRydWUgKTtcblx0XHR0aGlzLm9mZnNldFBhcmVudCA9IHRoaXMuaGVscGVyLm9mZnNldFBhcmVudCgpO1xuXHRcdHRoaXMuaGFzRml4ZWRBbmNlc3RvciA9IHRoaXMuaGVscGVyLnBhcmVudHMoKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJCggdGhpcyApLmNzcyggXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIjtcblx0XHRcdH0gKS5sZW5ndGggPiAwO1xuXG5cdFx0Ly9UaGUgZWxlbWVudCdzIGFic29sdXRlIHBvc2l0aW9uIG9uIHRoZSBwYWdlIG1pbnVzIG1hcmdpbnNcblx0XHR0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpO1xuXHRcdHRoaXMuX3JlZnJlc2hPZmZzZXRzKCBldmVudCApO1xuXG5cdFx0Ly9HZW5lcmF0ZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25cblx0XHR0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbiggZXZlbnQsIGZhbHNlICk7XG5cdFx0dGhpcy5vcmlnaW5hbFBhZ2VYID0gZXZlbnQucGFnZVg7XG5cdFx0dGhpcy5vcmlnaW5hbFBhZ2VZID0gZXZlbnQucGFnZVk7XG5cblx0XHQvL0FkanVzdCB0aGUgbW91c2Ugb2Zmc2V0IHJlbGF0aXZlIHRvIHRoZSBoZWxwZXIgaWYgXCJjdXJzb3JBdFwiIGlzIHN1cHBsaWVkXG5cdFx0KCBvLmN1cnNvckF0ICYmIHRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoIG8uY3Vyc29yQXQgKSApO1xuXG5cdFx0Ly9TZXQgYSBjb250YWlubWVudCBpZiBnaXZlbiBpbiB0aGUgb3B0aW9uc1xuXHRcdHRoaXMuX3NldENvbnRhaW5tZW50KCk7XG5cblx0XHQvL1RyaWdnZXIgZXZlbnQgKyBjYWxsYmFja3Ncblx0XHRpZiAoIHRoaXMuX3RyaWdnZXIoIFwic3RhcnRcIiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLl9jbGVhcigpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vUmVjYWNoZSB0aGUgaGVscGVyIHNpemVcblx0XHR0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7XG5cblx0XHQvL1ByZXBhcmUgdGhlIGRyb3BwYWJsZSBvZmZzZXRzXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gRXhlY3V0ZSB0aGUgZHJhZyBvbmNlIC0gdGhpcyBjYXVzZXMgdGhlIGhlbHBlciBub3QgdG8gYmUgdmlzaWJsZSBiZWZvcmUgZ2V0dGluZyBpdHNcblx0XHQvLyBjb3JyZWN0IHBvc2l0aW9uXG5cdFx0dGhpcy5fbW91c2VEcmFnKCBldmVudCwgdHJ1ZSApO1xuXG5cdFx0Ly8gSWYgdGhlIGRkbWFuYWdlciBpcyB1c2VkIGZvciBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgdGhhdCBkcmFnZ2luZyBoYXMgc3RhcnRlZFxuXHRcdC8vIChzZWUgIzUwMDMpXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyYWdTdGFydCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfcmVmcmVzaE9mZnNldHM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLm9mZnNldCA9IHtcblx0XHRcdHRvcDogdGhpcy5wb3NpdGlvbkFicy50b3AgLSB0aGlzLm1hcmdpbnMudG9wLFxuXHRcdFx0bGVmdDogdGhpcy5wb3NpdGlvbkFicy5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRzY3JvbGw6IGZhbHNlLFxuXHRcdFx0cGFyZW50OiB0aGlzLl9nZXRQYXJlbnRPZmZzZXQoKSxcblx0XHRcdHJlbGF0aXZlOiB0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpXG5cdFx0fTtcblxuXHRcdHRoaXMub2Zmc2V0LmNsaWNrID0ge1xuXHRcdFx0bGVmdDogZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5sZWZ0LFxuXHRcdFx0dG9wOiBldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LnRvcFxuXHRcdH07XG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50LCBub1Byb3BhZ2F0aW9uICkge1xuXG5cdFx0Ly8gcmVzZXQgYW55IG5lY2Vzc2FyeSBjYWNoZWQgcHJvcGVydGllcyAoc2VlICM1MDA5KVxuXHRcdGlmICggdGhpcy5oYXNGaXhlZEFuY2VzdG9yICkge1xuXHRcdFx0dGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0Ly9Db21wdXRlIHRoZSBoZWxwZXJzIHBvc2l0aW9uXG5cdFx0dGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oIGV2ZW50LCB0cnVlICk7XG5cdFx0dGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKCBcImFic29sdXRlXCIgKTtcblxuXHRcdC8vQ2FsbCBwbHVnaW5zIGFuZCBjYWxsYmFja3MgYW5kIHVzZSB0aGUgcmVzdWx0aW5nIHBvc2l0aW9uIGlmIHNvbWV0aGluZyBpcyByZXR1cm5lZFxuXHRcdGlmICggIW5vUHJvcGFnYXRpb24gKSB7XG5cdFx0XHR2YXIgdWkgPSB0aGlzLl91aUhhc2goKTtcblx0XHRcdGlmICggdGhpcy5fdHJpZ2dlciggXCJkcmFnXCIsIGV2ZW50LCB1aSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fbW91c2VVcCggbmV3ICQuRXZlbnQoIFwibW91c2V1cFwiLCBldmVudCApICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMucG9zaXRpb24gPSB1aS5wb3NpdGlvbjtcblx0XHR9XG5cblx0XHR0aGlzLmhlbHBlclsgMCBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQgKyBcInB4XCI7XG5cdFx0dGhpcy5oZWxwZXJbIDAgXS5zdHlsZS50b3AgPSB0aGlzLnBvc2l0aW9uLnRvcCArIFwicHhcIjtcblxuXHRcdGlmICggJC51aS5kZG1hbmFnZXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5kcmFnKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvL0lmIHdlIGFyZSB1c2luZyBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgYWJvdXQgdGhlIGRyb3Bcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRkcm9wcGVkID0gZmFsc2U7XG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciAmJiAhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXIgKSB7XG5cdFx0XHRkcm9wcGVkID0gJC51aS5kZG1hbmFnZXIuZHJvcCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHQvL2lmIGEgZHJvcCBjb21lcyBmcm9tIG91dHNpZGUgKGEgc29ydGFibGUpXG5cdFx0aWYgKCB0aGlzLmRyb3BwZWQgKSB7XG5cdFx0XHRkcm9wcGVkID0gdGhpcy5kcm9wcGVkO1xuXHRcdFx0dGhpcy5kcm9wcGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRoaXMub3B0aW9ucy5yZXZlcnQgPT09IFwiaW52YWxpZFwiICYmICFkcm9wcGVkICkgfHxcblx0XHRcdFx0KCB0aGlzLm9wdGlvbnMucmV2ZXJ0ID09PSBcInZhbGlkXCIgJiYgZHJvcHBlZCApIHx8XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5yZXZlcnQgPT09IHRydWUgfHwgKCAkLmlzRnVuY3Rpb24oIHRoaXMub3B0aW9ucy5yZXZlcnQgKSAmJlxuXHRcdFx0XHR0aGlzLm9wdGlvbnMucmV2ZXJ0LmNhbGwoIHRoaXMuZWxlbWVudCwgZHJvcHBlZCApIClcblx0XHQpIHtcblx0XHRcdCQoIHRoaXMuaGVscGVyICkuYW5pbWF0ZShcblx0XHRcdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uLFxuXHRcdFx0XHRwYXJzZUludCggdGhpcy5vcHRpb25zLnJldmVydER1cmF0aW9uLCAxMCApLFxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoYXQuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCApICE9PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdHRoYXQuX2NsZWFyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHRoaXMuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCApICE9PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fY2xlYXIoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X21vdXNlVXA6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLl91bmJsb2NrRnJhbWVzKCk7XG5cblx0XHQvLyBJZiB0aGUgZGRtYW5hZ2VyIGlzIHVzZWQgZm9yIGRyb3BwYWJsZXMsIGluZm9ybSB0aGUgbWFuYWdlciB0aGF0IGRyYWdnaW5nIGhhcyBzdG9wcGVkXG5cdFx0Ly8gKHNlZSAjNTAwMylcblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIuZHJhZ1N0b3AoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gT25seSBuZWVkIHRvIGZvY3VzIGlmIHRoZSBldmVudCBvY2N1cnJlZCBvbiB0aGUgZHJhZ2dhYmxlIGl0c2VsZiwgc2VlICMxMDUyN1xuXHRcdGlmICggdGhpcy5oYW5kbGVFbGVtZW50LmlzKCBldmVudC50YXJnZXQgKSApIHtcblxuXHRcdFx0Ly8gVGhlIGludGVyYWN0aW9uIGlzIG92ZXI7IHdoZXRoZXIgb3Igbm90IHRoZSBjbGljayByZXN1bHRlZCBpbiBhIGRyYWcsXG5cdFx0XHQvLyBmb2N1cyB0aGUgZWxlbWVudFxuXHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIFwiZm9jdXNcIiApO1xuXHRcdH1cblxuXHRcdHJldHVybiAkLnVpLm1vdXNlLnByb3RvdHlwZS5fbW91c2VVcC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHR9LFxuXG5cdGNhbmNlbDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAoIHRoaXMuaGVscGVyLmlzKCBcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiApICkge1xuXHRcdFx0dGhpcy5fbW91c2VVcCggbmV3ICQuRXZlbnQoIFwibW91c2V1cFwiLCB7IHRhcmdldDogdGhpcy5lbGVtZW50WyAwIF0gfSApICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2NsZWFyKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRfZ2V0SGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5oYW5kbGUgP1xuXHRcdFx0ISEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLmhhbmRsZSApICkubGVuZ3RoIDpcblx0XHRcdHRydWU7XG5cdH0sXG5cblx0X3NldEhhbmRsZUNsYXNzTmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oYW5kbGVFbGVtZW50ID0gdGhpcy5vcHRpb25zLmhhbmRsZSA/XG5cdFx0XHR0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLmhhbmRsZSApIDogdGhpcy5lbGVtZW50O1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmhhbmRsZUVsZW1lbnQsIFwidWktZHJhZ2dhYmxlLWhhbmRsZVwiICk7XG5cdH0sXG5cblx0X3JlbW92ZUhhbmRsZUNsYXNzTmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuaGFuZGxlRWxlbWVudCwgXCJ1aS1kcmFnZ2FibGUtaGFuZGxlXCIgKTtcblx0fSxcblxuXHRfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGhlbHBlcklzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb24oIG8uaGVscGVyICksXG5cdFx0XHRoZWxwZXIgPSBoZWxwZXJJc0Z1bmN0aW9uID9cblx0XHRcdFx0JCggby5oZWxwZXIuYXBwbHkoIHRoaXMuZWxlbWVudFsgMCBdLCBbIGV2ZW50IF0gKSApIDpcblx0XHRcdFx0KCBvLmhlbHBlciA9PT0gXCJjbG9uZVwiID9cblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xvbmUoKS5yZW1vdmVBdHRyKCBcImlkXCIgKSA6XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50ICk7XG5cblx0XHRpZiAoICFoZWxwZXIucGFyZW50cyggXCJib2R5XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRoZWxwZXIuYXBwZW5kVG8oICggby5hcHBlbmRUbyA9PT0gXCJwYXJlbnRcIiA/XG5cdFx0XHRcdHRoaXMuZWxlbWVudFsgMCBdLnBhcmVudE5vZGUgOlxuXHRcdFx0XHRvLmFwcGVuZFRvICkgKTtcblx0XHR9XG5cblx0XHQvLyBIdHRwOi8vYnVncy5qcXVlcnl1aS5jb20vdGlja2V0Lzk0NDZcblx0XHQvLyBhIGhlbHBlciBmdW5jdGlvbiBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBlbGVtZW50XG5cdFx0Ly8gd2hpY2ggd291bGRuJ3QgaGF2ZSBiZWVuIHNldCB0byByZWxhdGl2ZSBpbiBfY3JlYXRlXG5cdFx0aWYgKCBoZWxwZXJJc0Z1bmN0aW9uICYmIGhlbHBlclsgMCBdID09PSB0aGlzLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdHRoaXMuX3NldFBvc2l0aW9uUmVsYXRpdmUoKTtcblx0XHR9XG5cblx0XHRpZiAoIGhlbHBlclsgMCBdICE9PSB0aGlzLmVsZW1lbnRbIDAgXSAmJlxuXHRcdFx0XHQhKCAvKGZpeGVkfGFic29sdXRlKS8gKS50ZXN0KCBoZWxwZXIuY3NzKCBcInBvc2l0aW9uXCIgKSApICkge1xuXHRcdFx0aGVscGVyLmNzcyggXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGVscGVyO1xuXG5cdH0sXG5cblx0X3NldFBvc2l0aW9uUmVsYXRpdmU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggISggL14oPzpyfGF8ZikvICkudGVzdCggdGhpcy5lbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICkgKSApIHtcblx0XHRcdHRoaXMuZWxlbWVudFsgMCBdLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblx0fSxcblxuXHRfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSBvYmouc3BsaXQoIFwiIFwiICk7XG5cdFx0fVxuXHRcdGlmICggJC5pc0FycmF5KCBvYmogKSApIHtcblx0XHRcdG9iaiA9IHsgbGVmdDogK29ialsgMCBdLCB0b3A6ICtvYmpbIDEgXSB8fCAwIH07XG5cdFx0fVxuXHRcdGlmICggXCJsZWZ0XCIgaW4gb2JqICkge1xuXHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmICggXCJyaWdodFwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gb2JqLnJpZ2h0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmICggXCJ0b3BcIiBpbiBvYmogKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDtcblx0XHR9XG5cdFx0aWYgKCBcImJvdHRvbVwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7XG5cdFx0fVxuXHR9LFxuXG5cdF9pc1Jvb3ROb2RlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRyZXR1cm4gKCAvKGh0bWx8Ym9keSkvaSApLnRlc3QoIGVsZW1lbnQudGFnTmFtZSApIHx8IGVsZW1lbnQgPT09IHRoaXMuZG9jdW1lbnRbIDAgXTtcblx0fSxcblxuXHRfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbigpIHtcblxuXHRcdC8vR2V0IHRoZSBvZmZzZXRQYXJlbnQgYW5kIGNhY2hlIGl0cyBwb3NpdGlvblxuXHRcdHZhciBwbyA9IHRoaXMub2Zmc2V0UGFyZW50Lm9mZnNldCgpLFxuXHRcdFx0ZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF07XG5cblx0XHQvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gbW9kaWZ5IGEgb2Zmc2V0IGNhbGN1bGF0ZWQgb24gc3RhcnQsIHNpbmNlIHRoZVxuXHRcdC8vIGZvbGxvd2luZyBoYXBwZW5lZDpcblx0XHQvLyAxLiBUaGUgcG9zaXRpb24gb2YgdGhlIGhlbHBlciBpcyBhYnNvbHV0ZSwgc28gaXQncyBwb3NpdGlvbiBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZVxuXHRcdC8vIG5leHQgcG9zaXRpb25lZCBwYXJlbnRcblx0XHQvLyAyLiBUaGUgYWN0dWFsIG9mZnNldCBwYXJlbnQgaXMgYSBjaGlsZCBvZiB0aGUgc2Nyb2xsIHBhcmVudCwgYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzbid0XG5cdFx0Ly8gdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGF0IHRoZSBzY3JvbGwgaXMgaW5jbHVkZWQgaW4gdGhlIGluaXRpYWwgY2FsY3VsYXRpb24gb2YgdGhlXG5cdFx0Ly8gb2Zmc2V0IG9mIHRoZSBwYXJlbnQsIGFuZCBuZXZlciByZWNhbGN1bGF0ZWQgdXBvbiBkcmFnXG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiYgdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gZG9jdW1lbnQgJiZcblx0XHRcdFx0JC5jb250YWlucyggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSwgdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkge1xuXHRcdFx0cG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7XG5cdFx0XHRwby50b3AgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9pc1Jvb3ROb2RlKCB0aGlzLm9mZnNldFBhcmVudFsgMCBdICkgKSB7XG5cdFx0XHRwbyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcG8udG9wICsgKCBwYXJzZUludCggdGhpcy5vZmZzZXRQYXJlbnQuY3NzKCBcImJvcmRlclRvcFdpZHRoXCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHRsZWZ0OiBwby5sZWZ0ICsgKCBwYXJzZUludCggdGhpcy5vZmZzZXRQYXJlbnQuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiICksIDEwICkgfHwgMCApXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZXRSZWxhdGl2ZU9mZnNldDogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uICE9PSBcInJlbGF0aXZlXCIgKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHR2YXIgcCA9IHRoaXMuZWxlbWVudC5wb3NpdGlvbigpLFxuXHRcdFx0c2Nyb2xsSXNSb290Tm9kZSA9IHRoaXMuX2lzUm9vdE5vZGUoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHAudG9wIC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCBcInRvcFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0KCAhc2Nyb2xsSXNSb290Tm9kZSA/IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogMCApLFxuXHRcdFx0bGVmdDogcC5sZWZ0IC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCBcImxlZnRcIiApLCAxMCApIHx8IDAgKSArXG5cdFx0XHRcdCggIXNjcm9sbElzUm9vdE5vZGUgPyB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiAwIClcblx0XHR9O1xuXG5cdH0sXG5cblx0X2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5tYXJnaW5zID0ge1xuXHRcdFx0bGVmdDogKCBwYXJzZUludCggdGhpcy5lbGVtZW50LmNzcyggXCJtYXJnaW5MZWZ0XCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHR0b3A6ICggcGFyc2VJbnQoIHRoaXMuZWxlbWVudC5jc3MoIFwibWFyZ2luVG9wXCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHRyaWdodDogKCBwYXJzZUludCggdGhpcy5lbGVtZW50LmNzcyggXCJtYXJnaW5SaWdodFwiICksIDEwICkgfHwgMCApLFxuXHRcdFx0Ym90dG9tOiAoIHBhcnNlSW50KCB0aGlzLmVsZW1lbnQuY3NzKCBcIm1hcmdpbkJvdHRvbVwiICksIDEwICkgfHwgMCApXG5cdFx0fTtcblx0fSxcblxuXHRfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IHtcblx0XHRcdHdpZHRoOiB0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksXG5cdFx0XHRoZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KClcblx0XHR9O1xuXHR9LFxuXG5cdF9zZXRDb250YWlubWVudDogZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgaXNVc2VyU2Nyb2xsYWJsZSwgYywgY2UsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0ZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF07XG5cblx0XHR0aGlzLnJlbGF0aXZlQ29udGFpbmVyID0gbnVsbDtcblxuXHRcdGlmICggIW8uY29udGFpbm1lbnQgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gbnVsbDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwid2luZG93XCIgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gW1xuXHRcdFx0XHQkKCB3aW5kb3cgKS5zY3JvbGxMZWZ0KCkgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsXG5cdFx0XHRcdCQoIHdpbmRvdyApLnNjcm9sbFRvcCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCxcblx0XHRcdFx0JCggd2luZG93ICkuc2Nyb2xsTGVmdCgpICsgJCggd2luZG93ICkud2lkdGgoKSAtXG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LFxuXHRcdFx0XHQkKCB3aW5kb3cgKS5zY3JvbGxUb3AoKSArXG5cdFx0XHRcdFx0KCAkKCB3aW5kb3cgKS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0ICkgLVxuXHRcdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiApIHtcblx0XHRcdHRoaXMuY29udGFpbm1lbnQgPSBbXG5cdFx0XHRcdDAsXG5cdFx0XHRcdDAsXG5cdFx0XHRcdCQoIGRvY3VtZW50ICkud2lkdGgoKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCxcblx0XHRcdFx0KCAkKCBkb2N1bWVudCApLmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQgKSAtXG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wXG5cdFx0XHRdO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggby5jb250YWlubWVudC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gby5jb250YWlubWVudDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwicGFyZW50XCIgKSB7XG5cdFx0XHRvLmNvbnRhaW5tZW50ID0gdGhpcy5oZWxwZXJbIDAgXS5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdGMgPSAkKCBvLmNvbnRhaW5tZW50ICk7XG5cdFx0Y2UgPSBjWyAwIF07XG5cblx0XHRpZiAoICFjZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc1VzZXJTY3JvbGxhYmxlID0gLyhzY3JvbGx8YXV0bykvLnRlc3QoIGMuY3NzKCBcIm92ZXJmbG93XCIgKSApO1xuXG5cdFx0dGhpcy5jb250YWlubWVudCA9IFtcblx0XHRcdCggcGFyc2VJbnQoIGMuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwicGFkZGluZ0xlZnRcIiApLCAxMCApIHx8IDAgKSxcblx0XHRcdCggcGFyc2VJbnQoIGMuY3NzKCBcImJvcmRlclRvcFdpZHRoXCIgKSwgMTAgKSB8fCAwICkgK1xuXHRcdFx0XHQoIHBhcnNlSW50KCBjLmNzcyggXCJwYWRkaW5nVG9wXCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHQoIGlzVXNlclNjcm9sbGFibGUgPyBNYXRoLm1heCggY2Uuc2Nyb2xsV2lkdGgsIGNlLm9mZnNldFdpZHRoICkgOiBjZS5vZmZzZXRXaWR0aCApIC1cblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwiYm9yZGVyUmlnaHRXaWR0aFwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwicGFkZGluZ1JpZ2h0XCIgKSwgMTAgKSB8fCAwICkgLVxuXHRcdFx0XHR0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC1cblx0XHRcdFx0dGhpcy5tYXJnaW5zLmxlZnQgLVxuXHRcdFx0XHR0aGlzLm1hcmdpbnMucmlnaHQsXG5cdFx0XHQoIGlzVXNlclNjcm9sbGFibGUgPyBNYXRoLm1heCggY2Uuc2Nyb2xsSGVpZ2h0LCBjZS5vZmZzZXRIZWlnaHQgKSA6IGNlLm9mZnNldEhlaWdodCApIC1cblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwiYm9yZGVyQm90dG9tV2lkdGhcIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdCggcGFyc2VJbnQoIGMuY3NzKCBcInBhZGRpbmdCb3R0b21cIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC1cblx0XHRcdFx0dGhpcy5tYXJnaW5zLnRvcCAtXG5cdFx0XHRcdHRoaXMubWFyZ2lucy5ib3R0b21cblx0XHRdO1xuXHRcdHRoaXMucmVsYXRpdmVDb250YWluZXIgPSBjO1xuXHR9LFxuXG5cdF9jb252ZXJ0UG9zaXRpb25UbzogZnVuY3Rpb24oIGQsIHBvcyApIHtcblxuXHRcdGlmICggIXBvcyApIHtcblx0XHRcdHBvcyA9IHRoaXMucG9zaXRpb247XG5cdFx0fVxuXG5cdFx0dmFyIG1vZCA9IGQgPT09IFwiYWJzb2x1dGVcIiA/IDEgOiAtMSxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSB0aGlzLl9pc1Jvb3ROb2RlKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAoXG5cblx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHBvcy50b3BcdCtcblxuXHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogbW9kICtcblxuXHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQudG9wICogbW9kIC1cblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/XG5cdFx0XHRcdFx0LXRoaXMub2Zmc2V0LnNjcm9sbC50b3AgOlxuXHRcdFx0XHRcdCggc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiB0aGlzLm9mZnNldC5zY3JvbGwudG9wICkgKSAqIG1vZCApXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwb3MubGVmdCArXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgKiBtb2QgK1xuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICogbW9kXHQtXG5cdFx0XHRcdCggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgP1xuXHRcdFx0XHRcdC10aGlzLm9mZnNldC5zY3JvbGwubGVmdCA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0ICkgKSAqIG1vZCApXG5cdFx0XHQpXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZW5lcmF0ZVBvc2l0aW9uOiBmdW5jdGlvbiggZXZlbnQsIGNvbnN0cmFpblBvc2l0aW9uICkge1xuXG5cdFx0dmFyIGNvbnRhaW5tZW50LCBjbywgdG9wLCBsZWZ0LFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSB0aGlzLl9pc1Jvb3ROb2RlKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICksXG5cdFx0XHRwYWdlWCA9IGV2ZW50LnBhZ2VYLFxuXHRcdFx0cGFnZVkgPSBldmVudC5wYWdlWTtcblxuXHRcdC8vIENhY2hlIHRoZSBzY3JvbGxcblx0XHRpZiAoICFzY3JvbGxJc1Jvb3ROb2RlIHx8ICF0aGlzLm9mZnNldC5zY3JvbGwgKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5zY3JvbGwgPSB7XG5cdFx0XHRcdHRvcDogdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdGxlZnQ6IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC1cblx0XHQgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LlxuXHRcdCAqL1xuXG5cdFx0Ly8gSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zXG5cdFx0aWYgKCBjb25zdHJhaW5Qb3NpdGlvbiApIHtcblx0XHRcdGlmICggdGhpcy5jb250YWlubWVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLnJlbGF0aXZlQ29udGFpbmVyICkge1xuXHRcdFx0XHRcdGNvID0gdGhpcy5yZWxhdGl2ZUNvbnRhaW5lci5vZmZzZXQoKTtcblx0XHRcdFx0XHRjb250YWlubWVudCA9IFtcblx0XHRcdFx0XHRcdHRoaXMuY29udGFpbm1lbnRbIDAgXSArIGNvLmxlZnQsXG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5tZW50WyAxIF0gKyBjby50b3AsXG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5tZW50WyAyIF0gKyBjby5sZWZ0LFxuXHRcdFx0XHRcdFx0dGhpcy5jb250YWlubWVudFsgMyBdICsgY28udG9wXG5cdFx0XHRcdFx0XTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250YWlubWVudCA9IHRoaXMuY29udGFpbm1lbnQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IGNvbnRhaW5tZW50WyAwIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVggPSBjb250YWlubWVudFsgMCBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgY29udGFpbm1lbnRbIDEgXSApIHtcblx0XHRcdFx0XHRwYWdlWSA9IGNvbnRhaW5tZW50WyAxIF0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiBjb250YWlubWVudFsgMiBdICkge1xuXHRcdFx0XHRcdHBhZ2VYID0gY29udGFpbm1lbnRbIDIgXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+IGNvbnRhaW5tZW50WyAzIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVkgPSBjb250YWlubWVudFsgMyBdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggby5ncmlkICkge1xuXG5cdFx0XHRcdC8vQ2hlY2sgZm9yIGdyaWQgZWxlbWVudHMgc2V0IHRvIDAgdG8gcHJldmVudCBkaXZpZGUgYnkgMCBlcnJvciBjYXVzaW5nIGludmFsaWRcblx0XHRcdFx0Ly8gYXJndW1lbnQgZXJyb3JzIGluIElFIChzZWUgdGlja2V0ICM2OTUwKVxuXHRcdFx0XHR0b3AgPSBvLmdyaWRbIDEgXSA/IHRoaXMub3JpZ2luYWxQYWdlWSArIE1hdGgucm91bmQoICggcGFnZVkgLVxuXHRcdFx0XHRcdHRoaXMub3JpZ2luYWxQYWdlWSApIC8gby5ncmlkWyAxIF0gKSAqIG8uZ3JpZFsgMSBdIDogdGhpcy5vcmlnaW5hbFBhZ2VZO1xuXHRcdFx0XHRwYWdlWSA9IGNvbnRhaW5tZW50ID8gKCAoIHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBjb250YWlubWVudFsgMSBdIHx8XG5cdFx0XHRcdFx0dG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gY29udGFpbm1lbnRbIDMgXSApID9cblx0XHRcdFx0XHRcdHRvcCA6XG5cdFx0XHRcdFx0XHQoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IGNvbnRhaW5tZW50WyAxIF0gKSA/XG5cdFx0XHRcdFx0XHRcdHRvcCAtIG8uZ3JpZFsgMSBdIDogdG9wICsgby5ncmlkWyAxIF0gKSApIDogdG9wO1xuXG5cdFx0XHRcdGxlZnQgPSBvLmdyaWRbIDAgXSA/IHRoaXMub3JpZ2luYWxQYWdlWCArXG5cdFx0XHRcdFx0TWF0aC5yb3VuZCggKCBwYWdlWCAtIHRoaXMub3JpZ2luYWxQYWdlWCApIC8gby5ncmlkWyAwIF0gKSAqIG8uZ3JpZFsgMCBdIDpcblx0XHRcdFx0XHR0aGlzLm9yaWdpbmFsUGFnZVg7XG5cdFx0XHRcdHBhZ2VYID0gY29udGFpbm1lbnQgPyAoICggbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gY29udGFpbm1lbnRbIDAgXSB8fFxuXHRcdFx0XHRcdGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbIDIgXSApID9cblx0XHRcdFx0XHRcdGxlZnQgOlxuXHRcdFx0XHRcdFx0KCAoIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IGNvbnRhaW5tZW50WyAwIF0gKSA/XG5cdFx0XHRcdFx0XHRcdGxlZnQgLSBvLmdyaWRbIDAgXSA6IGxlZnQgKyBvLmdyaWRbIDAgXSApICkgOiBsZWZ0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG8uYXhpcyA9PT0gXCJ5XCIgKSB7XG5cdFx0XHRcdHBhZ2VYID0gdGhpcy5vcmlnaW5hbFBhZ2VYO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG8uYXhpcyA9PT0gXCJ4XCIgKSB7XG5cdFx0XHRcdHBhZ2VZID0gdGhpcy5vcmlnaW5hbFBhZ2VZO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IChcblxuXHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0cGFnZVkgLVxuXG5cdFx0XHRcdC8vIENsaWNrIG9mZnNldCAocmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCAtXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAtXG5cblx0XHRcdFx0Ly8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcilcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LnRvcCArXG5cdFx0XHRcdCggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID9cblx0XHRcdFx0XHQtdGhpcy5vZmZzZXQuc2Nyb2xsLnRvcCA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC50b3AgKSApXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwYWdlWCAtXG5cblx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCAtXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLVxuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICtcblx0XHRcdFx0KCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgP1xuXHRcdFx0XHRcdC10aGlzLm9mZnNldC5zY3JvbGwubGVmdCA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0ICkgKVxuXHRcdFx0KVxuXHRcdH07XG5cblx0fSxcblxuXHRfY2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhlbHBlciwgXCJ1aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiApO1xuXHRcdGlmICggdGhpcy5oZWxwZXJbIDAgXSAhPT0gdGhpcy5lbGVtZW50WyAwIF0gJiYgIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCApIHtcblx0XHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXHRcdH1cblx0XHR0aGlzLmhlbHBlciA9IG51bGw7XG5cdFx0dGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLmRlc3Ryb3lPbkNsZWFyICkge1xuXHRcdFx0dGhpcy5kZXN0cm95KCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEZyb20gbm93IG9uIGJ1bGsgc3R1ZmYgLSBtYWlubHkgaGVscGVyc1xuXG5cdF90cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIHVpICkge1xuXHRcdHVpID0gdWkgfHwgdGhpcy5fdWlIYXNoKCk7XG5cdFx0JC51aS5wbHVnaW4uY2FsbCggdGhpcywgdHlwZSwgWyBldmVudCwgdWksIHRoaXMgXSwgdHJ1ZSApO1xuXG5cdFx0Ly8gQWJzb2x1dGUgcG9zaXRpb24gYW5kIG9mZnNldCAoc2VlICM2ODg0ICkgaGF2ZSB0byBiZSByZWNhbGN1bGF0ZWQgYWZ0ZXIgcGx1Z2luc1xuXHRcdGlmICggL14oZHJhZ3xzdGFydHxzdG9wKS8udGVzdCggdHlwZSApICkge1xuXHRcdFx0dGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKCBcImFic29sdXRlXCIgKTtcblx0XHRcdHVpLm9mZnNldCA9IHRoaXMucG9zaXRpb25BYnM7XG5cdFx0fVxuXHRcdHJldHVybiAkLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuY2FsbCggdGhpcywgdHlwZSwgZXZlbnQsIHVpICk7XG5cdH0sXG5cblx0cGx1Z2luczoge30sXG5cblx0X3VpSGFzaDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlbHBlcjogdGhpcy5oZWxwZXIsXG5cdFx0XHRwb3NpdGlvbjogdGhpcy5wb3NpdGlvbixcblx0XHRcdG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbixcblx0XHRcdG9mZnNldDogdGhpcy5wb3NpdGlvbkFic1xuXHRcdH07XG5cdH1cblxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwiZHJhZ2dhYmxlXCIsIFwiY29ubmVjdFRvU29ydGFibGVcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgZHJhZ2dhYmxlICkge1xuXHRcdHZhciB1aVNvcnRhYmxlID0gJC5leHRlbmQoIHt9LCB1aSwge1xuXHRcdFx0aXRlbTogZHJhZ2dhYmxlLmVsZW1lbnRcblx0XHR9ICk7XG5cblx0XHRkcmFnZ2FibGUuc29ydGFibGVzID0gW107XG5cdFx0JCggZHJhZ2dhYmxlLm9wdGlvbnMuY29ubmVjdFRvU29ydGFibGUgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzb3J0YWJsZSA9ICQoIHRoaXMgKS5zb3J0YWJsZSggXCJpbnN0YW5jZVwiICk7XG5cblx0XHRcdGlmICggc29ydGFibGUgJiYgIXNvcnRhYmxlLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGRyYWdnYWJsZS5zb3J0YWJsZXMucHVzaCggc29ydGFibGUgKTtcblxuXHRcdFx0XHQvLyBSZWZyZXNoUG9zaXRpb25zIGlzIGNhbGxlZCBhdCBkcmFnIHN0YXJ0IHRvIHJlZnJlc2ggdGhlIGNvbnRhaW5lckNhY2hlXG5cdFx0XHRcdC8vIHdoaWNoIGlzIHVzZWQgaW4gZHJhZy4gVGhpcyBlbnN1cmVzIGl0J3MgaW5pdGlhbGl6ZWQgYW5kIHN5bmNocm9uaXplZFxuXHRcdFx0XHQvLyB3aXRoIGFueSBjaGFuZ2VzIHRoYXQgbWlnaHQgaGF2ZSBoYXBwZW5lZCBvbiB0aGUgcGFnZSBzaW5jZSBpbml0aWFsaXphdGlvbi5cblx0XHRcdFx0c29ydGFibGUucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdFx0XHRzb3J0YWJsZS5fdHJpZ2dlciggXCJhY3RpdmF0ZVwiLCBldmVudCwgdWlTb3J0YWJsZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgZHJhZ2dhYmxlICkge1xuXHRcdHZhciB1aVNvcnRhYmxlID0gJC5leHRlbmQoIHt9LCB1aSwge1xuXHRcdFx0aXRlbTogZHJhZ2dhYmxlLmVsZW1lbnRcblx0XHR9ICk7XG5cblx0XHRkcmFnZ2FibGUuY2FuY2VsSGVscGVyUmVtb3ZhbCA9IGZhbHNlO1xuXG5cdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzb3J0YWJsZSA9IHRoaXM7XG5cblx0XHRcdGlmICggc29ydGFibGUuaXNPdmVyICkge1xuXHRcdFx0XHRzb3J0YWJsZS5pc092ZXIgPSAwO1xuXG5cdFx0XHRcdC8vIEFsbG93IHRoaXMgc29ydGFibGUgdG8gaGFuZGxlIHJlbW92aW5nIHRoZSBoZWxwZXJcblx0XHRcdFx0ZHJhZ2dhYmxlLmNhbmNlbEhlbHBlclJlbW92YWwgPSB0cnVlO1xuXHRcdFx0XHRzb3J0YWJsZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gVXNlIF9zdG9yZWRDU1MgVG8gcmVzdG9yZSBwcm9wZXJ0aWVzIGluIHRoZSBzb3J0YWJsZSxcblx0XHRcdFx0Ly8gYXMgdGhpcyBhbHNvIGhhbmRsZXMgcmV2ZXJ0ICgjOTY3NSkgc2luY2UgdGhlIGRyYWdnYWJsZVxuXHRcdFx0XHQvLyBtYXkgaGF2ZSBtb2RpZmllZCB0aGVtIGluIHVuZXhwZWN0ZWQgd2F5cyAoIzg4MDkpXG5cdFx0XHRcdHNvcnRhYmxlLl9zdG9yZWRDU1MgPSB7XG5cdFx0XHRcdFx0cG9zaXRpb246IHNvcnRhYmxlLnBsYWNlaG9sZGVyLmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0XHRcdFx0dG9wOiBzb3J0YWJsZS5wbGFjZWhvbGRlci5jc3MoIFwidG9wXCIgKSxcblx0XHRcdFx0XHRsZWZ0OiBzb3J0YWJsZS5wbGFjZWhvbGRlci5jc3MoIFwibGVmdFwiIClcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRzb3J0YWJsZS5fbW91c2VTdG9wKCBldmVudCApO1xuXG5cdFx0XHRcdC8vIE9uY2UgZHJhZyBoYXMgZW5kZWQsIHRoZSBzb3J0YWJsZSBzaG91bGQgcmV0dXJuIHRvIHVzaW5nXG5cdFx0XHRcdC8vIGl0cyBvcmlnaW5hbCBoZWxwZXIsIG5vdCB0aGUgc2hhcmVkIGhlbHBlciBmcm9tIGRyYWdnYWJsZVxuXHRcdFx0XHRzb3J0YWJsZS5vcHRpb25zLmhlbHBlciA9IHNvcnRhYmxlLm9wdGlvbnMuX2hlbHBlcjtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCB0aGlzIFNvcnRhYmxlIGZyb20gcmVtb3ZpbmcgdGhlIGhlbHBlci5cblx0XHRcdFx0Ly8gSG93ZXZlciwgZG9uJ3Qgc2V0IHRoZSBkcmFnZ2FibGUgdG8gcmVtb3ZlIHRoZSBoZWxwZXJcblx0XHRcdFx0Ly8gZWl0aGVyIGFzIGFub3RoZXIgY29ubmVjdGVkIFNvcnRhYmxlIG1heSB5ZXQgaGFuZGxlIHRoZSByZW1vdmFsLlxuXHRcdFx0XHRzb3J0YWJsZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gdHJ1ZTtcblxuXHRcdFx0XHRzb3J0YWJsZS5fdHJpZ2dlciggXCJkZWFjdGl2YXRlXCIsIGV2ZW50LCB1aVNvcnRhYmxlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpLCBkcmFnZ2FibGUgKSB7XG5cdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbm5lcm1vc3RJbnRlcnNlY3RpbmcgPSBmYWxzZSxcblx0XHRcdFx0c29ydGFibGUgPSB0aGlzO1xuXG5cdFx0XHQvLyBDb3B5IG92ZXIgdmFyaWFibGVzIHRoYXQgc29ydGFibGUncyBfaW50ZXJzZWN0c1dpdGggdXNlc1xuXHRcdFx0c29ydGFibGUucG9zaXRpb25BYnMgPSBkcmFnZ2FibGUucG9zaXRpb25BYnM7XG5cdFx0XHRzb3J0YWJsZS5oZWxwZXJQcm9wb3J0aW9ucyA9IGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucztcblx0XHRcdHNvcnRhYmxlLm9mZnNldC5jbGljayA9IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2s7XG5cblx0XHRcdGlmICggc29ydGFibGUuX2ludGVyc2VjdHNXaXRoKCBzb3J0YWJsZS5jb250YWluZXJDYWNoZSApICkge1xuXHRcdFx0XHRpbm5lcm1vc3RJbnRlcnNlY3RpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdCQuZWFjaCggZHJhZ2dhYmxlLnNvcnRhYmxlcywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHQvLyBDb3B5IG92ZXIgdmFyaWFibGVzIHRoYXQgc29ydGFibGUncyBfaW50ZXJzZWN0c1dpdGggdXNlc1xuXHRcdFx0XHRcdHRoaXMucG9zaXRpb25BYnMgPSBkcmFnZ2FibGUucG9zaXRpb25BYnM7XG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucztcblx0XHRcdFx0XHR0aGlzLm9mZnNldC5jbGljayA9IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2s7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMgIT09IHNvcnRhYmxlICYmXG5cdFx0XHRcdFx0XHRcdHRoaXMuX2ludGVyc2VjdHNXaXRoKCB0aGlzLmNvbnRhaW5lckNhY2hlICkgJiZcblx0XHRcdFx0XHRcdFx0JC5jb250YWlucyggc29ydGFibGUuZWxlbWVudFsgMCBdLCB0aGlzLmVsZW1lbnRbIDAgXSApICkge1xuXHRcdFx0XHRcdFx0aW5uZXJtb3N0SW50ZXJzZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGlubmVybW9zdEludGVyc2VjdGluZztcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlubmVybW9zdEludGVyc2VjdGluZyApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpbnRlcnNlY3RzLCB3ZSB1c2UgYSBsaXR0bGUgaXNPdmVyIHZhcmlhYmxlIGFuZCBzZXQgaXQgb25jZSxcblx0XHRcdFx0Ly8gc28gdGhhdCB0aGUgbW92ZS1pbiBzdHVmZiBnZXRzIGZpcmVkIG9ubHkgb25jZS5cblx0XHRcdFx0aWYgKCAhc29ydGFibGUuaXNPdmVyICkge1xuXHRcdFx0XHRcdHNvcnRhYmxlLmlzT3ZlciA9IDE7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBkcmFnZ2FibGUncyBwYXJlbnQgaW4gY2FzZSB3ZSBuZWVkIHRvIHJlYXBwZW5kIHRvIGl0IGxhdGVyLlxuXHRcdFx0XHRcdGRyYWdnYWJsZS5fcGFyZW50ID0gdWkuaGVscGVyLnBhcmVudCgpO1xuXG5cdFx0XHRcdFx0c29ydGFibGUuY3VycmVudEl0ZW0gPSB1aS5oZWxwZXJcblx0XHRcdFx0XHRcdC5hcHBlbmRUbyggc29ydGFibGUuZWxlbWVudCApXG5cdFx0XHRcdFx0XHQuZGF0YSggXCJ1aS1zb3J0YWJsZS1pdGVtXCIsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGhlbHBlciBvcHRpb24gdG8gbGF0ZXIgcmVzdG9yZSBpdFxuXHRcdFx0XHRcdHNvcnRhYmxlLm9wdGlvbnMuX2hlbHBlciA9IHNvcnRhYmxlLm9wdGlvbnMuaGVscGVyO1xuXG5cdFx0XHRcdFx0c29ydGFibGUub3B0aW9ucy5oZWxwZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiB1aS5oZWxwZXJbIDAgXTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gRmlyZSB0aGUgc3RhcnQgZXZlbnRzIG9mIHRoZSBzb3J0YWJsZSB3aXRoIG91ciBwYXNzZWQgYnJvd3NlciBldmVudCxcblx0XHRcdFx0XHQvLyBhbmQgb3VyIG93biBoZWxwZXIgKHNvIGl0IGRvZXNuJ3QgY3JlYXRlIGEgbmV3IG9uZSlcblx0XHRcdFx0XHRldmVudC50YXJnZXQgPSBzb3J0YWJsZS5jdXJyZW50SXRlbVsgMCBdO1xuXHRcdFx0XHRcdHNvcnRhYmxlLl9tb3VzZUNhcHR1cmUoIGV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdFx0c29ydGFibGUuX21vdXNlU3RhcnQoIGV2ZW50LCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBCZWNhdXNlIHRoZSBicm93c2VyIGV2ZW50IGlzIHdheSBvZmYgdGhlIG5ldyBhcHBlbmRlZCBwb3J0bGV0LFxuXHRcdFx0XHRcdC8vIG1vZGlmeSBuZWNlc3NhcnkgdmFyaWFibGVzIHRvIHJlZmxlY3QgdGhlIGNoYW5nZXNcblx0XHRcdFx0XHRzb3J0YWJsZS5vZmZzZXQuY2xpY2sudG9wID0gZHJhZ2dhYmxlLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdFx0c29ydGFibGUub2Zmc2V0LmNsaWNrLmxlZnQgPSBkcmFnZ2FibGUub2Zmc2V0LmNsaWNrLmxlZnQ7XG5cdFx0XHRcdFx0c29ydGFibGUub2Zmc2V0LnBhcmVudC5sZWZ0IC09IGRyYWdnYWJsZS5vZmZzZXQucGFyZW50LmxlZnQgLVxuXHRcdFx0XHRcdFx0c29ydGFibGUub2Zmc2V0LnBhcmVudC5sZWZ0O1xuXHRcdFx0XHRcdHNvcnRhYmxlLm9mZnNldC5wYXJlbnQudG9wIC09IGRyYWdnYWJsZS5vZmZzZXQucGFyZW50LnRvcCAtXG5cdFx0XHRcdFx0XHRzb3J0YWJsZS5vZmZzZXQucGFyZW50LnRvcDtcblxuXHRcdFx0XHRcdGRyYWdnYWJsZS5fdHJpZ2dlciggXCJ0b1NvcnRhYmxlXCIsIGV2ZW50ICk7XG5cblx0XHRcdFx0XHQvLyBJbmZvcm0gZHJhZ2dhYmxlIHRoYXQgdGhlIGhlbHBlciBpcyBpbiBhIHZhbGlkIGRyb3Agem9uZSxcblx0XHRcdFx0XHQvLyB1c2VkIHNvbGVseSBpbiB0aGUgcmV2ZXJ0IG9wdGlvbiB0byBoYW5kbGUgXCJ2YWxpZC9pbnZhbGlkXCIuXG5cdFx0XHRcdFx0ZHJhZ2dhYmxlLmRyb3BwZWQgPSBzb3J0YWJsZS5lbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gTmVlZCB0byByZWZyZXNoUG9zaXRpb25zIG9mIGFsbCBzb3J0YWJsZXMgaW4gdGhlIGNhc2UgdGhhdFxuXHRcdFx0XHRcdC8vIGFkZGluZyB0byBvbmUgc29ydGFibGUgY2hhbmdlcyB0aGUgbG9jYXRpb24gb2YgdGhlIG90aGVyIHNvcnRhYmxlcyAoIzk2NzUpXG5cdFx0XHRcdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdC8vIEhhY2sgc28gcmVjZWl2ZS91cGRhdGUgY2FsbGJhY2tzIHdvcmsgKG1vc3RseSlcblx0XHRcdFx0XHRkcmFnZ2FibGUuY3VycmVudEl0ZW0gPSBkcmFnZ2FibGUuZWxlbWVudDtcblx0XHRcdFx0XHRzb3J0YWJsZS5mcm9tT3V0c2lkZSA9IGRyYWdnYWJsZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc29ydGFibGUuY3VycmVudEl0ZW0gKSB7XG5cdFx0XHRcdFx0c29ydGFibGUuX21vdXNlRHJhZyggZXZlbnQgKTtcblxuXHRcdFx0XHRcdC8vIENvcHkgdGhlIHNvcnRhYmxlJ3MgcG9zaXRpb24gYmVjYXVzZSB0aGUgZHJhZ2dhYmxlJ3MgY2FuIHBvdGVudGlhbGx5IHJlZmxlY3Rcblx0XHRcdFx0XHQvLyBhIHJlbGF0aXZlIHBvc2l0aW9uLCB3aGlsZSBzb3J0YWJsZSBpcyBhbHdheXMgYWJzb2x1dGUsIHdoaWNoIHRoZSBkcmFnZ2VkXG5cdFx0XHRcdFx0Ly8gZWxlbWVudCBoYXMgbm93IGJlY29tZS4gKCM4ODA5KVxuXHRcdFx0XHRcdHVpLnBvc2l0aW9uID0gc29ydGFibGUucG9zaXRpb247XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgZG9lc24ndCBpbnRlcnNlY3Qgd2l0aCB0aGUgc29ydGFibGUsIGFuZCBpdCBpbnRlcnNlY3RlZCBiZWZvcmUsXG5cdFx0XHRcdC8vIHdlIGZha2UgdGhlIGRyYWcgc3RvcCBvZiB0aGUgc29ydGFibGUsIGJ1dCBtYWtlIHN1cmUgaXQgZG9lc24ndCByZW1vdmVcblx0XHRcdFx0Ly8gdGhlIGhlbHBlciBieSB1c2luZyBjYW5jZWxIZWxwZXJSZW1vdmFsLlxuXHRcdFx0XHRpZiAoIHNvcnRhYmxlLmlzT3ZlciApIHtcblxuXHRcdFx0XHRcdHNvcnRhYmxlLmlzT3ZlciA9IDA7XG5cdFx0XHRcdFx0c29ydGFibGUuY2FuY2VsSGVscGVyUmVtb3ZhbCA9IHRydWU7XG5cblx0XHRcdFx0XHQvLyBDYWxsaW5nIHNvcnRhYmxlJ3MgbW91c2VTdG9wIHdvdWxkIHRyaWdnZXIgYSByZXZlcnQsXG5cdFx0XHRcdFx0Ly8gc28gcmV2ZXJ0IG11c3QgYmUgdGVtcG9yYXJpbHkgZmFsc2UgdW50aWwgYWZ0ZXIgbW91c2VTdG9wIGlzIGNhbGxlZC5cblx0XHRcdFx0XHRzb3J0YWJsZS5vcHRpb25zLl9yZXZlcnQgPSBzb3J0YWJsZS5vcHRpb25zLnJldmVydDtcblx0XHRcdFx0XHRzb3J0YWJsZS5vcHRpb25zLnJldmVydCA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0c29ydGFibGUuX3RyaWdnZXIoIFwib3V0XCIsIGV2ZW50LCBzb3J0YWJsZS5fdWlIYXNoKCBzb3J0YWJsZSApICk7XG5cdFx0XHRcdFx0c29ydGFibGUuX21vdXNlU3RvcCggZXZlbnQsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIFJlc3RvcmUgc29ydGFibGUgYmVoYXZpb3JzIHRoYXQgd2VyZSBtb2RmaWVkXG5cdFx0XHRcdFx0Ly8gd2hlbiB0aGUgZHJhZ2dhYmxlIGVudGVyZWQgdGhlIHNvcnRhYmxlIGFyZWEgKCM5NDgxKVxuXHRcdFx0XHRcdHNvcnRhYmxlLm9wdGlvbnMucmV2ZXJ0ID0gc29ydGFibGUub3B0aW9ucy5fcmV2ZXJ0O1xuXHRcdFx0XHRcdHNvcnRhYmxlLm9wdGlvbnMuaGVscGVyID0gc29ydGFibGUub3B0aW9ucy5faGVscGVyO1xuXG5cdFx0XHRcdFx0aWYgKCBzb3J0YWJsZS5wbGFjZWhvbGRlciApIHtcblx0XHRcdFx0XHRcdHNvcnRhYmxlLnBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJlc3RvcmUgYW5kIHJlY2FsY3VsYXRlIHRoZSBkcmFnZ2FibGUncyBvZmZzZXQgY29uc2lkZXJpbmcgdGhlIHNvcnRhYmxlXG5cdFx0XHRcdFx0Ly8gbWF5IGhhdmUgbW9kaWZpZWQgdGhlbSBpbiB1bmV4cGVjdGVkIHdheXMuICgjODgwOSwgIzEwNjY5KVxuXHRcdFx0XHRcdHVpLmhlbHBlci5hcHBlbmRUbyggZHJhZ2dhYmxlLl9wYXJlbnQgKTtcblx0XHRcdFx0XHRkcmFnZ2FibGUuX3JlZnJlc2hPZmZzZXRzKCBldmVudCApO1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uID0gZHJhZ2dhYmxlLl9nZW5lcmF0ZVBvc2l0aW9uKCBldmVudCwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0ZHJhZ2dhYmxlLl90cmlnZ2VyKCBcImZyb21Tb3J0YWJsZVwiLCBldmVudCApO1xuXG5cdFx0XHRcdFx0Ly8gSW5mb3JtIGRyYWdnYWJsZSB0aGF0IHRoZSBoZWxwZXIgaXMgbm8gbG9uZ2VyIGluIGEgdmFsaWQgZHJvcCB6b25lXG5cdFx0XHRcdFx0ZHJhZ2dhYmxlLmRyb3BwZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5lZWQgdG8gcmVmcmVzaFBvc2l0aW9ucyBvZiBhbGwgc29ydGFibGVzIGp1c3QgaW4gY2FzZSByZW1vdmluZ1xuXHRcdFx0XHRcdC8vIGZyb20gb25lIHNvcnRhYmxlIGNoYW5nZXMgdGhlIGxvY2F0aW9uIG9mIG90aGVyIHNvcnRhYmxlcyAoIzk2NzUpXG5cdFx0XHRcdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwiZHJhZ2dhYmxlXCIsIFwiY3Vyc29yXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciB0ID0gJCggXCJib2R5XCIgKSxcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zO1xuXG5cdFx0aWYgKCB0LmNzcyggXCJjdXJzb3JcIiApICkge1xuXHRcdFx0by5fY3Vyc29yID0gdC5jc3MoIFwiY3Vyc29yXCIgKTtcblx0XHR9XG5cdFx0dC5jc3MoIFwiY3Vyc29yXCIsIG8uY3Vyc29yICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciBvID0gaW5zdGFuY2Uub3B0aW9ucztcblx0XHRpZiAoIG8uX2N1cnNvciApIHtcblx0XHRcdCQoIFwiYm9keVwiICkuY3NzKCBcImN1cnNvclwiLCBvLl9jdXJzb3IgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuJC51aS5wbHVnaW4uYWRkKCBcImRyYWdnYWJsZVwiLCBcIm9wYWNpdHlcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaW5zdGFuY2UgKSB7XG5cdFx0dmFyIHQgPSAkKCB1aS5oZWxwZXIgKSxcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zO1xuXHRcdGlmICggdC5jc3MoIFwib3BhY2l0eVwiICkgKSB7XG5cdFx0XHRvLl9vcGFjaXR5ID0gdC5jc3MoIFwib3BhY2l0eVwiICk7XG5cdFx0fVxuXHRcdHQuY3NzKCBcIm9wYWNpdHlcIiwgby5vcGFjaXR5ICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciBvID0gaW5zdGFuY2Uub3B0aW9ucztcblx0XHRpZiAoIG8uX29wYWNpdHkgKSB7XG5cdFx0XHQkKCB1aS5oZWxwZXIgKS5jc3MoIFwib3BhY2l0eVwiLCBvLl9vcGFjaXR5ICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJkcmFnZ2FibGVcIiwgXCJzY3JvbGxcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaSApIHtcblx0XHRpZiAoICFpLnNjcm9sbFBhcmVudE5vdEhpZGRlbiApIHtcblx0XHRcdGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuID0gaS5oZWxwZXIuc2Nyb2xsUGFyZW50KCBmYWxzZSApO1xuXHRcdH1cblxuXHRcdGlmICggaS5zY3JvbGxQYXJlbnROb3RIaWRkZW5bIDAgXSAhPT0gaS5kb2N1bWVudFsgMCBdICYmXG5cdFx0XHRcdGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuWyAwIF0udGFnTmFtZSAhPT0gXCJIVE1MXCIgKSB7XG5cdFx0XHRpLm92ZXJmbG93T2Zmc2V0ID0gaS5zY3JvbGxQYXJlbnROb3RIaWRkZW4ub2Zmc2V0KCk7XG5cdFx0fVxuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpLCBpICApIHtcblxuXHRcdHZhciBvID0gaS5vcHRpb25zLFxuXHRcdFx0c2Nyb2xsZWQgPSBmYWxzZSxcblx0XHRcdHNjcm9sbFBhcmVudCA9IGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuWyAwIF0sXG5cdFx0XHRkb2N1bWVudCA9IGkuZG9jdW1lbnRbIDAgXTtcblxuXHRcdGlmICggc2Nyb2xsUGFyZW50ICE9PSBkb2N1bWVudCAmJiBzY3JvbGxQYXJlbnQudGFnTmFtZSAhPT0gXCJIVE1MXCIgKSB7XG5cdFx0XHRpZiAoICFvLmF4aXMgfHwgby5heGlzICE9PSBcInhcIiApIHtcblx0XHRcdFx0aWYgKCAoIGkub3ZlcmZsb3dPZmZzZXQudG9wICsgc2Nyb2xsUGFyZW50Lm9mZnNldEhlaWdodCApIC0gZXZlbnQucGFnZVkgPFxuXHRcdFx0XHRcdFx0by5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0XHRzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsZWQgPSBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wICsgby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fSBlbHNlIGlmICggZXZlbnQucGFnZVkgLSBpLm92ZXJmbG93T2Zmc2V0LnRvcCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsUGFyZW50LnNjcm9sbFRvcCA9IHNjcm9sbGVkID0gc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhby5heGlzIHx8IG8uYXhpcyAhPT0gXCJ5XCIgKSB7XG5cdFx0XHRcdGlmICggKCBpLm92ZXJmbG93T2Zmc2V0LmxlZnQgKyBzY3JvbGxQYXJlbnQub2Zmc2V0V2lkdGggKSAtIGV2ZW50LnBhZ2VYIDxcblx0XHRcdFx0XHRcdG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsUGFyZW50LnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IHNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0ICsgby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fSBlbHNlIGlmICggZXZlbnQucGFnZVggLSBpLm92ZXJmbG93T2Zmc2V0LmxlZnQgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRcdHNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsZWQgPSBzY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggIW8uYXhpcyB8fCBvLmF4aXMgIT09IFwieFwiICkge1xuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKCBkb2N1bWVudCApLnNjcm9sbFRvcCggJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSAtIG8uc2Nyb2xsU3BlZWQgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggJCggd2luZG93ICkuaGVpZ2h0KCkgLSAoIGV2ZW50LnBhZ2VZIC0gJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSApIDxcblx0XHRcdFx0XHRcdG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKCBkb2N1bWVudCApLnNjcm9sbFRvcCggJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSArIG8uc2Nyb2xsU3BlZWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFvLmF4aXMgfHwgby5heGlzICE9PSBcInlcIiApIHtcblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWCAtICQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0XHRzY3JvbGxlZCA9ICQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdChcblx0XHRcdFx0XHRcdCQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdCgpIC0gby5zY3JvbGxTcGVlZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoICQoIHdpbmRvdyApLndpZHRoKCkgLSAoIGV2ZW50LnBhZ2VYIC0gJCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KCkgKSA8XG5cdFx0XHRcdFx0XHRvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRcdHNjcm9sbGVkID0gJCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KFxuXHRcdFx0XHRcdFx0JCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBzY3JvbGxlZCAhPT0gZmFsc2UgJiYgJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91ciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKCBpLCBldmVudCApO1xuXHRcdH1cblxuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJkcmFnZ2FibGVcIiwgXCJzbmFwXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWksIGkgKSB7XG5cblx0XHR2YXIgbyA9IGkub3B0aW9ucztcblxuXHRcdGkuc25hcEVsZW1lbnRzID0gW107XG5cblx0XHQkKCBvLnNuYXAuY29uc3RydWN0b3IgIT09IFN0cmluZyA/ICggby5zbmFwLml0ZW1zIHx8IFwiOmRhdGEodWktZHJhZ2dhYmxlKVwiICkgOiBvLnNuYXAgKVxuXHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgJHQgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0JG8gPSAkdC5vZmZzZXQoKTtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBpLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdFx0XHRpLnNuYXBFbGVtZW50cy5wdXNoKCB7XG5cdFx0XHRcdFx0XHRpdGVtOiB0aGlzLFxuXHRcdFx0XHRcdFx0d2lkdGg6ICR0Lm91dGVyV2lkdGgoKSwgaGVpZ2h0OiAkdC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdFx0dG9wOiAkby50b3AsIGxlZnQ6ICRvLmxlZnRcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpLCBpbnN0ICkge1xuXG5cdFx0dmFyIHRzLCBicywgbHMsIHJzLCBsLCByLCB0LCBiLCBpLCBmaXJzdCxcblx0XHRcdG8gPSBpbnN0Lm9wdGlvbnMsXG5cdFx0XHRkID0gby5zbmFwVG9sZXJhbmNlLFxuXHRcdFx0eDEgPSB1aS5vZmZzZXQubGVmdCwgeDIgPSB4MSArIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG5cdFx0XHR5MSA9IHVpLm9mZnNldC50b3AsIHkyID0geTEgKyBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodDtcblxuXHRcdGZvciAoIGkgPSBpbnN0LnNuYXBFbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblxuXHRcdFx0bCA9IGluc3Quc25hcEVsZW1lbnRzWyBpIF0ubGVmdCAtIGluc3QubWFyZ2lucy5sZWZ0O1xuXHRcdFx0ciA9IGwgKyBpbnN0LnNuYXBFbGVtZW50c1sgaSBdLndpZHRoO1xuXHRcdFx0dCA9IGluc3Quc25hcEVsZW1lbnRzWyBpIF0udG9wIC0gaW5zdC5tYXJnaW5zLnRvcDtcblx0XHRcdGIgPSB0ICsgaW5zdC5zbmFwRWxlbWVudHNbIGkgXS5oZWlnaHQ7XG5cblx0XHRcdGlmICggeDIgPCBsIC0gZCB8fCB4MSA+IHIgKyBkIHx8IHkyIDwgdCAtIGQgfHwgeTEgPiBiICsgZCB8fFxuXHRcdFx0XHRcdCEkLmNvbnRhaW5zKCBpbnN0LnNuYXBFbGVtZW50c1sgaSBdLml0ZW0ub3duZXJEb2N1bWVudCxcblx0XHRcdFx0XHRpbnN0LnNuYXBFbGVtZW50c1sgaSBdLml0ZW0gKSApIHtcblx0XHRcdFx0aWYgKCBpbnN0LnNuYXBFbGVtZW50c1sgaSBdLnNuYXBwaW5nICkge1xuXHRcdFx0XHRcdCggaW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZSAmJlxuXHRcdFx0XHRcdFx0aW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZS5jYWxsKFxuXHRcdFx0XHRcdFx0XHRpbnN0LmVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdGV2ZW50LFxuXHRcdFx0XHRcdFx0XHQkLmV4dGVuZCggaW5zdC5fdWlIYXNoKCksIHsgc25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzWyBpIF0uaXRlbSB9IClcblx0XHRcdFx0XHRcdCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbnN0LnNuYXBFbGVtZW50c1sgaSBdLnNuYXBwaW5nID0gZmFsc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG8uc25hcE1vZGUgIT09IFwiaW5uZXJcIiApIHtcblx0XHRcdFx0dHMgPSBNYXRoLmFicyggdCAtIHkyICkgPD0gZDtcblx0XHRcdFx0YnMgPSBNYXRoLmFicyggYiAtIHkxICkgPD0gZDtcblx0XHRcdFx0bHMgPSBNYXRoLmFicyggbCAtIHgyICkgPD0gZDtcblx0XHRcdFx0cnMgPSBNYXRoLmFicyggciAtIHgxICkgPD0gZDtcblx0XHRcdFx0aWYgKCB0cyApIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi50b3AgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyggXCJyZWxhdGl2ZVwiLCB7XG5cdFx0XHRcdFx0XHR0b3A6IHQgLSBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxcblx0XHRcdFx0XHRcdGxlZnQ6IDBcblx0XHRcdFx0XHR9ICkudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggYnMgKSB7XG5cdFx0XHRcdFx0dWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiBiLFxuXHRcdFx0XHRcdFx0bGVmdDogMFxuXHRcdFx0XHRcdH0gKS50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBscyApIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi5sZWZ0ID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0bGVmdDogbCAtIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGhcblx0XHRcdFx0XHR9ICkubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHJzICkge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyggXCJyZWxhdGl2ZVwiLCB7XG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRsZWZ0OiByXG5cdFx0XHRcdFx0fSApLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zmlyc3QgPSAoIHRzIHx8IGJzIHx8IGxzIHx8IHJzICk7XG5cblx0XHRcdGlmICggby5zbmFwTW9kZSAhPT0gXCJvdXRlclwiICkge1xuXHRcdFx0XHR0cyA9IE1hdGguYWJzKCB0IC0geTEgKSA8PSBkO1xuXHRcdFx0XHRicyA9IE1hdGguYWJzKCBiIC0geTIgKSA8PSBkO1xuXHRcdFx0XHRscyA9IE1hdGguYWJzKCBsIC0geDEgKSA8PSBkO1xuXHRcdFx0XHRycyA9IE1hdGguYWJzKCByIC0geDIgKSA8PSBkO1xuXHRcdFx0XHRpZiAoIHRzICkge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLnRvcCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCBcInJlbGF0aXZlXCIsIHtcblx0XHRcdFx0XHRcdHRvcDogdCxcblx0XHRcdFx0XHRcdGxlZnQ6IDBcblx0XHRcdFx0XHR9ICkudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggYnMgKSB7XG5cdFx0XHRcdFx0dWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiBiIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsXG5cdFx0XHRcdFx0XHRsZWZ0OiAwXG5cdFx0XHRcdFx0fSApLnRvcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGxzICkge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyggXCJyZWxhdGl2ZVwiLCB7XG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRsZWZ0OiBsXG5cdFx0XHRcdFx0fSApLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBycyApIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi5sZWZ0ID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0bGVmdDogciAtIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGhcblx0XHRcdFx0XHR9ICkubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFpbnN0LnNuYXBFbGVtZW50c1sgaSBdLnNuYXBwaW5nICYmICggdHMgfHwgYnMgfHwgbHMgfHwgcnMgfHwgZmlyc3QgKSApIHtcblx0XHRcdFx0KCBpbnN0Lm9wdGlvbnMuc25hcC5zbmFwICYmXG5cdFx0XHRcdFx0aW5zdC5vcHRpb25zLnNuYXAuc25hcC5jYWxsKFxuXHRcdFx0XHRcdFx0aW5zdC5lbGVtZW50LFxuXHRcdFx0XHRcdFx0ZXZlbnQsXG5cdFx0XHRcdFx0XHQkLmV4dGVuZCggaW5zdC5fdWlIYXNoKCksIHtcblx0XHRcdFx0XHRcdFx0c25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzWyBpIF0uaXRlbVxuXHRcdFx0XHRcdFx0fSApICkgKTtcblx0XHRcdH1cblx0XHRcdGluc3Quc25hcEVsZW1lbnRzWyBpIF0uc25hcHBpbmcgPSAoIHRzIHx8IGJzIHx8IGxzIHx8IHJzIHx8IGZpcnN0ICk7XG5cblx0XHR9XG5cblx0fVxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwiZHJhZ2dhYmxlXCIsIFwic3RhY2tcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaW5zdGFuY2UgKSB7XG5cdFx0dmFyIG1pbixcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zLFxuXHRcdFx0Z3JvdXAgPSAkLm1ha2VBcnJheSggJCggby5zdGFjayApICkuc29ydCggZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRcdHJldHVybiAoIHBhcnNlSW50KCAkKCBhICkuY3NzKCBcInpJbmRleFwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBiICkuY3NzKCBcInpJbmRleFwiICksIDEwICkgfHwgMCApO1xuXHRcdFx0fSApO1xuXG5cdFx0aWYgKCAhZ3JvdXAubGVuZ3RoICkgeyByZXR1cm47IH1cblxuXHRcdG1pbiA9IHBhcnNlSW50KCAkKCBncm91cFsgMCBdICkuY3NzKCBcInpJbmRleFwiICksIDEwICkgfHwgMDtcblx0XHQkKCBncm91cCApLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0JCggdGhpcyApLmNzcyggXCJ6SW5kZXhcIiwgbWluICsgaSApO1xuXHRcdH0gKTtcblx0XHR0aGlzLmNzcyggXCJ6SW5kZXhcIiwgKCBtaW4gKyBncm91cC5sZW5ndGggKSApO1xuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJkcmFnZ2FibGVcIiwgXCJ6SW5kZXhcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaW5zdGFuY2UgKSB7XG5cdFx0dmFyIHQgPSAkKCB1aS5oZWxwZXIgKSxcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zO1xuXG5cdFx0aWYgKCB0LmNzcyggXCJ6SW5kZXhcIiApICkge1xuXHRcdFx0by5fekluZGV4ID0gdC5jc3MoIFwiekluZGV4XCIgKTtcblx0XHR9XG5cdFx0dC5jc3MoIFwiekluZGV4XCIsIG8uekluZGV4ICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciBvID0gaW5zdGFuY2Uub3B0aW9ucztcblxuXHRcdGlmICggby5fekluZGV4ICkge1xuXHRcdFx0JCggdWkuaGVscGVyICkuY3NzKCBcInpJbmRleFwiLCBvLl96SW5kZXggKTtcblx0XHR9XG5cdH1cbn0gKTtcblxucmV0dXJuICQudWkuZHJhZ2dhYmxlO1xuXG59ICkgKTtcbiIsIi8qIVxuICogalF1ZXJ5IFVJIE1lbnUgMS4xMi4wXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IE1lbnVcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBDcmVhdGVzIG5lc3RhYmxlIG1lbnVzLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL21lbnUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vbWVudS9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb3JlLmNzc1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL21lbnUuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4uL2tleWNvZGVcIixcblx0XHRcdFwiLi4vcG9zaXRpb25cIixcblx0XHRcdFwiLi4vc2FmZS1hY3RpdmUtZWxlbWVudFwiLFxuXHRcdFx0XCIuLi91bmlxdWUtaWRcIixcblx0XHRcdFwiLi4vdmVyc2lvblwiLFxuXHRcdFx0XCIuLi93aWRnZXRcIlxuXHRcdF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59KCBmdW5jdGlvbiggJCApIHtcblxucmV0dXJuICQud2lkZ2V0KCBcInVpLm1lbnVcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMFwiLFxuXHRkZWZhdWx0RWxlbWVudDogXCI8dWw+XCIsXG5cdGRlbGF5OiAzMDAsXG5cdG9wdGlvbnM6IHtcblx0XHRpY29uczoge1xuXHRcdFx0c3VibWVudTogXCJ1aS1pY29uLWNhcmV0LTEtZVwiXG5cdFx0fSxcblx0XHRpdGVtczogXCI+ICpcIixcblx0XHRtZW51czogXCJ1bFwiLFxuXHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRteTogXCJsZWZ0IHRvcFwiLFxuXHRcdFx0YXQ6IFwicmlnaHQgdG9wXCJcblx0XHR9LFxuXHRcdHJvbGU6IFwibWVudVwiLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0Ymx1cjogbnVsbCxcblx0XHRmb2N1czogbnVsbCxcblx0XHRzZWxlY3Q6IG51bGxcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFjdGl2ZU1lbnUgPSB0aGlzLmVsZW1lbnQ7XG5cblx0XHQvLyBGbGFnIHVzZWQgdG8gcHJldmVudCBmaXJpbmcgb2YgdGhlIGNsaWNrIGhhbmRsZXJcblx0XHQvLyBhcyB0aGUgZXZlbnQgYnViYmxlcyB1cCB0aHJvdWdoIG5lc3RlZCBtZW51c1xuXHRcdHRoaXMubW91c2VIYW5kbGVkID0gZmFsc2U7XG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQudW5pcXVlSWQoKVxuXHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0cm9sZTogdGhpcy5vcHRpb25zLnJvbGUsXG5cdFx0XHRcdHRhYkluZGV4OiAwXG5cdFx0XHR9ICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1tZW51XCIsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIgKTtcblx0XHR0aGlzLl9vbigge1xuXG5cdFx0XHQvLyBQcmV2ZW50IGZvY3VzIGZyb20gc3RpY2tpbmcgdG8gbGlua3MgaW5zaWRlIG1lbnUgYWZ0ZXIgY2xpY2tpbmdcblx0XHRcdC8vIHRoZW0gKGZvY3VzIHNob3VsZCBhbHdheXMgc3RheSBvbiBVTCBkdXJpbmcgbmF2aWdhdGlvbikuXG5cdFx0XHRcIm1vdXNlZG93biAudWktbWVudS1pdGVtXCI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH0sXG5cdFx0XHRcImNsaWNrIC51aS1tZW51LWl0ZW1cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gJCggZXZlbnQudGFyZ2V0ICk7XG5cdFx0XHRcdHZhciBhY3RpdmUgPSAkKCAkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKSApO1xuXHRcdFx0XHRpZiAoICF0aGlzLm1vdXNlSGFuZGxlZCAmJiB0YXJnZXQubm90KCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0KCBldmVudCApO1xuXG5cdFx0XHRcdFx0Ly8gT25seSBzZXQgdGhlIG1vdXNlSGFuZGxlZCBmbGFnIGlmIHRoZSBldmVudCB3aWxsIGJ1YmJsZSwgc2VlICM5NDY5LlxuXHRcdFx0XHRcdGlmICggIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1vdXNlSGFuZGxlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT3BlbiBzdWJtZW51IG9uIGNsaWNrXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXQuaGFzKCBcIi51aS1tZW51XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmV4cGFuZCggZXZlbnQgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhdGhpcy5lbGVtZW50LmlzKCBcIjpmb2N1c1wiICkgJiZcblx0XHRcdFx0XHRcdFx0YWN0aXZlLmNsb3Nlc3QoIFwiLnVpLW1lbnVcIiApLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVkaXJlY3QgZm9jdXMgdG8gdGhlIG1lbnVcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC50cmlnZ2VyKCBcImZvY3VzXCIsIFsgdHJ1ZSBdICk7XG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSBhY3RpdmUgaXRlbSBpcyBvbiB0aGUgdG9wIGxldmVsLCBsZXQgaXQgc3RheSBhY3RpdmUuXG5cdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGJsdXIgdGhlIGFjdGl2ZSBpdGVtIHNpbmNlIGl0IGlzIG5vIGxvbmdlciB2aXNpYmxlLlxuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLmFjdGl2ZSAmJiB0aGlzLmFjdGl2ZS5wYXJlbnRzKCBcIi51aS1tZW51XCIgKS5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdFwibW91c2VlbnRlciAudWktbWVudS1pdGVtXCI6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBJZ25vcmUgbW91c2UgZXZlbnRzIHdoaWxlIHR5cGVhaGVhZCBpcyBhY3RpdmUsIHNlZSAjMTA0NTguXG5cdFx0XHRcdC8vIFByZXZlbnRzIGZvY3VzaW5nIHRoZSB3cm9uZyBpdGVtIHdoZW4gdHlwZWFoZWFkIGNhdXNlcyBhIHNjcm9sbCB3aGlsZSB0aGUgbW91c2Vcblx0XHRcdFx0Ly8gaXMgb3ZlciBhbiBpdGVtIGluIHRoZSBtZW51XG5cdFx0XHRcdGlmICggdGhpcy5wcmV2aW91c0ZpbHRlciApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgYWN0dWFsVGFyZ2V0ID0gJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIgKSxcblx0XHRcdFx0XHR0YXJnZXQgPSAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICk7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGJ1YmJsZWQgZXZlbnRzIG9uIHBhcmVudCBpdGVtcywgc2VlICMxMTY0MVxuXHRcdFx0XHRpZiAoIGFjdHVhbFRhcmdldFsgMCBdICE9PSB0YXJnZXRbIDAgXSApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZW1vdmUgdWktc3RhdGUtYWN0aXZlIGNsYXNzIGZyb20gc2libGluZ3Mgb2YgdGhlIG5ld2x5IGZvY3VzZWQgbWVudSBpdGVtXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGEganVtcCBjYXVzZWQgYnkgYWRqYWNlbnQgZWxlbWVudHMgYm90aCBoYXZpbmcgYSBjbGFzcyB3aXRoIGEgYm9yZGVyXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0YXJnZXQuc2libGluZ3MoKS5jaGlsZHJlbiggXCIudWktc3RhdGUtYWN0aXZlXCIgKSxcblx0XHRcdFx0XHRudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCB0YXJnZXQgKTtcblx0XHRcdH0sXG5cdFx0XHRtb3VzZWxlYXZlOiBcImNvbGxhcHNlQWxsXCIsXG5cdFx0XHRcIm1vdXNlbGVhdmUgLnVpLW1lbnVcIjogXCJjb2xsYXBzZUFsbFwiLFxuXHRcdFx0Zm9jdXM6IGZ1bmN0aW9uKCBldmVudCwga2VlcEFjdGl2ZUl0ZW0gKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUncyBhbHJlYWR5IGFuIGFjdGl2ZSBpdGVtLCBrZWVwIGl0IGFjdGl2ZVxuXHRcdFx0XHQvLyBJZiBub3QsIGFjdGl2YXRlIHRoZSBmaXJzdCBpdGVtXG5cdFx0XHRcdHZhciBpdGVtID0gdGhpcy5hY3RpdmUgfHwgdGhpcy5lbGVtZW50LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApLmVxKCAwICk7XG5cblx0XHRcdFx0aWYgKCAha2VlcEFjdGl2ZUl0ZW0gKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIGl0ZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGJsdXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBub3RDb250YWluZWQgPSAhJC5jb250YWlucyhcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudFsgMCBdLFxuXHRcdFx0XHRcdFx0JC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmICggbm90Q29udGFpbmVkICkge1xuXHRcdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUFsbCggZXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0sXG5cdFx0XHRrZXlkb3duOiBcIl9rZXlkb3duXCJcblx0XHR9ICk7XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblxuXHRcdC8vIENsaWNrcyBvdXRzaWRlIG9mIGEgbWVudSBjb2xsYXBzZSBhbnkgb3BlbiBtZW51c1xuXHRcdHRoaXMuX29uKCB0aGlzLmRvY3VtZW50LCB7XG5cdFx0XHRjbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuX2Nsb3NlT25Eb2N1bWVudENsaWNrKCBldmVudCApICkge1xuXHRcdFx0XHRcdHRoaXMuY29sbGFwc2VBbGwoIGV2ZW50ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNldCB0aGUgbW91c2VIYW5kbGVkIGZsYWdcblx0XHRcdFx0dGhpcy5tb3VzZUhhbmRsZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtcyA9IHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1tZW51LWl0ZW1cIiApXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCBcInJvbGUgYXJpYS1kaXNhYmxlZFwiICksXG5cdFx0XHRzdWJtZW51cyA9IGl0ZW1zLmNoaWxkcmVuKCBcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiIClcblx0XHRcdFx0LnJlbW92ZVVuaXF1ZUlkKClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwidGFiSW5kZXggcm9sZSBhcmlhLWhhc3BvcHVwXCIgKTtcblxuXHRcdC8vIERlc3Ryb3kgKHN1YiltZW51c1xuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIgKVxuXHRcdFx0LmZpbmQoIFwiLnVpLW1lbnVcIiApLmFkZEJhY2soKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlIGFyaWEtbGFiZWxsZWRieSBhcmlhLWV4cGFuZGVkIGFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgXCIgK1xuXHRcdFx0XHRcdFwidGFiSW5kZXhcIiApXG5cdFx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpXG5cdFx0XHRcdC5zaG93KCk7XG5cblx0XHRzdWJtZW51cy5jaGlsZHJlbigpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRpZiAoIGVsZW0uZGF0YSggXCJ1aS1tZW51LXN1Ym1lbnUtY2FyZXRcIiApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfa2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBtYXRjaCwgcHJldiwgY2hhcmFjdGVyLCBza2lwLFxuXHRcdFx0cHJldmVudERlZmF1bHQgPSB0cnVlO1xuXG5cdFx0c3dpdGNoICggZXZlbnQua2V5Q29kZSApIHtcblx0XHRjYXNlICQudWkua2V5Q29kZS5QQUdFX1VQOlxuXHRcdFx0dGhpcy5wcmV2aW91c1BhZ2UoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5QQUdFX0RPV046XG5cdFx0XHR0aGlzLm5leHRQYWdlKCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuSE9NRTpcblx0XHRcdHRoaXMuX21vdmUoIFwiZmlyc3RcIiwgXCJmaXJzdFwiLCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuRU5EOlxuXHRcdFx0dGhpcy5fbW92ZSggXCJsYXN0XCIsIFwibGFzdFwiLCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuVVA6XG5cdFx0XHR0aGlzLnByZXZpb3VzKCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuRE9XTjpcblx0XHRcdHRoaXMubmV4dCggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6XG5cdFx0XHR0aGlzLmNvbGxhcHNlKCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuUklHSFQ6XG5cdFx0XHRpZiAoIHRoaXMuYWN0aXZlICYmICF0aGlzLmFjdGl2ZS5pcyggXCIudWktc3RhdGUtZGlzYWJsZWRcIiApICkge1xuXHRcdFx0XHR0aGlzLmV4cGFuZCggZXZlbnQgKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkVOVEVSOlxuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlNQQUNFOlxuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5FU0NBUEU6XG5cdFx0XHR0aGlzLmNvbGxhcHNlKCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cdFx0XHRwcmV2ID0gdGhpcy5wcmV2aW91c0ZpbHRlciB8fCBcIlwiO1xuXHRcdFx0Y2hhcmFjdGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZSggZXZlbnQua2V5Q29kZSApO1xuXHRcdFx0c2tpcCA9IGZhbHNlO1xuXG5cdFx0XHRjbGVhclRpbWVvdXQoIHRoaXMuZmlsdGVyVGltZXIgKTtcblxuXHRcdFx0aWYgKCBjaGFyYWN0ZXIgPT09IHByZXYgKSB7XG5cdFx0XHRcdHNraXAgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2hhcmFjdGVyID0gcHJldiArIGNoYXJhY3Rlcjtcblx0XHRcdH1cblxuXHRcdFx0bWF0Y2ggPSB0aGlzLl9maWx0ZXJNZW51SXRlbXMoIGNoYXJhY3RlciApO1xuXHRcdFx0bWF0Y2ggPSBza2lwICYmIG1hdGNoLmluZGV4KCB0aGlzLmFjdGl2ZS5uZXh0KCkgKSAhPT0gLTEgP1xuXHRcdFx0XHR0aGlzLmFjdGl2ZS5uZXh0QWxsKCBcIi51aS1tZW51LWl0ZW1cIiApIDpcblx0XHRcdFx0bWF0Y2g7XG5cblx0XHRcdC8vIElmIG5vIG1hdGNoZXMgb24gdGhlIGN1cnJlbnQgZmlsdGVyLCByZXNldCB0byB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJlc3NlZFxuXHRcdFx0Ly8gdG8gbW92ZSBkb3duIHRoZSBtZW51IHRvIHRoZSBmaXJzdCBpdGVtIHRoYXQgc3RhcnRzIHdpdGggdGhhdCBjaGFyYWN0ZXJcblx0XHRcdGlmICggIW1hdGNoLmxlbmd0aCApIHtcblx0XHRcdFx0Y2hhcmFjdGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZSggZXZlbnQua2V5Q29kZSApO1xuXHRcdFx0XHRtYXRjaCA9IHRoaXMuX2ZpbHRlck1lbnVJdGVtcyggY2hhcmFjdGVyICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0Y2gubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgbWF0Y2ggKTtcblx0XHRcdFx0dGhpcy5wcmV2aW91c0ZpbHRlciA9IGNoYXJhY3Rlcjtcblx0XHRcdFx0dGhpcy5maWx0ZXJUaW1lciA9IHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5wcmV2aW91c0ZpbHRlcjtcblx0XHRcdFx0fSwgMTAwMCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBwcmV2ZW50RGVmYXVsdCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9hY3RpdmF0ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLmlzKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSB7XG5cdFx0XHRpZiAoIHRoaXMuYWN0aXZlLmNoaWxkcmVuKCBcIlthcmlhLWhhc3BvcHVwPSd0cnVlJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0dGhpcy5leHBhbmQoIGV2ZW50ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnNlbGVjdCggZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lbnVzLCBpdGVtcywgbmV3U3VibWVudXMsIG5ld0l0ZW1zLCBuZXdXcmFwcGVycyxcblx0XHRcdHRoYXQgPSB0aGlzLFxuXHRcdFx0aWNvbiA9IHRoaXMub3B0aW9ucy5pY29ucy5zdWJtZW51LFxuXHRcdFx0c3VibWVudXMgPSB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLm1lbnVzICk7XG5cblx0XHR0aGlzLl90b2dnbGVDbGFzcyggXCJ1aS1tZW51LWljb25zXCIsIG51bGwsICEhdGhpcy5lbGVtZW50LmZpbmQoIFwiLnVpLWljb25cIiApLmxlbmd0aCApO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSBuZXN0ZWQgbWVudXNcblx0XHRuZXdTdWJtZW51cyA9IHN1Ym1lbnVzLmZpbHRlciggXCI6bm90KC51aS1tZW51KVwiIClcblx0XHRcdC5oaWRlKClcblx0XHRcdC5hdHRyKCB7XG5cdFx0XHRcdHJvbGU6IHRoaXMub3B0aW9ucy5yb2xlLFxuXHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiXG5cdFx0XHR9IClcblx0XHRcdC5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG1lbnUgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0aXRlbSA9IG1lbnUucHJldigpLFxuXHRcdFx0XHRcdHN1Ym1lbnVDYXJldCA9ICQoIFwiPHNwYW4+XCIgKS5kYXRhKCBcInVpLW1lbnUtc3VibWVudS1jYXJldFwiLCB0cnVlICk7XG5cblx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoIHN1Ym1lbnVDYXJldCwgXCJ1aS1tZW51LWljb25cIiwgXCJ1aS1pY29uIFwiICsgaWNvbiApO1xuXHRcdFx0XHRpdGVtXG5cdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1oYXNwb3B1cFwiLCBcInRydWVcIiApXG5cdFx0XHRcdFx0LnByZXBlbmQoIHN1Ym1lbnVDYXJldCApO1xuXHRcdFx0XHRtZW51LmF0dHIoIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGl0ZW0uYXR0ciggXCJpZFwiICkgKTtcblx0XHRcdH0gKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCBuZXdTdWJtZW51cywgXCJ1aS1tZW51XCIsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWZyb250XCIgKTtcblxuXHRcdG1lbnVzID0gc3VibWVudXMuYWRkKCB0aGlzLmVsZW1lbnQgKTtcblx0XHRpdGVtcyA9IG1lbnVzLmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSBtZW51LWl0ZW1zIGNvbnRhaW5pbmcgc3BhY2VzIGFuZC9vciBkYXNoZXMgb25seSBhcyBkaXZpZGVyc1xuXHRcdGl0ZW1zLm5vdCggXCIudWktbWVudS1pdGVtXCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gJCggdGhpcyApO1xuXHRcdFx0aWYgKCB0aGF0Ll9pc0RpdmlkZXIoIGl0ZW0gKSApIHtcblx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoIGl0ZW0sIFwidWktbWVudS1kaXZpZGVyXCIsIFwidWktd2lkZ2V0LWNvbnRlbnRcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdC8vIERvbid0IHJlZnJlc2ggbGlzdCBpdGVtcyB0aGF0IGFyZSBhbHJlYWR5IGFkYXB0ZWRcblx0XHRuZXdJdGVtcyA9IGl0ZW1zLm5vdCggXCIudWktbWVudS1pdGVtLCAudWktbWVudS1kaXZpZGVyXCIgKTtcblx0XHRuZXdXcmFwcGVycyA9IG5ld0l0ZW1zLmNoaWxkcmVuKClcblx0XHRcdC5ub3QoIFwiLnVpLW1lbnVcIiApXG5cdFx0XHRcdC51bmlxdWVJZCgpXG5cdFx0XHRcdC5hdHRyKCB7XG5cdFx0XHRcdFx0dGFiSW5kZXg6IC0xLFxuXHRcdFx0XHRcdHJvbGU6IHRoaXMuX2l0ZW1Sb2xlKClcblx0XHRcdFx0fSApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCBuZXdJdGVtcywgXCJ1aS1tZW51LWl0ZW1cIiApXG5cdFx0XHQuX2FkZENsYXNzKCBuZXdXcmFwcGVycywgXCJ1aS1tZW51LWl0ZW0td3JhcHBlclwiICk7XG5cblx0XHQvLyBBZGQgYXJpYS1kaXNhYmxlZCBhdHRyaWJ1dGUgdG8gYW55IGRpc2FibGVkIG1lbnUgaXRlbVxuXHRcdGl0ZW1zLmZpbHRlciggXCIudWktc3RhdGUtZGlzYWJsZWRcIiApLmF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiLCBcInRydWVcIiApO1xuXG5cdFx0Ly8gSWYgdGhlIGFjdGl2ZSBpdGVtIGhhcyBiZWVuIHJlbW92ZWQsIGJsdXIgdGhlIG1lbnVcblx0XHRpZiAoIHRoaXMuYWN0aXZlICYmICEkLmNvbnRhaW5zKCB0aGlzLmVsZW1lbnRbIDAgXSwgdGhpcy5hY3RpdmVbIDAgXSApICkge1xuXHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9pdGVtUm9sZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1lbnU6IFwibWVudWl0ZW1cIixcblx0XHRcdGxpc3Rib3g6IFwib3B0aW9uXCJcblx0XHR9WyB0aGlzLm9wdGlvbnMucm9sZSBdO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcImljb25zXCIgKSB7XG5cdFx0XHR2YXIgaWNvbnMgPSB0aGlzLmVsZW1lbnQuZmluZCggXCIudWktbWVudS1pY29uXCIgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBpY29ucywgbnVsbCwgdGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUgKVxuXHRcdFx0XHQuX2FkZENsYXNzKCBpY29ucywgbnVsbCwgdmFsdWUuc3VibWVudSApO1xuXHRcdH1cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHRoaXMuX3N1cGVyKCB2YWx1ZSApO1xuXG5cdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiLCBTdHJpbmcoIHZhbHVlICkgKTtcblx0XHR0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdH0sXG5cblx0Zm9jdXM6IGZ1bmN0aW9uKCBldmVudCwgaXRlbSApIHtcblx0XHR2YXIgbmVzdGVkLCBmb2N1c2VkLCBhY3RpdmVQYXJlbnQ7XG5cdFx0dGhpcy5ibHVyKCBldmVudCwgZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJmb2N1c1wiICk7XG5cblx0XHR0aGlzLl9zY3JvbGxJbnRvVmlldyggaXRlbSApO1xuXG5cdFx0dGhpcy5hY3RpdmUgPSBpdGVtLmZpcnN0KCk7XG5cblx0XHRmb2N1c2VkID0gdGhpcy5hY3RpdmUuY2hpbGRyZW4oIFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggZm9jdXNlZCwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXG5cdFx0Ly8gT25seSB1cGRhdGUgYXJpYS1hY3RpdmVkZXNjZW5kYW50IGlmIHRoZXJlJ3MgYSByb2xlXG5cdFx0Ly8gb3RoZXJ3aXNlIHdlIGFzc3VtZSBmb2N1cyBpcyBtYW5hZ2VkIGVsc2V3aGVyZVxuXHRcdGlmICggdGhpcy5vcHRpb25zLnJvbGUgKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXR0ciggXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIiwgZm9jdXNlZC5hdHRyKCBcImlkXCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIEhpZ2hsaWdodCBhY3RpdmUgcGFyZW50IG1lbnUgaXRlbSwgaWYgYW55XG5cdFx0YWN0aXZlUGFyZW50ID0gdGhpcy5hY3RpdmVcblx0XHRcdC5wYXJlbnQoKVxuXHRcdFx0XHQuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIgKVxuXHRcdFx0XHRcdC5jaGlsZHJlbiggXCIudWktbWVudS1pdGVtLXdyYXBwZXJcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCBhY3RpdmVQYXJlbnQsIG51bGwsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblxuXHRcdGlmICggZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIgKSB7XG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdFx0fSwgdGhpcy5kZWxheSApO1xuXHRcdH1cblxuXHRcdG5lc3RlZCA9IGl0ZW0uY2hpbGRyZW4oIFwiLnVpLW1lbnVcIiApO1xuXHRcdGlmICggbmVzdGVkLmxlbmd0aCAmJiBldmVudCAmJiAoIC9ebW91c2UvLnRlc3QoIGV2ZW50LnR5cGUgKSApICkge1xuXHRcdFx0dGhpcy5fc3RhcnRPcGVuaW5nKCBuZXN0ZWQgKTtcblx0XHR9XG5cdFx0dGhpcy5hY3RpdmVNZW51ID0gaXRlbS5wYXJlbnQoKTtcblxuXHRcdHRoaXMuX3RyaWdnZXIoIFwiZm9jdXNcIiwgZXZlbnQsIHsgaXRlbTogaXRlbSB9ICk7XG5cdH0sXG5cblx0X3Njcm9sbEludG9WaWV3OiBmdW5jdGlvbiggaXRlbSApIHtcblx0XHR2YXIgYm9yZGVyVG9wLCBwYWRkaW5nVG9wLCBvZmZzZXQsIHNjcm9sbCwgZWxlbWVudEhlaWdodCwgaXRlbUhlaWdodDtcblx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkge1xuXHRcdFx0Ym9yZGVyVG9wID0gcGFyc2VGbG9hdCggJC5jc3MoIHRoaXMuYWN0aXZlTWVudVsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIgKSApIHx8IDA7XG5cdFx0XHRwYWRkaW5nVG9wID0gcGFyc2VGbG9hdCggJC5jc3MoIHRoaXMuYWN0aXZlTWVudVsgMCBdLCBcInBhZGRpbmdUb3BcIiApICkgfHwgMDtcblx0XHRcdG9mZnNldCA9IGl0ZW0ub2Zmc2V0KCkudG9wIC0gdGhpcy5hY3RpdmVNZW51Lm9mZnNldCgpLnRvcCAtIGJvcmRlclRvcCAtIHBhZGRpbmdUb3A7XG5cdFx0XHRzY3JvbGwgPSB0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKCk7XG5cdFx0XHRlbGVtZW50SGVpZ2h0ID0gdGhpcy5hY3RpdmVNZW51LmhlaWdodCgpO1xuXHRcdFx0aXRlbUhlaWdodCA9IGl0ZW0ub3V0ZXJIZWlnaHQoKTtcblxuXHRcdFx0aWYgKCBvZmZzZXQgPCAwICkge1xuXHRcdFx0XHR0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKCBzY3JvbGwgKyBvZmZzZXQgKTtcblx0XHRcdH0gZWxzZSBpZiAoIG9mZnNldCArIGl0ZW1IZWlnaHQgPiBlbGVtZW50SGVpZ2h0ICkge1xuXHRcdFx0XHR0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKCBzY3JvbGwgKyBvZmZzZXQgLSBlbGVtZW50SGVpZ2h0ICsgaXRlbUhlaWdodCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRibHVyOiBmdW5jdGlvbiggZXZlbnQsIGZyb21Gb2N1cyApIHtcblx0XHRpZiAoICFmcm9tRm9jdXMgKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR9XG5cblx0XHRpZiAoICF0aGlzLmFjdGl2ZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5hY3RpdmUuY2hpbGRyZW4oIFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIgKSxcblx0XHRcdG51bGwsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblxuXHRcdHRoaXMuX3RyaWdnZXIoIFwiYmx1clwiLCBldmVudCwgeyBpdGVtOiB0aGlzLmFjdGl2ZSB9ICk7XG5cdFx0dGhpcy5hY3RpdmUgPSBudWxsO1xuXHR9LFxuXG5cdF9zdGFydE9wZW5pbmc6IGZ1bmN0aW9uKCBzdWJtZW51ICkge1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXG5cdFx0Ly8gRG9uJ3Qgb3BlbiBpZiBhbHJlYWR5IG9wZW4gZml4ZXMgYSBGaXJlZm94IGJ1ZyB0aGF0IGNhdXNlZCBhIC41IHBpeGVsXG5cdFx0Ly8gc2hpZnQgaW4gdGhlIHN1Ym1lbnUgcG9zaXRpb24gd2hlbiBtb3VzaW5nIG92ZXIgdGhlIGNhcmV0IGljb25cblx0XHRpZiAoIHN1Ym1lbnUuYXR0ciggXCJhcmlhLWhpZGRlblwiICkgIT09IFwidHJ1ZVwiICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMudGltZXIgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdFx0dGhpcy5fb3Blbiggc3VibWVudSApO1xuXHRcdH0sIHRoaXMuZGVsYXkgKTtcblx0fSxcblxuXHRfb3BlbjogZnVuY3Rpb24oIHN1Ym1lbnUgKSB7XG5cdFx0dmFyIHBvc2l0aW9uID0gJC5leHRlbmQoIHtcblx0XHRcdG9mOiB0aGlzLmFjdGl2ZVxuXHRcdH0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbiApO1xuXG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7XG5cdFx0dGhpcy5lbGVtZW50LmZpbmQoIFwiLnVpLW1lbnVcIiApLm5vdCggc3VibWVudS5wYXJlbnRzKCBcIi51aS1tZW51XCIgKSApXG5cdFx0XHQuaGlkZSgpXG5cdFx0XHQuYXR0ciggXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIiApO1xuXG5cdFx0c3VibWVudVxuXHRcdFx0LnNob3coKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1oaWRkZW5cIiApXG5cdFx0XHQuYXR0ciggXCJhcmlhLWV4cGFuZGVkXCIsIFwidHJ1ZVwiIClcblx0XHRcdC5wb3NpdGlvbiggcG9zaXRpb24gKTtcblx0fSxcblxuXHRjb2xsYXBzZUFsbDogZnVuY3Rpb24oIGV2ZW50LCBhbGwgKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7XG5cdFx0dGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgd2Ugd2VyZSBwYXNzZWQgYW4gZXZlbnQsIGxvb2sgZm9yIHRoZSBzdWJtZW51IHRoYXQgY29udGFpbnMgdGhlIGV2ZW50XG5cdFx0XHR2YXIgY3VycmVudE1lbnUgPSBhbGwgPyB0aGlzLmVsZW1lbnQgOlxuXHRcdFx0XHQkKCBldmVudCAmJiBldmVudC50YXJnZXQgKS5jbG9zZXN0KCB0aGlzLmVsZW1lbnQuZmluZCggXCIudWktbWVudVwiICkgKTtcblxuXHRcdFx0Ly8gSWYgd2UgZm91bmQgbm8gdmFsaWQgc3VibWVudSBhbmNlc3RvciwgdXNlIHRoZSBtYWluIG1lbnUgdG8gY2xvc2UgYWxsXG5cdFx0XHQvLyBzdWIgbWVudXMgYW55d2F5XG5cdFx0XHRpZiAoICFjdXJyZW50TWVudS5sZW5ndGggKSB7XG5cdFx0XHRcdGN1cnJlbnRNZW51ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jbG9zZSggY3VycmVudE1lbnUgKTtcblxuXHRcdFx0dGhpcy5ibHVyKCBldmVudCApO1xuXG5cdFx0XHQvLyBXb3JrIGFyb3VuZCBhY3RpdmUgaXRlbSBzdGF5aW5nIGFjdGl2ZSBhZnRlciBtZW51IGlzIGJsdXJyZWRcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBjdXJyZW50TWVudS5maW5kKCBcIi51aS1zdGF0ZS1hY3RpdmVcIiApLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cblx0XHRcdHRoaXMuYWN0aXZlTWVudSA9IGN1cnJlbnRNZW51O1xuXHRcdH0sIHRoaXMuZGVsYXkgKTtcblx0fSxcblxuXHQvLyBXaXRoIG5vIGFyZ3VtZW50cywgY2xvc2VzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG1lbnUgLSBpZiBub3RoaW5nIGlzIGFjdGl2ZVxuXHQvLyBpdCBjbG9zZXMgYWxsIG1lbnVzLiAgSWYgcGFzc2VkIGFuIGFyZ3VtZW50LCBpdCB3aWxsIHNlYXJjaCBmb3IgbWVudXMgQkVMT1dcblx0X2Nsb3NlOiBmdW5jdGlvbiggc3RhcnRNZW51ICkge1xuXHRcdGlmICggIXN0YXJ0TWVudSApIHtcblx0XHRcdHN0YXJ0TWVudSA9IHRoaXMuYWN0aXZlID8gdGhpcy5hY3RpdmUucGFyZW50KCkgOiB0aGlzLmVsZW1lbnQ7XG5cdFx0fVxuXG5cdFx0c3RhcnRNZW51LmZpbmQoIFwiLnVpLW1lbnVcIiApXG5cdFx0XHQuaGlkZSgpXG5cdFx0XHQuYXR0ciggXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIiApXG5cdFx0XHQuYXR0ciggXCJhcmlhLWV4cGFuZGVkXCIsIFwiZmFsc2VcIiApO1xuXHR9LFxuXG5cdF9jbG9zZU9uRG9jdW1lbnRDbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHJldHVybiAhJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktbWVudVwiICkubGVuZ3RoO1xuXHR9LFxuXG5cdF9pc0RpdmlkZXI6IGZ1bmN0aW9uKCBpdGVtICkge1xuXG5cdFx0Ly8gTWF0Y2ggaHlwaGVuLCBlbSBkYXNoLCBlbiBkYXNoXG5cdFx0cmV0dXJuICEvW15cXC1cXHUyMDE0XFx1MjAxM1xcc10vLnRlc3QoIGl0ZW0udGV4dCgpICk7XG5cdH0sXG5cblx0Y29sbGFwc2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgbmV3SXRlbSA9IHRoaXMuYWN0aXZlICYmXG5cdFx0XHR0aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KCBcIi51aS1tZW51LWl0ZW1cIiwgdGhpcy5lbGVtZW50ICk7XG5cdFx0aWYgKCBuZXdJdGVtICYmIG5ld0l0ZW0ubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5fY2xvc2UoKTtcblx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBuZXdJdGVtICk7XG5cdFx0fVxuXHR9LFxuXG5cdGV4cGFuZDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBuZXdJdGVtID0gdGhpcy5hY3RpdmUgJiZcblx0XHRcdHRoaXMuYWN0aXZlXG5cdFx0XHRcdC5jaGlsZHJlbiggXCIudWktbWVudSBcIiApXG5cdFx0XHRcdFx0LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApXG5cdFx0XHRcdFx0XHQuZmlyc3QoKTtcblxuXHRcdGlmICggbmV3SXRlbSAmJiBuZXdJdGVtLmxlbmd0aCApIHtcblx0XHRcdHRoaXMuX29wZW4oIG5ld0l0ZW0ucGFyZW50KCkgKTtcblxuXHRcdFx0Ly8gRGVsYXkgc28gRmlyZWZveCB3aWxsIG5vdCBoaWRlIGFjdGl2ZWRlc2NlbmRhbnQgY2hhbmdlIGluIGV4cGFuZGluZyBzdWJtZW51IGZyb20gQVRcblx0XHRcdHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIG5ld0l0ZW0gKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0bmV4dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuX21vdmUoIFwibmV4dFwiLCBcImZpcnN0XCIsIGV2ZW50ICk7XG5cdH0sXG5cblx0cHJldmlvdXM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLl9tb3ZlKCBcInByZXZcIiwgXCJsYXN0XCIsIGV2ZW50ICk7XG5cdH0sXG5cblx0aXNGaXJzdEl0ZW06IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUucHJldkFsbCggXCIudWktbWVudS1pdGVtXCIgKS5sZW5ndGg7XG5cdH0sXG5cblx0aXNMYXN0SXRlbTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlICYmICF0aGlzLmFjdGl2ZS5uZXh0QWxsKCBcIi51aS1tZW51LWl0ZW1cIiApLmxlbmd0aDtcblx0fSxcblxuXHRfbW92ZTogZnVuY3Rpb24oIGRpcmVjdGlvbiwgZmlsdGVyLCBldmVudCApIHtcblx0XHR2YXIgbmV4dDtcblx0XHRpZiAoIHRoaXMuYWN0aXZlICkge1xuXHRcdFx0aWYgKCBkaXJlY3Rpb24gPT09IFwiZmlyc3RcIiB8fCBkaXJlY3Rpb24gPT09IFwibGFzdFwiICkge1xuXHRcdFx0XHRuZXh0ID0gdGhpcy5hY3RpdmVcblx0XHRcdFx0XHRbIGRpcmVjdGlvbiA9PT0gXCJmaXJzdFwiID8gXCJwcmV2QWxsXCIgOiBcIm5leHRBbGxcIiBdKCBcIi51aS1tZW51LWl0ZW1cIiApXG5cdFx0XHRcdFx0LmVxKCAtMSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV4dCA9IHRoaXMuYWN0aXZlXG5cdFx0XHRcdFx0WyBkaXJlY3Rpb24gKyBcIkFsbFwiIF0oIFwiLnVpLW1lbnUtaXRlbVwiIClcblx0XHRcdFx0XHQuZXEoIDAgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCAhbmV4dCB8fCAhbmV4dC5sZW5ndGggfHwgIXRoaXMuYWN0aXZlICkge1xuXHRcdFx0bmV4dCA9IHRoaXMuYWN0aXZlTWVudS5maW5kKCB0aGlzLm9wdGlvbnMuaXRlbXMgKVsgZmlsdGVyIF0oKTtcblx0XHR9XG5cblx0XHR0aGlzLmZvY3VzKCBldmVudCwgbmV4dCApO1xuXHR9LFxuXG5cdG5leHRQYWdlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGl0ZW0sIGJhc2UsIGhlaWdodDtcblxuXHRcdGlmICggIXRoaXMuYWN0aXZlICkge1xuXHRcdFx0dGhpcy5uZXh0KCBldmVudCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuaXNMYXN0SXRlbSgpICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkge1xuXHRcdFx0YmFzZSA9IHRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcDtcblx0XHRcdGhlaWdodCA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKTtcblx0XHRcdHRoaXMuYWN0aXZlLm5leHRBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGl0ZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRcdHJldHVybiBpdGVtLm9mZnNldCgpLnRvcCAtIGJhc2UgLSBoZWlnaHQgPCAwO1xuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgdGhpcy5hY3RpdmVNZW51LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApXG5cdFx0XHRcdFsgIXRoaXMuYWN0aXZlID8gXCJmaXJzdFwiIDogXCJsYXN0XCIgXSgpICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZXZpb3VzUGFnZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpdGVtLCBiYXNlLCBoZWlnaHQ7XG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHR0aGlzLm5leHQoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5pc0ZpcnN0SXRlbSgpICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkge1xuXHRcdFx0YmFzZSA9IHRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcDtcblx0XHRcdGhlaWdodCA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKTtcblx0XHRcdHRoaXMuYWN0aXZlLnByZXZBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGl0ZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRcdHJldHVybiBpdGVtLm9mZnNldCgpLnRvcCAtIGJhc2UgKyBoZWlnaHQgPiAwO1xuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgdGhpcy5hY3RpdmVNZW51LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApLmZpcnN0KCkgKTtcblx0XHR9XG5cdH0sXG5cblx0X2hhc1Njcm9sbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIDwgdGhpcy5lbGVtZW50LnByb3AoIFwic2Nyb2xsSGVpZ2h0XCIgKTtcblx0fSxcblxuXHRzZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIFRPRE86IEl0IHNob3VsZCBuZXZlciBiZSBwb3NzaWJsZSB0byBub3QgaGF2ZSBhbiBhY3RpdmUgaXRlbSBhdCB0aGlzXG5cdFx0Ly8gcG9pbnQsIGJ1dCB0aGUgdGVzdHMgZG9uJ3QgdHJpZ2dlciBtb3VzZWVudGVyIGJlZm9yZSBjbGljay5cblx0XHR0aGlzLmFjdGl2ZSA9IHRoaXMuYWN0aXZlIHx8ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIFwiLnVpLW1lbnUtaXRlbVwiICk7XG5cdFx0dmFyIHVpID0geyBpdGVtOiB0aGlzLmFjdGl2ZSB9O1xuXHRcdGlmICggIXRoaXMuYWN0aXZlLmhhcyggXCIudWktbWVudVwiICkubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5jb2xsYXBzZUFsbCggZXZlbnQsIHRydWUgKTtcblx0XHR9XG5cdFx0dGhpcy5fdHJpZ2dlciggXCJzZWxlY3RcIiwgZXZlbnQsIHVpICk7XG5cdH0sXG5cblx0X2ZpbHRlck1lbnVJdGVtczogZnVuY3Rpb24oIGNoYXJhY3RlciApIHtcblx0XHR2YXIgZXNjYXBlZENoYXJhY3RlciA9IGNoYXJhY3Rlci5yZXBsYWNlKCAvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIgKSxcblx0XHRcdHJlZ2V4ID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBlc2NhcGVkQ2hhcmFjdGVyLCBcImlcIiApO1xuXG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlTWVudVxuXHRcdFx0LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApXG5cblx0XHRcdFx0Ly8gT25seSBtYXRjaCBvbiBpdGVtcywgbm90IGRpdmlkZXJzIG9yIG90aGVyIGNvbnRlbnQgKCMxMDU3MSlcblx0XHRcdFx0LmZpbHRlciggXCIudWktbWVudS1pdGVtXCIgKVxuXHRcdFx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlZ2V4LnRlc3QoXG5cdFx0XHRcdFx0XHRcdCQudHJpbSggJCggdGhpcyApLmNoaWxkcmVuKCBcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiICkudGV4dCgpICkgKTtcblx0XHRcdFx0XHR9ICk7XG5cdH1cbn0gKTtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBNb3VzZSAxLjEyLjBcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogTW91c2Vcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBBYnN0cmFjdHMgbW91c2UtYmFzZWQgaW50ZXJhY3Rpb25zIHRvIGFzc2lzdCBpbiBjcmVhdGluZyBjZXJ0YWluIHdpZGdldHMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vbW91c2UvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbXG5cdFx0XHRcImpxdWVyeVwiLFxuXHRcdFx0XCIuLi9pZVwiLFxuXHRcdFx0XCIuLi92ZXJzaW9uXCIsXG5cdFx0XHRcIi4uL3dpZGdldFwiXG5cdFx0XSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuXG52YXIgbW91c2VIYW5kbGVkID0gZmFsc2U7XG4kKCBkb2N1bWVudCApLm9uKCBcIm1vdXNldXBcIiwgZnVuY3Rpb24oKSB7XG5cdG1vdXNlSGFuZGxlZCA9IGZhbHNlO1xufSApO1xuXG5yZXR1cm4gJC53aWRnZXQoIFwidWkubW91c2VcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMFwiLFxuXHRvcHRpb25zOiB7XG5cdFx0Y2FuY2VsOiBcImlucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3QsIG9wdGlvblwiLFxuXHRcdGRpc3RhbmNlOiAxLFxuXHRcdGRlbGF5OiAwXG5cdH0sXG5cdF9tb3VzZUluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0Lm9uKCBcIm1vdXNlZG93bi5cIiArIHRoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gdGhhdC5fbW91c2VEb3duKCBldmVudCApO1xuXHRcdFx0fSApXG5cdFx0XHQub24oIFwiY2xpY2suXCIgKyB0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0cnVlID09PSAkLmRhdGEoIGV2ZW50LnRhcmdldCwgdGhhdC53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIiApICkge1xuXHRcdFx0XHRcdCQucmVtb3ZlRGF0YSggZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiICk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHR0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblx0fSxcblxuXHQvLyBUT0RPOiBtYWtlIHN1cmUgZGVzdHJveWluZyBvbmUgaW5zdGFuY2Ugb2YgbW91c2UgZG9lc24ndCBtZXNzIHdpdGhcblx0Ly8gb3RoZXIgaW5zdGFuY2VzIG9mIG1vdXNlXG5cdF9tb3VzZURlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5vZmYoIFwiLlwiICsgdGhpcy53aWRnZXROYW1lICk7XG5cdFx0aWYgKCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSApIHtcblx0XHRcdHRoaXMuZG9jdW1lbnRcblx0XHRcdFx0Lm9mZiggXCJtb3VzZW1vdmUuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlIClcblx0XHRcdFx0Lm9mZiggXCJtb3VzZXVwLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZVVwRGVsZWdhdGUgKTtcblx0XHR9XG5cdH0sXG5cblx0X21vdXNlRG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gZG9uJ3QgbGV0IG1vcmUgdGhhbiBvbmUgd2lkZ2V0IGhhbmRsZSBtb3VzZVN0YXJ0XG5cdFx0aWYgKCBtb3VzZUhhbmRsZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fbW91c2VNb3ZlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gV2UgbWF5IGhhdmUgbWlzc2VkIG1vdXNldXAgKG91dCBvZiB3aW5kb3cpXG5cdFx0KCB0aGlzLl9tb3VzZVN0YXJ0ZWQgJiYgdGhpcy5fbW91c2VVcCggZXZlbnQgKSApO1xuXG5cdFx0dGhpcy5fbW91c2VEb3duRXZlbnQgPSBldmVudDtcblxuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdGJ0bklzTGVmdCA9ICggZXZlbnQud2hpY2ggPT09IDEgKSxcblxuXHRcdFx0Ly8gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIHdvcmtzIGFyb3VuZCBhIGJ1ZyBpbiBJRSA4IHdpdGhcblx0XHRcdC8vIGRpc2FibGVkIGlucHV0cyAoIzc2MjApXG5cdFx0XHRlbElzQ2FuY2VsID0gKCB0eXBlb2YgdGhpcy5vcHRpb25zLmNhbmNlbCA9PT0gXCJzdHJpbmdcIiAmJiBldmVudC50YXJnZXQubm9kZU5hbWUgP1xuXHRcdFx0XHQkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCB0aGlzLm9wdGlvbnMuY2FuY2VsICkubGVuZ3RoIDogZmFsc2UgKTtcblx0XHRpZiAoICFidG5Jc0xlZnQgfHwgZWxJc0NhbmNlbCB8fCAhdGhpcy5fbW91c2VDYXB0dXJlKCBldmVudCApICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0dGhpcy5tb3VzZURlbGF5TWV0ID0gIXRoaXMub3B0aW9ucy5kZWxheTtcblx0XHRpZiAoICF0aGlzLm1vdXNlRGVsYXlNZXQgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZURlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhhdC5tb3VzZURlbGF5TWV0ID0gdHJ1ZTtcblx0XHRcdH0sIHRoaXMub3B0aW9ucy5kZWxheSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fbW91c2VEaXN0YW5jZU1ldCggZXZlbnQgKSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KCBldmVudCApICkge1xuXHRcdFx0dGhpcy5fbW91c2VTdGFydGVkID0gKCB0aGlzLl9tb3VzZVN0YXJ0KCBldmVudCApICE9PSBmYWxzZSApO1xuXHRcdFx0aWYgKCAhdGhpcy5fbW91c2VTdGFydGVkICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDbGljayBldmVudCBtYXkgbmV2ZXIgaGF2ZSBmaXJlZCAoR2Vja28gJiBPcGVyYSlcblx0XHRpZiAoIHRydWUgPT09ICQuZGF0YSggZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiICkgKSB7XG5cdFx0XHQkLnJlbW92ZURhdGEoIGV2ZW50LnRhcmdldCwgdGhpcy53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFRoZXNlIGRlbGVnYXRlcyBhcmUgcmVxdWlyZWQgdG8ga2VlcCBjb250ZXh0XG5cdFx0dGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhhdC5fbW91c2VNb3ZlKCBldmVudCApO1xuXHRcdH07XG5cdFx0dGhpcy5fbW91c2VVcERlbGVnYXRlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoYXQuX21vdXNlVXAoIGV2ZW50ICk7XG5cdFx0fTtcblxuXHRcdHRoaXMuZG9jdW1lbnRcblx0XHRcdC5vbiggXCJtb3VzZW1vdmUuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlIClcblx0XHRcdC5vbiggXCJtb3VzZXVwLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZVVwRGVsZWdhdGUgKTtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRtb3VzZUhhbmRsZWQgPSB0cnVlO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdF9tb3VzZU1vdmU6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE9ubHkgY2hlY2sgZm9yIG1vdXNldXBzIG91dHNpZGUgdGhlIGRvY3VtZW50IGlmIHlvdSd2ZSBtb3ZlZCBpbnNpZGUgdGhlIGRvY3VtZW50XG5cdFx0Ly8gYXQgbGVhc3Qgb25jZS4gVGhpcyBwcmV2ZW50cyB0aGUgZmlyaW5nIG9mIG1vdXNldXAgaW4gdGhlIGNhc2Ugb2YgSUU8OSwgd2hpY2ggd2lsbFxuXHRcdC8vIGZpcmUgYSBtb3VzZW1vdmUgZXZlbnQgaWYgY29udGVudCBpcyBwbGFjZWQgdW5kZXIgdGhlIGN1cnNvci4gU2VlICM3Nzc4XG5cdFx0Ly8gU3VwcG9ydDogSUUgPDlcblx0XHRpZiAoIHRoaXMuX21vdXNlTW92ZWQgKSB7XG5cblx0XHRcdC8vIElFIG1vdXNldXAgY2hlY2sgLSBtb3VzZXVwIGhhcHBlbmVkIHdoZW4gbW91c2Ugd2FzIG91dCBvZiB3aW5kb3dcblx0XHRcdGlmICggJC51aS5pZSAmJiAoICFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgOSApICYmXG5cdFx0XHRcdFx0IWV2ZW50LmJ1dHRvbiApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX21vdXNlVXAoIGV2ZW50ICk7XG5cblx0XHRcdC8vIElmcmFtZSBtb3VzZXVwIGNoZWNrIC0gbW91c2V1cCBvY2N1cnJlZCBpbiBhbm90aGVyIGRvY3VtZW50XG5cdFx0XHR9IGVsc2UgaWYgKCAhZXZlbnQud2hpY2ggKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9OCAtIDlcblx0XHRcdFx0Ly8gU2FmYXJpIHNldHMgd2hpY2ggdG8gMCBpZiB5b3UgcHJlc3MgYW55IG9mIHRoZSBmb2xsb3dpbmcga2V5c1xuXHRcdFx0XHQvLyBkdXJpbmcgYSBkcmFnICgjMTQ0NjEpXG5cdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5jdHJsS2V5IHx8XG5cdFx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5zaGlmdEtleSApIHtcblx0XHRcdFx0XHR0aGlzLmlnbm9yZU1pc3NpbmdXaGljaCA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoICF0aGlzLmlnbm9yZU1pc3NpbmdXaGljaCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fbW91c2VVcCggZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZXZlbnQud2hpY2ggfHwgZXZlbnQuYnV0dG9uICkge1xuXHRcdFx0dGhpcy5fbW91c2VNb3ZlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9tb3VzZVN0YXJ0ZWQgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZURyYWcoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX21vdXNlRGlzdGFuY2VNZXQoIGV2ZW50ICkgJiYgdGhpcy5fbW91c2VEZWxheU1ldCggZXZlbnQgKSApIHtcblx0XHRcdHRoaXMuX21vdXNlU3RhcnRlZCA9XG5cdFx0XHRcdCggdGhpcy5fbW91c2VTdGFydCggdGhpcy5fbW91c2VEb3duRXZlbnQsIGV2ZW50ICkgIT09IGZhbHNlICk7XG5cdFx0XHQoIHRoaXMuX21vdXNlU3RhcnRlZCA/IHRoaXMuX21vdXNlRHJhZyggZXZlbnQgKSA6IHRoaXMuX21vdXNlVXAoIGV2ZW50ICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gIXRoaXMuX21vdXNlU3RhcnRlZDtcblx0fSxcblxuXHRfbW91c2VVcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuZG9jdW1lbnRcblx0XHRcdC5vZmYoIFwibW91c2Vtb3ZlLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSApXG5cdFx0XHQub2ZmKCBcIm1vdXNldXAuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSApO1xuXG5cdFx0aWYgKCB0aGlzLl9tb3VzZVN0YXJ0ZWQgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZVN0YXJ0ZWQgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBldmVudC50YXJnZXQgPT09IHRoaXMuX21vdXNlRG93bkV2ZW50LnRhcmdldCApIHtcblx0XHRcdFx0JC5kYXRhKCBldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbW91c2VTdG9wKCBldmVudCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fbW91c2VEZWxheVRpbWVyICkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLl9tb3VzZURlbGF5VGltZXIgKTtcblx0XHRcdGRlbGV0ZSB0aGlzLl9tb3VzZURlbGF5VGltZXI7XG5cdFx0fVxuXG5cdFx0dGhpcy5pZ25vcmVNaXNzaW5nV2hpY2ggPSBmYWxzZTtcblx0XHRtb3VzZUhhbmRsZWQgPSBmYWxzZTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9LFxuXG5cdF9tb3VzZURpc3RhbmNlTWV0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0cmV0dXJuICggTWF0aC5tYXgoXG5cdFx0XHRcdE1hdGguYWJzKCB0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWCAtIGV2ZW50LnBhZ2VYICksXG5cdFx0XHRcdE1hdGguYWJzKCB0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWSAtIGV2ZW50LnBhZ2VZIClcblx0XHRcdCkgPj0gdGhpcy5vcHRpb25zLmRpc3RhbmNlXG5cdFx0KTtcblx0fSxcblxuXHRfbW91c2VEZWxheU1ldDogZnVuY3Rpb24oIC8qIGV2ZW50ICovICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlRGVsYXlNZXQ7XG5cdH0sXG5cblx0Ly8gVGhlc2UgYXJlIHBsYWNlaG9sZGVyIG1ldGhvZHMsIHRvIGJlIG92ZXJyaWRlbiBieSBleHRlbmRpbmcgcGx1Z2luXG5cdF9tb3VzZVN0YXJ0OiBmdW5jdGlvbiggLyogZXZlbnQgKi8gKSB7fSxcblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIC8qIGV2ZW50ICovICkge30sXG5cdF9tb3VzZVN0b3A6IGZ1bmN0aW9uKCAvKiBldmVudCAqLyApIHt9LFxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbiggLyogZXZlbnQgKi8gKSB7IHJldHVybiB0cnVlOyB9XG59ICk7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgUmVzaXphYmxlIDEuMTIuMFxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBSZXNpemFibGVcbi8vPj5ncm91cDogSW50ZXJhY3Rpb25zXG4vLz4+ZGVzY3JpcHRpb246IEVuYWJsZXMgcmVzaXplIGZ1bmN0aW9uYWxpdHkgZm9yIGFueSBlbGVtZW50LlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3Jlc2l6YWJsZS9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9yZXNpemFibGUvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9yZXNpemFibGUuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4vbW91c2VcIixcblx0XHRcdFwiLi4vZGlzYWJsZS1zZWxlY3Rpb25cIixcblx0XHRcdFwiLi4vcGx1Z2luXCIsXG5cdFx0XHRcIi4uL3ZlcnNpb25cIixcblx0XHRcdFwiLi4vd2lkZ2V0XCJcblx0XHRdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSggZnVuY3Rpb24oICQgKSB7XG5cbiQud2lkZ2V0KCBcInVpLnJlc2l6YWJsZVwiLCAkLnVpLm1vdXNlLCB7XG5cdHZlcnNpb246IFwiMS4xMi4wXCIsXG5cdHdpZGdldEV2ZW50UHJlZml4OiBcInJlc2l6ZVwiLFxuXHRvcHRpb25zOiB7XG5cdFx0YWxzb1Jlc2l6ZTogZmFsc2UsXG5cdFx0YW5pbWF0ZTogZmFsc2UsXG5cdFx0YW5pbWF0ZUR1cmF0aW9uOiBcInNsb3dcIixcblx0XHRhbmltYXRlRWFzaW5nOiBcInN3aW5nXCIsXG5cdFx0YXNwZWN0UmF0aW86IGZhbHNlLFxuXHRcdGF1dG9IaWRlOiBmYWxzZSxcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLXJlc2l6YWJsZS1zZVwiOiBcInVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtc2VcIlxuXHRcdH0sXG5cdFx0Y29udGFpbm1lbnQ6IGZhbHNlLFxuXHRcdGdob3N0OiBmYWxzZSxcblx0XHRncmlkOiBmYWxzZSxcblx0XHRoYW5kbGVzOiBcImUscyxzZVwiLFxuXHRcdGhlbHBlcjogZmFsc2UsXG5cdFx0bWF4SGVpZ2h0OiBudWxsLFxuXHRcdG1heFdpZHRoOiBudWxsLFxuXHRcdG1pbkhlaWdodDogMTAsXG5cdFx0bWluV2lkdGg6IDEwLFxuXG5cdFx0Ly8gU2VlICM3OTYwXG5cdFx0ekluZGV4OiA5MCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdHJlc2l6ZTogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsXG5cdH0sXG5cblx0X251bTogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBwYXJzZUZsb2F0KCB2YWx1ZSApIHx8IDA7XG5cdH0sXG5cblx0X2lzTnVtYmVyOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuICFpc05hTiggcGFyc2VGbG9hdCggdmFsdWUgKSApO1xuXHR9LFxuXG5cdF9oYXNTY3JvbGw6IGZ1bmN0aW9uKCBlbCwgYSApIHtcblxuXHRcdGlmICggJCggZWwgKS5jc3MoIFwib3ZlcmZsb3dcIiApID09PSBcImhpZGRlblwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBzY3JvbGwgPSAoIGEgJiYgYSA9PT0gXCJsZWZ0XCIgKSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIixcblx0XHRcdGhhcyA9IGZhbHNlO1xuXG5cdFx0aWYgKCBlbFsgc2Nyb2xsIF0gPiAwICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogZGV0ZXJtaW5lIHdoaWNoIGNhc2VzIGFjdHVhbGx5IGNhdXNlIHRoaXMgdG8gaGFwcGVuXG5cdFx0Ly8gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIHRoZSBzY3JvbGwgc2V0LCBzZWUgaWYgaXQncyBwb3NzaWJsZSB0b1xuXHRcdC8vIHNldCB0aGUgc2Nyb2xsXG5cdFx0ZWxbIHNjcm9sbCBdID0gMTtcblx0XHRoYXMgPSAoIGVsWyBzY3JvbGwgXSA+IDAgKTtcblx0XHRlbFsgc2Nyb2xsIF0gPSAwO1xuXHRcdHJldHVybiBoYXM7XG5cdH0sXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgbWFyZ2lucyxcblx0XHRcdG8gPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHR0aGF0ID0gdGhpcztcblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1yZXNpemFibGVcIiApO1xuXG5cdFx0JC5leHRlbmQoIHRoaXMsIHtcblx0XHRcdF9hc3BlY3RSYXRpbzogISEoIG8uYXNwZWN0UmF0aW8gKSxcblx0XHRcdGFzcGVjdFJhdGlvOiBvLmFzcGVjdFJhdGlvLFxuXHRcdFx0b3JpZ2luYWxFbGVtZW50OiB0aGlzLmVsZW1lbnQsXG5cdFx0XHRfcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50czogW10sXG5cdFx0XHRfaGVscGVyOiBvLmhlbHBlciB8fCBvLmdob3N0IHx8IG8uYW5pbWF0ZSA/IG8uaGVscGVyIHx8IFwidWktcmVzaXphYmxlLWhlbHBlclwiIDogbnVsbFxuXHRcdH0gKTtcblxuXHRcdC8vIFdyYXAgdGhlIGVsZW1lbnQgaWYgaXQgY2Fubm90IGhvbGQgY2hpbGQgbm9kZXNcblx0XHRpZiAoIHRoaXMuZWxlbWVudFsgMCBdLm5vZGVOYW1lLm1hdGNoKCAvXihjYW52YXN8dGV4dGFyZWF8aW5wdXR8c2VsZWN0fGJ1dHRvbnxpbWcpJC9pICkgKSB7XG5cblx0XHRcdHRoaXMuZWxlbWVudC53cmFwKFxuXHRcdFx0XHQkKCBcIjxkaXYgY2xhc3M9J3VpLXdyYXBwZXInIHN0eWxlPSdvdmVyZmxvdzogaGlkZGVuOyc+PC9kaXY+XCIgKS5jc3MoIHtcblx0XHRcdFx0XHRwb3NpdGlvbjogdGhpcy5lbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0XHRcdFx0d2lkdGg6IHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCksXG5cdFx0XHRcdFx0aGVpZ2h0OiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSxcblx0XHRcdFx0XHR0b3A6IHRoaXMuZWxlbWVudC5jc3MoIFwidG9wXCIgKSxcblx0XHRcdFx0XHRsZWZ0OiB0aGlzLmVsZW1lbnQuY3NzKCBcImxlZnRcIiApXG5cdFx0XHRcdH0gKVxuXHRcdFx0KTtcblxuXHRcdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudCgpLmRhdGEoXG5cdFx0XHRcdFwidWktcmVzaXphYmxlXCIsIHRoaXMuZWxlbWVudC5yZXNpemFibGUoIFwiaW5zdGFuY2VcIiApXG5cdFx0XHQpO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRJc1dyYXBwZXIgPSB0cnVlO1xuXG5cdFx0XHRtYXJnaW5zID0ge1xuXHRcdFx0XHRtYXJnaW5Ub3A6IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyggXCJtYXJnaW5Ub3BcIiApLFxuXHRcdFx0XHRtYXJnaW5SaWdodDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBcIm1hcmdpblJpZ2h0XCIgKSxcblx0XHRcdFx0bWFyZ2luQm90dG9tOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIFwibWFyZ2luQm90dG9tXCIgKSxcblx0XHRcdFx0bWFyZ2luTGVmdDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBcIm1hcmdpbkxlZnRcIiApXG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQuY3NzKCBtYXJnaW5zICk7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIFwibWFyZ2luXCIsIDAgKTtcblxuXHRcdFx0Ly8gc3VwcG9ydDogU2FmYXJpXG5cdFx0XHQvLyBQcmV2ZW50IFNhZmFyaSB0ZXh0YXJlYSByZXNpemVcblx0XHRcdHRoaXMub3JpZ2luYWxSZXNpemVTdHlsZSA9IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyggXCJyZXNpemVcIiApO1xuXHRcdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBcInJlc2l6ZVwiLCBcIm5vbmVcIiApO1xuXG5cdFx0XHR0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLnB1c2goIHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygge1xuXHRcdFx0XHRwb3NpdGlvbjogXCJzdGF0aWNcIixcblx0XHRcdFx0em9vbTogMSxcblx0XHRcdFx0ZGlzcGxheTogXCJibG9ja1wiXG5cdFx0XHR9ICkgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHQvLyBhdm9pZCBJRSBqdW1wIChoYXJkIHNldCB0aGUgbWFyZ2luKVxuXHRcdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBtYXJnaW5zICk7XG5cblx0XHRcdHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc2V0dXBIYW5kbGVzKCk7XG5cblx0XHRpZiAoIG8uYXV0b0hpZGUgKSB7XG5cdFx0XHQkKCB0aGlzLmVsZW1lbnQgKVxuXHRcdFx0XHQub24oIFwibW91c2VlbnRlclwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIG8uZGlzYWJsZWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoYXQuX3JlbW92ZUNsYXNzKCBcInVpLXJlc2l6YWJsZS1hdXRvaGlkZVwiICk7XG5cdFx0XHRcdFx0dGhhdC5faGFuZGxlcy5zaG93KCk7XG5cdFx0XHRcdH0gKVxuXHRcdFx0XHQub24oIFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIG8uZGlzYWJsZWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggIXRoYXQucmVzaXppbmcgKSB7XG5cdFx0XHRcdFx0XHR0aGF0Ll9hZGRDbGFzcyggXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIiApO1xuXHRcdFx0XHRcdFx0dGhhdC5faGFuZGxlcy5oaWRlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbW91c2VJbml0KCk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dGhpcy5fbW91c2VEZXN0cm95KCk7XG5cblx0XHR2YXIgd3JhcHBlcixcblx0XHRcdF9kZXN0cm95ID0gZnVuY3Rpb24oIGV4cCApIHtcblx0XHRcdFx0JCggZXhwIClcblx0XHRcdFx0XHQucmVtb3ZlRGF0YSggXCJyZXNpemFibGVcIiApXG5cdFx0XHRcdFx0LnJlbW92ZURhdGEoIFwidWktcmVzaXphYmxlXCIgKVxuXHRcdFx0XHRcdC5vZmYoIFwiLnJlc2l6YWJsZVwiIClcblx0XHRcdFx0XHQuZmluZCggXCIudWktcmVzaXphYmxlLWhhbmRsZVwiIClcblx0XHRcdFx0XHRcdC5yZW1vdmUoKTtcblx0XHRcdH07XG5cblx0XHQvLyBUT0RPOiBVbndyYXAgYXQgc2FtZSBET00gcG9zaXRpb25cblx0XHRpZiAoIHRoaXMuZWxlbWVudElzV3JhcHBlciApIHtcblx0XHRcdF9kZXN0cm95KCB0aGlzLmVsZW1lbnQgKTtcblx0XHRcdHdyYXBwZXIgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIHtcblx0XHRcdFx0cG9zaXRpb246IHdyYXBwZXIuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdFx0d2lkdGg6IHdyYXBwZXIub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6IHdyYXBwZXIub3V0ZXJIZWlnaHQoKSxcblx0XHRcdFx0dG9wOiB3cmFwcGVyLmNzcyggXCJ0b3BcIiApLFxuXHRcdFx0XHRsZWZ0OiB3cmFwcGVyLmNzcyggXCJsZWZ0XCIgKVxuXHRcdFx0fSApLmluc2VydEFmdGVyKCB3cmFwcGVyICk7XG5cdFx0XHR3cmFwcGVyLnJlbW92ZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyggXCJyZXNpemVcIiwgdGhpcy5vcmlnaW5hbFJlc2l6ZVN0eWxlICk7XG5cdFx0X2Rlc3Ryb3koIHRoaXMub3JpZ2luYWxFbGVtZW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXG5cdFx0c3dpdGNoICgga2V5ICkge1xuXHRcdGNhc2UgXCJoYW5kbGVzXCI6XG5cdFx0XHR0aGlzLl9yZW1vdmVIYW5kbGVzKCk7XG5cdFx0XHR0aGlzLl9zZXR1cEhhbmRsZXMoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH0sXG5cblx0X3NldHVwSGFuZGxlczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnMsIGhhbmRsZSwgaSwgbiwgaG5hbWUsIGF4aXMsIHRoYXQgPSB0aGlzO1xuXHRcdHRoaXMuaGFuZGxlcyA9IG8uaGFuZGxlcyB8fFxuXHRcdFx0KCAhJCggXCIudWktcmVzaXphYmxlLWhhbmRsZVwiLCB0aGlzLmVsZW1lbnQgKS5sZW5ndGggP1xuXHRcdFx0XHRcImUscyxzZVwiIDoge1xuXHRcdFx0XHRcdG46IFwiLnVpLXJlc2l6YWJsZS1uXCIsXG5cdFx0XHRcdFx0ZTogXCIudWktcmVzaXphYmxlLWVcIixcblx0XHRcdFx0XHRzOiBcIi51aS1yZXNpemFibGUtc1wiLFxuXHRcdFx0XHRcdHc6IFwiLnVpLXJlc2l6YWJsZS13XCIsXG5cdFx0XHRcdFx0c2U6IFwiLnVpLXJlc2l6YWJsZS1zZVwiLFxuXHRcdFx0XHRcdHN3OiBcIi51aS1yZXNpemFibGUtc3dcIixcblx0XHRcdFx0XHRuZTogXCIudWktcmVzaXphYmxlLW5lXCIsXG5cdFx0XHRcdFx0bnc6IFwiLnVpLXJlc2l6YWJsZS1ud1wiXG5cdFx0XHRcdH0gKTtcblxuXHRcdHRoaXMuX2hhbmRsZXMgPSAkKCk7XG5cdFx0aWYgKCB0aGlzLmhhbmRsZXMuY29uc3RydWN0b3IgPT09IFN0cmluZyApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmhhbmRsZXMgPT09IFwiYWxsXCIgKSB7XG5cdFx0XHRcdHRoaXMuaGFuZGxlcyA9IFwibixlLHMsdyxzZSxzdyxuZSxud1wiO1xuXHRcdFx0fVxuXG5cdFx0XHRuID0gdGhpcy5oYW5kbGVzLnNwbGl0KCBcIixcIiApO1xuXHRcdFx0dGhpcy5oYW5kbGVzID0ge307XG5cblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKyApIHtcblxuXHRcdFx0XHRoYW5kbGUgPSAkLnRyaW0oIG5bIGkgXSApO1xuXHRcdFx0XHRobmFtZSA9IFwidWktcmVzaXphYmxlLVwiICsgaGFuZGxlO1xuXHRcdFx0XHRheGlzID0gJCggXCI8ZGl2PlwiICk7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCBheGlzLCBcInVpLXJlc2l6YWJsZS1oYW5kbGUgXCIgKyBobmFtZSApO1xuXG5cdFx0XHRcdGF4aXMuY3NzKCB7IHpJbmRleDogby56SW5kZXggfSApO1xuXG5cdFx0XHRcdHRoaXMuaGFuZGxlc1sgaGFuZGxlIF0gPSBcIi51aS1yZXNpemFibGUtXCIgKyBoYW5kbGU7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmQoIGF4aXMgKTtcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX3JlbmRlckF4aXMgPSBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXG5cdFx0XHR2YXIgaSwgYXhpcywgcGFkUG9zLCBwYWRXcmFwcGVyO1xuXG5cdFx0XHR0YXJnZXQgPSB0YXJnZXQgfHwgdGhpcy5lbGVtZW50O1xuXG5cdFx0XHRmb3IgKCBpIGluIHRoaXMuaGFuZGxlcyApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuaGFuZGxlc1sgaSBdLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgKSB7XG5cdFx0XHRcdFx0dGhpcy5oYW5kbGVzWyBpIF0gPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oIHRoaXMuaGFuZGxlc1sgaSBdICkuZmlyc3QoKS5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuaGFuZGxlc1sgaSBdLmpxdWVyeSB8fCB0aGlzLmhhbmRsZXNbIGkgXS5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHR0aGlzLmhhbmRsZXNbIGkgXSA9ICQoIHRoaXMuaGFuZGxlc1sgaSBdICk7XG5cdFx0XHRcdFx0dGhpcy5fb24oIHRoaXMuaGFuZGxlc1sgaSBdLCB7IFwibW91c2Vkb3duXCI6IHRoYXQuX21vdXNlRG93biB9ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRoaXMuZWxlbWVudElzV3JhcHBlciAmJlxuXHRcdFx0XHRcdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnRbIDAgXVxuXHRcdFx0XHRcdFx0XHQubm9kZU5hbWVcblx0XHRcdFx0XHRcdFx0Lm1hdGNoKCAvXih0ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9uKSQvaSApICkge1xuXHRcdFx0XHRcdGF4aXMgPSAkKCB0aGlzLmhhbmRsZXNbIGkgXSwgdGhpcy5lbGVtZW50ICk7XG5cblx0XHRcdFx0XHRwYWRXcmFwcGVyID0gL3N3fG5lfG53fHNlfG58cy8udGVzdCggaSApID9cblx0XHRcdFx0XHRcdGF4aXMub3V0ZXJIZWlnaHQoKSA6XG5cdFx0XHRcdFx0XHRheGlzLm91dGVyV2lkdGgoKTtcblxuXHRcdFx0XHRcdHBhZFBvcyA9IFsgXCJwYWRkaW5nXCIsXG5cdFx0XHRcdFx0XHQvbmV8bnd8bi8udGVzdCggaSApID8gXCJUb3BcIiA6XG5cdFx0XHRcdFx0XHQvc2V8c3d8cy8udGVzdCggaSApID8gXCJCb3R0b21cIiA6XG5cdFx0XHRcdFx0XHQvXmUkLy50ZXN0KCBpICkgPyBcIlJpZ2h0XCIgOiBcIkxlZnRcIiBdLmpvaW4oIFwiXCIgKTtcblxuXHRcdFx0XHRcdHRhcmdldC5jc3MoIHBhZFBvcywgcGFkV3JhcHBlciApO1xuXG5cdFx0XHRcdFx0dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuX2hhbmRsZXMgPSB0aGlzLl9oYW5kbGVzLmFkZCggdGhpcy5oYW5kbGVzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gVE9ETzogbWFrZSByZW5kZXJBeGlzIGEgcHJvdG90eXBlIGZ1bmN0aW9uXG5cdFx0dGhpcy5fcmVuZGVyQXhpcyggdGhpcy5lbGVtZW50ICk7XG5cblx0XHR0aGlzLl9oYW5kbGVzID0gdGhpcy5faGFuZGxlcy5hZGQoIHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1yZXNpemFibGUtaGFuZGxlXCIgKSApO1xuXHRcdHRoaXMuX2hhbmRsZXMuZGlzYWJsZVNlbGVjdGlvbigpO1xuXG5cdFx0dGhpcy5faGFuZGxlcy5vbiggXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICF0aGF0LnJlc2l6aW5nICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xuXHRcdFx0XHRcdGF4aXMgPSB0aGlzLmNsYXNzTmFtZS5tYXRjaCggL3VpLXJlc2l6YWJsZS0oc2V8c3d8bmV8bnd8bnxlfHN8dykvaSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoYXQuYXhpcyA9IGF4aXMgJiYgYXhpc1sgMSBdID8gYXhpc1sgMSBdIDogXCJzZVwiO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggby5hdXRvSGlkZSApIHtcblx0XHRcdHRoaXMuX2hhbmRsZXMuaGlkZSgpO1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktcmVzaXphYmxlLWF1dG9oaWRlXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0X3JlbW92ZUhhbmRsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2hhbmRsZXMucmVtb3ZlKCk7XG5cdH0sXG5cblx0X21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpLCBoYW5kbGUsXG5cdFx0XHRjYXB0dXJlID0gZmFsc2U7XG5cblx0XHRmb3IgKCBpIGluIHRoaXMuaGFuZGxlcyApIHtcblx0XHRcdGhhbmRsZSA9ICQoIHRoaXMuaGFuZGxlc1sgaSBdIClbIDAgXTtcblx0XHRcdGlmICggaGFuZGxlID09PSBldmVudC50YXJnZXQgfHwgJC5jb250YWlucyggaGFuZGxlLCBldmVudC50YXJnZXQgKSApIHtcblx0XHRcdFx0Y2FwdHVyZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgY2FwdHVyZTtcblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIGN1cmxlZnQsIGN1cnRvcCwgY3Vyc29yLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGVsID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0dGhpcy5yZXNpemluZyA9IHRydWU7XG5cblx0XHR0aGlzLl9yZW5kZXJQcm94eSgpO1xuXG5cdFx0Y3VybGVmdCA9IHRoaXMuX251bSggdGhpcy5oZWxwZXIuY3NzKCBcImxlZnRcIiApICk7XG5cdFx0Y3VydG9wID0gdGhpcy5fbnVtKCB0aGlzLmhlbHBlci5jc3MoIFwidG9wXCIgKSApO1xuXG5cdFx0aWYgKCBvLmNvbnRhaW5tZW50ICkge1xuXHRcdFx0Y3VybGVmdCArPSAkKCBvLmNvbnRhaW5tZW50ICkuc2Nyb2xsTGVmdCgpIHx8IDA7XG5cdFx0XHRjdXJ0b3AgKz0gJCggby5jb250YWlubWVudCApLnNjcm9sbFRvcCgpIHx8IDA7XG5cdFx0fVxuXG5cdFx0dGhpcy5vZmZzZXQgPSB0aGlzLmhlbHBlci5vZmZzZXQoKTtcblx0XHR0aGlzLnBvc2l0aW9uID0geyBsZWZ0OiBjdXJsZWZ0LCB0b3A6IGN1cnRvcCB9O1xuXG5cdFx0dGhpcy5zaXplID0gdGhpcy5faGVscGVyID8ge1xuXHRcdFx0XHR3aWR0aDogdGhpcy5oZWxwZXIud2lkdGgoKSxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmhlbHBlci5oZWlnaHQoKVxuXHRcdFx0fSA6IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdGhlaWdodDogZWwuaGVpZ2h0KClcblx0XHRcdH07XG5cblx0XHR0aGlzLm9yaWdpbmFsU2l6ZSA9IHRoaXMuX2hlbHBlciA/IHtcblx0XHRcdFx0d2lkdGg6IGVsLm91dGVyV2lkdGgoKSxcblx0XHRcdFx0aGVpZ2h0OiBlbC5vdXRlckhlaWdodCgpXG5cdFx0XHR9IDoge1xuXHRcdFx0XHR3aWR0aDogZWwud2lkdGgoKSxcblx0XHRcdFx0aGVpZ2h0OiBlbC5oZWlnaHQoKVxuXHRcdFx0fTtcblxuXHRcdHRoaXMuc2l6ZURpZmYgPSB7XG5cdFx0XHR3aWR0aDogZWwub3V0ZXJXaWR0aCgpIC0gZWwud2lkdGgoKSxcblx0XHRcdGhlaWdodDogZWwub3V0ZXJIZWlnaHQoKSAtIGVsLmhlaWdodCgpXG5cdFx0fTtcblxuXHRcdHRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IHsgbGVmdDogY3VybGVmdCwgdG9wOiBjdXJ0b3AgfTtcblx0XHR0aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbiA9IHsgbGVmdDogZXZlbnQucGFnZVgsIHRvcDogZXZlbnQucGFnZVkgfTtcblxuXHRcdHRoaXMuYXNwZWN0UmF0aW8gPSAoIHR5cGVvZiBvLmFzcGVjdFJhdGlvID09PSBcIm51bWJlclwiICkgP1xuXHRcdFx0by5hc3BlY3RSYXRpbyA6XG5cdFx0XHQoICggdGhpcy5vcmlnaW5hbFNpemUud2lkdGggLyB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQgKSB8fCAxICk7XG5cblx0XHRjdXJzb3IgPSAkKCBcIi51aS1yZXNpemFibGUtXCIgKyB0aGlzLmF4aXMgKS5jc3MoIFwiY3Vyc29yXCIgKTtcblx0XHQkKCBcImJvZHlcIiApLmNzcyggXCJjdXJzb3JcIiwgY3Vyc29yID09PSBcImF1dG9cIiA/IHRoaXMuYXhpcyArIFwiLXJlc2l6ZVwiIDogY3Vyc29yICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1yZXNpemFibGUtcmVzaXppbmdcIiApO1xuXHRcdHRoaXMuX3Byb3BhZ2F0ZSggXCJzdGFydFwiLCBldmVudCApO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdF9tb3VzZURyYWc6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdHZhciBkYXRhLCBwcm9wcyxcblx0XHRcdHNtcCA9IHRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uLFxuXHRcdFx0YSA9IHRoaXMuYXhpcyxcblx0XHRcdGR4ID0gKCBldmVudC5wYWdlWCAtIHNtcC5sZWZ0ICkgfHwgMCxcblx0XHRcdGR5ID0gKCBldmVudC5wYWdlWSAtIHNtcC50b3AgKSB8fCAwLFxuXHRcdFx0dHJpZ2dlciA9IHRoaXMuX2NoYW5nZVsgYSBdO1xuXG5cdFx0dGhpcy5fdXBkYXRlUHJldlByb3BlcnRpZXMoKTtcblxuXHRcdGlmICggIXRyaWdnZXIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0ZGF0YSA9IHRyaWdnZXIuYXBwbHkoIHRoaXMsIFsgZXZlbnQsIGR4LCBkeSBdICk7XG5cblx0XHR0aGlzLl91cGRhdGVWaXJ0dWFsQm91bmRhcmllcyggZXZlbnQuc2hpZnRLZXkgKTtcblx0XHRpZiAoIHRoaXMuX2FzcGVjdFJhdGlvIHx8IGV2ZW50LnNoaWZ0S2V5ICkge1xuXHRcdFx0ZGF0YSA9IHRoaXMuX3VwZGF0ZVJhdGlvKCBkYXRhLCBldmVudCApO1xuXHRcdH1cblxuXHRcdGRhdGEgPSB0aGlzLl9yZXNwZWN0U2l6ZSggZGF0YSwgZXZlbnQgKTtcblxuXHRcdHRoaXMuX3VwZGF0ZUNhY2hlKCBkYXRhICk7XG5cblx0XHR0aGlzLl9wcm9wYWdhdGUoIFwicmVzaXplXCIsIGV2ZW50ICk7XG5cblx0XHRwcm9wcyA9IHRoaXMuX2FwcGx5Q2hhbmdlcygpO1xuXG5cdFx0aWYgKCAhdGhpcy5faGVscGVyICYmIHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTtcblx0XHR9XG5cblx0XHRpZiAoICEkLmlzRW1wdHlPYmplY3QoIHByb3BzICkgKSB7XG5cdFx0XHR0aGlzLl91cGRhdGVQcmV2UHJvcGVydGllcygpO1xuXHRcdFx0dGhpcy5fdHJpZ2dlciggXCJyZXNpemVcIiwgZXZlbnQsIHRoaXMudWkoKSApO1xuXHRcdFx0dGhpcy5fYXBwbHlDaGFuZ2VzKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdF9tb3VzZVN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdHRoaXMucmVzaXppbmcgPSBmYWxzZTtcblx0XHR2YXIgcHIsIGlzdGEsIHNvZmZzZXRoLCBzb2Zmc2V0dywgcywgbGVmdCwgdG9wLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucywgdGhhdCA9IHRoaXM7XG5cblx0XHRpZiAoIHRoaXMuX2hlbHBlciApIHtcblxuXHRcdFx0cHIgPSB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzO1xuXHRcdFx0aXN0YSA9IHByLmxlbmd0aCAmJiAoIC90ZXh0YXJlYS9pICkudGVzdCggcHJbIDAgXS5ub2RlTmFtZSApO1xuXHRcdFx0c29mZnNldGggPSBpc3RhICYmIHRoaXMuX2hhc1Njcm9sbCggcHJbIDAgXSwgXCJsZWZ0XCIgKSA/IDAgOiB0aGF0LnNpemVEaWZmLmhlaWdodDtcblx0XHRcdHNvZmZzZXR3ID0gaXN0YSA/IDAgOiB0aGF0LnNpemVEaWZmLndpZHRoO1xuXG5cdFx0XHRzID0ge1xuXHRcdFx0XHR3aWR0aDogKCB0aGF0LmhlbHBlci53aWR0aCgpICAtIHNvZmZzZXR3ICksXG5cdFx0XHRcdGhlaWdodDogKCB0aGF0LmhlbHBlci5oZWlnaHQoKSAtIHNvZmZzZXRoIClcblx0XHRcdH07XG5cdFx0XHRsZWZ0ID0gKCBwYXJzZUZsb2F0KCB0aGF0LmVsZW1lbnQuY3NzKCBcImxlZnRcIiApICkgK1xuXHRcdFx0XHQoIHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0ICkgKSB8fCBudWxsO1xuXHRcdFx0dG9wID0gKCBwYXJzZUZsb2F0KCB0aGF0LmVsZW1lbnQuY3NzKCBcInRvcFwiICkgKSArXG5cdFx0XHRcdCggdGhhdC5wb3NpdGlvbi50b3AgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24udG9wICkgKSB8fCBudWxsO1xuXG5cdFx0XHRpZiAoICFvLmFuaW1hdGUgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jc3MoICQuZXh0ZW5kKCBzLCB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH0gKSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGF0LmhlbHBlci5oZWlnaHQoIHRoYXQuc2l6ZS5oZWlnaHQgKTtcblx0XHRcdHRoYXQuaGVscGVyLndpZHRoKCB0aGF0LnNpemUud2lkdGggKTtcblxuXHRcdFx0aWYgKCB0aGlzLl9oZWxwZXIgJiYgIW8uYW5pbWF0ZSApIHtcblx0XHRcdFx0dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQkKCBcImJvZHlcIiApLmNzcyggXCJjdXJzb3JcIiwgXCJhdXRvXCIgKTtcblxuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBcInVpLXJlc2l6YWJsZS1yZXNpemluZ1wiICk7XG5cblx0XHR0aGlzLl9wcm9wYWdhdGUoIFwic3RvcFwiLCBldmVudCApO1xuXG5cdFx0aWYgKCB0aGlzLl9oZWxwZXIgKSB7XG5cdFx0XHR0aGlzLmhlbHBlci5yZW1vdmUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRfdXBkYXRlUHJldlByb3BlcnRpZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMucHJldlBvc2l0aW9uID0ge1xuXHRcdFx0dG9wOiB0aGlzLnBvc2l0aW9uLnRvcCxcblx0XHRcdGxlZnQ6IHRoaXMucG9zaXRpb24ubGVmdFxuXHRcdH07XG5cdFx0dGhpcy5wcmV2U2l6ZSA9IHtcblx0XHRcdHdpZHRoOiB0aGlzLnNpemUud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IHRoaXMuc2l6ZS5oZWlnaHRcblx0XHR9O1xuXHR9LFxuXG5cdF9hcHBseUNoYW5nZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcm9wcyA9IHt9O1xuXG5cdFx0aWYgKCB0aGlzLnBvc2l0aW9uLnRvcCAhPT0gdGhpcy5wcmV2UG9zaXRpb24udG9wICkge1xuXHRcdFx0cHJvcHMudG9wID0gdGhpcy5wb3NpdGlvbi50b3AgKyBcInB4XCI7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5wb3NpdGlvbi5sZWZ0ICE9PSB0aGlzLnByZXZQb3NpdGlvbi5sZWZ0ICkge1xuXHRcdFx0cHJvcHMubGVmdCA9IHRoaXMucG9zaXRpb24ubGVmdCArIFwicHhcIjtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLnNpemUud2lkdGggIT09IHRoaXMucHJldlNpemUud2lkdGggKSB7XG5cdFx0XHRwcm9wcy53aWR0aCA9IHRoaXMuc2l6ZS53aWR0aCArIFwicHhcIjtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLnNpemUuaGVpZ2h0ICE9PSB0aGlzLnByZXZTaXplLmhlaWdodCApIHtcblx0XHRcdHByb3BzLmhlaWdodCA9IHRoaXMuc2l6ZS5oZWlnaHQgKyBcInB4XCI7XG5cdFx0fVxuXG5cdFx0dGhpcy5oZWxwZXIuY3NzKCBwcm9wcyApO1xuXG5cdFx0cmV0dXJuIHByb3BzO1xuXHR9LFxuXG5cdF91cGRhdGVWaXJ0dWFsQm91bmRhcmllczogZnVuY3Rpb24oIGZvcmNlQXNwZWN0UmF0aW8gKSB7XG5cdFx0dmFyIHBNaW5XaWR0aCwgcE1heFdpZHRoLCBwTWluSGVpZ2h0LCBwTWF4SGVpZ2h0LCBiLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblxuXHRcdGIgPSB7XG5cdFx0XHRtaW5XaWR0aDogdGhpcy5faXNOdW1iZXIoIG8ubWluV2lkdGggKSA/IG8ubWluV2lkdGggOiAwLFxuXHRcdFx0bWF4V2lkdGg6IHRoaXMuX2lzTnVtYmVyKCBvLm1heFdpZHRoICkgPyBvLm1heFdpZHRoIDogSW5maW5pdHksXG5cdFx0XHRtaW5IZWlnaHQ6IHRoaXMuX2lzTnVtYmVyKCBvLm1pbkhlaWdodCApID8gby5taW5IZWlnaHQgOiAwLFxuXHRcdFx0bWF4SGVpZ2h0OiB0aGlzLl9pc051bWJlciggby5tYXhIZWlnaHQgKSA/IG8ubWF4SGVpZ2h0IDogSW5maW5pdHlcblx0XHR9O1xuXG5cdFx0aWYgKCB0aGlzLl9hc3BlY3RSYXRpbyB8fCBmb3JjZUFzcGVjdFJhdGlvICkge1xuXHRcdFx0cE1pbldpZHRoID0gYi5taW5IZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvO1xuXHRcdFx0cE1pbkhlaWdodCA9IGIubWluV2lkdGggLyB0aGlzLmFzcGVjdFJhdGlvO1xuXHRcdFx0cE1heFdpZHRoID0gYi5tYXhIZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvO1xuXHRcdFx0cE1heEhlaWdodCA9IGIubWF4V2lkdGggLyB0aGlzLmFzcGVjdFJhdGlvO1xuXG5cdFx0XHRpZiAoIHBNaW5XaWR0aCA+IGIubWluV2lkdGggKSB7XG5cdFx0XHRcdGIubWluV2lkdGggPSBwTWluV2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHBNaW5IZWlnaHQgPiBiLm1pbkhlaWdodCApIHtcblx0XHRcdFx0Yi5taW5IZWlnaHQgPSBwTWluSGVpZ2h0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBwTWF4V2lkdGggPCBiLm1heFdpZHRoICkge1xuXHRcdFx0XHRiLm1heFdpZHRoID0gcE1heFdpZHRoO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBwTWF4SGVpZ2h0IDwgYi5tYXhIZWlnaHQgKSB7XG5cdFx0XHRcdGIubWF4SGVpZ2h0ID0gcE1heEhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fdkJvdW5kYXJpZXMgPSBiO1xuXHR9LFxuXG5cdF91cGRhdGVDYWNoZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0dGhpcy5vZmZzZXQgPSB0aGlzLmhlbHBlci5vZmZzZXQoKTtcblx0XHRpZiAoIHRoaXMuX2lzTnVtYmVyKCBkYXRhLmxlZnQgKSApIHtcblx0XHRcdHRoaXMucG9zaXRpb24ubGVmdCA9IGRhdGEubGVmdDtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLl9pc051bWJlciggZGF0YS50b3AgKSApIHtcblx0XHRcdHRoaXMucG9zaXRpb24udG9wID0gZGF0YS50b3A7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5faXNOdW1iZXIoIGRhdGEuaGVpZ2h0ICkgKSB7XG5cdFx0XHR0aGlzLnNpemUuaGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5faXNOdW1iZXIoIGRhdGEud2lkdGggKSApIHtcblx0XHRcdHRoaXMuc2l6ZS53aWR0aCA9IGRhdGEud2lkdGg7XG5cdFx0fVxuXHR9LFxuXG5cdF91cGRhdGVSYXRpbzogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHR2YXIgY3BvcyA9IHRoaXMucG9zaXRpb24sXG5cdFx0XHRjc2l6ZSA9IHRoaXMuc2l6ZSxcblx0XHRcdGEgPSB0aGlzLmF4aXM7XG5cblx0XHRpZiAoIHRoaXMuX2lzTnVtYmVyKCBkYXRhLmhlaWdodCApICkge1xuXHRcdFx0ZGF0YS53aWR0aCA9ICggZGF0YS5oZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvICk7XG5cdFx0fSBlbHNlIGlmICggdGhpcy5faXNOdW1iZXIoIGRhdGEud2lkdGggKSApIHtcblx0XHRcdGRhdGEuaGVpZ2h0ID0gKCBkYXRhLndpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyApO1xuXHRcdH1cblxuXHRcdGlmICggYSA9PT0gXCJzd1wiICkge1xuXHRcdFx0ZGF0YS5sZWZ0ID0gY3Bvcy5sZWZ0ICsgKCBjc2l6ZS53aWR0aCAtIGRhdGEud2lkdGggKTtcblx0XHRcdGRhdGEudG9wID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKCBhID09PSBcIm53XCIgKSB7XG5cdFx0XHRkYXRhLnRvcCA9IGNwb3MudG9wICsgKCBjc2l6ZS5oZWlnaHQgLSBkYXRhLmhlaWdodCApO1xuXHRcdFx0ZGF0YS5sZWZ0ID0gY3Bvcy5sZWZ0ICsgKCBjc2l6ZS53aWR0aCAtIGRhdGEud2lkdGggKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHRfcmVzcGVjdFNpemU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLl92Qm91bmRhcmllcyxcblx0XHRcdGEgPSB0aGlzLmF4aXMsXG5cdFx0XHRpc21heHcgPSB0aGlzLl9pc051bWJlciggZGF0YS53aWR0aCApICYmIG8ubWF4V2lkdGggJiYgKCBvLm1heFdpZHRoIDwgZGF0YS53aWR0aCApLFxuXHRcdFx0aXNtYXhoID0gdGhpcy5faXNOdW1iZXIoIGRhdGEuaGVpZ2h0ICkgJiYgby5tYXhIZWlnaHQgJiYgKCBvLm1heEhlaWdodCA8IGRhdGEuaGVpZ2h0ICksXG5cdFx0XHRpc21pbncgPSB0aGlzLl9pc051bWJlciggZGF0YS53aWR0aCApICYmIG8ubWluV2lkdGggJiYgKCBvLm1pbldpZHRoID4gZGF0YS53aWR0aCApLFxuXHRcdFx0aXNtaW5oID0gdGhpcy5faXNOdW1iZXIoIGRhdGEuaGVpZ2h0ICkgJiYgby5taW5IZWlnaHQgJiYgKCBvLm1pbkhlaWdodCA+IGRhdGEuaGVpZ2h0ICksXG5cdFx0XHRkdyA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbi5sZWZ0ICsgdGhpcy5vcmlnaW5hbFNpemUud2lkdGgsXG5cdFx0XHRkaCA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbi50b3AgKyB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQsXG5cdFx0XHRjdyA9IC9zd3xud3x3Ly50ZXN0KCBhICksIGNoID0gL253fG5lfG4vLnRlc3QoIGEgKTtcblx0XHRpZiAoIGlzbWludyApIHtcblx0XHRcdGRhdGEud2lkdGggPSBvLm1pbldpZHRoO1xuXHRcdH1cblx0XHRpZiAoIGlzbWluaCApIHtcblx0XHRcdGRhdGEuaGVpZ2h0ID0gby5taW5IZWlnaHQ7XG5cdFx0fVxuXHRcdGlmICggaXNtYXh3ICkge1xuXHRcdFx0ZGF0YS53aWR0aCA9IG8ubWF4V2lkdGg7XG5cdFx0fVxuXHRcdGlmICggaXNtYXhoICkge1xuXHRcdFx0ZGF0YS5oZWlnaHQgPSBvLm1heEhlaWdodDtcblx0XHR9XG5cblx0XHRpZiAoIGlzbWludyAmJiBjdyApIHtcblx0XHRcdGRhdGEubGVmdCA9IGR3IC0gby5taW5XaWR0aDtcblx0XHR9XG5cdFx0aWYgKCBpc21heHcgJiYgY3cgKSB7XG5cdFx0XHRkYXRhLmxlZnQgPSBkdyAtIG8ubWF4V2lkdGg7XG5cdFx0fVxuXHRcdGlmICggaXNtaW5oICYmIGNoICkge1xuXHRcdFx0ZGF0YS50b3AgPSBkaCAtIG8ubWluSGVpZ2h0O1xuXHRcdH1cblx0XHRpZiAoIGlzbWF4aCAmJiBjaCApIHtcblx0XHRcdGRhdGEudG9wID0gZGggLSBvLm1heEhlaWdodDtcblx0XHR9XG5cblx0XHQvLyBGaXhpbmcganVtcCBlcnJvciBvbiB0b3AvbGVmdCAtIGJ1ZyAjMjMzMFxuXHRcdGlmICggIWRhdGEud2lkdGggJiYgIWRhdGEuaGVpZ2h0ICYmICFkYXRhLmxlZnQgJiYgZGF0YS50b3AgKSB7XG5cdFx0XHRkYXRhLnRvcCA9IG51bGw7XG5cdFx0fSBlbHNlIGlmICggIWRhdGEud2lkdGggJiYgIWRhdGEuaGVpZ2h0ICYmICFkYXRhLnRvcCAmJiBkYXRhLmxlZnQgKSB7XG5cdFx0XHRkYXRhLmxlZnQgPSBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9LFxuXG5cdF9nZXRQYWRkaW5nUGx1c0JvcmRlckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHdpZHRocyA9IFtdLFxuXHRcdFx0Ym9yZGVycyA9IFtcblx0XHRcdFx0ZWxlbWVudC5jc3MoIFwiYm9yZGVyVG9wV2lkdGhcIiApLFxuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJib3JkZXJSaWdodFdpZHRoXCIgKSxcblx0XHRcdFx0ZWxlbWVudC5jc3MoIFwiYm9yZGVyQm90dG9tV2lkdGhcIiApLFxuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJib3JkZXJMZWZ0V2lkdGhcIiApXG5cdFx0XHRdLFxuXHRcdFx0cGFkZGluZ3MgPSBbXG5cdFx0XHRcdGVsZW1lbnQuY3NzKCBcInBhZGRpbmdUb3BcIiApLFxuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJwYWRkaW5nUmlnaHRcIiApLFxuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJwYWRkaW5nQm90dG9tXCIgKSxcblx0XHRcdFx0ZWxlbWVudC5jc3MoIFwicGFkZGluZ0xlZnRcIiApXG5cdFx0XHRdO1xuXG5cdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0d2lkdGhzWyBpIF0gPSAoIHBhcnNlRmxvYXQoIGJvcmRlcnNbIGkgXSApIHx8IDAgKTtcblx0XHRcdHdpZHRoc1sgaSBdICs9ICggcGFyc2VGbG9hdCggcGFkZGluZ3NbIGkgXSApIHx8IDAgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0aGVpZ2h0OiB3aWR0aHNbIDAgXSArIHdpZHRoc1sgMiBdLFxuXHRcdFx0d2lkdGg6IHdpZHRoc1sgMSBdICsgd2lkdGhzWyAzIF1cblx0XHR9O1xuXHR9LFxuXG5cdF9wcm9wb3J0aW9uYWxseVJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAoICF0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgcHJlbCxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZWxlbWVudCA9IHRoaXMuaGVscGVyIHx8IHRoaXMuZWxlbWVudDtcblxuXHRcdGZvciAoIDsgaSA8IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoOyBpKysgKSB7XG5cblx0XHRcdHByZWwgPSB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzWyBpIF07XG5cblx0XHRcdC8vIFRPRE86IFNlZW1zIGxpa2UgYSBidWcgdG8gY2FjaGUgdGhpcy5vdXRlckRpbWVuc2lvbnNcblx0XHRcdC8vIGNvbnNpZGVyaW5nIHRoYXQgd2UgYXJlIGluIGEgbG9vcC5cblx0XHRcdGlmICggIXRoaXMub3V0ZXJEaW1lbnNpb25zICkge1xuXHRcdFx0XHR0aGlzLm91dGVyRGltZW5zaW9ucyA9IHRoaXMuX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyggcHJlbCApO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmVsLmNzcygge1xuXHRcdFx0XHRoZWlnaHQ6ICggZWxlbWVudC5oZWlnaHQoKSAtIHRoaXMub3V0ZXJEaW1lbnNpb25zLmhlaWdodCApIHx8IDAsXG5cdFx0XHRcdHdpZHRoOiAoIGVsZW1lbnQud2lkdGgoKSAtIHRoaXMub3V0ZXJEaW1lbnNpb25zLndpZHRoICkgfHwgMFxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X3JlbmRlclByb3h5OiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBlbCA9IHRoaXMuZWxlbWVudCwgbyA9IHRoaXMub3B0aW9ucztcblx0XHR0aGlzLmVsZW1lbnRPZmZzZXQgPSBlbC5vZmZzZXQoKTtcblxuXHRcdGlmICggdGhpcy5faGVscGVyICkge1xuXG5cdFx0XHR0aGlzLmhlbHBlciA9IHRoaXMuaGVscGVyIHx8ICQoIFwiPGRpdiBzdHlsZT0nb3ZlcmZsb3c6aGlkZGVuOyc+PC9kaXY+XCIgKTtcblxuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaGVscGVyLCB0aGlzLl9oZWxwZXIgKTtcblx0XHRcdHRoaXMuaGVscGVyLmNzcygge1xuXHRcdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSxcblx0XHRcdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0XHRcdFx0bGVmdDogdGhpcy5lbGVtZW50T2Zmc2V0LmxlZnQgKyBcInB4XCIsXG5cdFx0XHRcdHRvcDogdGhpcy5lbGVtZW50T2Zmc2V0LnRvcCArIFwicHhcIixcblx0XHRcdFx0ekluZGV4OiArK28uekluZGV4IC8vVE9ETzogRG9uJ3QgbW9kaWZ5IG9wdGlvblxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmhlbHBlclxuXHRcdFx0XHQuYXBwZW5kVG8oIFwiYm9keVwiIClcblx0XHRcdFx0LmRpc2FibGVTZWxlY3Rpb24oKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmhlbHBlciA9IHRoaXMuZWxlbWVudDtcblx0XHR9XG5cblx0fSxcblxuXHRfY2hhbmdlOiB7XG5cdFx0ZTogZnVuY3Rpb24oIGV2ZW50LCBkeCApIHtcblx0XHRcdHJldHVybiB7IHdpZHRoOiB0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCArIGR4IH07XG5cdFx0fSxcblx0XHR3OiBmdW5jdGlvbiggZXZlbnQsIGR4ICkge1xuXHRcdFx0dmFyIGNzID0gdGhpcy5vcmlnaW5hbFNpemUsIHNwID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uO1xuXHRcdFx0cmV0dXJuIHsgbGVmdDogc3AubGVmdCArIGR4LCB3aWR0aDogY3Mud2lkdGggLSBkeCB9O1xuXHRcdH0sXG5cdFx0bjogZnVuY3Rpb24oIGV2ZW50LCBkeCwgZHkgKSB7XG5cdFx0XHR2YXIgY3MgPSB0aGlzLm9yaWdpbmFsU2l6ZSwgc3AgPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247XG5cdFx0XHRyZXR1cm4geyB0b3A6IHNwLnRvcCArIGR5LCBoZWlnaHQ6IGNzLmhlaWdodCAtIGR5IH07XG5cdFx0fSxcblx0XHRzOiBmdW5jdGlvbiggZXZlbnQsIGR4LCBkeSApIHtcblx0XHRcdHJldHVybiB7IGhlaWdodDogdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0ICsgZHkgfTtcblx0XHR9LFxuXHRcdHNlOiBmdW5jdGlvbiggZXZlbnQsIGR4LCBkeSApIHtcblx0XHRcdHJldHVybiAkLmV4dGVuZCggdGhpcy5fY2hhbmdlLnMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApLFxuXHRcdFx0XHR0aGlzLl9jaGFuZ2UuZS5hcHBseSggdGhpcywgWyBldmVudCwgZHgsIGR5IF0gKSApO1xuXHRcdH0sXG5cdFx0c3c6IGZ1bmN0aW9uKCBldmVudCwgZHgsIGR5ICkge1xuXHRcdFx0cmV0dXJuICQuZXh0ZW5kKCB0aGlzLl9jaGFuZ2Uucy5hcHBseSggdGhpcywgYXJndW1lbnRzICksXG5cdFx0XHRcdHRoaXMuX2NoYW5nZS53LmFwcGx5KCB0aGlzLCBbIGV2ZW50LCBkeCwgZHkgXSApICk7XG5cdFx0fSxcblx0XHRuZTogZnVuY3Rpb24oIGV2ZW50LCBkeCwgZHkgKSB7XG5cdFx0XHRyZXR1cm4gJC5leHRlbmQoIHRoaXMuX2NoYW5nZS5uLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSxcblx0XHRcdFx0dGhpcy5fY2hhbmdlLmUuYXBwbHkoIHRoaXMsIFsgZXZlbnQsIGR4LCBkeSBdICkgKTtcblx0XHR9LFxuXHRcdG53OiBmdW5jdGlvbiggZXZlbnQsIGR4LCBkeSApIHtcblx0XHRcdHJldHVybiAkLmV4dGVuZCggdGhpcy5fY2hhbmdlLm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApLFxuXHRcdFx0XHR0aGlzLl9jaGFuZ2Uudy5hcHBseSggdGhpcywgWyBldmVudCwgZHgsIGR5IF0gKSApO1xuXHRcdH1cblx0fSxcblxuXHRfcHJvcGFnYXRlOiBmdW5jdGlvbiggbiwgZXZlbnQgKSB7XG5cdFx0JC51aS5wbHVnaW4uY2FsbCggdGhpcywgbiwgWyBldmVudCwgdGhpcy51aSgpIF0gKTtcblx0XHQoIG4gIT09IFwicmVzaXplXCIgJiYgdGhpcy5fdHJpZ2dlciggbiwgZXZlbnQsIHRoaXMudWkoKSApICk7XG5cdH0sXG5cblx0cGx1Z2luczoge30sXG5cblx0dWk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvcmlnaW5hbEVsZW1lbnQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LFxuXHRcdFx0ZWxlbWVudDogdGhpcy5lbGVtZW50LFxuXHRcdFx0aGVscGVyOiB0aGlzLmhlbHBlcixcblx0XHRcdHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLFxuXHRcdFx0c2l6ZTogdGhpcy5zaXplLFxuXHRcdFx0b3JpZ2luYWxTaXplOiB0aGlzLm9yaWdpbmFsU2l6ZSxcblx0XHRcdG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvblxuXHRcdH07XG5cdH1cblxufSApO1xuXG4vKlxuICogUmVzaXphYmxlIEV4dGVuc2lvbnNcbiAqL1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwicmVzaXphYmxlXCIsIFwiYW5pbWF0ZVwiLCB7XG5cblx0c3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciB0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiICksXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zLFxuXHRcdFx0cHIgPSB0aGF0Ll9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLFxuXHRcdFx0aXN0YSA9IHByLmxlbmd0aCAmJiAoIC90ZXh0YXJlYS9pICkudGVzdCggcHJbIDAgXS5ub2RlTmFtZSApLFxuXHRcdFx0c29mZnNldGggPSBpc3RhICYmIHRoYXQuX2hhc1Njcm9sbCggcHJbIDAgXSwgXCJsZWZ0XCIgKSA/IDAgOiB0aGF0LnNpemVEaWZmLmhlaWdodCxcblx0XHRcdHNvZmZzZXR3ID0gaXN0YSA/IDAgOiB0aGF0LnNpemVEaWZmLndpZHRoLFxuXHRcdFx0c3R5bGUgPSB7XG5cdFx0XHRcdHdpZHRoOiAoIHRoYXQuc2l6ZS53aWR0aCAtIHNvZmZzZXR3ICksXG5cdFx0XHRcdGhlaWdodDogKCB0aGF0LnNpemUuaGVpZ2h0IC0gc29mZnNldGggKVxuXHRcdFx0fSxcblx0XHRcdGxlZnQgPSAoIHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoIFwibGVmdFwiICkgKSArXG5cdFx0XHRcdCggdGhhdC5wb3NpdGlvbi5sZWZ0IC0gdGhhdC5vcmlnaW5hbFBvc2l0aW9uLmxlZnQgKSApIHx8IG51bGwsXG5cdFx0XHR0b3AgPSAoIHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoIFwidG9wXCIgKSApICtcblx0XHRcdFx0KCB0aGF0LnBvc2l0aW9uLnRvcCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi50b3AgKSApIHx8IG51bGw7XG5cblx0XHR0aGF0LmVsZW1lbnQuYW5pbWF0ZShcblx0XHRcdCQuZXh0ZW5kKCBzdHlsZSwgdG9wICYmIGxlZnQgPyB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH0gOiB7fSApLCB7XG5cdFx0XHRcdGR1cmF0aW9uOiBvLmFuaW1hdGVEdXJhdGlvbixcblx0XHRcdFx0ZWFzaW5nOiBvLmFuaW1hdGVFYXNpbmcsXG5cdFx0XHRcdHN0ZXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdFx0XHR3aWR0aDogcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggXCJ3aWR0aFwiICkgKSxcblx0XHRcdFx0XHRcdGhlaWdodDogcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggXCJoZWlnaHRcIiApICksXG5cdFx0XHRcdFx0XHR0b3A6IHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoIFwidG9wXCIgKSApLFxuXHRcdFx0XHRcdFx0bGVmdDogcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggXCJsZWZ0XCIgKSApXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGlmICggcHIgJiYgcHIubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0JCggcHJbIDAgXSApLmNzcyggeyB3aWR0aDogZGF0YS53aWR0aCwgaGVpZ2h0OiBkYXRhLmhlaWdodCB9ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJvcGFnYXRpbmcgcmVzaXplLCBhbmQgdXBkYXRpbmcgdmFsdWVzIGZvciBlYWNoIGFuaW1hdGlvbiBzdGVwXG5cdFx0XHRcdFx0dGhhdC5fdXBkYXRlQ2FjaGUoIGRhdGEgKTtcblx0XHRcdFx0XHR0aGF0Ll9wcm9wYWdhdGUoIFwicmVzaXplXCIsIGV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCk7XG5cdH1cblxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwicmVzaXphYmxlXCIsIFwiY29udGFpbm1lbnRcIiwge1xuXG5cdHN0YXJ0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudCwgcCwgY28sIGNoLCBjdywgd2lkdGgsIGhlaWdodCxcblx0XHRcdHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRlbCA9IHRoYXQuZWxlbWVudCxcblx0XHRcdG9jID0gby5jb250YWlubWVudCxcblx0XHRcdGNlID0gKCBvYyBpbnN0YW5jZW9mICQgKSA/XG5cdFx0XHRcdG9jLmdldCggMCApIDpcblx0XHRcdFx0KCAvcGFyZW50Ly50ZXN0KCBvYyApICkgPyBlbC5wYXJlbnQoKS5nZXQoIDAgKSA6IG9jO1xuXG5cdFx0aWYgKCAhY2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhhdC5jb250YWluZXJFbGVtZW50ID0gJCggY2UgKTtcblxuXHRcdGlmICggL2RvY3VtZW50Ly50ZXN0KCBvYyApIHx8IG9jID09PSBkb2N1bWVudCApIHtcblx0XHRcdHRoYXQuY29udGFpbmVyT2Zmc2V0ID0ge1xuXHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHR0b3A6IDBcblx0XHRcdH07XG5cdFx0XHR0aGF0LmNvbnRhaW5lclBvc2l0aW9uID0ge1xuXHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHR0b3A6IDBcblx0XHRcdH07XG5cblx0XHRcdHRoYXQucGFyZW50RGF0YSA9IHtcblx0XHRcdFx0ZWxlbWVudDogJCggZG9jdW1lbnQgKSxcblx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHR3aWR0aDogJCggZG9jdW1lbnQgKS53aWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6ICQoIGRvY3VtZW50ICkuaGVpZ2h0KCkgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodFxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudCA9ICQoIGNlICk7XG5cdFx0XHRwID0gW107XG5cdFx0XHQkKCBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJMZWZ0XCIsIFwiQm90dG9tXCIgXSApLmVhY2goIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcdFx0XHRwWyBpIF0gPSB0aGF0Ll9udW0oIGVsZW1lbnQuY3NzKCBcInBhZGRpbmdcIiArIG5hbWUgKSApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGF0LmNvbnRhaW5lck9mZnNldCA9IGVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0XHR0aGF0LmNvbnRhaW5lclBvc2l0aW9uID0gZWxlbWVudC5wb3NpdGlvbigpO1xuXHRcdFx0dGhhdC5jb250YWluZXJTaXplID0ge1xuXHRcdFx0XHRoZWlnaHQ6ICggZWxlbWVudC5pbm5lckhlaWdodCgpIC0gcFsgMyBdICksXG5cdFx0XHRcdHdpZHRoOiAoIGVsZW1lbnQuaW5uZXJXaWR0aCgpIC0gcFsgMSBdIClcblx0XHRcdH07XG5cblx0XHRcdGNvID0gdGhhdC5jb250YWluZXJPZmZzZXQ7XG5cdFx0XHRjaCA9IHRoYXQuY29udGFpbmVyU2l6ZS5oZWlnaHQ7XG5cdFx0XHRjdyA9IHRoYXQuY29udGFpbmVyU2l6ZS53aWR0aDtcblx0XHRcdHdpZHRoID0gKCB0aGF0Ll9oYXNTY3JvbGwgKCBjZSwgXCJsZWZ0XCIgKSA/IGNlLnNjcm9sbFdpZHRoIDogY3cgKTtcblx0XHRcdGhlaWdodCA9ICggdGhhdC5faGFzU2Nyb2xsICggY2UgKSA/IGNlLnNjcm9sbEhlaWdodCA6IGNoICkgO1xuXG5cdFx0XHR0aGF0LnBhcmVudERhdGEgPSB7XG5cdFx0XHRcdGVsZW1lbnQ6IGNlLFxuXHRcdFx0XHRsZWZ0OiBjby5sZWZ0LFxuXHRcdFx0XHR0b3A6IGNvLnRvcCxcblx0XHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGhlaWdodFxuXHRcdFx0fTtcblx0XHR9XG5cdH0sXG5cblx0cmVzaXplOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHdvc2V0LCBob3NldCwgaXNQYXJlbnQsIGlzT2Zmc2V0UmVsYXRpdmUsXG5cdFx0XHR0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiICksXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zLFxuXHRcdFx0Y28gPSB0aGF0LmNvbnRhaW5lck9mZnNldCxcblx0XHRcdGNwID0gdGhhdC5wb3NpdGlvbixcblx0XHRcdHBSYXRpbyA9IHRoYXQuX2FzcGVjdFJhdGlvIHx8IGV2ZW50LnNoaWZ0S2V5LFxuXHRcdFx0Y29wID0ge1xuXHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdGxlZnQ6IDBcblx0XHRcdH0sXG5cdFx0XHRjZSA9IHRoYXQuY29udGFpbmVyRWxlbWVudCxcblx0XHRcdGNvbnRpbnVlUmVzaXplID0gdHJ1ZTtcblxuXHRcdGlmICggY2VbIDAgXSAhPT0gZG9jdW1lbnQgJiYgKCAvc3RhdGljLyApLnRlc3QoIGNlLmNzcyggXCJwb3NpdGlvblwiICkgKSApIHtcblx0XHRcdGNvcCA9IGNvO1xuXHRcdH1cblxuXHRcdGlmICggY3AubGVmdCA8ICggdGhhdC5faGVscGVyID8gY28ubGVmdCA6IDAgKSApIHtcblx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS53aWR0aCArXG5cdFx0XHRcdCggdGhhdC5faGVscGVyID9cblx0XHRcdFx0XHQoIHRoYXQucG9zaXRpb24ubGVmdCAtIGNvLmxlZnQgKSA6XG5cdFx0XHRcdFx0KCB0aGF0LnBvc2l0aW9uLmxlZnQgLSBjb3AubGVmdCApICk7XG5cblx0XHRcdGlmICggcFJhdGlvICkge1xuXHRcdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLndpZHRoIC8gdGhhdC5hc3BlY3RSYXRpbztcblx0XHRcdFx0Y29udGludWVSZXNpemUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoYXQucG9zaXRpb24ubGVmdCA9IG8uaGVscGVyID8gY28ubGVmdCA6IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBjcC50b3AgPCAoIHRoYXQuX2hlbHBlciA/IGNvLnRvcCA6IDAgKSApIHtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnNpemUuaGVpZ2h0ICtcblx0XHRcdFx0KCB0aGF0Ll9oZWxwZXIgP1xuXHRcdFx0XHRcdCggdGhhdC5wb3NpdGlvbi50b3AgLSBjby50b3AgKSA6XG5cdFx0XHRcdFx0dGhhdC5wb3NpdGlvbi50b3AgKTtcblxuXHRcdFx0aWYgKCBwUmF0aW8gKSB7XG5cdFx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS5oZWlnaHQgKiB0aGF0LmFzcGVjdFJhdGlvO1xuXHRcdFx0XHRjb250aW51ZVJlc2l6ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dGhhdC5wb3NpdGlvbi50b3AgPSB0aGF0Ll9oZWxwZXIgPyBjby50b3AgOiAwO1xuXHRcdH1cblxuXHRcdGlzUGFyZW50ID0gdGhhdC5jb250YWluZXJFbGVtZW50LmdldCggMCApID09PSB0aGF0LmVsZW1lbnQucGFyZW50KCkuZ2V0KCAwICk7XG5cdFx0aXNPZmZzZXRSZWxhdGl2ZSA9IC9yZWxhdGl2ZXxhYnNvbHV0ZS8udGVzdCggdGhhdC5jb250YWluZXJFbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICkgKTtcblxuXHRcdGlmICggaXNQYXJlbnQgJiYgaXNPZmZzZXRSZWxhdGl2ZSApIHtcblx0XHRcdHRoYXQub2Zmc2V0LmxlZnQgPSB0aGF0LnBhcmVudERhdGEubGVmdCArIHRoYXQucG9zaXRpb24ubGVmdDtcblx0XHRcdHRoYXQub2Zmc2V0LnRvcCA9IHRoYXQucGFyZW50RGF0YS50b3AgKyB0aGF0LnBvc2l0aW9uLnRvcDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhhdC5vZmZzZXQubGVmdCA9IHRoYXQuZWxlbWVudC5vZmZzZXQoKS5sZWZ0O1xuXHRcdFx0dGhhdC5vZmZzZXQudG9wID0gdGhhdC5lbGVtZW50Lm9mZnNldCgpLnRvcDtcblx0XHR9XG5cblx0XHR3b3NldCA9IE1hdGguYWJzKCB0aGF0LnNpemVEaWZmLndpZHRoICtcblx0XHRcdCggdGhhdC5faGVscGVyID9cblx0XHRcdFx0dGhhdC5vZmZzZXQubGVmdCAtIGNvcC5sZWZ0IDpcblx0XHRcdFx0KCB0aGF0Lm9mZnNldC5sZWZ0IC0gY28ubGVmdCApICkgKTtcblxuXHRcdGhvc2V0ID0gTWF0aC5hYnMoIHRoYXQuc2l6ZURpZmYuaGVpZ2h0ICtcblx0XHRcdCggdGhhdC5faGVscGVyID9cblx0XHRcdFx0dGhhdC5vZmZzZXQudG9wIC0gY29wLnRvcCA6XG5cdFx0XHRcdCggdGhhdC5vZmZzZXQudG9wIC0gY28udG9wICkgKSApO1xuXG5cdFx0aWYgKCB3b3NldCArIHRoYXQuc2l6ZS53aWR0aCA+PSB0aGF0LnBhcmVudERhdGEud2lkdGggKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSB0aGF0LnBhcmVudERhdGEud2lkdGggLSB3b3NldDtcblx0XHRcdGlmICggcFJhdGlvICkge1xuXHRcdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLndpZHRoIC8gdGhhdC5hc3BlY3RSYXRpbztcblx0XHRcdFx0Y29udGludWVSZXNpemUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGhvc2V0ICsgdGhhdC5zaXplLmhlaWdodCA+PSB0aGF0LnBhcmVudERhdGEuaGVpZ2h0ICkge1xuXHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IHRoYXQucGFyZW50RGF0YS5oZWlnaHQgLSBob3NldDtcblx0XHRcdGlmICggcFJhdGlvICkge1xuXHRcdFx0XHR0aGF0LnNpemUud2lkdGggPSB0aGF0LnNpemUuaGVpZ2h0ICogdGhhdC5hc3BlY3RSYXRpbztcblx0XHRcdFx0Y29udGludWVSZXNpemUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFjb250aW51ZVJlc2l6ZSApIHtcblx0XHRcdHRoYXQucG9zaXRpb24ubGVmdCA9IHRoYXQucHJldlBvc2l0aW9uLmxlZnQ7XG5cdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IHRoYXQucHJldlBvc2l0aW9uLnRvcDtcblx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IHRoYXQucHJldlNpemUud2lkdGg7XG5cdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5wcmV2U2l6ZS5oZWlnaHQ7XG5cdFx0fVxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiICksXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zLFxuXHRcdFx0Y28gPSB0aGF0LmNvbnRhaW5lck9mZnNldCxcblx0XHRcdGNvcCA9IHRoYXQuY29udGFpbmVyUG9zaXRpb24sXG5cdFx0XHRjZSA9IHRoYXQuY29udGFpbmVyRWxlbWVudCxcblx0XHRcdGhlbHBlciA9ICQoIHRoYXQuaGVscGVyICksXG5cdFx0XHRobyA9IGhlbHBlci5vZmZzZXQoKSxcblx0XHRcdHcgPSBoZWxwZXIub3V0ZXJXaWR0aCgpIC0gdGhhdC5zaXplRGlmZi53aWR0aCxcblx0XHRcdGggPSBoZWxwZXIub3V0ZXJIZWlnaHQoKSAtIHRoYXQuc2l6ZURpZmYuaGVpZ2h0O1xuXG5cdFx0aWYgKCB0aGF0Ll9oZWxwZXIgJiYgIW8uYW5pbWF0ZSAmJiAoIC9yZWxhdGl2ZS8gKS50ZXN0KCBjZS5jc3MoIFwicG9zaXRpb25cIiApICkgKSB7XG5cdFx0XHQkKCB0aGlzICkuY3NzKCB7XG5cdFx0XHRcdGxlZnQ6IGhvLmxlZnQgLSBjb3AubGVmdCAtIGNvLmxlZnQsXG5cdFx0XHRcdHdpZHRoOiB3LFxuXHRcdFx0XHRoZWlnaHQ6IGhcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICggL3N0YXRpYy8gKS50ZXN0KCBjZS5jc3MoIFwicG9zaXRpb25cIiApICkgKSB7XG5cdFx0XHQkKCB0aGlzICkuY3NzKCB7XG5cdFx0XHRcdGxlZnQ6IGhvLmxlZnQgLSBjb3AubGVmdCAtIGNvLmxlZnQsXG5cdFx0XHRcdHdpZHRoOiB3LFxuXHRcdFx0XHRoZWlnaHQ6IGhcblx0XHRcdH0gKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuJC51aS5wbHVnaW4uYWRkKCBcInJlc2l6YWJsZVwiLCBcImFsc29SZXNpemVcIiwge1xuXG5cdHN0YXJ0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9ICQoIHRoaXMgKS5yZXNpemFibGUoIFwiaW5zdGFuY2VcIiApLFxuXHRcdFx0byA9IHRoYXQub3B0aW9ucztcblxuXHRcdCQoIG8uYWxzb1Jlc2l6ZSApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsID0gJCggdGhpcyApO1xuXHRcdFx0ZWwuZGF0YSggXCJ1aS1yZXNpemFibGUtYWxzb3Jlc2l6ZVwiLCB7XG5cdFx0XHRcdHdpZHRoOiBwYXJzZUZsb2F0KCBlbC53aWR0aCgpICksIGhlaWdodDogcGFyc2VGbG9hdCggZWwuaGVpZ2h0KCkgKSxcblx0XHRcdFx0bGVmdDogcGFyc2VGbG9hdCggZWwuY3NzKCBcImxlZnRcIiApICksIHRvcDogcGFyc2VGbG9hdCggZWwuY3NzKCBcInRvcFwiICkgKVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRyZXNpemU6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0dmFyIHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRvcyA9IHRoYXQub3JpZ2luYWxTaXplLFxuXHRcdFx0b3AgPSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRkZWx0YSA9IHtcblx0XHRcdFx0aGVpZ2h0OiAoIHRoYXQuc2l6ZS5oZWlnaHQgLSBvcy5oZWlnaHQgKSB8fCAwLFxuXHRcdFx0XHR3aWR0aDogKCB0aGF0LnNpemUud2lkdGggLSBvcy53aWR0aCApIHx8IDAsXG5cdFx0XHRcdHRvcDogKCB0aGF0LnBvc2l0aW9uLnRvcCAtIG9wLnRvcCApIHx8IDAsXG5cdFx0XHRcdGxlZnQ6ICggdGhhdC5wb3NpdGlvbi5sZWZ0IC0gb3AubGVmdCApIHx8IDBcblx0XHRcdH07XG5cblx0XHRcdCQoIG8uYWxzb1Jlc2l6ZSApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWwgPSAkKCB0aGlzICksIHN0YXJ0ID0gJCggdGhpcyApLmRhdGEoIFwidWktcmVzaXphYmxlLWFsc29yZXNpemVcIiApLCBzdHlsZSA9IHt9LFxuXHRcdFx0XHRcdGNzcyA9IGVsLnBhcmVudHMoIHVpLm9yaWdpbmFsRWxlbWVudFsgMCBdICkubGVuZ3RoID9cblx0XHRcdFx0XHRcdFx0WyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSA6XG5cdFx0XHRcdFx0XHRcdFsgXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInRvcFwiLCBcImxlZnRcIiBdO1xuXG5cdFx0XHRcdCQuZWFjaCggY3NzLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0XHRcdFx0XHR2YXIgc3VtID0gKCBzdGFydFsgcHJvcCBdIHx8IDAgKSArICggZGVsdGFbIHByb3AgXSB8fCAwICk7XG5cdFx0XHRcdFx0aWYgKCBzdW0gJiYgc3VtID49IDAgKSB7XG5cdFx0XHRcdFx0XHRzdHlsZVsgcHJvcCBdID0gc3VtIHx8IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0ZWwuY3NzKCBzdHlsZSApO1xuXHRcdFx0fSApO1xuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdCQoIHRoaXMgKS5yZW1vdmVEYXRhKCBcInVpLXJlc2l6YWJsZS1hbHNvcmVzaXplXCIgKTtcblx0fVxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwicmVzaXphYmxlXCIsIFwiZ2hvc3RcIiwge1xuXG5cdHN0YXJ0OiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciB0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiICksIGNzID0gdGhhdC5zaXplO1xuXG5cdFx0dGhhdC5naG9zdCA9IHRoYXQub3JpZ2luYWxFbGVtZW50LmNsb25lKCk7XG5cdFx0dGhhdC5naG9zdC5jc3MoIHtcblx0XHRcdG9wYWNpdHk6IDAuMjUsXG5cdFx0XHRkaXNwbGF5OiBcImJsb2NrXCIsXG5cdFx0XHRwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXHRcdFx0aGVpZ2h0OiBjcy5oZWlnaHQsXG5cdFx0XHR3aWR0aDogY3Mud2lkdGgsXG5cdFx0XHRtYXJnaW46IDAsXG5cdFx0XHRsZWZ0OiAwLFxuXHRcdFx0dG9wOiAwXG5cdFx0fSApO1xuXG5cdFx0dGhhdC5fYWRkQ2xhc3MoIHRoYXQuZ2hvc3QsIFwidWktcmVzaXphYmxlLWdob3N0XCIgKTtcblxuXHRcdC8vIERFUFJFQ0FURURcblx0XHQvLyBUT0RPOiByZW1vdmUgYWZ0ZXIgMS4xMlxuXHRcdGlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICYmIHR5cGVvZiB0aGF0Lm9wdGlvbnMuZ2hvc3QgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vIEdob3N0IG9wdGlvblxuXHRcdFx0dGhhdC5naG9zdC5hZGRDbGFzcyggdGhpcy5vcHRpb25zLmdob3N0ICk7XG5cdFx0fVxuXG5cdFx0dGhhdC5naG9zdC5hcHBlbmRUbyggdGhhdC5oZWxwZXIgKTtcblxuXHR9LFxuXG5cdHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKTtcblx0XHRpZiAoIHRoYXQuZ2hvc3QgKSB7XG5cdFx0XHR0aGF0Lmdob3N0LmNzcygge1xuXHRcdFx0XHRwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXHRcdFx0XHRoZWlnaHQ6IHRoYXQuc2l6ZS5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoOiB0aGF0LnNpemUud2lkdGhcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKTtcblx0XHRpZiAoIHRoYXQuZ2hvc3QgJiYgdGhhdC5oZWxwZXIgKSB7XG5cdFx0XHR0aGF0LmhlbHBlci5nZXQoIDAgKS5yZW1vdmVDaGlsZCggdGhhdC5naG9zdC5nZXQoIDAgKSApO1xuXHRcdH1cblx0fVxuXG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJyZXNpemFibGVcIiwgXCJncmlkXCIsIHtcblxuXHRyZXNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvdXRlckRpbWVuc2lvbnMsXG5cdFx0XHR0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiICksXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zLFxuXHRcdFx0Y3MgPSB0aGF0LnNpemUsXG5cdFx0XHRvcyA9IHRoYXQub3JpZ2luYWxTaXplLFxuXHRcdFx0b3AgPSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRhID0gdGhhdC5heGlzLFxuXHRcdFx0Z3JpZCA9IHR5cGVvZiBvLmdyaWQgPT09IFwibnVtYmVyXCIgPyBbIG8uZ3JpZCwgby5ncmlkIF0gOiBvLmdyaWQsXG5cdFx0XHRncmlkWCA9ICggZ3JpZFsgMCBdIHx8IDEgKSxcblx0XHRcdGdyaWRZID0gKCBncmlkWyAxIF0gfHwgMSApLFxuXHRcdFx0b3ggPSBNYXRoLnJvdW5kKCAoIGNzLndpZHRoIC0gb3Mud2lkdGggKSAvIGdyaWRYICkgKiBncmlkWCxcblx0XHRcdG95ID0gTWF0aC5yb3VuZCggKCBjcy5oZWlnaHQgLSBvcy5oZWlnaHQgKSAvIGdyaWRZICkgKiBncmlkWSxcblx0XHRcdG5ld1dpZHRoID0gb3Mud2lkdGggKyBveCxcblx0XHRcdG5ld0hlaWdodCA9IG9zLmhlaWdodCArIG95LFxuXHRcdFx0aXNNYXhXaWR0aCA9IG8ubWF4V2lkdGggJiYgKCBvLm1heFdpZHRoIDwgbmV3V2lkdGggKSxcblx0XHRcdGlzTWF4SGVpZ2h0ID0gby5tYXhIZWlnaHQgJiYgKCBvLm1heEhlaWdodCA8IG5ld0hlaWdodCApLFxuXHRcdFx0aXNNaW5XaWR0aCA9IG8ubWluV2lkdGggJiYgKCBvLm1pbldpZHRoID4gbmV3V2lkdGggKSxcblx0XHRcdGlzTWluSGVpZ2h0ID0gby5taW5IZWlnaHQgJiYgKCBvLm1pbkhlaWdodCA+IG5ld0hlaWdodCApO1xuXG5cdFx0by5ncmlkID0gZ3JpZDtcblxuXHRcdGlmICggaXNNaW5XaWR0aCApIHtcblx0XHRcdG5ld1dpZHRoICs9IGdyaWRYO1xuXHRcdH1cblx0XHRpZiAoIGlzTWluSGVpZ2h0ICkge1xuXHRcdFx0bmV3SGVpZ2h0ICs9IGdyaWRZO1xuXHRcdH1cblx0XHRpZiAoIGlzTWF4V2lkdGggKSB7XG5cdFx0XHRuZXdXaWR0aCAtPSBncmlkWDtcblx0XHR9XG5cdFx0aWYgKCBpc01heEhlaWdodCApIHtcblx0XHRcdG5ld0hlaWdodCAtPSBncmlkWTtcblx0XHR9XG5cblx0XHRpZiAoIC9eKHNlfHN8ZSkkLy50ZXN0KCBhICkgKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cdFx0fSBlbHNlIGlmICggL14obmUpJC8udGVzdCggYSApICkge1xuXHRcdFx0dGhhdC5zaXplLndpZHRoID0gbmV3V2lkdGg7XG5cdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdFx0dGhhdC5wb3NpdGlvbi50b3AgPSBvcC50b3AgLSBveTtcblx0XHR9IGVsc2UgaWYgKCAvXihzdykkLy50ZXN0KCBhICkgKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cdFx0XHR0aGF0LnBvc2l0aW9uLmxlZnQgPSBvcC5sZWZ0IC0gb3g7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggbmV3SGVpZ2h0IC0gZ3JpZFkgPD0gMCB8fCBuZXdXaWR0aCAtIGdyaWRYIDw9IDAgKSB7XG5cdFx0XHRcdG91dGVyRGltZW5zaW9ucyA9IHRoYXQuX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyggdGhpcyApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld0hlaWdodCAtIGdyaWRZID4gMCApIHtcblx0XHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IG5ld0hlaWdodDtcblx0XHRcdFx0dGhhdC5wb3NpdGlvbi50b3AgPSBvcC50b3AgLSBveTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5ld0hlaWdodCA9IGdyaWRZIC0gb3V0ZXJEaW1lbnNpb25zLmhlaWdodDtcblx0XHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IG5ld0hlaWdodDtcblx0XHRcdFx0dGhhdC5wb3NpdGlvbi50b3AgPSBvcC50b3AgKyBvcy5oZWlnaHQgLSBuZXdIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG5ld1dpZHRoIC0gZ3JpZFggPiAwICkge1xuXHRcdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gb3AubGVmdCAtIG94O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV3V2lkdGggPSBncmlkWCAtIG91dGVyRGltZW5zaW9ucy53aWR0aDtcblx0XHRcdFx0dGhhdC5zaXplLndpZHRoID0gbmV3V2lkdGg7XG5cdFx0XHRcdHRoYXQucG9zaXRpb24ubGVmdCA9IG9wLmxlZnQgKyBvcy53aWR0aCAtIG5ld1dpZHRoO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG59ICk7XG5cbnJldHVybiAkLnVpLnJlc2l6YWJsZTtcblxufSApICk7XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBTcGlubmVyIDEuMTIuMFxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBTcGlubmVyXG4vLz4+Z3JvdXA6IFdpZGdldHNcbi8vPj5kZXNjcmlwdGlvbjogRGlzcGxheXMgYnV0dG9ucyB0byBlYXNpbHkgaW5wdXQgbnVtYmVycyB2aWEgdGhlIGtleWJvYXJkIG9yIG1vdXNlLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3NwaW5uZXIvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vc3Bpbm5lci9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb3JlLmNzc1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL3NwaW5uZXIuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4vYnV0dG9uXCIsXG5cdFx0XHRcIi4uL3ZlcnNpb25cIixcblx0XHRcdFwiLi4va2V5Y29kZVwiLFxuXHRcdFx0XCIuLi9zYWZlLWFjdGl2ZS1lbGVtZW50XCIsXG5cdFx0XHRcIi4uL3dpZGdldFwiXG5cdFx0XSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oIGZ1bmN0aW9uKCAkICkge1xuXG5mdW5jdGlvbiBzcGlubmVyTW9kaWZlciggZm4gKSB7XG5cdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcHJldmlvdXMgPSB0aGlzLmVsZW1lbnQudmFsKCk7XG5cdFx0Zm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdHRoaXMuX3JlZnJlc2goKTtcblx0XHRpZiAoIHByZXZpb3VzICE9PSB0aGlzLmVsZW1lbnQudmFsKCkgKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiICk7XG5cdFx0fVxuXHR9O1xufVxuXG4kLndpZGdldCggXCJ1aS5zcGlubmVyXCIsIHtcblx0dmVyc2lvbjogXCIxLjEyLjBcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGlucHV0PlwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJzcGluXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLXNwaW5uZXJcIjogXCJ1aS1jb3JuZXItYWxsXCIsXG5cdFx0XHRcInVpLXNwaW5uZXItZG93blwiOiBcInVpLWNvcm5lci1iclwiLFxuXHRcdFx0XCJ1aS1zcGlubmVyLXVwXCI6IFwidWktY29ybmVyLXRyXCJcblx0XHR9LFxuXHRcdGN1bHR1cmU6IG51bGwsXG5cdFx0aWNvbnM6IHtcblx0XHRcdGRvd246IFwidWktaWNvbi10cmlhbmdsZS0xLXNcIixcblx0XHRcdHVwOiBcInVpLWljb24tdHJpYW5nbGUtMS1uXCJcblx0XHR9LFxuXHRcdGluY3JlbWVudGFsOiB0cnVlLFxuXHRcdG1heDogbnVsbCxcblx0XHRtaW46IG51bGwsXG5cdFx0bnVtYmVyRm9ybWF0OiBudWxsLFxuXHRcdHBhZ2U6IDEwLFxuXHRcdHN0ZXA6IDEsXG5cblx0XHRjaGFuZ2U6IG51bGwsXG5cdFx0c3BpbjogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsXG5cdH0sXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBoYW5kbGUgc3RyaW5nIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgcGFyc2VkXG5cdFx0dGhpcy5fc2V0T3B0aW9uKCBcIm1heFwiLCB0aGlzLm9wdGlvbnMubWF4ICk7XG5cdFx0dGhpcy5fc2V0T3B0aW9uKCBcIm1pblwiLCB0aGlzLm9wdGlvbnMubWluICk7XG5cdFx0dGhpcy5fc2V0T3B0aW9uKCBcInN0ZXBcIiwgdGhpcy5vcHRpb25zLnN0ZXAgKTtcblxuXHRcdC8vIE9ubHkgZm9ybWF0IGlmIHRoZXJlIGlzIGEgdmFsdWUsIHByZXZlbnRzIHRoZSBmaWVsZCBmcm9tIGJlaW5nIG1hcmtlZFxuXHRcdC8vIGFzIGludmFsaWQgaW4gRmlyZWZveCwgc2VlICM5NTczLlxuXHRcdGlmICggdGhpcy52YWx1ZSgpICE9PSBcIlwiICkge1xuXG5cdFx0XHQvLyBGb3JtYXQgdGhlIHZhbHVlLCBidXQgZG9uJ3QgY29uc3RyYWluLlxuXHRcdFx0dGhpcy5fdmFsdWUoIHRoaXMuZWxlbWVudC52YWwoKSwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX2RyYXcoKTtcblx0XHR0aGlzLl9vbiggdGhpcy5fZXZlbnRzICk7XG5cdFx0dGhpcy5fcmVmcmVzaCgpO1xuXG5cdFx0Ly8gVHVybmluZyBvZmYgYXV0b2NvbXBsZXRlIHByZXZlbnRzIHRoZSBicm93c2VyIGZyb20gcmVtZW1iZXJpbmcgdGhlXG5cdFx0Ly8gdmFsdWUgd2hlbiBuYXZpZ2F0aW5nIHRocm91Z2ggaGlzdG9yeSwgc28gd2UgcmUtZW5hYmxlIGF1dG9jb21wbGV0ZVxuXHRcdC8vIGlmIHRoZSBwYWdlIGlzIHVubG9hZGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRlc3Ryb3llZC4gIzc3OTBcblx0XHR0aGlzLl9vbiggdGhpcy53aW5kb3csIHtcblx0XHRcdGJlZm9yZXVubG9hZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImF1dG9jb21wbGV0ZVwiICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3N1cGVyKCk7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cblx0XHQkLmVhY2goIFsgXCJtaW5cIiwgXCJtYXhcIiwgXCJzdGVwXCIgXSwgZnVuY3Rpb24oIGksIG9wdGlvbiApIHtcblx0XHRcdHZhciB2YWx1ZSA9IGVsZW1lbnQuYXR0ciggb3B0aW9uICk7XG5cdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgJiYgdmFsdWUubGVuZ3RoICkge1xuXHRcdFx0XHRvcHRpb25zWyBvcHRpb24gXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9LFxuXG5cdF9ldmVudHM6IHtcblx0XHRrZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRpZiAoIHRoaXMuX3N0YXJ0KCBldmVudCApICYmIHRoaXMuX2tleWRvd24oIGV2ZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRrZXl1cDogXCJfc3RvcFwiLFxuXHRcdGZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucHJldmlvdXMgPSB0aGlzLmVsZW1lbnQudmFsKCk7XG5cdFx0fSxcblx0XHRibHVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRpZiAoIHRoaXMuY2FuY2VsQmx1ciApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cjtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9zdG9wKCk7XG5cdFx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdFx0XHRpZiAoIHRoaXMucHJldmlvdXMgIT09IHRoaXMuZWxlbWVudC52YWwoKSApIHtcblx0XHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG1vdXNld2hlZWw6IGZ1bmN0aW9uKCBldmVudCwgZGVsdGEgKSB7XG5cdFx0XHRpZiAoICFkZWx0YSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhdGhpcy5zcGlubmluZyAmJiAhdGhpcy5fc3RhcnQoIGV2ZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc3BpbiggKCBkZWx0YSA+IDAgPyAxIDogLTEgKSAqIHRoaXMub3B0aW9ucy5zdGVwLCBldmVudCApO1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLm1vdXNld2hlZWxUaW1lciApO1xuXHRcdFx0dGhpcy5tb3VzZXdoZWVsVGltZXIgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy5zcGlubmluZyApIHtcblx0XHRcdFx0XHR0aGlzLl9zdG9wKCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxMDAgKTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fSxcblx0XHRcIm1vdXNlZG93biAudWktc3Bpbm5lci1idXR0b25cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHByZXZpb3VzO1xuXG5cdFx0XHQvLyBXZSBuZXZlciB3YW50IHRoZSBidXR0b25zIHRvIGhhdmUgZm9jdXM7IHdoZW5ldmVyIHRoZSB1c2VyIGlzXG5cdFx0XHQvLyBpbnRlcmFjdGluZyB3aXRoIHRoZSBzcGlubmVyLCB0aGUgZm9jdXMgc2hvdWxkIGJlIG9uIHRoZSBpbnB1dC5cblx0XHRcdC8vIElmIHRoZSBpbnB1dCBpcyBmb2N1c2VkIHRoZW4gdGhpcy5wcmV2aW91cyBpcyBwcm9wZXJseSBzZXQgZnJvbVxuXHRcdFx0Ly8gd2hlbiB0aGUgaW5wdXQgZmlyc3QgcmVjZWl2ZWQgZm9jdXMuIElmIHRoZSBpbnB1dCBpcyBub3QgZm9jdXNlZFxuXHRcdFx0Ly8gdGhlbiB3ZSBuZWVkIHRvIHNldCB0aGlzLnByZXZpb3VzIGJhc2VkIG9uIHRoZSB2YWx1ZSBiZWZvcmUgc3Bpbm5pbmcuXG5cdFx0XHRwcmV2aW91cyA9IHRoaXMuZWxlbWVudFsgMCBdID09PSAkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKSA/XG5cdFx0XHRcdHRoaXMucHJldmlvdXMgOiB0aGlzLmVsZW1lbnQudmFsKCk7XG5cdFx0XHRmdW5jdGlvbiBjaGVja0ZvY3VzKCkge1xuXHRcdFx0XHR2YXIgaXNBY3RpdmUgPSB0aGlzLmVsZW1lbnRbIDAgXSA9PT0gJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICk7XG5cdFx0XHRcdGlmICggIWlzQWN0aXZlICkge1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudC50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG5cblx0XHRcdFx0XHQvLyBzdXBwb3J0OiBJRVxuXHRcdFx0XHRcdC8vIElFIHNldHMgZm9jdXMgYXN5bmNocm9ub3VzbHksIHNvIHdlIG5lZWQgdG8gY2hlY2sgaWYgZm9jdXNcblx0XHRcdFx0XHQvLyBtb3ZlZCBvZmYgb2YgdGhlIGlucHV0IGJlY2F1c2UgdGhlIHVzZXIgY2xpY2tlZCBvbiB0aGUgYnV0dG9uLlxuXHRcdFx0XHRcdHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHRoaXMucHJldmlvdXMgPSBwcmV2aW91cztcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRW5zdXJlIGZvY3VzIGlzIG9uIChvciBzdGF5cyBvbikgdGhlIHRleHQgZmllbGRcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjaGVja0ZvY3VzLmNhbGwoIHRoaXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdC8vIElFIGRvZXNuJ3QgcHJldmVudCBtb3ZpbmcgZm9jdXMgZXZlbiB3aXRoIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdC8vIHNvIHdlIHNldCBhIGZsYWcgdG8ga25vdyB3aGVuIHdlIHNob3VsZCBpZ25vcmUgdGhlIGJsdXIgZXZlbnRcblx0XHRcdC8vIGFuZCBjaGVjayAoYWdhaW4pIGlmIGZvY3VzIG1vdmVkIG9mZiBvZiB0aGUgaW5wdXQuXG5cdFx0XHR0aGlzLmNhbmNlbEJsdXIgPSB0cnVlO1xuXHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5jYW5jZWxCbHVyO1xuXHRcdFx0XHRjaGVja0ZvY3VzLmNhbGwoIHRoaXMgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCB0aGlzLl9zdGFydCggZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAkKCBldmVudC5jdXJyZW50VGFyZ2V0IClcblx0XHRcdFx0Lmhhc0NsYXNzKCBcInVpLXNwaW5uZXItdXBcIiApID8gMSA6IC0xLCBldmVudCApO1xuXHRcdH0sXG5cdFx0XCJtb3VzZXVwIC51aS1zcGlubmVyLWJ1dHRvblwiOiBcIl9zdG9wXCIsXG5cdFx0XCJtb3VzZWVudGVyIC51aS1zcGlubmVyLWJ1dHRvblwiOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIGJ1dHRvbiB3aWxsIGFkZCB1aS1zdGF0ZS1hY3RpdmUgaWYgbW91c2Ugd2FzIGRvd24gd2hpbGUgbW91c2VsZWF2ZSBhbmQga2VwdCBkb3duXG5cdFx0XHRpZiAoICEkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuaGFzQ2xhc3MoIFwidWktc3RhdGUtYWN0aXZlXCIgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuX3N0YXJ0KCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAkKCBldmVudC5jdXJyZW50VGFyZ2V0IClcblx0XHRcdFx0Lmhhc0NsYXNzKCBcInVpLXNwaW5uZXItdXBcIiApID8gMSA6IC0xLCBldmVudCApO1xuXHRcdH0sXG5cblx0XHQvLyBUT0RPOiBkbyB3ZSByZWFsbHkgd2FudCB0byBjb25zaWRlciB0aGlzIGEgc3RvcD9cblx0XHQvLyBzaG91bGRuJ3Qgd2UganVzdCBzdG9wIHRoZSByZXBlYXRlciBhbmQgd2FpdCB1bnRpbCBtb3VzZXVwIGJlZm9yZVxuXHRcdC8vIHdlIHRyaWdnZXIgdGhlIHN0b3AgZXZlbnQ/XG5cdFx0XCJtb3VzZWxlYXZlIC51aS1zcGlubmVyLWJ1dHRvblwiOiBcIl9zdG9wXCJcblx0fSxcblxuXHQvLyBTdXBwb3J0IG1vYmlsZSBlbmhhbmNlZCBvcHRpb24gYW5kIG1ha2UgYmFja2NvbXBhdCBtb3JlIHNhbmVcblx0X2VuaGFuY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMudWlTcGlubmVyID0gdGhpcy5lbGVtZW50XG5cdFx0XHQuYXR0ciggXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIiApXG5cdFx0XHQud3JhcCggXCI8c3Bhbj5cIiApXG5cdFx0XHQucGFyZW50KClcblxuXHRcdFx0XHQvLyBBZGQgYnV0dG9uc1xuXHRcdFx0XHQuYXBwZW5kKFxuXHRcdFx0XHRcdFwiPGE+PC9hPjxhPjwvYT5cIlxuXHRcdFx0XHQpO1xuXHR9LFxuXG5cdF9kcmF3OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9lbmhhbmNlKCk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy51aVNwaW5uZXIsIFwidWktc3Bpbm5lclwiLCBcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudFwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktc3Bpbm5lci1pbnB1dFwiICk7XG5cblx0XHR0aGlzLmVsZW1lbnQuYXR0ciggXCJyb2xlXCIsIFwic3BpbmJ1dHRvblwiICk7XG5cblx0XHQvLyBCdXR0b24gYmluZGluZ3Ncblx0XHR0aGlzLmJ1dHRvbnMgPSB0aGlzLnVpU3Bpbm5lci5jaGlsZHJlbiggXCJhXCIgKVxuXHRcdFx0LmF0dHIoIFwidGFiSW5kZXhcIiwgLTEgKVxuXHRcdFx0LmF0dHIoIFwiYXJpYS1oaWRkZW5cIiwgdHJ1ZSApXG5cdFx0XHQuYnV0dG9uKCB7XG5cdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcInVpLWJ1dHRvblwiOiBcIlwiXG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdC8vIFRPRE86IFJpZ2h0IG5vdyBidXR0b24gZG9lcyBub3Qgc3VwcG9ydCBjbGFzc2VzIHRoaXMgaXMgYWxyZWFkeSB1cGRhdGVkIGluIGJ1dHRvbiBQUlxuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmJ1dHRvbnMsIFwidWktY29ybmVyLWFsbFwiICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5idXR0b25zLmZpcnN0KCksIFwidWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci11cFwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuYnV0dG9ucy5sYXN0KCksIFwidWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci1kb3duXCIgKTtcblx0XHR0aGlzLmJ1dHRvbnMuZmlyc3QoKS5idXR0b24oIHtcblx0XHRcdFwiaWNvblwiOiB0aGlzLm9wdGlvbnMuaWNvbnMudXAsXG5cdFx0XHRcInNob3dMYWJlbFwiOiBmYWxzZVxuXHRcdH0gKTtcblx0XHR0aGlzLmJ1dHRvbnMubGFzdCgpLmJ1dHRvbigge1xuXHRcdFx0XCJpY29uXCI6IHRoaXMub3B0aW9ucy5pY29ucy5kb3duLFxuXHRcdFx0XCJzaG93TGFiZWxcIjogZmFsc2Vcblx0XHR9ICk7XG5cblx0XHQvLyBJRSA2IGRvZXNuJ3QgdW5kZXJzdGFuZCBoZWlnaHQ6IDUwJSBmb3IgdGhlIGJ1dHRvbnNcblx0XHQvLyB1bmxlc3MgdGhlIHdyYXBwZXIgaGFzIGFuIGV4cGxpY2l0IGhlaWdodFxuXHRcdGlmICggdGhpcy5idXR0b25zLmhlaWdodCgpID4gTWF0aC5jZWlsKCB0aGlzLnVpU3Bpbm5lci5oZWlnaHQoKSAqIDAuNSApICYmXG5cdFx0XHRcdHRoaXMudWlTcGlubmVyLmhlaWdodCgpID4gMCApIHtcblx0XHRcdHRoaXMudWlTcGlubmVyLmhlaWdodCggdGhpcy51aVNwaW5uZXIuaGVpZ2h0KCkgKTtcblx0XHR9XG5cdH0sXG5cblx0X2tleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGtleUNvZGUgPSAkLnVpLmtleUNvZGU7XG5cblx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdGNhc2Uga2V5Q29kZS5VUDpcblx0XHRcdHRoaXMuX3JlcGVhdCggbnVsbCwgMSwgZXZlbnQgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGNhc2Uga2V5Q29kZS5ET1dOOlxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAtMSwgZXZlbnQgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGNhc2Uga2V5Q29kZS5QQUdFX1VQOlxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCBvcHRpb25zLnBhZ2UsIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRjYXNlIGtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0dGhpcy5fcmVwZWF0KCBudWxsLCAtb3B0aW9ucy5wYWdlLCBldmVudCApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdF9zdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggIXRoaXMuc3Bpbm5pbmcgJiYgdGhpcy5fdHJpZ2dlciggXCJzdGFydFwiLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoICF0aGlzLmNvdW50ZXIgKSB7XG5cdFx0XHR0aGlzLmNvdW50ZXIgPSAxO1xuXHRcdH1cblx0XHR0aGlzLnNwaW5uaW5nID0gdHJ1ZTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfcmVwZWF0OiBmdW5jdGlvbiggaSwgc3RlcHMsIGV2ZW50ICkge1xuXHRcdGkgPSBpIHx8IDUwMDtcblxuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXHRcdHRoaXMudGltZXIgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9yZXBlYXQoIDQwLCBzdGVwcywgZXZlbnQgKTtcblx0XHR9LCBpICk7XG5cblx0XHR0aGlzLl9zcGluKCBzdGVwcyAqIHRoaXMub3B0aW9ucy5zdGVwLCBldmVudCApO1xuXHR9LFxuXG5cdF9zcGluOiBmdW5jdGlvbiggc3RlcCwgZXZlbnQgKSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpIHx8IDA7XG5cblx0XHRpZiAoICF0aGlzLmNvdW50ZXIgKSB7XG5cdFx0XHR0aGlzLmNvdW50ZXIgPSAxO1xuXHRcdH1cblxuXHRcdHZhbHVlID0gdGhpcy5fYWRqdXN0VmFsdWUoIHZhbHVlICsgc3RlcCAqIHRoaXMuX2luY3JlbWVudCggdGhpcy5jb3VudGVyICkgKTtcblxuXHRcdGlmICggIXRoaXMuc3Bpbm5pbmcgfHwgdGhpcy5fdHJpZ2dlciggXCJzcGluXCIsIGV2ZW50LCB7IHZhbHVlOiB2YWx1ZSB9ICkgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5fdmFsdWUoIHZhbHVlICk7XG5cdFx0XHR0aGlzLmNvdW50ZXIrKztcblx0XHR9XG5cdH0sXG5cblx0X2luY3JlbWVudDogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGluY3JlbWVudGFsID0gdGhpcy5vcHRpb25zLmluY3JlbWVudGFsO1xuXG5cdFx0aWYgKCBpbmNyZW1lbnRhbCApIHtcblx0XHRcdHJldHVybiAkLmlzRnVuY3Rpb24oIGluY3JlbWVudGFsICkgP1xuXHRcdFx0XHRpbmNyZW1lbnRhbCggaSApIDpcblx0XHRcdFx0TWF0aC5mbG9vciggaSAqIGkgKiBpIC8gNTAwMDAgLSBpICogaSAvIDUwMCArIDE3ICogaSAvIDIwMCArIDEgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gMTtcblx0fSxcblxuXHRfcHJlY2lzaW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcHJlY2lzaW9uID0gdGhpcy5fcHJlY2lzaW9uT2YoIHRoaXMub3B0aW9ucy5zdGVwICk7XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMubWluICE9PSBudWxsICkge1xuXHRcdFx0cHJlY2lzaW9uID0gTWF0aC5tYXgoIHByZWNpc2lvbiwgdGhpcy5fcHJlY2lzaW9uT2YoIHRoaXMub3B0aW9ucy5taW4gKSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJlY2lzaW9uO1xuXHR9LFxuXG5cdF9wcmVjaXNpb25PZjogZnVuY3Rpb24oIG51bSApIHtcblx0XHR2YXIgc3RyID0gbnVtLnRvU3RyaW5nKCksXG5cdFx0XHRkZWNpbWFsID0gc3RyLmluZGV4T2YoIFwiLlwiICk7XG5cdFx0cmV0dXJuIGRlY2ltYWwgPT09IC0xID8gMCA6IHN0ci5sZW5ndGggLSBkZWNpbWFsIC0gMTtcblx0fSxcblxuXHRfYWRqdXN0VmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgYmFzZSwgYWJvdmVNaW4sXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlJ3JlIGF0IGEgdmFsaWQgc3RlcFxuXHRcdC8vIC0gZmluZCBvdXQgd2hlcmUgd2UgYXJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIChtaW4gb3IgMClcblx0XHRiYXNlID0gb3B0aW9ucy5taW4gIT09IG51bGwgPyBvcHRpb25zLm1pbiA6IDA7XG5cdFx0YWJvdmVNaW4gPSB2YWx1ZSAtIGJhc2U7XG5cblx0XHQvLyAtIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHN0ZXBcblx0XHRhYm92ZU1pbiA9IE1hdGgucm91bmQoIGFib3ZlTWluIC8gb3B0aW9ucy5zdGVwICkgKiBvcHRpb25zLnN0ZXA7XG5cblx0XHQvLyAtIHJvdW5kaW5nIGlzIGJhc2VkIG9uIDAsIHNvIGFkanVzdCBiYWNrIHRvIG91ciBiYXNlXG5cdFx0dmFsdWUgPSBiYXNlICsgYWJvdmVNaW47XG5cblx0XHQvLyBGaXggcHJlY2lzaW9uIGZyb20gYmFkIEpTIGZsb2F0aW5nIHBvaW50IG1hdGhcblx0XHR2YWx1ZSA9IHBhcnNlRmxvYXQoIHZhbHVlLnRvRml4ZWQoIHRoaXMuX3ByZWNpc2lvbigpICkgKTtcblxuXHRcdC8vIENsYW1wIHRoZSB2YWx1ZVxuXHRcdGlmICggb3B0aW9ucy5tYXggIT09IG51bGwgJiYgdmFsdWUgPiBvcHRpb25zLm1heCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zLm1heDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLm1pbiAhPT0gbnVsbCAmJiB2YWx1ZSA8IG9wdGlvbnMubWluICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMubWluO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblxuXHRfc3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggIXRoaXMuc3Bpbm5pbmcgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLm1vdXNld2hlZWxUaW1lciApO1xuXHRcdHRoaXMuY291bnRlciA9IDA7XG5cdFx0dGhpcy5zcGlubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBwcmV2VmFsdWUsIGZpcnN0LCBsYXN0O1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiY3VsdHVyZVwiIHx8IGtleSA9PT0gXCJudW1iZXJGb3JtYXRcIiApIHtcblx0XHRcdHByZXZWYWx1ZSA9IHRoaXMuX3BhcnNlKCB0aGlzLmVsZW1lbnQudmFsKCkgKTtcblx0XHRcdHRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTtcblx0XHRcdHRoaXMuZWxlbWVudC52YWwoIHRoaXMuX2Zvcm1hdCggcHJldlZhbHVlICkgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gXCJtYXhcIiB8fCBrZXkgPT09IFwibWluXCIgfHwga2V5ID09PSBcInN0ZXBcIiApIHtcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX3BhcnNlKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIGtleSA9PT0gXCJpY29uc1wiICkge1xuXHRcdFx0Zmlyc3QgPSB0aGlzLmJ1dHRvbnMuZmlyc3QoKS5maW5kKCBcIi51aS1pY29uXCIgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBmaXJzdCwgbnVsbCwgdGhpcy5vcHRpb25zLmljb25zLnVwICk7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggZmlyc3QsIG51bGwsIHZhbHVlLnVwICk7XG5cdFx0XHRsYXN0ID0gdGhpcy5idXR0b25zLmxhc3QoKS5maW5kKCBcIi51aS1pY29uXCIgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBsYXN0LCBudWxsLCB0aGlzLm9wdGlvbnMuaWNvbnMuZG93biApO1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIGxhc3QsIG51bGwsIHZhbHVlLmRvd24gKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHRoaXMuX3N1cGVyKCB2YWx1ZSApO1xuXG5cdFx0dGhpcy5fdG9nZ2xlQ2xhc3MoIHRoaXMudWlTcGlubmVyLCBudWxsLCBcInVpLXN0YXRlLWRpc2FibGVkXCIsICEhdmFsdWUgKTtcblx0XHR0aGlzLmVsZW1lbnQucHJvcCggXCJkaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdFx0dGhpcy5idXR0b25zLmJ1dHRvbiggdmFsdWUgPyBcImRpc2FibGVcIiA6IFwiZW5hYmxlXCIgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uczogc3Bpbm5lck1vZGlmZXIoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdHRoaXMuX3N1cGVyKCBvcHRpb25zICk7XG5cdH0gKSxcblxuXHRfcGFyc2U6IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0aWYgKCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICYmIHZhbCAhPT0gXCJcIiApIHtcblx0XHRcdHZhbCA9IHdpbmRvdy5HbG9iYWxpemUgJiYgdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCA/XG5cdFx0XHRcdEdsb2JhbGl6ZS5wYXJzZUZsb2F0KCB2YWwsIDEwLCB0aGlzLm9wdGlvbnMuY3VsdHVyZSApIDogK3ZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbCA9PT0gXCJcIiB8fCBpc05hTiggdmFsICkgPyBudWxsIDogdmFsO1xuXHR9LFxuXG5cdF9mb3JtYXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBcIlwiICkge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdHJldHVybiB3aW5kb3cuR2xvYmFsaXplICYmIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQgP1xuXHRcdFx0R2xvYmFsaXplLmZvcm1hdCggdmFsdWUsIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQsIHRoaXMub3B0aW9ucy5jdWx0dXJlICkgOlxuXHRcdFx0dmFsdWU7XG5cdH0sXG5cblx0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5hdHRyKCB7XG5cdFx0XHRcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5vcHRpb25zLm1pbixcblx0XHRcdFwiYXJpYS12YWx1ZW1heFwiOiB0aGlzLm9wdGlvbnMubWF4LFxuXG5cdFx0XHQvLyBUT0RPOiB3aGF0IHNob3VsZCB3ZSBkbyB3aXRoIHZhbHVlcyB0aGF0IGNhbid0IGJlIHBhcnNlZD9cblx0XHRcdFwiYXJpYS12YWx1ZW5vd1wiOiB0aGlzLl9wYXJzZSggdGhpcy5lbGVtZW50LnZhbCgpIClcblx0XHR9ICk7XG5cdH0sXG5cblx0aXNWYWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuXG5cdFx0Ly8gTnVsbCBpcyBpbnZhbGlkXG5cdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJZiB2YWx1ZSBnZXRzIGFkanVzdGVkLCBpdCdzIGludmFsaWRcblx0XHRyZXR1cm4gdmFsdWUgPT09IHRoaXMuX2FkanVzdFZhbHVlKCB2YWx1ZSApO1xuXHR9LFxuXG5cdC8vIFVwZGF0ZSB0aGUgdmFsdWUgd2l0aG91dCB0cmlnZ2VyaW5nIGNoYW5nZVxuXHRfdmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSwgYWxsb3dBbnkgKSB7XG5cdFx0dmFyIHBhcnNlZDtcblx0XHRpZiAoIHZhbHVlICE9PSBcIlwiICkge1xuXHRcdFx0cGFyc2VkID0gdGhpcy5fcGFyc2UoIHZhbHVlICk7XG5cdFx0XHRpZiAoIHBhcnNlZCAhPT0gbnVsbCApIHtcblx0XHRcdFx0aWYgKCAhYWxsb3dBbnkgKSB7XG5cdFx0XHRcdFx0cGFyc2VkID0gdGhpcy5fYWRqdXN0VmFsdWUoIHBhcnNlZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbHVlID0gdGhpcy5fZm9ybWF0KCBwYXJzZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5lbGVtZW50LnZhbCggdmFsdWUgKTtcblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0LnByb3AoIFwiZGlzYWJsZWRcIiwgZmFsc2UgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXV0b2NvbXBsZXRlIHJvbGUgYXJpYS12YWx1ZW1pbiBhcmlhLXZhbHVlbWF4IGFyaWEtdmFsdWVub3dcIiApO1xuXG5cdFx0dGhpcy51aVNwaW5uZXIucmVwbGFjZVdpdGgoIHRoaXMuZWxlbWVudCApO1xuXHR9LFxuXG5cdHN0ZXBVcDogc3Bpbm5lck1vZGlmZXIoIGZ1bmN0aW9uKCBzdGVwcyApIHtcblx0XHR0aGlzLl9zdGVwVXAoIHN0ZXBzICk7XG5cdH0gKSxcblx0X3N0ZXBVcDogZnVuY3Rpb24oIHN0ZXBzICkge1xuXHRcdGlmICggdGhpcy5fc3RhcnQoKSApIHtcblx0XHRcdHRoaXMuX3NwaW4oICggc3RlcHMgfHwgMSApICogdGhpcy5vcHRpb25zLnN0ZXAgKTtcblx0XHRcdHRoaXMuX3N0b3AoKTtcblx0XHR9XG5cdH0sXG5cblx0c3RlcERvd246IHNwaW5uZXJNb2RpZmVyKCBmdW5jdGlvbiggc3RlcHMgKSB7XG5cdFx0dGhpcy5fc3RlcERvd24oIHN0ZXBzICk7XG5cdH0gKSxcblx0X3N0ZXBEb3duOiBmdW5jdGlvbiggc3RlcHMgKSB7XG5cdFx0aWYgKCB0aGlzLl9zdGFydCgpICkge1xuXHRcdFx0dGhpcy5fc3BpbiggKCBzdGVwcyB8fCAxICkgKiAtdGhpcy5vcHRpb25zLnN0ZXAgKTtcblx0XHRcdHRoaXMuX3N0b3AoKTtcblx0XHR9XG5cdH0sXG5cblx0cGFnZVVwOiBzcGlubmVyTW9kaWZlciggZnVuY3Rpb24oIHBhZ2VzICkge1xuXHRcdHRoaXMuX3N0ZXBVcCggKCBwYWdlcyB8fCAxICkgKiB0aGlzLm9wdGlvbnMucGFnZSApO1xuXHR9ICksXG5cblx0cGFnZURvd246IHNwaW5uZXJNb2RpZmVyKCBmdW5jdGlvbiggcGFnZXMgKSB7XG5cdFx0dGhpcy5fc3RlcERvd24oICggcGFnZXMgfHwgMSApICogdGhpcy5vcHRpb25zLnBhZ2UgKTtcblx0fSApLFxuXG5cdHZhbHVlOiBmdW5jdGlvbiggbmV3VmFsICkge1xuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcGFyc2UoIHRoaXMuZWxlbWVudC52YWwoKSApO1xuXHRcdH1cblx0XHRzcGlubmVyTW9kaWZlciggdGhpcy5fdmFsdWUgKS5jYWxsKCB0aGlzLCBuZXdWYWwgKTtcblx0fSxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnVpU3Bpbm5lcjtcblx0fVxufSApO1xuXG4vLyBERVBSRUNBVEVEXG4vLyBUT0RPOiBzd2l0Y2ggcmV0dXJuIGJhY2sgdG8gd2lkZ2V0IGRlY2xhcmF0aW9uIGF0IHRvcCBvZiBmaWxlIHdoZW4gdGhpcyBpcyByZW1vdmVkXG5pZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHtcblxuXHQvLyBCYWNrY29tcGF0IGZvciBzcGlubmVyIGh0bWwgZXh0ZW5zaW9uIHBvaW50c1xuXHQkLndpZGdldCggXCJ1aS5zcGlubmVyXCIsICQudWkuc3Bpbm5lciwge1xuXHRcdF9lbmhhbmNlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMudWlTcGlubmVyID0gdGhpcy5lbGVtZW50XG5cdFx0XHRcdC5hdHRyKCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiIClcblx0XHRcdFx0LndyYXAoIHRoaXMuX3VpU3Bpbm5lckh0bWwoKSApXG5cdFx0XHRcdC5wYXJlbnQoKVxuXG5cdFx0XHRcdFx0Ly8gQWRkIGJ1dHRvbnNcblx0XHRcdFx0XHQuYXBwZW5kKCB0aGlzLl9idXR0b25IdG1sKCkgKTtcblx0XHR9LFxuXHRcdF91aVNwaW5uZXJIdG1sOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBcIjxzcGFuPlwiO1xuXHRcdH0sXG5cblx0XHRfYnV0dG9uSHRtbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gXCI8YT48L2E+PGE+PC9hPlwiO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gJC51aS5zcGlubmVyO1xuXG59ICkgKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuLi9oZXJvY2FsYy9tYWluXCIpO1xuXG5teS5wcm90b3R5cGUuRGFtYWdlQW1wVmlld01vZGVsID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgc2VsZiA9IG5ldyBteS5wcm90b3R5cGUuQnVmZlZpZXdNb2RlbChrby5vYnNlcnZhYmxlQXJyYXkoW10pKTtcbiAgICBzZWxmLmF2YWlsYWJsZUJ1ZmZzID0ga28ub2JzZXJ2YWJsZUFycmF5KFtcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzbGFyZGFyJywgJ3NsYXJkYXJfc3ByaW50JyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndW5keWluZycsICd1bmR5aW5nX2ZsZXNoX2dvbGVtJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignY2hlbicsICdjaGVuX3Blbml0ZW5jZScpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ21lZHVzYScsICdtZWR1c2Ffc3RvbmVfZ2F6ZScpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NoYWRvd19kZW1vbicsICdzaGFkb3dfZGVtb25fc291bF9jYXRjaGVyJylcbiAgICBdKTtcbiAgICBzZWxmLmF2YWlsYWJsZURlYnVmZnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW1xuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ21lZHVzYScsICdtZWR1c2FfbWFuYV9zaGllbGQnKSxcbiAgICAgICAgLy9uZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3RlbXBsYXJfYXNzYXNzaW4nLCAndGVtcGxhcl9hc3Nhc3Npbl9yZWZyYWN0aW9uJyksXG4gICAgICAgIC8vbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdmYWNlbGVzc192b2lkJywgJ2ZhY2VsZXNzX3ZvaWRfYmFja3RyYWNrJyksXG4gICAgICAgIC8vbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdueXhfYXNzYXNzaW4nLCAnbnl4X2Fzc2Fzc2luX3NwaWtlZF9jYXJhcGFjZScpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NwZWN0cmUnLCAnc3BlY3RyZV9kaXNwZXJzaW9uJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignd2lzcCcsICd3aXNwX292ZXJjaGFyZ2UnKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdicmlzdGxlYmFjaycsICdicmlzdGxlYmFja19icmlzdGxlYmFjaycpLFxuICAgICAgICAvL25ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYWJhZGRvbicsICdhYmFkZG9uX2JvcnJvd2VkX3RpbWUnKSxcbiAgICAgICAgLy9uZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2FiYWRkb24nLCAnYWJhZGRvbl9hcGhvdGljX3NoaWVsZCcpLFxuICAgICAgICAvL25ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZGF6emxlJywgJ2RhenpsZV9zaGFsbG93X2dyYXZlJyksXG4gICAgICAgIC8vbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd0cmVhbnQnLCAndHJlYW50X2xpdmluZ19hcm1vcicpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2t1bmtrYScsICdrdW5ra2FfZ2hvc3RzaGlwJylcbiAgICBdKTtcbiAgICBzZWxmLnNlbGVjdGVkQnVmZiA9IGtvLm9ic2VydmFibGUoc2VsZi5hdmFpbGFibGVCdWZmcygpWzBdKTtcbiAgICBcbiAgICBzZWxmLmJ1ZmZzID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcblxuICAgIHNlbGYuZ2V0QWJpbGl0eURhbWFnZUFtcFZhbHVlID0gZnVuY3Rpb24gKGFiaWxpdHlOYW1lLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIHZhciBhID0gbXkucHJvdG90eXBlLmZpbmRXaGVyZShzZWxmLmJ1ZmZzKCksIHtuYW1lOiBhYmlsaXR5TmFtZX0pO1xuICAgICAgICBpZiAoYSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBhLmRhdGE7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZU5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2VsZi5nZXREYW1hZ2VNdWx0aXBsaWVyU291cmNlcyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFiaWxpdHkubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdicmlzdGxlYmFja19icmlzdGxlYmFjayc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogYWJpbGl0eS5kYW1hZ2VSZWR1Y3Rpb24oKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NsYXJkYXJfc3ByaW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JvbnVzX2RhbWFnZScsIGFiaWxpdHkubGV2ZWwoKSkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmR5aW5nX2ZsZXNoX2dvbGVtJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBhYmlsaXR5LmRhbWFnZUFtcGxpZmljYXRpb24oKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21lZHVzYV9zdG9uZV9nYXplJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JvbnVzX3BoeXNpY2FsX2RhbWFnZScsIGFiaWxpdHkubGV2ZWwoKSkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGVuX3Blbml0ZW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdib251c19kYW1hZ2VfdGFrZW4nLCBhYmlsaXR5LmxldmVsKCkpIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2hhZG93X2RlbW9uX3NvdWxfY2F0Y2hlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdib251c19kYW1hZ2VfdGFrZW4nLCBhYmlsaXR5LmxldmVsKCkpIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwdXJlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtZWR1c2FfbWFuYV9zaGllbGQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IGFiaWxpdHkuZGFtYWdlUmVkdWN0aW9uKCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlY3RyZV9kaXNwZXJzaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiAtc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdkYW1hZ2VfcmVmbGVjdGlvbl9wY3QnLCBhYmlsaXR5LmxldmVsKCkpIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwZXJjZW50cmVkdWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FiYWRkb25fYXBob3RpY19zaGllbGQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZGFtYWdlX2Fic29yYicsIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ2ZsYXRyZWR1Y3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAna3Vua2thX2dob3N0c2hpcCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogLTUwIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwZXJjZW50cmVkdWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dpc3Bfb3ZlcmNoYXJnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdib251c19kYW1hZ2VfcGN0JywgYWJpbGl0eS5sZXZlbCgpKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGVyY2VudHJlZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKmNhc2UgJ2ZhY2VsZXNzX3ZvaWRfYmFja3RyYWNrJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiAtc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdkb2RnZV9jaGFuY2VfcGN0JywgYWJpbGl0eS5sZXZlbCgpKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGVyY2VudHJlZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7Ki9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gc2VsZjtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIga28gPSByZXF1aXJlKCcuL2hlcm9jYWxjX2tub2Nrb3V0Jyk7XG4gICAgXG52YXIgbXkgPSByZXF1aXJlKFwiLi4vaGVyb2NhbGMvbWFpblwiKTtcblxubXkucHJvdG90eXBlLkdyYXBoUHJvcGVydHlPcHRpb24gPSBmdW5jdGlvbiAoaWQsIGxhYmVsKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbn07XG5cbm15LnByb3RvdHlwZS5BYmlsaXR5TW9kZWwucHJvdG90eXBlLmlzUVdFUiA9IGZ1bmN0aW9uIChhYmlsaXR5KSB7XG4gICAgcmV0dXJuIChhYmlsaXR5LmRpc3BsYXluYW1lKCkgIT0gJ0VtcHR5JyAmJiAgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfSElEREVOJykgPT0gLTEgfHwgYWJpbGl0eS5uYW1lKCkuaW5kZXhPZignaW52b2tlcl8nKSAhPSAtMSkgJiYgYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9OT1RfTEVBUk5BQkxFJykgPT0gLTEpXG59XG5cbm15LnByb3RvdHlwZS5CdWlsZEV4cGxvcmVyVmlld01vZGVsID0gZnVuY3Rpb24gKGgpIHtcbnZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLnBhcmVudCA9IGg7XG5cbiAgICBzZWxmLml0ZW1CdWlsZCA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7XG4gICAgc2VsZi5za2lsbEJ1aWxkID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcbiAgICBzZWxmLmdyYXBoRGF0YUl0ZW1Sb3dzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG4gICAgICAgIHNlbGYuaXRlbUJ1aWxkLnB1c2gobmV3IG15LnByb3RvdHlwZS5CYXNpY0ludmVudG9yeVZpZXdNb2RlbCgpKTtcbiAgICAgICAgc2VsZi5pdGVtQnVpbGQoKVtpXS5jYXJyeU92ZXIgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xuICAgICAgICBzZWxmLnNraWxsQnVpbGQucHVzaChrby5vYnNlcnZhYmxlKC0xKSk7XG4gICAgICAgIHNlbGYuZ3JhcGhEYXRhSXRlbVJvd3MucHVzaChrby5vYnNlcnZhYmxlKGZhbHNlKSk7XG4gICAgfVxuICAgIHNlbGYudG9nZ2xlSXRlbUJ1aWxkQ2FycnlPdmVyID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHNlbGYuaXRlbUJ1aWxkKClbaW5kZXhdLmNhcnJ5T3Zlcighc2VsZi5pdGVtQnVpbGQoKVtpbmRleF0uY2FycnlPdmVyKCkpO1xuICAgIH1cbiAgICBcbiAgICBzZWxmLmFiaWxpdHlNYXBEYXRhID0gWzAsMSwyLDMsNF07XG4gICAgc2VsZi5hYmlsaXR5TWFwSGVybyA9IHNlbGYucGFyZW50LnNlbGVjdGVkSGVybygpLmhlcm9OYW1lO1xuICAgIHNlbGYuYWJpbGl0eU1hcCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNlbGYuYWJpbGl0eU1hcEhlcm8gPT0gc2VsZi5wYXJlbnQuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWUpIHJldHVybjtcbiAgICAgICAgc2VsZi5hYmlsaXR5TWFwSGVybyA9IHNlbGYucGFyZW50LnNlbGVjdGVkSGVybygpLmhlcm9OYW1lO1xuICAgICAgICB2YXIgbmV3TWFwID0gc2VsZi5wYXJlbnQuYWJpbGl0eSgpLmFiaWxpdGllcygpLm1hcChmdW5jdGlvbihhYmlsaXR5LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHNlbGYucGFyZW50LmFiaWxpdHkoKS5pc1FXRVIoYWJpbGl0eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbihlbGVtZW50KSB7IHJldHVybiBlbGVtZW50ICE9IC0xOyB9KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eVZhbHVlID0gc2VsZi5za2lsbEJ1aWxkKClbaV0oKTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5VmFsdWUgPT0gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYWJpbGl0eUluZGV4ID0gc2VsZi5hYmlsaXR5TWFwRGF0YS5pbmRleE9mKGFiaWxpdHlWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXdNYXBbYWJpbGl0eUluZGV4XTtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPSBhYmlsaXR5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNraWxsQnVpbGQoKVtpXShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hYmlsaXR5TWFwRGF0YSA9IG5ld01hcDtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmF2YWlsYWJsZVNraWxsQnVpbGRQb2ludHMgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnNraWxsQnVpbGQoKS5yZWR1Y2UoZnVuY3Rpb24obWVtbywgbnVtKXsgcmV0dXJuIG1lbW8gKyAobnVtKCkgPT0gLTEpOyB9LCAwKTtcbiAgICB9KTtcbiAgICBzZWxmLmdldFNraWxsQnVpbGRBYmlsaXR5TGV2ZWwgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuc2tpbGxCdWlsZCgpLnJlZHVjZShmdW5jdGlvbihtZW1vLCBudW0peyByZXR1cm4gbWVtbyArIChudW0oKSA9PSBpbmRleCk7IH0sIDApO1xuICAgIH07XG4gICAgc2VsZi50b2dnbGVBYmlsaXR5U2tpbGxCdWlsZCA9IGZ1bmN0aW9uIChpbmRleCwgYWJpbGl0eUluZGV4LCBkYXRhLCBldmVudCkge1xuICAgICAgICBpZiAoc2VsZi5za2lsbEJ1aWxkKClbaW5kZXhdKCkgIT0gYWJpbGl0eUluZGV4KSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYucGFyZW50LmFiaWxpdHkoKS5hYmlsaXRpZXMoKVthYmlsaXR5SW5kZXhdLFxuICAgICAgICAgICAgICAgIGFiaWxpdHlUeXBlID0gYWJpbGl0eS5hYmlsaXR5dHlwZSgpLFxuICAgICAgICAgICAgICAgIHNraWxsQnVpbGRTbGljZSA9IHNlbGYuc2tpbGxCdWlsZCgpLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAgICAgICAgICBjdXJyZW50QWJpbGl0eUxldmVsID0gc2VsZi5za2lsbEJ1aWxkKCkucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIG51bSl7IHJldHVybiBtZW1vICsgKG51bSgpID09IGFiaWxpdHlJbmRleCk7IH0sIDApLFxuICAgICAgICAgICAgICAgIG4gPSBza2lsbEJ1aWxkU2xpY2UucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIG51bSl7IHJldHVybiBtZW1vICsgKG51bSgpID09IGFiaWxpdHlJbmRleCk7IH0sIDApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZi5Jc1ZhbGlkQWJpbGl0eUxldmVsKGFiaWxpdHksIHNlbGYucGFyZW50LnNlbGVjdGVkSGVybygpLmhlcm9OYW1lLCBpbmRleCArIDEsIG4pKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5za2lsbEJ1aWxkKClbaW5kZXhdKGFiaWxpdHlJbmRleCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4ICsgMTsgaSA8IDI1OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpbGxCdWlsZCgpW2ldKCkgPT0gYWJpbGl0eUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuSXNWYWxpZEFiaWxpdHlMZXZlbChhYmlsaXR5LCBzZWxmLnBhcmVudC5zZWxlY3RlZEhlcm8oKS5oZXJvTmFtZSwgaSArIDEsIG4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5za2lsbEJ1aWxkKClbaV0oLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG4gPiAwICYmIHNlbGYuSXNWYWxpZEFiaWxpdHlMZXZlbChhYmlsaXR5LCBzZWxmLnBhcmVudC5zZWxlY3RlZEhlcm8oKS5oZXJvTmFtZSwgaW5kZXggKyAxLCBuIC0gMSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc2tpbGxCdWlsZFNsaWNlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChza2lsbEJ1aWxkU2xpY2VbaV0oKSA9PSBhYmlsaXR5SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2tpbGxCdWlsZCgpW2ldKC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2tpbGxCdWlsZCgpW2luZGV4XShhYmlsaXR5SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnNraWxsQnVpbGQoKVtpbmRleF0oLTEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLklzVmFsaWRBYmlsaXR5TGV2ZWwgPSBmdW5jdGlvbiAoYWJpbGl0eSwgaGVyb05hbWUsIGhlcm9MZXZlbCwgYWJpbGl0eUxldmVsKSB7XG4gICAgICAgIHZhciBhID0gMSwgYiA9IDIsIG0gPSA0O1xuICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2F0dHJpYnV0ZV9ib251cycpIHtcbiAgICAgICAgICAgIG0gPSAxMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmFiaWxpdHl0eXBlKCkgPT0gJ0RPVEFfQUJJTElUWV9UWVBFX1VMVElNQVRFJykge1xuICAgICAgICAgICAgICAgIGlmIChoZXJvTmFtZSA9PSAnaW52b2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGIgPSA1O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoZXJvTmFtZSA9PSAnbWVlcG8nKSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPSAzO1xuICAgICAgICAgICAgICAgICAgICBiID0gNztcbiAgICAgICAgICAgICAgICAgICAgbSA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhID0gNjtcbiAgICAgICAgICAgICAgICAgICAgYiA9IDU7XG4gICAgICAgICAgICAgICAgICAgIG0gPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChoZXJvTmFtZSA9PSAnaW52b2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgbSA9IDc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGhlcm9MZXZlbCA+PSBhICsgYiAqIGFiaWxpdHlMZXZlbCAmJiBhYmlsaXR5TGV2ZWwgPCBtO1xuICAgIH1cbiAgICBcbiAgICBzZWxmLnJlc2V0SXRlbUJ1aWxkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHNlbGYuaXRlbUJ1aWxkKClbaW5kZXhdLnJlbW92ZUFsbCgpO1xuICAgIH07ICAgICAgICBcbiAgICBzZWxmLnJlc2V0QWxsSXRlbUJ1aWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG4gICAgICAgICAgICBzZWxmLml0ZW1CdWlsZCgpW2ldLnJlbW92ZUFsbCgpO1xuICAgICAgICAgICAgc2VsZi5pdGVtQnVpbGQoKVtpXS5jYXJyeU92ZXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNlbGYucmVzZXRTa2lsbEJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcbiAgICAgICAgICAgIHNlbGYuc2tpbGxCdWlsZCgpW2ldKC0xKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgc2VsZi5ncmFwaERhdGEgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuZ3JhcGhEYXRhSGVhZGVyID0ga28ub2JzZXJ2YWJsZShzZWxmLnBhcmVudC5zZWxlY3RlZEhlcm8oKS5oZXJvRGlzcGxheU5hbWUpO1xuICAgIHNlbGYucGFyZW50LnNlbGVjdGVkSGVyby5zdWJzY3JpYmUoZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIHNlbGYuZ3JhcGhEYXRhSGVhZGVyKHNlbGYucGFyZW50LnNlbGVjdGVkSGVybygpLmhlcm9EaXNwbGF5TmFtZSk7XG4gICAgfSk7XG4gICAgc2VsZi5ncmFwaERhdGFEZXNjcmlwdGlvbiA9IGtvLm9ic2VydmFibGUoJycpO1xuICAgIHNlbGYuZ3JhcGhQcm9wZXJ0aWVzID0ga28ub2JzZXJ2YWJsZUFycmF5KFtcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5HcmFwaFByb3BlcnR5T3B0aW9uKCd0b3RhbEFybW9yUGh5c2ljYWwnLCAnQXJtb3InKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5HcmFwaFByb3BlcnR5T3B0aW9uKCd0b3RhbEFybW9yUGh5c2ljYWxSZWR1Y3Rpb24nLCAnUGh5c2ljYWwgRGFtYWdlIFJlZHVjdGlvbicpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkdyYXBoUHJvcGVydHlPcHRpb24oJ3RvdGFsTWFnaWNSZXNpc3RhbmNlJywgJ01hZ2ljYWwgUmVzaXN0YW5jZScpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkdyYXBoUHJvcGVydHlPcHRpb24oJ2hlYWx0aCcsICdIZWFsdGgnKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5HcmFwaFByb3BlcnR5T3B0aW9uKCdoZWFsdGhyZWdlbicsICdIZWFsdGggUmVnZW5lcmF0aW9uJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuR3JhcGhQcm9wZXJ0eU9wdGlvbignbWFuYScsICdNYW5hJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuR3JhcGhQcm9wZXJ0eU9wdGlvbignbWFuYXJlZ2VuJywgJ01hbmEgUmVnZW5lcmF0aW9uJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuR3JhcGhQcm9wZXJ0eU9wdGlvbignZWhwUGh5c2ljYWwnLCAnRUhQIFBoeXNpY2FsJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuR3JhcGhQcm9wZXJ0eU9wdGlvbignZWhwTWFnaWNhbCcsICdFSFAgTWFnaWNhbCcpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkdyYXBoUHJvcGVydHlPcHRpb24oJ2RhbWFnZScsICdEYW1hZ2UgcGVyIGF0dGFjaycpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkdyYXBoUHJvcGVydHlPcHRpb24oJ2RwcycsICdEYW1hZ2UgcGVyIHNlY29uZCcpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLkdyYXBoUHJvcGVydHlPcHRpb24oJ2F0dGFja3NQZXJTZWNvbmQnLCAnQXR0YWNrcyBwZXIgc2Vjb25kJyksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuR3JhcGhQcm9wZXJ0eU9wdGlvbignYXR0YWNrVGltZScsICdUaW1lIHBlciBhdHRhY2snKVxuICAgIF0pO1xuICAgIHNlbGYuZ3JhcGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNhdmVkQWJpbGl0eUxldmVscyA9IFtdLFxuICAgICAgICAgICAgc2F2ZWRMZXZlbCA9IHNlbGYucGFyZW50LnNlbGVjdGVkSGVyb0xldmVsKCksXG4gICAgICAgICAgICBzYXZlZEl0ZW1zID0gc2VsZi5wYXJlbnQuaW52ZW50b3J5Lml0ZW1zKCksXG4gICAgICAgICAgICBzYXZlZEFjdGl2ZUl0ZW1zID0gc2VsZi5wYXJlbnQuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zKCksXG4gICAgICAgICAgICBzID0ga28udG9KUyhzZWxmLnNraWxsQnVpbGQpLFxuICAgICAgICAgICAgY2FycnlPdmVySXRlbXMgPSBbXSxcbiAgICAgICAgICAgIGNhcnJ5T3ZlckFjdGl2ZUl0ZW1zID0gW10sXG4gICAgICAgICAgICBkYXRhc2V0ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5wYXJlbnQuYWJpbGl0eSgpLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzYXZlZEFiaWxpdHlMZXZlbHMucHVzaChzZWxmLnBhcmVudC5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCAyNjsgaSsrKSB7XG4gICAgICAgICAgICBzZWxmLnBhcmVudC5zZWxlY3RlZEhlcm9MZXZlbChpKTtcbiAgICAgICAgICAgIHZhciBza2lsbEJ1aWxkU3Vic2V0ID0gcy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5wYXJlbnQuYWJpbGl0eSgpLmFiaWxpdGllcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBzZWxmLnBhcmVudC5hYmlsaXR5KCkuYWJpbGl0aWVzKClbal0sXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ID0gc2tpbGxCdWlsZFN1YnNldC5yZWR1Y2UoZnVuY3Rpb24obWVtbywgbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtbyArIChudW0gPT0gaik7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIGEubGV2ZWwoY291bnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbUJ1aWxkKClbaSAtIDFdLmNhcnJ5T3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgY2FycnlPdmVySXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBjYXJyeU92ZXJBY3RpdmVJdGVtcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FycnlPdmVySXRlbXMgPSBjYXJyeU92ZXJJdGVtcy5jb25jYXQoc2VsZi5pdGVtQnVpbGQoKVtpIC0gMV0uaXRlbXMoKSk7XG4gICAgICAgICAgICBjYXJyeU92ZXJBY3RpdmVJdGVtcyA9IGNhcnJ5T3ZlckFjdGl2ZUl0ZW1zLmNvbmNhdChzZWxmLml0ZW1CdWlsZCgpW2kgLSAxXS5hY3RpdmVJdGVtcygpKTtcblxuICAgICAgICAgICAgc2VsZi5wYXJlbnQuaW52ZW50b3J5Lml0ZW1zKGNhcnJ5T3Zlckl0ZW1zKTtcbiAgICAgICAgICAgIHNlbGYucGFyZW50LmludmVudG9yeS5hY3RpdmVJdGVtcyhjYXJyeU92ZXJBY3RpdmVJdGVtcyk7XG4gICAgICAgICAgICB2YXIgZGF0YU9iaiA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmdyYXBoUHJvcGVydGllcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSBzZWxmLmdyYXBoUHJvcGVydGllcygpW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcC5pZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkcHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9ialtwcm9wLmlkXSA9IHNlbGYucGFyZW50WydkYW1hZ2VUb3RhbEluZm8nXSgpLnRvdGFsUm93WzJdKCkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9ialtwcm9wLmlkXSA9IHNlbGYucGFyZW50WydkYW1hZ2VUb3RhbEluZm8nXSgpLnRvdGFsUm93WzBdKCkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9ialtwcm9wLmlkXSA9IHNlbGYucGFyZW50W3Byb3AuaWRdKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGFPYmouaXRlbXMgPSBjYXJyeU92ZXJJdGVtcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrby50b0pTKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkYXRhc2V0LnB1c2goZGF0YU9iaik7XG4gICAgICAgICAgICBpZiAoY2FycnlPdmVySXRlbXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5ncmFwaERhdGFJdGVtUm93c1tpIC0gMV0odHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBoZWFkZXI6IHNlbGYuZ3JhcGhEYXRhSGVhZGVyKCksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5ncmFwaERhdGFEZXNjcmlwdGlvbigpLFxuICAgICAgICAgICAgaXRlbXM6IHNlbGYucGFyZW50LmludmVudG9yeS5pdGVtcygpLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtvLnRvSlMoaXRlbSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHNraWxsQnVpbGQ6IGtvLnRvSlMoc2VsZi5za2lsbEJ1aWxkKSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFzZXQsXG4gICAgICAgICAgICBhYmlsaXR5TWFwOiBzZWxmLmFiaWxpdHlNYXBEYXRhLnNsaWNlKDApLFxuICAgICAgICAgICAgY3VtdWxhdGl2ZVNraWxsQnVpbGQ6IFtdLFxuICAgICAgICAgICAgdmlzaWJsZToga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNraWxsQnVpbGRBdExldmVsID0gW10sXG4gICAgICAgICAgICAgICAgc2tpbGxCdWlsZFNsaWNlID0gZGF0YS5za2lsbEJ1aWxkLnNsaWNlKDAsIGkgKyAxKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5hYmlsaXR5TWFwLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFiaWxpdHlJbmRleCA9IGRhdGEuYWJpbGl0eU1hcFtqXTtcbiAgICAgICAgICAgICAgICBza2lsbEJ1aWxkQXRMZXZlbC5wdXNoKHNraWxsQnVpbGRTbGljZS5yZWR1Y2UoZnVuY3Rpb24obWVtbywgbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZW1vICsgKG51bSA9PSBhYmlsaXR5SW5kZXgpO1xuICAgICAgICAgICAgICAgIH0sIDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEuY3VtdWxhdGl2ZVNraWxsQnVpbGQucHVzaChza2lsbEJ1aWxkQXRMZXZlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmdyYXBoRGF0YS5wdXNoKGRhdGEpO1xuICAgICAgICBzZWxmLnBhcmVudC5zZWxlY3RlZEhlcm9MZXZlbChzYXZlZExldmVsKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnBhcmVudC5hYmlsaXR5KCkuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNlbGYucGFyZW50LmFiaWxpdHkoKS5hYmlsaXRpZXMoKVtpXS5sZXZlbChzYXZlZEFiaWxpdHlMZXZlbHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucGFyZW50LmludmVudG9yeS5pdGVtcyhzYXZlZEl0ZW1zKTtcbiAgICAgICAgc2VsZi5wYXJlbnQuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zKHNhdmVkQWN0aXZlSXRlbXMpO1xuICAgIH07XG4gICAgc2VsZi5yZW1vdmVHcmFwaERhdGFTZXQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLmdyYXBoRGF0YS5yZW1vdmUoZGF0YSk7XG4gICAgfVxuICAgIHNlbGYuc2VsZWN0ZWRHcmFwaFByb3BlcnR5ID0ga28ub2JzZXJ2YWJsZShzZWxmLmdyYXBoUHJvcGVydGllcygpWzBdLmlkKTtcbiAgICBcbiAgICBzZWxmLmdyYXBoQ2hhcnRPcHRpb25zID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3ZhciBjb2xvciA9IG15LnByb3RvdHlwZS50aGVtZSgpID09ICdkYXJrJyA/ICdyZ2IoMTUxLCAxNTQsIDE2MiknIDogJ3JnYig1MSwgNTEsIDUxKSc7XG4gICAgICAgIHZhciBjb2xvciA9ICdyZ2IoMTUxLCAxNTQsIDE2MiknO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGFzZXRTdHJva2U6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YXNldFN0cm9rZVdpZHRoOiAtMSxcbiAgICAgICAgICAgIGRhdGFzZXRGaWxsOiBmYWxzZSxcbiAgICAgICAgICAgIHBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzIDogMTAsXG4gICAgICAgICAgICBzY2FsZUZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICBzY2FsZUxpbmVDb2xvcjogY29sb3IucmVwbGFjZSgncmdiJywgJ3JnYmEnKS5yZXBsYWNlKCcpJywgJywgLjEpJyksXG4gICAgICAgICAgICBzY2FsZUdyaWRMaW5lQ29sb3I6IGNvbG9yLnJlcGxhY2UoJ3JnYicsICdyZ2JhJykucmVwbGFjZSgnKScsICcsIC4xKScpXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLmdyYXBoQ2hhcnREYXRhID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBkYXRhc2V0czogW11cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcbiAgICAgICAgICAgIGRhdGEubGFiZWxzLnB1c2goKGkrMSkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmdyYXBoRGF0YSgpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGF0YU9iaiA9IHNlbGYuZ3JhcGhEYXRhKClbaV0sXG4gICAgICAgICAgICAgICAgZGF0YXNldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGFPYmouaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6IHNlbGYuZ3JhcGhEaXN0aW5jdENvbG9yKHNlbGYuZ3JhcGhEYXRhKCkubGVuZ3RoLCBpLCAuMSksXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBzZWxmLmdyYXBoRGlzdGluY3RDb2xvcihzZWxmLmdyYXBoRGF0YSgpLmxlbmd0aCwgaSwgMSksXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Q29sb3I6IHNlbGYuZ3JhcGhEaXN0aW5jdENvbG9yKHNlbGYuZ3JhcGhEYXRhKCkubGVuZ3RoLCBpLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHJva2VDb2xvcjogc2VsZi5ncmFwaERpc3RpbmN0Q29sb3Ioc2VsZi5ncmFwaERhdGEoKS5sZW5ndGgsIGksIDEpLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodEZpbGw6IHNlbGYuZ3JhcGhEaXN0aW5jdENvbG9yKHNlbGYuZ3JhcGhEYXRhKCkubGVuZ3RoLCBpLCAuMSksXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0U3Ryb2tlOiBzZWxmLmdyYXBoRGlzdGluY3RDb2xvcihzZWxmLmdyYXBoRGF0YSgpLmxlbmd0aCwgaSwgLjUpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhT2JqLmRhdGEubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1tzZWxmLnNlbGVjdGVkR3JhcGhQcm9wZXJ0eSgpXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkYXRhLmRhdGFzZXRzLnB1c2goZGF0YXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSk7XG4gICAgc2VsZi5ncmFwaERpc3RpbmN0Q29sb3IgPSBmdW5jdGlvbiAobWF4LCBpbmRleCwgYWxwaGEpIHtcbiAgICAgICAgdmFyIGFscGhhID0gYWxwaGEgfHwgMSxcbiAgICAgICAgICAgIHJnYmEgPSBzZWxmLmhzbFRvUmdiKCgxIC8gbWF4KSAqIGluZGV4ICUgMSwgMSwgLjUpO1xuICAgICAgICByZ2JhLnB1c2goYWxwaGEpO1xuICAgICAgICByZXR1cm4gXCJyZ2JhKFwiICsgcmdiYS5qb2luKCkgKyBcIilcIjtcbiAgICB9XG4gICAgc2VsZi5nZXREaXN0aW5jdENvbG9yID0gZnVuY3Rpb24gKG1heCwgaW5kZXgsIGFscGhhKSB7XG4gICAgICAgIHZhciBhbHBoYSA9IGFscGhhIHx8IDE7XG4gICAgICAgIHJnYmEgPSBzZWxmLmhzbFRvUmdiKCgxIC8gbWF4KSAqIGluZGV4ICUgMSwgMSwgLjUpO1xuICAgICAgICByZ2JhLnB1c2goYWxwaGEpO1xuICAgICAgICByZXR1cm4gcmdiYTtcbiAgICB9XG4gICAgc2VsZi5oc2xUb1JnYiA9IGZ1bmN0aW9uKGgsIHMsIGwpIHtcbiAgICAgICAgdmFyIHIsIGcsIGI7XG4gICAgICAgIGlmIChzID09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBodWUycmdiID0gZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHQgPCAwKSB0ICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHQgPiAxKSB0IC09IDE7XG4gICAgICAgICAgICAgICAgaWYgKHQgPCAxIC8gNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICAgICAgICAgICAgaWYgKHQgPCAxIC8gMikgcmV0dXJuIHE7XG4gICAgICAgICAgICAgICAgaWYgKHQgPCAyIC8gMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgICAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW01hdGgucm91bmQociAqIDI1NSksIE1hdGgucm91bmQoZyAqIDI1NSksIE1hdGgucm91bmQoYiAqIDI1NSldO1xuICAgIH1cbiAgICBcbiAgICBzZWxmLnNob3dHcmFwaEl0ZW1CdWlsZFJvd3MgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICBzZWxmLnNob3dHcmFwaFNraWxsQnVpbGRDb2x1bW5zID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgc2VsZi5ncmFwaFJvd0hhc0l0ZW1zID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBzZWxmLmdyYXBoRGF0YSgpLnNvbWUoZnVuY3Rpb24gKGRhdGFzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhc2V0LnZpc2libGUoKSAmJiBkYXRhc2V0LmRhdGFbaW5kZXhdLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGYuc2VsZWN0SW52ZW50b3J5ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHNlbGYucGFyZW50LnNlbGVjdGVkSW52ZW50b3J5KHNlbGYucGFyZW50LnNlbGVjdGVkSW52ZW50b3J5KCkgPT0gaW5kZXggPyAtMSA6IGluZGV4KTtcbiAgICB9XG4gICAgc2VsZi5nZXRTZWxlY3RlZEludmVudG9yeSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzZWxmLnBhcmVudC5zZWxlY3RlZEludmVudG9yeSgpID09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJlbnQuaW52ZW50b3J5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuaXRlbUJ1aWxkKClbc2VsZi5wYXJlbnQuc2VsZWN0ZWRJbnZlbnRvcnkoKV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLmNvcHlJbnZlbnRvcnkgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKHNlbGYucGFyZW50LnNlbGVjdGVkSW52ZW50b3J5KCkgIT0gLTEgJiYgc2VsZi5wYXJlbnQuc2VsZWN0ZWRJbnZlbnRvcnkoKSAhPSBpbmRleCkge1xuICAgICAgICAgICAgc2VsZi5pdGVtQnVpbGQoKVtzZWxmLnBhcmVudC5zZWxlY3RlZEludmVudG9yeSgpXS5pdGVtcyhzZWxmLml0ZW1CdWlsZCgpW3NlbGYucGFyZW50LnNlbGVjdGVkSW52ZW50b3J5KCldLml0ZW1zKCkuY29uY2F0KHNlbGYuaXRlbUJ1aWxkKClbaW5kZXhdLml0ZW1zKCkpKTtcbiAgICAgICAgICAgIHNlbGYuaXRlbUJ1aWxkKClbc2VsZi5wYXJlbnQuc2VsZWN0ZWRJbnZlbnRvcnkoKV0uYWN0aXZlSXRlbXMobXkucHJvdG90eXBlLnVuaW9uKHNlbGYuaXRlbUJ1aWxkKClbc2VsZi5wYXJlbnQuc2VsZWN0ZWRJbnZlbnRvcnkoKV0uYWN0aXZlSXRlbXMoKSwgc2VsZi5pdGVtQnVpbGQoKVtpbmRleF0uYWN0aXZlSXRlbXMoKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGYuY29weUludmVudG9yeVRvQ2xpcEJvYXJkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgbXkucHJvdG90eXBlLmludmVudG9yeUNsaXBCb2FyZC5pdGVtcyA9IHNlbGYucGFyZW50LmludmVudG9yeS5pdGVtcy5zbGljZSgwKTtcbiAgICAgICAgICAgIG15LnByb3RvdHlwZS5pbnZlbnRvcnlDbGlwQm9hcmQuYWN0aXZlSXRlbXMgPSBzZWxmLnBhcmVudC5pbnZlbnRvcnkuYWN0aXZlSXRlbXMuc2xpY2UoMCk7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBteS5wcm90b3R5cGUuaW52ZW50b3J5Q2xpcEJvYXJkLml0ZW1zID0gc2VsZi5pdGVtQnVpbGQoKVtpbmRleF0uaXRlbXMuc2xpY2UoMCk7XG4gICAgICAgICAgICBteS5wcm90b3R5cGUuaW52ZW50b3J5Q2xpcEJvYXJkLmFjdGl2ZUl0ZW1zID0gc2VsZi5pdGVtQnVpbGQoKVtpbmRleF0uYWN0aXZlSXRlbXMuc2xpY2UoMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5wYXN0ZUludmVudG9yeUZyb21DbGlwQm9hcmQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKG15LnByb3RvdHlwZS5pbnZlbnRvcnlDbGlwQm9hcmQuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5wYXJlbnQuaW52ZW50b3J5Lml0ZW1zKHNlbGYucGFyZW50LmludmVudG9yeS5pdGVtcygpLmNvbmNhdChteS5wcm90b3R5cGUuaW52ZW50b3J5Q2xpcEJvYXJkLml0ZW1zKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5wYXJlbnQuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zKG15LnByb3RvdHlwZS51bmlvbihzZWxmLnBhcmVudC5pbnZlbnRvcnkuYWN0aXZlSXRlbXMoKSwgbXkucHJvdG90eXBlLmludmVudG9yeUNsaXBCb2FyZC5hY3RpdmVJdGVtcykpOyAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuaXRlbUJ1aWxkKClbaW5kZXhdLml0ZW1zKHNlbGYuaXRlbUJ1aWxkKClbaW5kZXhdLml0ZW1zKCkuY29uY2F0KG15LnByb3RvdHlwZS5pbnZlbnRvcnlDbGlwQm9hcmQuaXRlbXMpKTtcbiAgICAgICAgICAgICAgICBzZWxmLml0ZW1CdWlsZCgpW2luZGV4XS5hY3RpdmVJdGVtcyhteS5wcm90b3R5cGUudW5pb24oc2VsZi5pdGVtQnVpbGQoKVtpbmRleF0uYWN0aXZlSXRlbXMoKSwgbXkucHJvdG90eXBlLmludmVudG9yeUNsaXBCb2FyZC5hY3RpdmVJdGVtcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGYubG9hZEdyYXBoRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYucGFyZW50LnNlY3Rpb25EaXNwbGF5KClbJ3NraWxsYnVpbGQnXSh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW2ldLnZpc2libGUgPSBrby5vYnNlcnZhYmxlKGRhdGFbaV0udmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5ncmFwaERhdGEoZGF0YSk7XG4gICAgfVxuICAgIHNlbGYuZ3JhcGhDaGFydENvbnRleHQgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgc2VsZi5leHBvcnRJbWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHcgPSB3aW5kb3cub3BlbigpO1xuICAgICAgICB3LmRvY3VtZW50LndyaXRlKCc8aW1nIHNyYz1cIicrIHNlbGYuZ3JhcGhDaGFydENvbnRleHQoKS5jYW52YXMudG9EYXRhVVJMKCkgKydcIi8+Jyk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuLi9oZXJvY2FsYy9tYWluXCIpO1xuXG5teS5wcm90b3R5cGUuRGFtYWdlSW5zdGFuY2UgPSBmdW5jdGlvbiAobGFiZWwsIGRhbWFnZVR5cGUsIHZhbHVlLCBkYXRhLCB0b3RhbCkge1xuICAgIHRoaXMubGFiZWwgPSBsYWJlbCB8fCAnJztcbiAgICB0aGlzLmRhbWFnZVR5cGUgPSBkYW1hZ2VUeXBlIHx8ICcnO1xuICAgIHRoaXMudmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xuICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwgW107XG4gICAgdGhpcy50b3RhbCA9IHBhcnNlRmxvYXQodG90YWwpIHx8IDA7XG59XG5cbm15LnByb3RvdHlwZS5IZXJvRGFtYWdlQW1wTWl4aW4gPSBmdW5jdGlvbiAoc2VsZikge1xuICAgIHNlbGYuZGFtYWdlQnJhY2tldHMgPSBbXG4gICAgICAgIFsnbWVkdXNhX21hbmFfc2hpZWxkJywgJ3RlbXBsYXJfYXNzYXNzaW5fcmVmcmFjdGlvbicsICdmYWNlbGVzc192b2lkX2JhY2t0cmFjaycsICdueXhfYXNzYXNzaW5fc3Bpa2VkX2NhcmFwYWNlJ10sXG4gICAgICAgIFsnc3BlY3RyZV9kaXNwZXJzaW9uJywgJ3dpc3Bfb3ZlcmNoYXJnZScsICdzbGFyZGFyX3NwcmludCcsJ2JyaXN0bGViYWNrX2JyaXN0bGViYWNrJywgJ3VuZHlpbmdfZmxlc2hfZ29sZW0nXSxcbiAgICAgICAgWydhYmFkZG9uX2JvcnJvd2VkX3RpbWUnLCAnYWJhZGRvbl9hcGhvdGljX3NoaWVsZCcsICdrdW5ra2FfZ2hvc3RzaGlwJywgJ3RyZWFudF9saXZpbmdfYXJtb3InXSxcbiAgICAgICAgWydjaGVuX3Blbml0ZW5jZScsICdtZWR1c2Ffc3RvbmVfZ2F6ZScsICdzaGFkb3dfZGVtb25fc291bF9jYXRjaGVyJ10sXG4gICAgICAgIFsnZGF6emxlX3NoYWxsb3dfZ3JhdmUnXVxuICAgIF07XG4gICAgXG4gICAgc2VsZi5nZXREYW1hZ2VBZnRlckJyYWNrZXQgPSBmdW5jdGlvbiAoaW5pdGlhbERhbWFnZSxpbmRleCkge1xuICAgICAgICB2YXIgYnJhY2tldCA9IHNlbGYuZGFtYWdlQnJhY2tldHNbaW5kZXhdO1xuICAgICAgICB2YXIgbXVsdGlwbGllciA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnJhY2tldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG15LnByb3RvdHlwZS5maW5kV2hlcmUoc2VsZi5kYW1hZ2VBbXBsaWZpY2F0aW9uLmJ1ZmZzLCB7bmFtZTogYnJhY2tldFtpXS5uYW1lfSkgIT0gdW5kZWZpbmVkIHx8IG15LnByb3RvdHlwZS5maW5kV2hlcmUoc2VsZi5kYW1hZ2VSZWR1Y3Rpb24uYnVmZnMsIHtuYW1lOiBicmFja2V0W2ldLm5hbWV9KSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyICs9IGJyYWNrZXRbaV0udmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpbml0aWFsRGFtYWdlICogbXVsdGlwbGllcjtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYucHJvY2Vzc0RhbWFnZUFtcFJlZHVjQnJhY2tldCA9IGZ1bmN0aW9uIChpbmRleCwgc291cmNlcywgZGFtYWdlKSB7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gMSxcbiAgICAgICAgICAgIGRhdGEgPSBbXSxcbiAgICAgICAgICAgIGRhbWFnZSA9IHBhcnNlRmxvYXQoZGFtYWdlKSxcbiAgICAgICAgICAgIHRvdGFsID0gcGFyc2VGbG9hdChkYW1hZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5kYW1hZ2VCcmFja2V0c1tpbmRleF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2VzW3NlbGYuZGFtYWdlQnJhY2tldHNbaW5kZXhdW2ldXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gMSArIHBhcnNlRmxvYXQoc291cmNlc1tzZWxmLmRhbWFnZUJyYWNrZXRzW2luZGV4XVtpXV0ubXVsdGlwbGllcik7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gKGRhbWFnZSAqIG11bHRpcGxpZXIpIC0gZGFtYWdlO1xuICAgICAgICAgICAgICAgIGRhdGEucHVzaChuZXcgbXkucHJvdG90eXBlLkRhbWFnZUluc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW3NlbGYuZGFtYWdlQnJhY2tldHNbaW5kZXhdW2ldXS5kaXNwbGF5bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlc1tzZWxmLmRhbWFnZUJyYWNrZXRzW2luZGV4XVtpXV0uZGFtYWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgKGRhbWFnZSAqIG11bHRpcGxpZXIpIC0gZGFtYWdlLFxuICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgXG4gICAgc2VsZi5nZXREYW1hZ2VBbXBSZWR1Y0luc3RhbmNlID0gZnVuY3Rpb24oc291cmNlcywgaW5pdGlhbERhbWFnZSwgYWJpbGl0eSwgZGFtYWdlVHlwZSkge1xuICAgICAgICB2YXIgZGF0YSA9IFtdLFxuICAgICAgICAgICAgZGFtYWdlID0gcGFyc2VGbG9hdChpbml0aWFsRGFtYWdlKSxcbiAgICAgICAgICAgIHByZXZEYW1hZ2UgPSBkYW1hZ2UsXG4gICAgICAgICAgICBsYWJlbCA9IGFiaWxpdHkgPT0gJ2luaXRpYWwnID8gJ0luaXRpYWwnIDogc291cmNlc1thYmlsaXR5XS5kaXNwbGF5bmFtZTtcblxuICAgICAgICAvLyBCcmFja2V0IDBcbiAgICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KHNlbGYucHJvY2Vzc0RhbWFnZUFtcFJlZHVjQnJhY2tldCgwLCBzb3VyY2VzLCBkYW1hZ2UpKTtcbiAgICAgICAgZGFtYWdlID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdID8gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnRvdGFsIDogZGFtYWdlO1xuXG4gICAgICAgIC8vIEJyYWNrZXQgMVxuICAgICAgICBkYXRhID0gZGF0YS5jb25jYXQoc2VsZi5wcm9jZXNzRGFtYWdlQW1wUmVkdWNCcmFja2V0KDEsIHNvdXJjZXMsIGRhbWFnZSkpO1xuICAgICAgICBkYW1hZ2UgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPyBkYXRhW2RhdGEubGVuZ3RoIC0gMV0udG90YWwgOiBkYW1hZ2U7XG4gICAgICAgIFxuICAgICAgICAvLyBCcmFja2V0IDJcbiAgICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KHNlbGYucHJvY2Vzc0RhbWFnZUFtcFJlZHVjQnJhY2tldCgyLCBzb3VyY2VzLCBkYW1hZ2UpKTtcbiAgICAgICAgZGFtYWdlID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdID8gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnRvdGFsIDogZGFtYWdlO1xuXG4gICAgICAgIHJldHVybiBuZXcgbXkucHJvdG90eXBlLkRhbWFnZUluc3RhbmNlKGxhYmVsLCBkYW1hZ2VUeXBlLCBpbml0aWFsRGFtYWdlLCBkYXRhLCBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPyBkYXRhW2RhdGEubGVuZ3RoIC0gMV0udG90YWwgOiBkYW1hZ2UpO1xuICAgIH1cbiAgICBcbiAgICBzZWxmLmdldERhbWFnZUFtcFJlZHVjID0gZnVuY3Rpb24gKGluaXRpYWxEYW1hZ2UpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlcyA9IFtdLFxuICAgICAgICAgICAgc291cmNlcyA9IHt9LFxuICAgICAgICAgICAgc291cmNlc0FtcCA9IHNlbGYuZGFtYWdlUmVkdWN0aW9uLmdldERhbWFnZU11bHRpcGxpZXJTb3VyY2VzKCksXG4gICAgICAgICAgICBzb3VyY2VzUmVkdWMgPSBzZWxmLmRhbWFnZUFtcGxpZmljYXRpb24uZ2V0RGFtYWdlTXVsdGlwbGllclNvdXJjZXMoKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmV4dGVuZChzb3VyY2VzLCBzb3VyY2VzQW1wKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmV4dGVuZChzb3VyY2VzLCBzb3VyY2VzUmVkdWMpO1xuICAgICAgICAvLyBJbml0aWFsIGRhbWFnZSBpbnN0YW5jZVxuICAgICAgICBpbnN0YW5jZXMucHVzaChzZWxmLmdldERhbWFnZUFtcFJlZHVjSW5zdGFuY2Uoc291cmNlcywgaW5pdGlhbERhbWFnZSwgJ2luaXRpYWwnLCAncGh5c2ljYWwnKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCcmFja2V0IDQgZGFtYWdlIGluc3RhbmNlc1xuICAgICAgICB2YXIgYjQgPSBbJ3NoYWRvd19kZW1vbl9zb3VsX2NhdGNoZXInLCAnbWVkdXNhX3N0b25lX2dhemUnLCAnY2hlbl9wZW5pdGVuY2UnXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiNC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNvdXJjZXNbYjRbaV1dICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKHNlbGYuZ2V0RGFtYWdlQW1wUmVkdWNJbnN0YW5jZShzb3VyY2VzLCBpbml0aWFsRGFtYWdlICogc291cmNlc1tiNFtpXV0ubXVsdGlwbGllciwgYjRbaV0sIHNvdXJjZXNbYjRbaV1dLmRhbWFnZVR5cGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gbmV3IG15LnByb3RvdHlwZS5EYW1hZ2VJbnN0YW5jZSgnVG90YWwnLCAncGh5c2ljYWwnLCBpbml0aWFsRGFtYWdlLCBpbnN0YW5jZXMsIGluc3RhbmNlcy5yZWR1Y2UoZnVuY3Rpb24obWVtbywgaSkge3JldHVybiBwYXJzZUZsb2F0KG1lbW8pICsgcGFyc2VGbG9hdChpLnRvdGFsKTt9LCAwKSk7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmRhbWFnZUlucHV0VmFsdWUgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgIHNlbGYuZGFtYWdlSW5wdXRNb2RpZmllZCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuZ2V0RGFtYWdlQW1wUmVkdWMoc2VsZi5kYW1hZ2VJbnB1dFZhbHVlKCkpO1xuICAgIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydrbyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsna28nXSA6IG51bGwpO1xudmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XG5cbmtvLmJpbmRpbmdIYW5kbGVycy5zdG9wQmluZGluZyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6IHRydWUgfTtcbiAgICB9XG59O1xuXG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLnN0b3BCaW5kaW5nID0gdHJ1ZTtcblxua28uYmluZGluZ0hhbmRsZXJzLmxhenlCaW5kaW5nID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgJ2lzQm91bmQnLCBmYWxzZSlcbiAgICAgICAgXG4gICAgICAgIC8vIEFsc28gdGVsbCBLTyAqbm90KiB0byBiaW5kIHRoZSBkZXNjZW5kYW50cyBpdHNlbGYsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgYm91bmQgdHdpY2VcbiAgICAgICAgcmV0dXJuIHsgY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6IHRydWUgfTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICB2YXIgdmFsID0ga28udW53cmFwKHZhbHVlQWNjZXNzb3IoKSksXG4gICAgICAgICAgICBpc0JvdW5kID0ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwgJ2lzQm91bmQnKTtcbiAgICAgICAgaWYgKHZhbCAmJiAhaXNCb3VuZCkge1xuICAgICAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgJ2lzQm91bmQnLCB0cnVlKTtcbiAgICAgICAgICAgIGtvLmFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzKGJpbmRpbmdDb250ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3MubGF6eUJpbmRpbmcgPSB0cnVlO1xuXG5rby5iaW5kaW5nSGFuZGxlcnMuaXRlbUJ1aWxkVGFibGUgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICB2YXIgYnVpbGRFeHBsb3JlciA9IGtvLnVud3JhcCh2YWx1ZUFjY2Vzc29yKCkpLFxuICAgICAgICAgICAgJGVsID0gJChlbGVtZW50KTtcblxuICAgICAgICB2YXIgcHJlc3NlZEtleXMgPSB7fTtcbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgJ3ByZXNzZWRLZXlzJywgcHJlc3NlZEtleXMpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGtleURvd25IYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHByZXNzZWRLZXlzID0ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwgJ3ByZXNzZWRLZXlzJyk7XG4gICAgICAgICAgICBwcmVzc2VkS2V5c1tlLndoaWNoXSA9IHRydWU7XG4gICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCAncHJlc3NlZEtleXMnLCBwcmVzc2VkS2V5cyk7XG4gICAgICAgIH1cbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgJ2tleURvd25IYW5kbGVyJywga2V5RG93bkhhbmRsZXIpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGtleVVwSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBwcmVzc2VkS2V5cyA9IGtvLnV0aWxzLmRvbURhdGEuZ2V0KGVsZW1lbnQsICdwcmVzc2VkS2V5cycpO1xuICAgICAgICAgICAgaWYgKChwcmVzc2VkS2V5c1sxN10gJiYgcHJlc3NlZEtleXNbNjddKSB8fCAocHJlc3NlZEtleXNbMTddICYmIHByZXNzZWRLZXlzWzg2XSkpIHsgLy8gY3RybCArIGNcbiAgICAgICAgICAgICAgICB2YXIgJGhvdmVyZWRSb3dzID0gJChlbGVtZW50KS5maW5kKCcuaG92ZXItY3Vyc29yOmhvdmVyJyk7XG4gICAgICAgICAgICAgICAgaWYgKCRob3ZlcmVkUm93cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJlc3NlZEtleXNbNjddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZEV4cGxvcmVyLmNvcHlJbnZlbnRvcnlUb0NsaXBCb2FyZCgkKFwidHJcIiwgJChlbGVtZW50KSkuaW5kZXgoJGhvdmVyZWRSb3dzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZEV4cGxvcmVyLnBhc3RlSW52ZW50b3J5RnJvbUNsaXBCb2FyZCgkKFwidHJcIiwgJChlbGVtZW50KSkuaW5kZXgoJGhvdmVyZWRSb3dzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJGhvdmVyZWRSb3dzLmZhZGVPdXQoNTApLmZhZGVJbig1MCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHByZXNzZWRLZXlzW2Uud2hpY2hdO1xuICAgICAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgJ3ByZXNzZWRLZXlzJywgcHJlc3NlZEtleXMpO1xuICAgICAgICB9XG4gICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KGVsZW1lbnQsICdrZXlVcEhhbmRsZXInLCBrZXlVcEhhbmRsZXIpO1xuICAgICAgICBcbiAgICAgICAgJChkb2N1bWVudCkuYmluZCggXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyICk7XG4gICAgICAgICQoZG9jdW1lbnQpLmJpbmQoIFwia2V5dXBcIiwga2V5VXBIYW5kbGVyICk7XG5cbiAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBrZXlEb3duSGFuZGxlciA9IGtvLnV0aWxzLmRvbURhdGEuZ2V0KGVsZW1lbnQsICdrZXlEb3duSGFuZGxlcicpO1xuICAgICAgICAgICAgdmFyIGtleVVwSGFuZGxlciA9IGtvLnV0aWxzLmRvbURhdGEuZ2V0KGVsZW1lbnQsICdrZXlVcEhhbmRsZXInKTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLnVuYmluZCggXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyICk7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS51bmJpbmQoIFwia2V5dXBcIiwga2V5VXBIYW5kbGVyICk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmtvLmJpbmRpbmdIYW5kbGVycy5wcmV2ZW50QnViYmxlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH0gICAgICAgIFxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLnRvZ2dsZSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCk7XG4gICAgICAgIGtvLmFwcGx5QmluZGluZ3NUb05vZGUoZWxlbWVudCwge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSghdmFsdWUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmtvLmJpbmRpbmdIYW5kbGVycy5zaG9wRG9ja1N0eWxlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgICAgICBpZiAoYmluZGluZ0NvbnRleHQuJGRhdGEuc2hvcERvY2soKSAmJiAhYmluZGluZ0NvbnRleHQuJGRhdGEuc2hvcFBvcG91dCgpKSB7XG4gICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKGVsZW1lbnQsIHsgc3R5bGU6IHsgaGVpZ2h0OiAoYmluZGluZ0NvbnRleHQuJGRhdGEud2luZG93SGVpZ2h0KCkgLSA1MikgKyAncHgnLCBwb3NpdGlvbjogJ2ZpeGVkJywgcmlnaHQ6IDAsIHRvcDogJzUycHgnLCAnb3ZlcmZsb3cteSc6ICdhdXRvJyB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga28uYXBwbHlCaW5kaW5nc1RvTm9kZShlbGVtZW50LCB7IHN0eWxlOiB7IGhlaWdodDogJ2F1dG8nLCBwb3NpdGlvbjogJ3JlbGF0aXZlJywgcmlnaHQ6ICdpbml0aWFsJywgdG9wOiAnaW5pdGlhbCcsICdvdmVyZmxvdy15JzogJ2luaXRpYWwnIH0gfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgIGlmIChiaW5kaW5nQ29udGV4dC4kZGF0YS5zaG9wRG9jaygpICYmICFiaW5kaW5nQ29udGV4dC4kZGF0YS5zaG9wUG9wb3V0KCkpIHtcbiAgICAgICAgICAgIGtvLmFwcGx5QmluZGluZ3NUb05vZGUoZWxlbWVudCwgeyBzdHlsZTogeyBoZWlnaHQ6IChiaW5kaW5nQ29udGV4dC4kZGF0YS53aW5kb3dIZWlnaHQoKSAtIDUyKSArICdweCcsIHBvc2l0aW9uOiAnZml4ZWQnLCByaWdodDogMCwgdG9wOiAnNTJweCcsICdvdmVyZmxvdy15JzogJ2F1dG8nIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKGVsZW1lbnQsIHsgc3R5bGU6IHsgaGVpZ2h0OiAnYXV0bycsIHBvc2l0aW9uOiAncmVsYXRpdmUnLCByaWdodDogJ2luaXRpYWwnLCB0b3A6ICdpbml0aWFsJywgJ292ZXJmbG93LXknOiAnaW5pdGlhbCcgfSB9KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmtvLmJpbmRpbmdIYW5kbGVycy5sb2dnZXIgPSB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgICAgICAvL3N0b3JlIGEgY291bnRlciB3aXRoIHRoaXMgZWxlbWVudFxuICAgICAgICB2YXIgY291bnQgPSBrby51dGlscy5kb21EYXRhLmdldChlbGVtZW50LCBcIl9rb19sb2dnZXJcIikgfHwgMCxcbiAgICAgICAgICAgIGRhdGEgPSBrby50b0pTKHZhbHVlQWNjZXNzb3IoKSB8fCBhbGxCaW5kaW5ncygpKTtcblxuICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCBcIl9rb19sb2dnZXJcIiwgKytjb3VudCk7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUubG9nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb3VudCwgZWxlbWVudCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnMudG9vbHRpcCA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciAkZWxlbWVudCwgb3B0aW9ucywgdG9vbHRpcDtcbiAgICAgICAgb3B0aW9ucyA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAgJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXG4gICAgICAgIC8vIElmIHRoZSB0aXRsZSBpcyBhbiBvYnNlcnZhYmxlLCBtYWtlIGl0IGF1dG8tdXBkYXRpbmcuXG4gICAgICAgIGlmIChrby5pc09ic2VydmFibGUob3B0aW9ucy50aXRsZSkpIHtcbiAgICAgICAgICAgIHZhciBpc1Rvb2xUaXBWaXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICRlbGVtZW50Lm9uKCdzaG93LmJzLnRvb2x0aXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXNUb29sVGlwVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRlbGVtZW50Lm9uKCdoaWRlLmJzLnRvb2x0aXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXNUb29sVGlwVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFwidHJ1ZVwiIGlzIHRoZSBib290c3RyYXAgZGVmYXVsdC5cbiAgICAgICAgICAgIHZhciBvcmlnQW5pbWF0aW9uID0gb3B0aW9ucy5hbmltYXRpb24gfHwgdHJ1ZTtcbiAgICAgICAgICAgIG9wdGlvbnMudGl0bGUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNUb29sVGlwVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKCdicy50b29sdGlwJykub3B0aW9ucy5hbmltYXRpb24gPSBmYWxzZTsgLy8gdGVtcG9yYXJpbHkgZGlzYWJsZSBhbmltYXRpb24gdG8gYXZvaWQgZmxpY2tlcmluZyBvZiB0aGUgdG9vbHRpcFxuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC50b29sdGlwKCdmaXhUaXRsZScpIC8vIGNhbGwgdGhpcyBtZXRob2QgdG8gdXBkYXRlIHRoZSB0aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRvb2x0aXAoJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnYnMudG9vbHRpcCcpLm9wdGlvbnMuYW5pbWF0aW9uID0gb3JpZ0FuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvb2x0aXAgPSAkZWxlbWVudC5kYXRhKCdicy50b29sdGlwJyk7XG4gICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAkLmV4dGVuZCh0b29sdGlwLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGVsZW1lbnQudG9vbHRpcChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmtvLmJpbmRpbmdIYW5kbGVycy5wb3BvdmVyID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIHZhciBwb3BvdmVyQmluZGluZ1ZhbHVlcyA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gcG9wb3ZlckJpbmRpbmdWYWx1ZXMudGVtcGxhdGUgfHwgZmFsc2U7XG4gICAgICAgIHZhciBvcHRpb25zID0gcG9wb3ZlckJpbmRpbmdWYWx1ZXMub3B0aW9ucyB8fCB7dGl0bGU6ICdwb3BvdmVyJ307XG4gICAgICAgIHZhciBkYXRhID0gcG9wb3ZlckJpbmRpbmdWYWx1ZXMuZGF0YSB8fCBmYWxzZTtcbiAgICAgICAgaWYgKHRlbXBsYXRlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnRlbnQgPSBcIjwhLS0ga28gdGVtcGxhdGU6IHsgbmFtZTogdGVtcGxhdGUsIGlmOiBkYXRhLCBkYXRhOiBkYXRhIH0gLS0+PCEtLSAva28gLS0+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnRlbnQgPSAkKCcjJyArIHRlbXBsYXRlKS5odG1sKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmh0bWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgICRlbGVtZW50Lm9uKCdzaG93bi5icy5wb3BvdmVyJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgdmFyIHBvcG92ZXJEYXRhID0gJChldmVudC50YXJnZXQpLmRhdGEoKTtcbiAgICAgICAgICAgIHZhciBwb3BvdmVyRWwgPSBwb3BvdmVyRGF0YVsnYnMucG9wb3ZlciddLiR0aXA7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHBvcG92ZXJEYXRhWydicy5wb3BvdmVyJ10ub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHZhciBidXR0b24gPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgYnV0dG9uUG9zaXRpb24gPSBidXR0b24ucG9zaXRpb24oKTtcbiAgICAgICAgICAgIHZhciBidXR0b25EaW1lbnNpb25zID0ge1xuICAgICAgICAgICAgICAgIHg6IGJ1dHRvbi5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgeTogYnV0dG9uLm91dGVySGVpZ2h0KClcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAga28uYXBwbHlCaW5kaW5nc1RvTm9kZShwb3BvdmVyRWxbMF0sIHsgdGVtcGxhdGU6IHsgbmFtZTogdGVtcGxhdGUsIGRhdGE6IGRhdGEgfSB9LCBiaW5kaW5nQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgLy9rby5hcHBseUJpbmRpbmdzKHt0ZW1wbGF0ZTogdGVtcGxhdGUsIGRhdGE6IGRhdGF9LCBwb3BvdmVyRWxbMF0pO1xuICAgICAgICAgICAgICAgIC8va28ucmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEsIHt9LCBwb3BvdmVyRWxbMF0sICdyZXBsYWNlQ2hpbGRyZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8va28ucmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEsIHt9LCBwb3BvdmVyRWxbMF0sICdyZXBsYWNlQ2hpbGRyZW4nKTtcbiAgICAgICAgICAgICAgICAvL2tvLmFwcGx5QmluZGluZ3Modmlld01vZGVsLCBwb3BvdmVyRWxbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcG9wb3ZlckRpbWVuc2lvbnMgPSB7XG4gICAgICAgICAgICAgICAgeDogcG9wb3ZlckVsLm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgICAgICB5OiBwb3BvdmVyRWwub3V0ZXJIZWlnaHQoKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcG9wb3ZlckVsLmZpbmQoJ2J1dHRvbltkYXRhLWRpc21pc3M9XCJwb3BvdmVyXCJdJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLnBvcG92ZXIoJ2hpZGUnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICBwb3BvdmVyRWwuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGJ1dHRvbkRpbWVuc2lvbnMueCArIGJ1dHRvblBvc2l0aW9uLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IChidXR0b25EaW1lbnNpb25zLnkgLyAyICsgYnV0dG9uUG9zaXRpb24udG9wKSAtIHBvcG92ZXJEaW1lbnNpb25zLnkgLyAyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgcG9wb3ZlckVsLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBidXR0b25Qb3NpdGlvbi5sZWZ0IC0gcG9wb3ZlckRpbWVuc2lvbnMueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogKGJ1dHRvbkRpbWVuc2lvbnMueSAvIDIgKyBidXR0b25Qb3NpdGlvbi50b3ApIC0gcG9wb3ZlckRpbWVuc2lvbnMueSAvIDJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgICAgIHBvcG92ZXJFbC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogYnV0dG9uUG9zaXRpb24ubGVmdCArIChidXR0b25EaW1lbnNpb25zLnggLyAyIC0gcG9wb3ZlckRpbWVuc2lvbnMueCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBidXR0b25Qb3NpdGlvbi50b3AgLSBwb3BvdmVyRGltZW5zaW9ucy55XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICBwb3BvdmVyRWwuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGJ1dHRvblBvc2l0aW9uLmxlZnQgKyAoYnV0dG9uRGltZW5zaW9ucy54IC8gMiAtIHBvcG92ZXJEaW1lbnNpb25zLnggLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogYnV0dG9uUG9zaXRpb24udG9wICsgYnV0dG9uRGltZW5zaW9ucy55XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGVsZW1lbnQucG9wb3ZlcihvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4geyBjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczogdHJ1ZSB9O1xuXG4gICAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLmNoYXJ0ID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyIG5ld0NhbnZhcyA9ICQoJzxjYW52YXMvPicpLFxuICAgICAgZGF0YSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKSxcbiAgICAgIGN0eCA9IG5ld0NhbnZhc1swXS5nZXRDb250ZXh0KFwiMmRcIiksXG4gICAgICBjaGFydFR5cGUgPSBhbGxCaW5kaW5nc0FjY2Vzc29yKCkuY2hhcnRUeXBlLFxuICAgICAgb3B0aW9ucyA9IGFsbEJpbmRpbmdzQWNjZXNzb3IoKS5jaGFydE9wdGlvbnMgfHwge30sXG4gICAgICBjaGFydENvbnRleHQgPSBhbGxCaW5kaW5nc0FjY2Vzc29yKCkuY2hhcnRDb250ZXh0O1xuICAgICAgICAgICAgXG4gICAgICAgICQoZWxlbWVudCkuYXBwZW5kKG5ld0NhbnZhcyk7XG4gICAgICAgIHZhciBteUNoYXJ0ID0gbmV3IENoYXJ0KGN0eClbY2hhcnRUeXBlXShkYXRhLCBvcHRpb25zKTtcbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwgJ215Q2hhcnQnLCBteUNoYXJ0KTtcbiAgICAgICAgXG4gIC8vaGFuZGxlIGRpc3Bvc2FsIChpZiBLTyByZW1vdmVzIGJ5IHRoZSB0ZW1wbGF0ZSBiaW5kaW5nKVxuICBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBteUNoYXJ0ID0ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwgJ215Q2hhcnQnKTtcbiAgICBteUNoYXJ0LmNsZWFyKCk7XG4gICAgbXlDaGFydC5kZXN0cm95KCk7XG4gIH0pO1xuICAgICAgICBcbiAgaWYgKGNoYXJ0Q29udGV4dCkge1xuICAgIGNoYXJ0Q29udGV4dChjdHgpO1xuICB9XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyIG5ld0NhbnZhcyA9ICQoJzxjYW52YXMvPicpLndpZHRoKDczMCkuaGVpZ2h0KDM2NSksXG4gICAgICBkYXRhID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLFxuICAgICAgY3R4ID0gbmV3Q2FudmFzWzBdLmdldENvbnRleHQoXCIyZFwiKSxcbiAgICAgIGNoYXJ0VHlwZSA9IGFsbEJpbmRpbmdzQWNjZXNzb3IoKS5jaGFydFR5cGUsXG4gICAgICBvcHRpb25zID0gYWxsQmluZGluZ3NBY2Nlc3NvcigpLmNoYXJ0T3B0aW9ucyB8fCB7fSxcbiAgICAgIGNoYXJ0Q29udGV4dCA9IGFsbEJpbmRpbmdzQWNjZXNzb3IoKS5jaGFydENvbnRleHQsXG4gICAgICBteUNoYXJ0ID0ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwgJ215Q2hhcnQnKTtcbiAgICAgICAgXG4gIGlmIChteUNoYXJ0KSB7XG4gICAgbXlDaGFydC5jbGVhcigpO1xuICAgIG15Q2hhcnQuZGVzdHJveSgpO1xuICB9XG4gICAgICAgIGJpbmRpbmdDb250ZXh0LiRyb290LmRpc3BsYXlTaG9wKCk7XG4gICAgICAgIGJpbmRpbmdDb250ZXh0LiRyb290LnNpZGVWaWV3KCk7XG4gICAgICAgIGJpbmRpbmdDb250ZXh0LiRyb290LnNob3BEb2NrKCk7XG4gICAgICAgICQoZWxlbWVudCkuZW1wdHkoKTtcbiAgICAgICAgJChlbGVtZW50KS5hcHBlbmQobmV3Q2FudmFzKTtcbiAgaWYgKGRhdGEuZGF0YXNldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbXlDaGFydCA9IG5ldyBDaGFydChjdHgpW2NoYXJ0VHlwZV0oZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCAnbXlDaGFydCcsIG15Q2hhcnQpO1xuICB9XG4gIFxuICBpZiAoY2hhcnRDb250ZXh0KSB7XG4gICAgY2hhcnRDb250ZXh0KGN0eCk7XG4gIH1cbiAgICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnMuc3Bpbm5lciA9IHtcbiAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yKSB7XG4gICAgICAgIC8vaW5pdGlhbGl6ZSBkYXRlcGlja2VyIHdpdGggc29tZSBvcHRpb25hbCBvcHRpb25zXG4gICAgICAgIHZhciBvcHRpb25zID0gYWxsQmluZGluZ3NBY2Nlc3NvcigpLnNwaW5uZXJPcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmljb25zID0gb3B0aW9ucy5pY29ucyB8fCB7IGRvd246IFwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmlhbmdsZS1ib3R0b21cIiwgdXA6IFwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmlhbmdsZS10b3BcIiB9O1xuICAgICAgICAkKGVsZW1lbnQpLnNwaW5uZXIob3B0aW9ucyk7XG5cbiAgICAgICAgLy9oYW5kbGUgdGhlIGZpZWxkIGNoYW5naW5nXG4gICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwic3BpbmNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IHZhbHVlQWNjZXNzb3IoKTtcbiAgICAgICAgICAgIG9ic2VydmFibGUoJChlbGVtZW50KS5zcGlubmVyKFwidmFsdWVcIikpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2hhbmRsZSBkaXNwb3NhbCAoaWYgS08gcmVtb3ZlcyBieSB0aGUgdGVtcGxhdGUgYmluZGluZylcbiAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkuc3Bpbm5lcihcImRlc3Ryb3lcIik7XG4gICAgICAgIH0pO1xuXG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLFxuICAgICAgICAgICAgY3VycmVudCA9ICQoZWxlbWVudCkuc3Bpbm5lcihcInZhbHVlXCIpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5zcGlubmVyKFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLnNlY29uZFRhYiA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyICRyb290ID0gYmluZGluZ0NvbnRleHQuJHJvb3QsXG4gICAgICAgICAgICB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAga28uYXBwbHlCaW5kaW5nc1RvTm9kZShlbGVtZW50LCB7IGNzczogeydzZWNvbmQtdGFiJzogJHJvb3QuaXNTZWNvbmRUYWIodmFsdWUpICYmICRyb290LnNpZGVWaWV3KCl9IH0pO1xuICAgIH1cbn07XG5cbmtvLmJpbmRpbmdIYW5kbGVycy5ob3ZlclRhYiA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyICRyb290ID0gYmluZGluZ0NvbnRleHQuJHJvb3QsXG4gICAgICAgICAgICB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAgICAgIFxuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRyb290LmhpZ2hsaWdodFRhYih2YWx1ZSk7XG4gICAgICAgIH0pOyAgXG5cbiAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRyb290LnVuaGlnaGxpZ2h0VGFiKHZhbHVlKTtcbiAgICAgICAgfSk7ICAgICAgXG4gICAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLmhvdmVyUGFuZVN0eWxlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyICRyb290ID0gYmluZGluZ0NvbnRleHQuJHJvb3QsXG4gICAgICAgICAgICB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAga28uYXBwbHlCaW5kaW5nc1RvTm9kZShlbGVtZW50LCB7IHN0eWxlOiB7IG9wYWNpdHk6ICEoJHJvb3Quc2lkZVZpZXcoKSkgfHwgJHJvb3QuaGlnaGxpZ2h0ZWRUYWIoKSA9PSB2YWx1ZSB8fCAkcm9vdC5oaWdobGlnaHRlZFRhYigpID09ICcnID8gMSA6IC41IH0gfSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgdmFyICRyb290ID0gYmluZGluZ0NvbnRleHQuJHJvb3QsXG4gICAgICAgICAgICB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAga28uYXBwbHlCaW5kaW5nc1RvTm9kZShlbGVtZW50LCB7IHN0eWxlOiB7IG9wYWNpdHk6ICEoJHJvb3Quc2lkZVZpZXcoKSkgfHwgJHJvb3QuaGlnaGxpZ2h0ZWRUYWIoKSA9PSB2YWx1ZSB8fCAkcm9vdC5oaWdobGlnaHRlZFRhYigpID09ICcnID8gMSA6IC41IH0gfSk7XG4gICAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLmRpZmZTdHlsZSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5nc0FjY2Vzc29yLCB2aWV3TW9kZWwpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKGVsZW1lbnQsIHsgY3NzOiB7J2RpZmZQb3MnOiB2YWx1ZSA+IDAsICdkaWZmTmVnJzogdmFsdWUgPCAwfSB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAga28uYXBwbHlCaW5kaW5nc1RvTm9kZShlbGVtZW50LCB7IGNzczogeydkaWZmUG9zJzogdmFsdWUgPiAwLCAnZGlmZk5lZyc6IHZhbHVlIDwgMH0gfSk7XG4gICAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLmRpZmZDc3MgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKSxcbiAgICAgICAgICAgIHN0YXQgPSBhbGxCaW5kaW5nc0FjY2Vzc29yKCkuZGlmZkNzc1N0YXQ7XG4gICAgICAgIGlmIChzdGF0ID09ICdhdHRhY2tUaW1lJyB8fCBzdGF0ID09ICdiYXQnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKGVsZW1lbnQsIHsgY3NzOiB7J2RpZmZQb3MnOiB2YWx1ZSA+IDAsICdkaWZmTmVnJzogdmFsdWUgPCAwfSB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKSxcbiAgICAgICAgICAgIHN0YXQgPSBhbGxCaW5kaW5nc0FjY2Vzc29yKCkuZGlmZkNzc1N0YXQ7XG4gICAgICAgIGlmIChzdGF0ID09ICdhdHRhY2tUaW1lJyB8fCBzdGF0ID09ICdiYXQnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKGVsZW1lbnQsIHsgY3NzOiB7J2RpZmZQb3MnOiB2YWx1ZSA+IDAsICdkaWZmTmVnJzogdmFsdWUgPCAwfSB9KTtcbiAgICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnMuanFBdXRvID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzQWNjZXNzb3IsIHZpZXdNb2RlbCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHZhbHVlQWNjZXNzb3IoKSB8fCB7fSxcbiAgICAgICAgICAgIGFsbEJpbmRpbmdzID0gYWxsQmluZGluZ3NBY2Nlc3NvcigpLFxuICAgICAgICAgICAgdW53cmFwID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgIG1vZGVsVmFsdWUgPSBhbGxCaW5kaW5ncy5qcUF1dG9WYWx1ZSxcbiAgICAgICAgICAgIHNvdXJjZSA9IGFsbEJpbmRpbmdzLmpxQXV0b1NvdXJjZSxcbiAgICAgICAgICAgIHZhbHVlUHJvcCA9IGFsbEJpbmRpbmdzLmpxQXV0b1NvdXJjZVZhbHVlLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZVByb3AgPSBhbGxCaW5kaW5ncy5qcUF1dG9Tb3VyY2VJbnB1dFZhbHVlIHx8IHZhbHVlUHJvcCxcbiAgICAgICAgICAgIGxhYmVsUHJvcCA9IGFsbEJpbmRpbmdzLmpxQXV0b1NvdXJjZUxhYmVsIHx8IHZhbHVlUHJvcDtcblxuICAgICAgICAvL2Z1bmN0aW9uIHRoYXQgaXMgc2hhcmVkIGJ5IGJvdGggc2VsZWN0IGFuZCBjaGFuZ2UgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVWYWx1ZVRvTW9kZWwodmFsdWVUb1dyaXRlKSB7XG4gICAgICAgICAgICBpZiAoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICBtb2RlbFZhbHVlKHZhbHVlVG9Xcml0ZSApOyAgXG4gICAgICAgICAgICB9IGVsc2UgeyAgLy93cml0ZSB0byBub24tb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydfa29fcHJvcGVydHlfd3JpdGVycyddICYmIGFsbEJpbmRpbmdzWydfa29fcHJvcGVydHlfd3JpdGVycyddWydqcUF1dG9WYWx1ZSddKVxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQmluZGluZ3NbJ19rb19wcm9wZXJ0eV93cml0ZXJzJ11bJ2pxQXV0b1ZhbHVlJ10odmFsdWVUb1dyaXRlICk7ICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvL29uIGEgc2VsZWN0aW9uIHdyaXRlIHRoZSBwcm9wZXIgdmFsdWUgdG8gdGhlIG1vZGVsXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0ID0gZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICB3cml0ZVZhbHVlVG9Nb2RlbCh1aS5pdGVtID8gdWkuaXRlbS5hY3R1YWxWYWx1ZSA6IG51bGwpO1xuICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgIC8vb24gYSBjaGFuZ2UsIG1ha2Ugc3VyZSB0aGF0IGl0IGlzIGEgdmFsaWQgdmFsdWUgb3IgY2xlYXIgb3V0IHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICBvcHRpb25zLmNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICQoZWxlbWVudCkudmFsKCk7XG4gICAgICAgICAgICB2YXIgbWF0Y2hpbmdJdGVtID0gIGtvLnV0aWxzLmFycmF5Rmlyc3QodW53cmFwKHNvdXJjZSksIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgIHJldHVybiB1bndyYXAoaXRlbVtpbnB1dFZhbHVlUHJvcF0pID09PSBjdXJyZW50VmFsdWU7ICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIW1hdGNoaW5nSXRlbSkge1xuICAgICAgICAgICAgICAgd3JpdGVWYWx1ZVRvTW9kZWwobnVsbCk7XG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy9oYW5kbGUgdGhlIGNob2ljZXMgYmVpbmcgdXBkYXRlZCBpbiBhIERPLCB0byBkZWNvdXBsZSB2YWx1ZSB1cGRhdGVzIGZyb20gc291cmNlIChvcHRpb25zKSB1cGRhdGVzXG4gICAgICAgIHZhciBtYXBwZWRTb3VyY2UgPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG1hcHBlZCA9IGtvLnV0aWxzLmFycmF5TWFwKHVud3JhcChzb3VyY2UpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgICAgIHJlc3VsdC5sYWJlbCA9IGxhYmVsUHJvcCA/IHVud3JhcChpdGVtW2xhYmVsUHJvcF0pIDogdW53cmFwKGl0ZW0pLnRvU3RyaW5nKCk7ICAvL3Nob3cgaW4gcG9wLXVwIGNob2ljZXNcbiAgICAgICAgICAgICAgICByZXN1bHQudmFsdWUgPSBpbnB1dFZhbHVlUHJvcCA/IHVud3JhcChpdGVtW2lucHV0VmFsdWVQcm9wXSkgOiB1bndyYXAoaXRlbSkudG9TdHJpbmcoKTsgIC8vc2hvdyBpbiBpbnB1dCBib3hcbiAgICAgICAgICAgICAgICByZXN1bHQuYWN0dWFsVmFsdWUgPSB2YWx1ZVByb3AgPyB1bndyYXAoaXRlbVt2YWx1ZVByb3BdKSA6IGl0ZW07ICAvL3N0b3JlIGluIG1vZGVsXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1hcHBlZDsgICAgICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy93aGVuZXZlciB0aGUgaXRlbXMgdGhhdCBtYWtlIHVwIHRoZSBzb3VyY2UgYXJlIHVwZGF0ZWQsIG1ha2Ugc3VyZSB0aGF0IGF1dG9jb21wbGV0ZSBrbm93cyBpdFxuICAgICAgICBtYXBwZWRTb3VyY2Uuc3Vic2NyaWJlKGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICQoZWxlbWVudCkuYXV0b2NvbXBsZXRlKFwib3B0aW9uXCIsIFwic291cmNlXCIsIG5ld1ZhbHVlKTsgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgb3B0aW9ucy5zb3VyY2UgPSBtYXBwZWRTb3VyY2UoKTtcbiAgICAgICAgXG4gICAgICAgIG9wdGlvbnMubWluTGVuZ3RoID0gMTtcbiAgICAgICAgLy9pbml0aWFsaXplIGF1dG9jb21wbGV0ZVxuICAgICAgICAkKGVsZW1lbnQpLmF1dG9jb21wbGV0ZShvcHRpb25zKTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsKSB7XG4gICAgICAgLy91cGRhdGUgdmFsdWUgYmFzZWQgb24gYSBtb2RlbCBjaGFuZ2VcbiAgICAgICB2YXIgYWxsQmluZGluZ3MgPSBhbGxCaW5kaW5nc0FjY2Vzc29yKCksXG4gICAgICAgICAgIHVud3JhcCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUsXG4gICAgICAgICAgIG1vZGVsVmFsdWUgPSB1bndyYXAoYWxsQmluZGluZ3MuanFBdXRvVmFsdWUpIHx8ICcnLCBcbiAgICAgICAgICAgdmFsdWVQcm9wID0gYWxsQmluZGluZ3MuanFBdXRvU291cmNlVmFsdWUsXG4gICAgICAgICAgIGlucHV0VmFsdWVQcm9wID0gYWxsQmluZGluZ3MuanFBdXRvU291cmNlSW5wdXRWYWx1ZSB8fCB2YWx1ZVByb3A7XG4gICAgICAgIFxuICAgICAgIC8vaWYgd2UgYXJlIHdyaXRpbmcgYSBkaWZmZXJlbnQgcHJvcGVydHkgdG8gdGhlIGlucHV0IHRoYW4gd2UgYXJlIHdyaXRpbmcgdG8gdGhlIG1vZGVsLCB0aGVuIGxvY2F0ZSB0aGUgb2JqZWN0XG4gICAgICAgaWYgKHZhbHVlUHJvcCAmJiBpbnB1dFZhbHVlUHJvcCAhPT0gdmFsdWVQcm9wKSB7XG4gICAgICAgICAgIHZhciBzb3VyY2UgPSB1bndyYXAoYWxsQmluZGluZ3MuanFBdXRvU291cmNlKSB8fCBbXTtcbiAgICAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSBrby51dGlscy5hcnJheUZpcnN0KHNvdXJjZSwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdW53cmFwKGl0ZW1bdmFsdWVQcm9wXSkgPT09IG1vZGVsVmFsdWU7XG4gICAgICAgICAgIH0pIHx8IHt9OyAgLy9wcm9iYWJseSBkb24ndCBuZWVkIHRoZSB8fCB7fSwgYnV0IGp1c3QgcHJvdGVjdCBhZ2FpbnN0IGEgYmFkIHZhbHVlICAgICAgICAgIFxuICAgICAgIH0gXG5cbiAgICAgICAvL3VwZGF0ZSB0aGUgZWxlbWVudCB3aXRoIHRoZSB2YWx1ZSB0aGF0IHNob3VsZCBiZSBzaG93biBpbiB0aGUgaW5wdXRcbiAgICAgICAkKGVsZW1lbnQpLnZhbChtb2RlbFZhbHVlICYmIGlucHV0VmFsdWVQcm9wICE9PSB2YWx1ZVByb3AgPyB1bndyYXAobW9kZWxWYWx1ZVtpbnB1dFZhbHVlUHJvcF0pIDogbW9kZWxWYWx1ZS50b1N0cmluZygpKTsgICAgXG4gICAgfVxufTtcblxua28uYmluZGluZ0hhbmRsZXJzLmpxQXV0b0NvbWJvID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICB2YXIgYXV0b0VsID0gJChcIiNcIiArIHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgXG4gICAgICAgICQoZWxlbWVudCkuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIC8vIGNsb3NlIGlmIGFscmVhZHkgdmlzaWJsZVxuICAgICAgICAgICAgaWYgKGF1dG9FbC5hdXRvY29tcGxldGUoXCJ3aWRnZXRcIikuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgICAgICAgICAgIGF1dG9FbC5hdXRvY29tcGxldGUoIFwiY2xvc2VcIiApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAvL2F1dG9FbC5ibHVyKCk7XG4gICAgICAgICAgICBhdXRvRWwuYXV0b2NvbXBsZXRlKFwic2VhcmNoXCIsIFwiIFwiKTtcbiAgICAgICAgICAgIGF1dG9FbC5mb2N1cygpOyBcbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgfSAgXG59XG5cbm1vZHVsZS5leHBvcnRzID0ga287IiwidmFyIGtvID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2tvJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydrbyddIDogbnVsbCk7XG52YXIgbXkgPSByZXF1aXJlKFwiLi4vaGVyb2NhbGMvbWFpblwiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX2hlcm9fZGFtYWdlYW1wXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfYnVmZnMuYW1wbGlmaWNhdGlvbi5yZWR1Y3Rpb25cIik7XG5yZXF1aXJlKFwiLi9oZXJvY2FsY19idWlsZGV4cGxvcmVyXCIpO1xuXG5teS5wcm90b3R5cGUuSGVyb09wdGlvbjIgPSBmdW5jdGlvbiAoaGVybykge1xuICAgIHRoaXMuaGVyb05hbWUgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBoZXJvLnNlbGVjdGVkSGVybygpLmhlcm9OYW1lO1xuICAgIH0pO1xuICAgIHRoaXMuaGVyb0Rpc3BsYXlOYW1lID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaGVyby5zZWxlY3RlZEhlcm8oKS5oZXJvRGlzcGxheU5hbWU7XG4gICAgfSk7XG4gICAgdGhpcy5oZXJvID0gaGVybztcbn07XG5cbm15LnByb3RvdHlwZS5IZXJvQ2FsY3VsYXRvck1vZGVsID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5pbmRleCA9IGtvLm9ic2VydmFibGUoaCk7XG4gICAgc2VsZi5hdmFpbGFibGVIZXJvZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkobXkucHJvdG90eXBlLkhlcm9PcHRpb25zKTtcbiAgICBzZWxmLmF2YWlsYWJsZUhlcm9lcy5zb3J0KGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gbGVmdC5oZXJvRGlzcGxheU5hbWUgPT0gcmlnaHQuaGVyb0Rpc3BsYXlOYW1lID8gMCA6IChsZWZ0Lmhlcm9EaXNwbGF5TmFtZSA8IHJpZ2h0Lmhlcm9EaXNwbGF5TmFtZSA/IC0xIDogMSk7XG4gICAgfSk7XG4gICAgc2VsZi5zZWxlY3RlZEhlcm8gPSBrby5vYnNlcnZhYmxlKHNlbGYuYXZhaWxhYmxlSGVyb2VzKClbaF0pO1xuICAgIFxuICAgIG15LnByb3RvdHlwZS5IZXJvTW9kZWwuY2FsbCh0aGlzLCBzZWxmLnNlbGVjdGVkSGVybygpLmhlcm9OYW1lKTtcbiAgICBcbiAgICBzZWxmLnNlbGVjdGVkSGVyby5zdWJzY3JpYmUoZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIHNlbGYuaGVyb0lkKG5ld1ZhbHVlLmhlcm9OYW1lKTtcbiAgICB9KTtcbiAgICBcbiAgICBcbiAgICBzZWxmLmJvdW5kID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgc2VsZi5wbGF5ZXJDb2xvckNzcyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdwbGF5ZXItY29sb3ItJyArIHNlbGYuaW5kZXgoKTtcbiAgICB9KTtcbiAgICBzZWxmLmhlcm9PcHRpb24gPSBuZXcgbXkucHJvdG90eXBlLkhlcm9PcHRpb24yKHNlbGYpO1xuICAgIHNlbGYub3RoZXJIZXJvZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuYXZhaWxhYmxlQ29tcGFyZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYub3RoZXJIZXJvZXMoKS5tYXAoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHJldHVybiBvLmhlcm9PcHRpb247XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHNlbGYuc2VsZWN0ZWRDb21wYXJlID0ga28ub2JzZXJ2YWJsZSgpO1xuICAgIHNlbGYuc2VsZWN0ZWRDb21wYXJlLnN1YnNjcmliZShmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgc2VsZi5oZXJvQ29tcGFyZShuZXdWYWx1ZS5oZXJvKTtcbiAgICB9KTtcbiAgICBzZWxmLmVuZW1pZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuYXZhaWxhYmxlRW5lbWllcyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuZW5lbWllcygpLm1hcChmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgcmV0dXJuIG8uaGVyb09wdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgc2VsZi5zZWxlY3RlZEVuZW15ID0ga28ub2JzZXJ2YWJsZSgpO1xuICAgIHNlbGYuc2VsZWN0ZWRFbmVteS5zdWJzY3JpYmUoZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIHNlbGYuZW5lbXkobmV3VmFsdWUuaGVybyk7XG4gICAgfSk7XG4gICAgc2VsZi5zZXRIZXJvT3B0aW9uU3R5bGluZyA9IGZ1bmN0aW9uKG9wdGlvbiwgaXRlbSkge1xuICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlKG9wdGlvbiwge2NzczogaXRlbS5oZXJvLnBsYXllckNvbG9yQ3NzKCkgfSwgaXRlbSk7XG4gICAgfVxuICAgIHNlbGYuc2VjdGlvbkRpc3BsYXkgPSBrby5vYnNlcnZhYmxlKHtcbiAgICAgICAgJ2ludmVudG9yeSc6IGtvLm9ic2VydmFibGUodHJ1ZSksXG4gICAgICAgICdhYmlsaXR5Jzoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgJ2J1ZmYnOiBrby5vYnNlcnZhYmxlKHRydWUpLFxuICAgICAgICAnZGVidWZmJzoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgJ2RhbWFnZWFtcCc6IGtvLm9ic2VydmFibGUoZmFsc2UpLFxuICAgICAgICAnaWxsdXNpb24nOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgJ3NraWxsYnVpbGQnOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcbiAgICAgICAgJ3NraWxsYnVpbGQtc2tpbGxzJzoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgJ3NraWxsYnVpbGQtaXRlbXMnOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgfSk7XG4gICAgc2VsZi5zZWN0aW9uRGlzcGxheVRvZ2dsZSA9IGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgIHNlbGYuc2VjdGlvbkRpc3BsYXkoKVtzZWN0aW9uXSghc2VsZi5zZWN0aW9uRGlzcGxheSgpW3NlY3Rpb25dKCkpO1xuICAgIH1cbiAgICBzZWxmLnNob3dVbml0VGFiID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgc2VsZi5zaG93RGlmZiA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHNlbGYuc2hvd0NyaXRpY2FsU3RyaWtlRGV0YWlscyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHNlbGYuc2hvd0RhbWFnZURldGFpbHMgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICBzZWxmLnNob3dTdGF0RGV0YWlscyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHNlbGYuc2hvd0RhbWFnZUFtcENhbGNEZXRhaWxzID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgXG4gICAgc2VsZi5kYW1hZ2VBbXBsaWZpY2F0aW9uID0gbmV3IG15LnByb3RvdHlwZS5EYW1hZ2VBbXBWaWV3TW9kZWwoKTtcbiAgICBzZWxmLmRhbWFnZVJlZHVjdGlvbiA9IG5ldyBteS5wcm90b3R5cGUuRGFtYWdlQW1wVmlld01vZGVsKCk7XG4gICAgc2VsZi5idWlsZEV4cGxvcmVyID0gbmV3IG15LnByb3RvdHlwZS5CdWlsZEV4cGxvcmVyVmlld01vZGVsKHNlbGYpO1xuICAgIG15LnByb3RvdHlwZS5IZXJvRGFtYWdlQW1wTWl4aW4oc2VsZik7XG59XG5teS5wcm90b3R5cGUuSGVyb0NhbGN1bGF0b3JNb2RlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG15LnByb3RvdHlwZS5IZXJvTW9kZWwucHJvdG90eXBlKTtcbm15LnByb3RvdHlwZS5IZXJvQ2FsY3VsYXRvck1vZGVsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG15LnByb3RvdHlwZS5IZXJvQ2FsY3VsYXRvck1vZGVsOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xucmVxdWlyZSgnanF1ZXJ5LXVpJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3ZlcnNpb24nKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvd2lkZ2V0Jyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3VuaXF1ZS1pZCcpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9zYWZlLWFjdGl2ZS1lbGVtZW50Jyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL2tleWNvZGUnKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvcG9zaXRpb24nKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvZm9jdXNhYmxlJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3RhYmJhYmxlJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3BsdWdpbicpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9pZScpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9kYXRhJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3Njcm9sbC1wYXJlbnQnKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvZGlzYWJsZS1zZWxlY3Rpb24nKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvc2FmZS1ibHVyJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3dpZGdldHMvYnV0dG9uJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3dpZGdldHMvc3Bpbm5lcicpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL21lbnUnKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvd2lkZ2V0cy9hdXRvY29tcGxldGUnKTtcbnJlcXVpcmUoJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvd2lkZ2V0cy9tb3VzZScpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL2RyYWdnYWJsZScpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL3Jlc2l6YWJsZScpO1xucmVxdWlyZSgnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL2RpYWxvZycpO1xuXG52YXIgcHJvdG8gPSAkLnVpLmF1dG9jb21wbGV0ZS5wcm90b3R5cGUsXG4gICAgaW5pdFNvdXJjZSA9IHByb3RvLl9pbml0U291cmNlO1xuXG5mdW5jdGlvbiBmaWx0ZXIoIGFycmF5LCB0ZXJtICkge1xuICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCggJC51aS5hdXRvY29tcGxldGUuZXNjYXBlUmVnZXgodGVybSksIFwiaVwiICk7XG4gICAgcmV0dXJuICQuZ3JlcCggYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVyLnRlc3QoICQoIFwiPGRpdj5cIiApLmh0bWwoIHZhbHVlLmxhYmVsIHx8IHZhbHVlLnZhbHVlIHx8IHZhbHVlICkudGV4dCgpICk7XG4gICAgfSk7XG59XG5cbiQuZXh0ZW5kKCBwcm90bywge1xuICAgIF9pbml0U291cmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuaHRtbCAmJiAkLmlzQXJyYXkodGhpcy5vcHRpb25zLnNvdXJjZSkgKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IGZ1bmN0aW9uKCByZXF1ZXN0LCByZXNwb25zZSApIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSggZmlsdGVyKCB0aGlzLm9wdGlvbnMuc291cmNlLCByZXF1ZXN0LnRlcm0gKSApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluaXRTb3VyY2UuY2FsbCggdGhpcyApO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9yZW5kZXJJdGVtOiBmdW5jdGlvbiggdWwsIGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICQoIFwiPGxpPjwvbGk+XCIgKVxuICAgICAgICAgICAgLmRhdGEoIFwiaXRlbS5hdXRvY29tcGxldGVcIiwgaXRlbSApXG4gICAgICAgICAgICAuYXBwZW5kKCAkKCBcIjxhPjwvYT5cIiApWyB0aGlzLm9wdGlvbnMuaHRtbCA/IFwiaHRtbFwiIDogXCJ0ZXh0XCIgXSggaXRlbS5sYWJlbCApIClcbiAgICAgICAgICAgIC5hcHBlbmRUbyggdWwgKTtcbiAgICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIga28gPSByZXF1aXJlKCcuL2hlcm9jYWxjX2tub2Nrb3V0Jyk7XG52YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcbmdsb2JhbC5qUXVlcnkgPSAkO1xucmVxdWlyZSgnYm9vdHN0cmFwJyk7XG5yZXF1aXJlKCcuL2pxdWVyeS11aS5jdXN0b20nKTtcbnJlcXVpcmUoJy4uL2xpYi9DaGFydC5taW4nKTtcbnJlcXVpcmUoJy4uL2xpYi9DaGFydC5zY2F0dGVyJyk7XG5cbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2hlcm8tcGFuZScsIHsgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiPlxcbiAgICAgICAgPGltZyBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGVyby1pbWFnZVxcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOntzcmM6ICcvbWVkaWEvaW1hZ2VzL2hlcm9lcy8nICsgc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWUgKyAnLnBuZyd9XFxcIi8+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtOVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3cgZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJoZXJvc2VsZWN0XFxcIj5IZXJvPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwiaGVyb3NlbGVjdFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJvcHRpb25zOiBhdmFpbGFibGVIZXJvZXMgLCBvcHRpb25zVGV4dDogJ2hlcm9EaXNwbGF5TmFtZScsIHZhbHVlOiBzZWxlY3RlZEhlcm9cXFwiPjwvc2VsZWN0PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiaGVyb2xldmVsXFxcIj5MZXZlbDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgIDxpbnB1dCBpZD1cXFwiaGVyb2xldmVsXFxcIiBkYXRhLWJpbmQ9XFxcInNwaW5uZXI6IHNlbGVjdGVkSGVyb0xldmVsLCBzcGlubmVyT3B0aW9uczogeyBtaW46IDEsIG1heDogMjUgfVxcXCI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJlbmVteXNlbGVjdFxcXCI+RW5lbXk8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVxcXCJlbmVteXNlbGVjdFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IGVuZW15KCkucGxheWVyQ29sb3JDc3MsIG9wdGlvbnM6IGF2YWlsYWJsZUVuZW1pZXMgLCBvcHRpb25zVGV4dDogJ2hlcm9EaXNwbGF5TmFtZScsIHZhbHVlOiBzZWxlY3RlZEVuZW15LCBvcHRpb25zQWZ0ZXJSZW5kZXI6IHNldEhlcm9PcHRpb25TdHlsaW5nXFxcIj48L3NlbGVjdD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImVuZW15c2VsZWN0XFxcIj5Db21wYXJlIHRvPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwiZW5lbXlzZWxlY3RcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiBoZXJvQ29tcGFyZSgpLnBsYXllckNvbG9yQ3NzLCBvcHRpb25zOiBhdmFpbGFibGVDb21wYXJlICwgb3B0aW9uc1RleHQ6ICdoZXJvRGlzcGxheU5hbWUnLCB2YWx1ZTogc2VsZWN0ZWRDb21wYXJlLCBvcHRpb25zQWZ0ZXJSZW5kZXI6IHNldEhlcm9PcHRpb25TdHlsaW5nXFxcIj48L3NlbGVjdD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTIgY2hlY2tib3hcXFwiIHN0eWxlPVxcXCJtYXJnaW4tYm90dG9tOjBweDtwYWRkaW5nLWxlZnQ6MzRweDtcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHJvb3QubGF5b3V0KCkgPT0gMFxcXCI+XFxuICAgICAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIHN0eWxlPVxcXCJmbG9hdDpub25lO21hcmdpbi1yaWdodDo1cHg7XFxcIiBkYXRhLWJpbmQ9XFxcImNoZWNrZWQ6IHNob3dEaWZmXFxcIj48c3BhbiBzdHlsZT1cXFwiZm9udC1zaXplOjEycHhcXFwiPlNob3cgPGFiYnIgdGl0bGU9XFxcIlRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGFkamFjZW50IGhlcm8gdGFicyBzaG93biBuZXh0IHRvIGVhY2ggc3RhdC5cXFwiPmRlbHRhIHZhbHVlczwvYWJicj4uIDxzcGFuIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2hvd0RpZmZcXFwiPkNvbXBhcmluZyBsZXZlbCA8c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IHNlbGVjdGVkSGVyb0xldmVsXFxcIj48L3NwYW4+IDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogaGVyb0RhdGEoKS5kaXNwbGF5bmFtZSwgY3NzOiBwbGF5ZXJDb2xvckNzc1xcXCI+PC9zcGFuPiB0byBsZXZlbCA8c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9Db21wYXJlKCkuc2VsZWN0ZWRIZXJvTGV2ZWxcXFwiPjwvc3Bhbj4gPHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBoZXJvQ29tcGFyZSgpLmhlcm9EYXRhKCkuZGlzcGxheW5hbWUsIGNzczogaGVyb0NvbXBhcmUoKS5wbGF5ZXJDb2xvckNzc1xcXCI+PC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGFiZWw+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT1cXFwibWFyZ2luLWxlZnQ6MjVweDtmb250LXNpemU6MTJweDtcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgc3R5bGU9XFxcImZsb2F0Om5vbmU7bWFyZ2luLXJpZ2h0OjVweDtcXFwiIGRhdGEtYmluZD1cXFwiY2hlY2tlZDogc2hvd1VuaXRUYWJcXFwiPlNob3cgdW5pdCB0YWI8L2xhYmVsPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtNCc6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMTInOiAkcm9vdC5sYXlvdXQoKSA9PSAxfVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5TdGF0cyA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNob3dTdGF0RGV0YWlscywgdGV4dDogIXNob3dTdGF0RGV0YWlscygpID8gJ1Nob3cgbW9yZScgOiAnU2hvdyBsZXNzJywgYXR0cjoge3RpdGxlOiAhc2hvd1N0YXREZXRhaWxzKCkgPyAnQ2xpY2sgdG8gc2hvdyBiYXNlIHN0YXRzJyA6ICdDbGljayB0byBoaWRlIGJhc2Ugc3RhdHMnfVxcXCI+PC9hPlxcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVxcXCJtYXJnaW4tbGVmdDoxNXB4O2Rpc3BsYXk6aW5saW5lO1xcXCIgZGF0YS1iaW5kPVxcXCJzdHlsZTogeydkaXNwbGF5JzogJHJvb3QubGF5b3V0KCkgPT0gMSA/ICdpbmxpbmUnIDogJ25vbmUnfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBzdHlsZT1cXFwiZmxvYXQ6bm9uZTttYXJnaW4tcmlnaHQ6NXB4O1xcXCIgZGF0YS1iaW5kPVxcXCJjaGVja2VkOiBzaG93RGlmZlxcXCI+PHNwYW4gc3R5bGU9XFxcImZvbnQtc2l6ZToxMnB4XFxcIj5TaG93IDxhYmJyIHRpdGxlPVxcXCJUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBhZGphY2VudCBoZXJvIHRhYnMgc2hvd24gbmV4dCB0byBlYWNoIHN0YXQuXFxcIj5kZWx0YSB2YWx1ZXM8L2FiYnI+LiA8c3BhbiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHNob3dEaWZmXFxcIj5Db21wYXJpbmcgbGV2ZWwgPHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBzZWxlY3RlZEhlcm9MZXZlbFxcXCI+PC9zcGFuPiA8c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9EYXRhKCkuZGlzcGxheW5hbWUsIGNzczogcGxheWVyQ29sb3JDc3NcXFwiPjwvc3Bhbj4gdG8gbGV2ZWwgPHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBoZXJvQ29tcGFyZSgpLnNlbGVjdGVkSGVyb0xldmVsXFxcIj48L3NwYW4+IDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogaGVyb0NvbXBhcmUoKS5oZXJvRGF0YSgpLmRpc3BsYXluYW1lLCBjc3M6IGhlcm9Db21wYXJlKCkucGxheWVyQ29sb3JDc3NcXFwiPjwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHN0eWxlPVxcXCJtYXJnaW4tbGVmdDoyNXB4O2ZvbnQtc2l6ZToxMnB4O1xcXCI+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBzdHlsZT1cXFwiZmxvYXQ6bm9uZTttYXJnaW4tcmlnaHQ6NXB4O1xcXCIgZGF0YS1iaW5kPVxcXCJjaGVja2VkOiBzaG93VW5pdFRhYlxcXCI+U2hvdyB1bml0IHRhYjwvbGFiZWw+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvaDM+XFxuXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHNob3dTdGF0RGV0YWlscygpLCBjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX0sIGNvbXBvbmVudDoge25hbWU6ICdzdGF0cy1hZGRpdGlvbmFsJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInN0YXRzY29udGFpbmVyXFxcIiBkYXRhLWJpbmQ9XFxcImZvcmVhY2g6ICRyb290LmFsbEl0ZW1zXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAkZGF0YS52YWx1ZSwgcGFyYW1zOiAkcGFyZW50Q29udGV4dC4kZGF0YX1cXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtOFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTgnOiAkcm9vdC5sYXlvdXQoKSA9PSAwLCAnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnZGFtYWdlLWRldGFpbHMnLCBwYXJhbXM6ICRkYXRhfVxcXCI+PC9kaXY+XFxuICAgIFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiIGRhdGEtYmluZD1cXFwiaXRlbUJ1aWxkVGFibGU6ICRkYXRhLmJ1aWxkRXhwbG9yZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XFxcInNlY3Rpb25faGVhZGVyXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogc2VjdGlvbkRpc3BsYXkoKS5pbnZlbnRvcnksIGNzczogeyBzZWN0aW9uX2Rpc2FibGVkOiAhc2VjdGlvbkRpc3BsYXkoKS5pbnZlbnRvcnkoKSB9XFxcIj5JbnZlbnRvcnkgPHNtYWxsIHN0eWxlPVxcXCJjb2xvcjpnb2xkZW5yb2RcXFwiIGRhdGEtYmluZD1cXFwiaHRtbDogaW52ZW50b3J5LnRvdGFsQ29zdCgpID8gJzxpbWcgc3JjPVxcXFwnaHR0cDovL2Nkbi5kb3RhMi5jb20vYXBwcy9kb3RhMi9pbWFnZXMvdG9vbHRpcHMvZ29sZC5wbmdcXFxcJy8+ICcgKyBpbnZlbnRvcnkudG90YWxDb3N0KCkgOiAnJyBcXFwiPjwvc21hbGw+PC9oMz5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiaW52ZW50b3J5XFxcIiBjbGFzcz1cXFwiaW52ZW50b3J5IGhvdmVyLWN1cnNvclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7IGJ1aWxkRXhwbG9yZXIuc2VsZWN0SW52ZW50b3J5KC0xKTsgfSwgY3NzOiB7J3Jvdy1oaWdobGlnaHQnOiBzZWxlY3RlZEludmVudG9yeSgpID09IC0xfSwgdGVtcGxhdGU6IHsgbmFtZTogJ2l0ZW0tdGVtcGxhdGUnLCBmb3JlYWNoOiBpbnZlbnRvcnkuaXRlbXMgfSwgdmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5pbnZlbnRvcnkoKVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XFxcInNlY3Rpb25faGVhZGVyXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogc2VjdGlvbkRpc3BsYXkoKS5hYmlsaXR5LCBjc3M6IHsgc2VjdGlvbl9kaXNhYmxlZDogIXNlY3Rpb25EaXNwbGF5KCkuYWJpbGl0eSgpIH1cXFwiPkFiaWxpdGllcyA8c21hbGwgc3R5bGU9XFxcImNvbG9yOmluaGVyaXRcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogYXZhaWxhYmxlU2tpbGxQb2ludHMoKSA/IChhdmFpbGFibGVTa2lsbFBvaW50cygpID09IDEgPyAnMSB1bnNwZW50IHNraWxscG9pbnQnIDogYXZhaWxhYmxlU2tpbGxQb2ludHMoKSArICcgdW5zcGVudCBza2lsbHBvaW50cycpIDogJydcXFwiPjwvc21hbGw+PC9oMz5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHNlY3Rpb25EaXNwbGF5KCkuYWJpbGl0eSgpLCBmb3JlYWNoOiBhYmlsaXR5KCkuYWJpbGl0aWVzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ2FiaWxpdHknLCBwYXJhbXM6ICRkYXRhIH1cXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsXFxcIiBkYXRhLWJpbmQ9XFxcImlmOiBzZWxlY3RlZEhlcm8oKS5oZXJvTmFtZSA9PSAnc2lsZW5jZXInLCB2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmFiaWxpdHkoKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTIgY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJpbnRlbGxpZ2VuY2VzdG9sZW5cXFwiPkludGVsbGlnZW5jZSBTdG9sZW48L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJpbnRlbGxpZ2VuY2VzdG9sZW5cXFwiIGRhdGEtYmluZD1cXFwidmFsdWU6IGludFN0b2xlblxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ2J1ZmYtc2VjdGlvbicsIHBhcmFtczogJGRhdGF9XFxcIj48L2Rpdj5cXG4gICAgICAgIFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnZGFtYWdlLWFtcCcsIHBhcmFtczogJGRhdGF9XFxcIj48L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVxcXCJzZWN0aW9uX2hlYWRlclxcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNlY3Rpb25EaXNwbGF5KCkuaWxsdXNpb24sIGNzczogeyBzZWN0aW9uX2Rpc2FibGVkOiAhc2VjdGlvbkRpc3BsYXkoKS5pbGx1c2lvbigpIH1cXFwiPklsbHVzaW9uczwvaDM+XFxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmlsbHVzaW9uKCksIGxhenlCaW5kaW5nOiBzZWN0aW9uRGlzcGxheSgpLmlsbHVzaW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxoNCBzdHlsZT1cXFwiY29sb3I6cmVkXFxcIj5VbmRlciBDb25zdHJ1Y3Rpb248L2g0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImlsbHVzaW9uU2VsZWN0XFxcIj5UeXBlPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVxcXCJpbGx1c2lvblNlbGVjdFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJvcHRpb25zOiBhdmFpbGFibGVJbGx1c2lvbnMgLCBvcHRpb25zVGV4dDogJ2lsbHVzaW9uRGlzcGxheU5hbWUnLCB2YWx1ZTogc2VsZWN0ZWRJbGx1c2lvblxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0yIGNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImlsbHVzaW9uYWJpbGl0eWxldmVsXFxcIj5BYmlsaXR5IExldmVsPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVxcXCJpbGx1c2lvbmFiaWxpdHlsZXZlbFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJ2YWx1ZTogaWxsdXNpb25BYmlsaXR5TGV2ZWwsIGZvcmVhY2g6IG5ldyBBcnJheShpbGx1c2lvbkFiaWxpdHlNYXhMZXZlbCgpKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkaW5kZXgoKSsxXFxcIj48L29wdGlvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtb2Zmc2V0LTIgY29sLW1kLTEwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogYWRkSWxsdXNpb25cXFwiPkFkZCBJbGx1c2lvbjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcInNlY3Rpb25faGVhZGVyXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogc2VjdGlvbkRpc3BsYXkoKS5za2lsbGJ1aWxkLCBjc3M6IHsgc2VjdGlvbl9kaXNhYmxlZDogIXNlY3Rpb25EaXNwbGF5KCkuc2tpbGxidWlsZCgpIH1cXFwiPkJ1aWxkIEV4cGxvcmVyPC9oMz5cXG4gICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLnNraWxsYnVpbGQoKSwgYXR0cjoge2lkOiAnc2VjdGlvbi1idWlsZC1leHBsb3Jlci0nICsgaW5kZXgoKSB9LCBsYXp5QmluZGluZzogc2VjdGlvbkRpc3BsYXkoKS5za2lsbGJ1aWxkXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZWN0aW9uLWNvbnRlbnRcXFwiPiAgICBcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cXFwic2VjdGlvbl9oZWFkZXJcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBzZWN0aW9uRGlzcGxheSgpWydza2lsbGJ1aWxkLXNraWxscyddLCBjc3M6IHsgc2VjdGlvbl9kaXNhYmxlZDogIXNlY3Rpb25EaXNwbGF5KClbJ3NraWxsYnVpbGQtc2tpbGxzJ10oKSB9XFxcIj5Ta2lsbCBCdWlsZCA8c21hbGwgc3R5bGU9XFxcImNvbG9yOmluaGVyaXRcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogYnVpbGRFeHBsb3Jlci5hdmFpbGFibGVTa2lsbEJ1aWxkUG9pbnRzKCkgPyAoYnVpbGRFeHBsb3Jlci5hdmFpbGFibGVTa2lsbEJ1aWxkUG9pbnRzKCkgPT0gMSA/ICcxIHVuc3BlbnQgc2tpbGxwb2ludCcgOiBidWlsZEV4cGxvcmVyLmF2YWlsYWJsZVNraWxsQnVpbGRQb2ludHMoKSArICcgdW5zcGVudCBza2lsbHBvaW50cycpIDogJydcXFwiPjwvc21hbGw+PC9oND5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKVsnc2tpbGxidWlsZC1za2lsbHMnXVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgZGF0YS1iaW5kPVxcXCJ0ZW1wbGF0ZTogeyBuYW1lOiAnYWJpbGl0eS0zLXRlbXBsYXRlJywgZm9yZWFjaDogYWJpbGl0eSgpLmFiaWxpdGllcyB9XFxcIj48L3Rib2R5PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogYnVpbGRFeHBsb3Jlci5yZXNldFNraWxsQnVpbGRcXFwiPkNsZWFyPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XFxcInNlY3Rpb25faGVhZGVyXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogc2VjdGlvbkRpc3BsYXkoKVsnc2tpbGxidWlsZC1pdGVtcyddLCBjc3M6IHsgc2VjdGlvbl9kaXNhYmxlZDogIXNlY3Rpb25EaXNwbGF5KClbJ3NraWxsYnVpbGQtaXRlbXMnXSgpIH1cXFwiPkl0ZW0gQnVpbGQ8L2g0PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHNlY3Rpb25EaXNwbGF5KClbJ3NraWxsYnVpbGQtaXRlbXMnXVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TGV2ZWw8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPkludmVudG9yeTwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgZGF0YS1iaW5kPVxcXCJmb3JlYWNoOiBuZXcgQXJyYXkoMjUpLCBpdGVtQnVpbGRUYWJsZTogYnVpbGRFeHBsb3JlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcImhvdmVyLWN1cnNvclxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsncm93LWhpZ2hsaWdodCc6ICRwYXJlbnQuc2VsZWN0ZWRJbnZlbnRvcnkoKSA9PSAkaW5kZXgoKX1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwiY2Fycnktb3ZlclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5zZWxlY3RJbnZlbnRvcnkoJGluZGV4KCkpOyB9XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBkYXRhLWJpbmQ9XFxcInRleHQ6ICgkaW5kZXgoKSArIDEpXFxcIj48L3N0cm9uZz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgZ2x5cGhpY29uXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRpbmRleCgpID4gMCwgdG9nZ2xlOiAkcGFyZW50LmJ1aWxkRXhwbG9yZXIuaXRlbUJ1aWxkKClbJGluZGV4KCldLmNhcnJ5T3ZlciwgcHJldmVudEJ1YmJsZTogJ2NsaWNrJywgY3NzOiB7ICdnbHlwaGljb24tYXJyb3ctZG93bic6ICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5pdGVtQnVpbGQoKVskaW5kZXgoKV0uY2FycnlPdmVyKCksICdnbHlwaGljb24tc3RvcCc6ICEkcGFyZW50LmJ1aWxkRXhwbG9yZXIuaXRlbUJ1aWxkKClbJGluZGV4KCldLmNhcnJ5T3ZlcigpIH1cXFwiIHRpdGxlPVxcXCJDYXJyeSBvdmVyIGl0ZW1zIHRvIG5leHQgbGV2ZWwncyBpbnZlbnRvcnlcXFwiPjwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwiY29sLW1kLTEwXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5idWlsZEV4cGxvcmVyLnNlbGVjdEludmVudG9yeSgkaW5kZXgoKSk7IH1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtQnVpbGQtaW52ZW50b3J5XFxcIiBkYXRhLWJpbmQ9XFxcInRlbXBsYXRlOiB7IG5hbWU6ICdpdGVtQnVpbGQtaXRlbS10ZW1wbGF0ZScsIGZvcmVhY2g6ICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5pdGVtQnVpbGQoKVskaW5kZXgoKV0uaXRlbXMgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5idWlsZEV4cGxvcmVyLmNvcHlJbnZlbnRvcnlUb0NsaXBCb2FyZCgkaW5kZXgoKSk7IH1cXFwiIHRpdGxlPVxcXCJDb3B5IGl0ZW1zXFxcIj5Db3B5PC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5wYXN0ZUludmVudG9yeUZyb21DbGlwQm9hcmQoJGluZGV4KCkpOyB9XFxcIiB0aXRsZT1cXFwiUGFzdGUgaXRlbXNcXFwiPlBhc3RlPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5yZXNldEl0ZW1CdWlsZCgkaW5kZXgoKSk7IH1cXFwiIHRpdGxlPVxcXCJDbGVhciBpbnZlbnRvcnlcXFwiPkNsZWFyPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogYnVpbGRFeHBsb3Jlci5yZXNldEFsbEl0ZW1CdWlsZHNcXFwiPkNsZWFyPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkRhdGEgc2V0IGhlYWRlciBsYWJlbDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJ2YWx1ZTogYnVpbGRFeHBsb3Jlci5ncmFwaERhdGFIZWFkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+RGF0YSBzZXQgZGVzY3JpcHRpb248L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtYmluZD1cXFwidmFsdWU6IGJ1aWxkRXhwbG9yZXIuZ3JhcGhEYXRhRGVzY3JpcHRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGJ1aWxkRXhwbG9yZXIuZ3JhcGhcXFwiPkFkZCBkYXRhIHNldDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+SGVybyBQcm9wZXJ0eTwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtYmluZD1cXFwib3B0aW9uczogYnVpbGRFeHBsb3Jlci5ncmFwaFByb3BlcnRpZXMsIG9wdGlvbnNUZXh0OiAnbGFiZWwnLCBvcHRpb25zVmFsdWU6ICdpZCcsIHZhbHVlOiBidWlsZEV4cGxvcmVyLnNlbGVjdGVkR3JhcGhQcm9wZXJ0eVxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8IS0tIGtvIGlmOiBidWlsZEV4cGxvcmVyLmdyYXBoRGF0YSgpLmxlbmd0aCA+IDAgLS0+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIGRhdGEtYmluZD1cXFwiY2hhcnQ6IGJ1aWxkRXhwbG9yZXIuZ3JhcGhDaGFydERhdGEsIGNoYXJ0VHlwZTogJ1NjYXR0ZXInLCBjaGFydE9wdGlvbnM6IGJ1aWxkRXhwbG9yZXIuZ3JhcGhDaGFydE9wdGlvbnMoKSwgY2hhcnRDb250ZXh0OiBidWlsZEV4cGxvcmVyLmdyYXBoQ2hhcnRDb250ZXh0XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBidWlsZEV4cGxvcmVyLmV4cG9ydEltYWdlXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1leHBvcnRcXFwiPjwvc3Bhbj4gRXhwb3J0IEltYWdlPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogYnVpbGRFeHBsb3Jlci5zaG93R3JhcGhJdGVtQnVpbGRSb3dzLCBjc3M6IHsndG9nZ2xlZCc6IGJ1aWxkRXhwbG9yZXIuc2hvd0dyYXBoSXRlbUJ1aWxkUm93c31cXFwiPlNob3cgaXRlbSBidWlsZCByb3dzPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHNcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBidWlsZEV4cGxvcmVyLnNob3dHcmFwaFNraWxsQnVpbGRDb2x1bW5zLCBjc3M6IHsndG9nZ2xlZCc6IGJ1aWxkRXhwbG9yZXIuc2hvd0dyYXBoU2tpbGxCdWlsZENvbHVtbnN9XFxcIj5TaG93IHNraWxsIGJ1aWxkIGNvbHVtbnM8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSBidWlsZC10YWJsZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XFxcInJpZ2h0LWJvcmRlclxcXCI+TGV2ZWw8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIGtvIGZvcmVhY2g6IGJ1aWxkRXhwbG9yZXIuZ3JhcGhEYXRhIC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeyAncmlnaHQtYm9yZGVyJzogISRwYXJlbnQuYnVpbGRFeHBsb3Jlci5zaG93R3JhcGhTa2lsbEJ1aWxkQ29sdW1ucygpIHx8ICEkZGF0YS52aXNpYmxlKCkgfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWJpbmQ9XFxcImNzczogeyAndG9vbHRpcC11bmRlcmxpbmUnOiAkZGF0YS5kZXNjcmlwdGlvbiB9LCB0b29sdGlwOiB7dGl0bGU6ICRkYXRhLmRlc2NyaXB0aW9uLCBwbGFjZW1lbnQ6ICdib3R0b20nfSwgdmlzaWJsZTogJGRhdGEudmlzaWJsZSgpLCB0ZXh0OiAkZGF0YS5oZWFkZXIsIHN0eWxlOiB7IGNvbG9yOiAkcGFyZW50LmJ1aWxkRXhwbG9yZXIuZ3JhcGhEaXN0aW5jdENvbG9yKCRwYXJlbnQuYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKS5sZW5ndGgsICRpbmRleCgpLCAxKSB9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYnRuIGJ0bi14cyBnbHlwaGljb24gZ2x5cGhpY29uLWluZm8tc2lnblxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiAkZGF0YS52aXNpYmxlKCksIHBvcG92ZXI6IHt0ZW1wbGF0ZTogJ3BvcG92ZXItZ3JhcGhEYXRhLXRlbXBsYXRlJywgZGF0YTogJGRhdGEsIG9wdGlvbnM6IHt9IH1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgc2hvcC1idXR0b24gZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcHVsbC1yaWdodFxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICEkcGFyZW50LmJ1aWxkRXhwbG9yZXIuc2hvd0dyYXBoU2tpbGxCdWlsZENvbHVtbnMoKSB8fCAhJGRhdGEudmlzaWJsZSgpLCBjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5idWlsZEV4cGxvcmVyLnJlbW92ZUdyYXBoRGF0YVNldCgkZGF0YSk7IH1cXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14cyBzaG9wLWJ1dHRvbiBnbHlwaGljb24gcHVsbC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiAhJHBhcmVudC5idWlsZEV4cGxvcmVyLnNob3dHcmFwaFNraWxsQnVpbGRDb2x1bW5zKCkgfHwgISRkYXRhLnZpc2libGUoKSwgdG9nZ2xlOiAkZGF0YS52aXNpYmxlLCBjc3M6IHsgJ2dseXBoaWNvbi1taW51cyc6ICRkYXRhLnZpc2libGUoKSwgJ2dseXBoaWNvbi1wbHVzJzogISRkYXRhLnZpc2libGUoKX1cXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XFxcInRleHQtbGVmdCByaWdodC1ib3JkZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJGRhdGEudmlzaWJsZSgpICYmICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5zaG93R3JhcGhTa2lsbEJ1aWxkQ29sdW1ucygpXFxcIj48YWJiciB0aXRsZT1cXFwiUS1XLUUtUi1TdGF0c1xcXCI+U2tpbGwgQnVpbGQ8L2FiYnI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzIHNob3AtYnV0dG9uIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHRcXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiAkcGFyZW50LmJ1aWxkRXhwbG9yZXIuc2hvd0dyYXBoU2tpbGxCdWlsZENvbHVtbnMoKSwgY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuYnVpbGRFeHBsb3Jlci5yZW1vdmVHcmFwaERhdGFTZXQoJGRhdGEpOyB9XFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgc2hvcC1idXR0b24gZ2x5cGhpY29uIHB1bGwtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudC5idWlsZEV4cGxvcmVyLnNob3dHcmFwaFNraWxsQnVpbGRDb2x1bW5zKCksIHRvZ2dsZTogJGRhdGEudmlzaWJsZSwgY3NzOiB7ICdnbHlwaGljb24tbWludXMnOiAkZGF0YS52aXNpYmxlKCksICdnbHlwaGljb24tcGx1cyc6ICEkZGF0YS52aXNpYmxlKCl9XFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAva28gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkgZGF0YS1iaW5kPVxcXCJmb3JlYWNoOiBuZXcgQXJyYXkoYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKVswXS5kYXRhLmxlbmd0aClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJyaWdodC1ib3JkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBkYXRhLWJpbmQ9XFxcInRleHQ6ICgkaW5kZXgoKSArIDEpXFxcIj48L3N0cm9uZz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBrbyBmb3JlYWNoOiBuZXcgQXJyYXkoJHBhcmVudC5idWlsZEV4cGxvcmVyLmdyYXBoRGF0YSgpLmxlbmd0aCkgLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsgJ3JpZ2h0LWJvcmRlcic6ICEkcGFyZW50c1sxXS5idWlsZEV4cGxvcmVyLnNob3dHcmFwaFNraWxsQnVpbGRDb2x1bW5zKCkgfHwgISRwYXJlbnRzWzFdLmJ1aWxkRXhwbG9yZXIuZ3JhcGhEYXRhKClbJGluZGV4KCldLnZpc2libGUoKSB9XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudHNbMV0uYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKVskaW5kZXgoKV0udmlzaWJsZSgpLCB0ZXh0OiAkcGFyZW50c1sxXS5idWlsZEV4cGxvcmVyLmdyYXBoRGF0YSgpWyRpbmRleCgpXS5kYXRhWyRwYXJlbnRDb250ZXh0LiRpbmRleCgpXVskcGFyZW50c1sxXS5idWlsZEV4cGxvcmVyLnNlbGVjdGVkR3JhcGhQcm9wZXJ0eSgpXVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtbGVmdCByaWdodC1ib3JkZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudHNbMV0uYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKVskaW5kZXgoKV0udmlzaWJsZSgpICYmICRwYXJlbnRzWzFdLmJ1aWxkRXhwbG9yZXIuc2hvd0dyYXBoU2tpbGxCdWlsZENvbHVtbnMoKSwgdGV4dDogJHBhcmVudHNbMV0uYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKVskaW5kZXgoKV0uY3VtdWxhdGl2ZVNraWxsQnVpbGRbJHBhcmVudENvbnRleHQuJGluZGV4KCldLmpvaW4oJy0nKVxcXCI+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAva28gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcIml0ZW1CdWlsZC1pbnZlbnRvcnlcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudC5idWlsZEV4cGxvcmVyLnNob3dHcmFwaEl0ZW1CdWlsZFJvd3MoKSAmJiAkcGFyZW50LmJ1aWxkRXhwbG9yZXIuZ3JhcGhSb3dIYXNJdGVtcygkaW5kZXgoKSlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInJpZ2h0LWJvcmRlci1pdGVtcm93IG5vLXRvcC1ib3JkZXJcXFwiPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0ga28gZm9yZWFjaDogbmV3IEFycmF5KCRwYXJlbnQuYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKS5sZW5ndGgpIC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInJpZ2h0LWJvcmRlci1pdGVtcm93IG5vLXRvcC1ib3JkZXJcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyBjb2xzcGFuOiAkcGFyZW50c1sxXS5idWlsZEV4cGxvcmVyLmdyYXBoRGF0YSgpWyRpbmRleCgpXS52aXNpYmxlKCkgJiYgJHBhcmVudHNbMV0uYnVpbGRFeHBsb3Jlci5zaG93R3JhcGhTa2lsbEJ1aWxkQ29sdW1ucygpID8gMiA6IDEgfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudHNbMV0uYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEoKVskaW5kZXgoKV0udmlzaWJsZSgpLCBmb3JlYWNoOiAkcGFyZW50c1sxXS5idWlsZEV4cGxvcmVyLmdyYXBoRGF0YSgpWyRpbmRleCgpXS5kYXRhWyRwYXJlbnRDb250ZXh0LiRpbmRleCgpXS5pdGVtc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwiaXRlbUJ1aWxkLWltZy1zbSBpbWctcm91bmRlZFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsgaXRlbV9kaXNhYmxlZDogIWVuYWJsZWQsIGl0ZW1fYWN0aXZlOiAkcGFyZW50c1syXS5pbnZlbnRvcnkuZ2V0QWN0aXZlQm9yZGVyKCRkYXRhKSA9PSAxLCBpdGVtX2luYWN0aXZlOiAkcGFyZW50c1syXS5pbnZlbnRvcnkuZ2V0QWN0aXZlQm9yZGVyKCRkYXRhKSA9PSAwIH0sIGF0dHI6eyBzcmM6ICRwYXJlbnRzWzJdLmludmVudG9yeS5nZXRJdGVtSW1hZ2UoJGRhdGEpIH1cXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVxcXCJmbG9hdDpsZWZ0XFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRwYXJlbnRzWzJdLmludmVudG9yeS5nZXRJdGVtU2l6ZUxhYmVsKCRkYXRhKSAhPSAnJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJodG1sOiAkcGFyZW50c1syXS5pbnZlbnRvcnkuZ2V0SXRlbVNpemVMYWJlbCgkZGF0YSlcXFwiIHN0eWxlPVxcXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7Ym90dG9tOjA7Y29sb3I6d2hpdGU7b3BhY2l0eTouNTtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO3BhZGRpbmc6MHB4IDJweFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJodG1sOiAkcGFyZW50c1syXS5pbnZlbnRvcnkuZ2V0SXRlbVNpemVMYWJlbCgkZGF0YSlcXFwiIHN0eWxlPVxcXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7Ym90dG9tOjA7Y29sb3I6d2hpdGU7cGFkZGluZzowcHggMnB4XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC9rbyAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgICAgICAgICAgPCEtLSAva28gLS0+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuXFxuPC9kaXY+XCIgfSk7XG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCd1bml0LXBhbmUnLCB7IHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIj5cXG4gICAgICAgIDxpbWcgY2xhc3M9XFxcImltZy1yb3VuZGVkXFxcIiBkYXRhLWJpbmQ9XFxcImF0dHI6e3NyYzogc2VsZWN0ZWRVbml0KCkuaW1hZ2V9XFxcIi8+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJ1bml0c2VsZWN0XFxcIj5Vbml0PC9sYWJlbD5cXG4gICAgICAgIDxzZWxlY3QgaWQ9XFxcInVuaXRzZWxlY3RcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtYmluZD1cXFwib3B0aW9uczogYXZhaWxhYmxlVW5pdHMgLCBvcHRpb25zVGV4dDogJ2hlcm9EaXNwbGF5TmFtZScsIHZhbHVlOiBzZWxlY3RlZFVuaXRcXFwiPjwvc2VsZWN0PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwidW5pdGxldmVsXFxcIj5MZXZlbDwvbGFiZWw+XFxuICAgICAgICA8cCBjbGFzcz1cXFwiZm9ybS1jb250cm9sLXN0YXRpY1xcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBzZWxlY3RlZFVuaXQoKS5sZXZlbHMgPT0gMCwgdGV4dDogaGVybygpLmxldmVsXFxcIj48L3A+XFxuICAgICAgICA8c2VsZWN0IGlkPVxcXCJoZXJvbGV2ZWxcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VsZWN0ZWRVbml0KCkubGV2ZWxzID4gMCwgdmFsdWU6IHNlbGVjdGVkVW5pdExldmVsLCBmb3JlYWNoOiBuZXcgQXJyYXkoc2VsZWN0ZWRVbml0KCkubGV2ZWxzKVxcXCI+XFxuICAgICAgICAgICAgPG9wdGlvbiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRpbmRleCgpKzFcXFwiPjwvb3B0aW9uPlxcbiAgICAgICAgPC9zZWxlY3Q+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtNCc6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMTInOiAkcm9vdC5sYXlvdXQoKSA9PSAxfVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5TdGF0cyA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNob3dTdGF0RGV0YWlscywgdGV4dDogIXNob3dTdGF0RGV0YWlscygpID8gJ1Nob3cgbW9yZScgOiAnU2hvdyBsZXNzJywgYXR0cjoge3RpdGxlOiAhc2hvd1N0YXREZXRhaWxzKCkgPyAnQ2xpY2sgdG8gc2hvdyBiYXNlIHN0YXRzJyA6ICdDbGljayB0byBoaWRlIGJhc2Ugc3RhdHMnfVxcXCI+PC9hPjwvaDM+XFxuXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2hvd1N0YXREZXRhaWxzKCksIGNvbXBvbmVudDoge25hbWU6ICdzdGF0cy1hZGRpdGlvbmFsJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWNvbmRlbnNlZFxcXCI+XFxuICAgICAgICAgICAgICAgIDx0Ym9keT5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5Hb2xkOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm8oKS5ib3VudHlnb2xkbWluKCkgPT0gaGVybygpLmJvdW50eWdvbGRtYXgoKSA/IGhlcm8oKS5ib3VudHlnb2xkbWF4KCkgOiBoZXJvKCkuYm91bnR5Z29sZG1pbigpICsgJy0nICsgaGVybygpLmJvdW50eWdvbGRtYXgoKVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5FeHBlcmllbmNlOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm8oKS5ib3VudHl4cCgpXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkxldmVsOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm8oKS5sZXZlbCgpXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPjxhYmJyIHRpdGxlPVxcXCJNb3ZlbWVudCBTcGVlZFxcXCI+TVM8L2FiYnI+OjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IHRvdGFsTW92ZW1lbnRTcGVlZFxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5UdXJuIFJhdGU6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogdG90YWxUdXJuUmF0ZVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5TaWdodCBSYW5nZTo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAnPGFiYnIgdGl0bGU9XFxcXCdEYXlcXFxcJz4nICsgdmlzaW9ucmFuZ2VkYXkoKSArICc8L2FiYnI+LzxhYmJyIHRpdGxlPVxcXFwnTmlnaHRcXFxcJz4nICsgdmlzaW9ucmFuZ2VuaWdodCgpICsgJzwvYWJicj4nXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWNvbmRlbnNlZFxcXCI+XFxuICAgICAgICAgICAgICAgIDx0Ym9keT5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5IZWFsdGg6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogaGVhbHRoXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkhlYWx0aCBSZWdlbjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBoZWFsdGhyZWdlblxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5NYW5hOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IG1hbmFcXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQ+TWFuYSBSZWdlbjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBtYW5hcmVnZW5cXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQ+UGh5c2ljYWwgPGFiYnIgdGl0bGU9XFxcIkVmZmVjdGl2ZSBIaXQgUG9pbnRzXFxcIj5FSFA8L2FiYnI+OjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGVocFBoeXNpY2FsXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPk1hZ2ljYWwgPGFiYnIgdGl0bGU9XFxcIkVmZmVjdGl2ZSBIaXQgUG9pbnRzXFxcIj5FSFA8L2FiYnI+OjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGVocE1hZ2ljYWxcXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XFxuICAgICAgICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtMTInOiAkcm9vdC5sYXlvdXQoKSA9PSAwLCAnY29sLW1kLTMnOiAkcm9vdC5sYXlvdXQoKSA9PSAxfVxcXCI+XFxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cXFwidGFibGUgdGFibGUtY29uZGVuc2VkXFxcIj5cXG4gICAgICAgICAgICAgICAgPHRib2R5PlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkFybW9yOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IHRvdGFsQXJtb3JQaHlzaWNhbFxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5NYWdpYyBSZXM6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogdG90YWxNYWdpY1Jlc2lzdGFuY2UoKS50b0ZpeGVkKDIpICsgJyUnXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkxpZmVzdGVhbDo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBsaWZlc3RlYWxcXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQ+RXZhc2lvbjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBldmFzaW9uXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkJhc2g6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogYmFzaFxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5NaXNzIENoYW5jZTo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBtaXNzQ2hhbmNlXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9XFxcInRhYmxlZHJvcGRvd25cXFwiIHN0eWxlPVxcXCJib3JkZXItdG9wOjBcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2hvd0NyaXRpY2FsU3RyaWtlRGV0YWlscygpLGZvcmVhY2g6IGNyaXRJbmZvKCkuc291cmNlc1xcXCI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQgY29sc3Bhbj0yPjxzdHJvbmcgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS5uYW1lXFxcIj48L3N0cm9uZz48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQ+Q3JpdCBDaGFuY2U6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogKCRkYXRhLnRvdGFsY2hhbmNlICogMTAwKS50b0ZpeGVkKDIpICsgJyUnXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkNyaXQgTXVsdGlwbGllcjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAoJGRhdGEubXVsdGlwbGllciAqIDEwMCkudG9GaXhlZCgyKSArICclJ1xcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7J2NvbC1tZC0xMic6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMyc6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1jb25kZW5zZWRcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGJvZHk+XFxuICAgICAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5EYW1hZ2U6PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiBiYXNlRGFtYWdlKClbMF0gKyAnLScgKyBiYXNlRGFtYWdlKClbMV1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cXFwiY29sb3I6Z3JlZW5cXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogYm9udXNEYW1hZ2UoKSA+IDAsIHRleHQ6ICcgKyAnICsgYm9udXNEYW1hZ2UoKVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVxcXCJjb2xvcjpyZWRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogYm9udXNEYW1hZ2VSZWR1Y3Rpb24oKSAhPSAwLCB0ZXh0OiAnIC0gJyArIGJvbnVzRGFtYWdlUmVkdWN0aW9uKClcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQ+PGFiYnIgdGl0bGU9XFxcIkluY3JlYXNlZCBBdHRhY2sgU3BlZWRcXFwiPklBUzwvYWJicj46PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogaWFzXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPjxhYmJyIHRpdGxlPVxcXCJCYXNlIEF0dGFjayBUaW1lXFxcIj5CQVQ8L2FiYnI+OjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGJhdFxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5BdHRhY2sgVGltZTo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBhdHRhY2tUaW1lXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPkF0dGFjayAvIFNlYzo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBhdHRhY2tzUGVyU2Vjb25kKCkudG9GaXhlZCgyKVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPHRyPjx0ZD5BdHRhY2sgUmFuZ2U6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogdG90YWxhdHRhY2tyYW5nZVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7J2NvbC1tZC04JzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0xMic6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ2RhbWFnZS1kZXRhaWxzJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcbiAgICAgICAgXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwic2VjdGlvbl9oZWFkZXJcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBzZWN0aW9uRGlzcGxheSgpLmludmVudG9yeSwgY3NzOiB7IHNlY3Rpb25fZGlzYWJsZWQ6ICFzZWN0aW9uRGlzcGxheSgpLmludmVudG9yeSgpIH1cXFwiPkludmVudG9yeSA8c21hbGwgc3R5bGU9XFxcImNvbG9yOmdvbGRlbnJvZFxcXCIgZGF0YS1iaW5kPVxcXCJodG1sOiBpbnZlbnRvcnkudG90YWxDb3N0KCkgPyAnPGltZyBzcmM9XFxcXCdodHRwOi8vY2RuLmRvdGEyLmNvbS9hcHBzL2RvdGEyL2ltYWdlcy90b29sdGlwcy9nb2xkLnBuZ1xcXFwnLz4gJyArIGludmVudG9yeS50b3RhbENvc3QoKSA6ICcnIFxcXCI+PC9zbWFsbD48L2gzPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJpbnZlbnRvcnlcXFwiIGNsYXNzPVxcXCJpbnZlbnRvcnkgaG92ZXItY3Vyc29yXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHsgYnVpbGRFeHBsb3Jlci5zZWxlY3RJbnZlbnRvcnkoLTEpOyB9LCBjc3M6IHsncm93LWhpZ2hsaWdodCc6IHNlbGVjdGVkSW52ZW50b3J5KCkgPT0gLTF9LCB0ZW1wbGF0ZTogeyBuYW1lOiAnaXRlbS10ZW1wbGF0ZScsIGZvcmVhY2g6IGludmVudG9yeS5pdGVtcyB9LCB2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmludmVudG9yeSgpXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwic2VjdGlvbl9oZWFkZXJcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBzZWN0aW9uRGlzcGxheSgpLmFiaWxpdHksIGNzczogeyBzZWN0aW9uX2Rpc2FibGVkOiAhc2VjdGlvbkRpc3BsYXkoKS5hYmlsaXR5KCkgfVxcXCI+QWJpbGl0aWVzIDxzbWFsbCBzdHlsZT1cXFwiY29sb3I6aW5oZXJpdFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBhdmFpbGFibGVTa2lsbFBvaW50cygpID8gKGF2YWlsYWJsZVNraWxsUG9pbnRzKCkgPT0gMSA/ICcxIHVuc3BlbnQgc2tpbGxwb2ludCcgOiBhdmFpbGFibGVTa2lsbFBvaW50cygpICsgJyB1bnNwZW50IHNraWxscG9pbnRzJykgOiAnJ1xcXCI+PC9zbWFsbD48L2gzPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5hYmlsaXR5KCksIGZvcmVhY2g6IGFiaWxpdHkoKS5hYmlsaXRpZXNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnYWJpbGl0eScsIHBhcmFtczogJGRhdGEgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiIGRhdGEtYmluZD1cXFwiaWY6IHNlbGVjdGVkSGVybygpLmhlcm9OYW1lID09ICdzaWxlbmNlcicsIHZpc2libGU6IHNlY3Rpb25EaXNwbGF5KCkuYWJpbGl0eSgpXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMiBjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImludGVsbGlnZW5jZXN0b2xlblxcXCI+SW50ZWxsaWdlbmNlIFN0b2xlbjwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImludGVsbGlnZW5jZXN0b2xlblxcXCIgZGF0YS1iaW5kPVxcXCJ2YWx1ZTogaW50U3RvbGVuXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnYnVmZi1zZWN0aW9uJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIiB9KTtcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2Nsb25lLXBhbmUnLCB7IHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIj5cXG4gICAgICAgIDxpbWcgY2xhc3M9XFxcImltZy1yb3VuZGVkXFxcIiBkYXRhLWJpbmQ9XFxcImF0dHI6e3NyYzogJy9tZWRpYS9pbWFnZXMvaGVyb2VzL21lZXBvLnBuZyd9XFxcIi8+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtNCc6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMTInOiAkcm9vdC5sYXlvdXQoKSA9PSAxfVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5TdGF0cyA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNob3dTdGF0RGV0YWlscywgdGV4dDogIXNob3dTdGF0RGV0YWlscygpID8gJ1Nob3cgbW9yZScgOiAnU2hvdyBsZXNzJywgYXR0cjoge3RpdGxlOiAhc2hvd1N0YXREZXRhaWxzKCkgPyAnQ2xpY2sgdG8gc2hvdyBiYXNlIHN0YXRzJyA6ICdDbGljayB0byBoaWRlIGJhc2Ugc3RhdHMnfVxcXCI+PC9hPjwvaDM+XFxuXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHNob3dTdGF0RGV0YWlscygpLCBjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX0sIGNvbXBvbmVudDoge25hbWU6ICdzdGF0cy1hZGRpdGlvbmFsJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInN0YXRzY29udGFpbmVyXFxcIiBkYXRhLWJpbmQ9XFxcImZvcmVhY2g6ICRyb290LmFsbEl0ZW1zXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAkZGF0YS52YWx1ZSwgcGFyYW1zOiAkcm9vdC5oZXJvZXNbJHBhcmVudENvbnRleHQuJGluZGV4KCldLmNsb25lKCl9XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7J2NvbC1tZC04JzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0xMic6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ2RhbWFnZS1kZXRhaWxzJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcbiAgICAgICAgXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwic2VjdGlvbl9oZWFkZXJcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBzZWN0aW9uRGlzcGxheSgpLmludmVudG9yeSwgY3NzOiB7IHNlY3Rpb25fZGlzYWJsZWQ6ICFzZWN0aW9uRGlzcGxheSgpLmludmVudG9yeSgpIH1cXFwiPkludmVudG9yeSA8c21hbGwgc3R5bGU9XFxcImNvbG9yOmdvbGRlbnJvZFxcXCIgZGF0YS1iaW5kPVxcXCJodG1sOiBpbnZlbnRvcnkudG90YWxDb3N0KCkgPyAnPGltZyBzcmM9XFxcXCdodHRwOi8vY2RuLmRvdGEyLmNvbS9hcHBzL2RvdGEyL2ltYWdlcy90b29sdGlwcy9nb2xkLnBuZ1xcXFwnLz4gJyArIGludmVudG9yeS50b3RhbENvc3QoKSA6ICcnIFxcXCI+PC9zbWFsbD48L2gzPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJpbnZlbnRvcnlcXFwiIGNsYXNzPVxcXCJpbnZlbnRvcnkgaG92ZXItY3Vyc29yXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHsgYnVpbGRFeHBsb3Jlci5zZWxlY3RJbnZlbnRvcnkoLTEpOyB9LCBjc3M6IHsncm93LWhpZ2hsaWdodCc6IHNlbGVjdGVkSW52ZW50b3J5KCkgPT0gLTF9LCB0ZW1wbGF0ZTogeyBuYW1lOiAnaXRlbS10ZW1wbGF0ZScsIGZvcmVhY2g6IGludmVudG9yeS5pdGVtcyB9LCB2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmludmVudG9yeSgpXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnZGFtYWdlLWFtcCcsIHBhcmFtczogJGRhdGF9XFxcIj48L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XCIgfSk7XG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdpbGx1c2lvbi1wYW5lJywgeyB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZFxcXCIgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IzQyOGJjYTtkaXNwbGF5OmlubGluZS1ibG9ja1xcXCI+XFxuICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwiaW1nLXJvdW5kZWRcXFwiIHN0eWxlPVxcXCJvcGFjaXR5Oi41XFxcIiBkYXRhLWJpbmQ9XFxcImF0dHI6e3NyYzogJy9tZWRpYS9pbWFnZXMvaGVyb2VzLycgKyBzZWxlY3RlZEhlcm8oKS5oZXJvTmFtZSArICcucG5nJ31cXFwiLz5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwiaWxsdXNpb25sZXZlbFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBpbGx1c2lvbkRpc3BsYXlOYW1lXFxcIj48L2xhYmVsPlxcbiAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZVxcXCI+XFxuICAgICAgICAgICAgPHRib2R5PlxcbiAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgPHRkPkRhbWFnZSBEZWFsdDwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAoZ2V0T3V0Z29pbmdEYW1hZ2VNdWx0aXBsaWVyKGlsbHVzaW9uVHlwZSgpLCBmYWxzZSwgaGVybygpLmF0dGFja3R5cGUoKSkqMTAwKS50b0ZpeGVkKDApKyclJ1xcXCI+PC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgPHRkPkRhbWFnZSBUYWtlbjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAoZ2V0SW5jb21pbmdEYW1hZ2VNdWx0aXBsaWVyKGlsbHVzaW9uVHlwZSgpLCBmYWxzZSwgaGVybygpLmF0dGFja3R5cGUoKSkqMTAwKS50b0ZpeGVkKDApKyclJ1xcXCI+PC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDwvdGJvZHk+XFxuICAgICAgICA8L3RhYmxlPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IGlsbHVzaW9uVHlwZSgpICE9ICdpdGVtX21hbnRhJ1xcXCI+XFxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiaWxsdXNpb25sZXZlbFxcXCI+QWJpbGl0eSBMZXZlbDwvbGFiZWw+XFxuICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwiaWxsdXNpb25sZXZlbFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJ2YWx1ZTogaWxsdXNpb25BYmlsaXR5TGV2ZWwsIGZvcmVhY2g6IG5ldyBBcnJheShpbGx1c2lvbkFiaWxpdHlNYXhMZXZlbCgpKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkaW5kZXgoKSsxXFxcIj48L29wdGlvbj5cXG4gICAgICAgICAgICA8L3NlbGVjdD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cXG48ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTQnOiAkcm9vdC5sYXlvdXQoKSA9PSAwLCAnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgICAgICAgICA8aDMgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+U3RhdHMgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHNcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBzaG93U3RhdERldGFpbHMsIHRleHQ6ICFzaG93U3RhdERldGFpbHMoKSA/ICdTaG93IG1vcmUnIDogJ1Nob3cgbGVzcycsIGF0dHI6IHt0aXRsZTogIXNob3dTdGF0RGV0YWlscygpID8gJ0NsaWNrIHRvIHNob3cgYmFzZSBzdGF0cycgOiAnQ2xpY2sgdG8gaGlkZSBiYXNlIHN0YXRzJ31cXFwiPjwvYT48L2gzPlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBzaG93U3RhdERldGFpbHMoKSwgY3NzOiB7J2NvbC1tZC0xMic6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMyc6ICRyb290LmxheW91dCgpID09IDF9LCBjb21wb25lbnQ6IHtuYW1lOiAnc3RhdHMtYWRkaXRpb25hbCcsIHBhcmFtczogJGRhdGF9XFxcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzdGF0c2NvbnRhaW5lclxcXCIgZGF0YS1iaW5kPVxcXCJmb3JlYWNoOiAkcm9vdC5hbGxJdGVtc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJGRhdGEudmFsdWUsIHBhcmFtczogJHBhcmVudENvbnRleHQuJGRhdGF9XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7J2NvbC1tZC00JzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0xMic6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVxcXCJzZWN0aW9uX2hlYWRlclxcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNlY3Rpb25EaXNwbGF5KCkuaW52ZW50b3J5LCBjc3M6IHsgc2VjdGlvbl9kaXNhYmxlZDogIXNlY3Rpb25EaXNwbGF5KCkuaW52ZW50b3J5KCkgfVxcXCI+SW52ZW50b3J5IDxzbWFsbCBzdHlsZT1cXFwiY29sb3I6Z29sZGVucm9kXFxcIiBkYXRhLWJpbmQ9XFxcImh0bWw6IGludmVudG9yeS50b3RhbENvc3QoKSA/ICc8aW1nIHNyYz1cXFxcJ2h0dHA6Ly9jZG4uZG90YTIuY29tL2FwcHMvZG90YTIvaW1hZ2VzL3Rvb2x0aXBzL2dvbGQucG5nXFxcXCcvPiAnICsgaW52ZW50b3J5LnRvdGFsQ29zdCgpIDogJycgXFxcIj48L3NtYWxsPjwvaDM+XFxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XFxcImludmVudG9yeVxcXCIgY2xhc3M9XFxcImludmVudG9yeSBob3Zlci1jdXJzb3JcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uIChkYXRhLCBldmVudCkgeyBidWlsZEV4cGxvcmVyLnNlbGVjdEludmVudG9yeSgtMSk7IH0sIGNzczogeydyb3ctaGlnaGxpZ2h0Jzogc2VsZWN0ZWRJbnZlbnRvcnkoKSA9PSAtMX0sIGZvcmVhY2g6IGludmVudG9yeS5pdGVtcywgdmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5pbnZlbnRvcnkoKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3R5bGU9XFxcIndpZHRoOjc1cHg7XFxcIiBjbGFzcz1cXFwiaW1nLXJvdW5kZWRcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7IGl0ZW1fZGlzYWJsZWQ6ICFlbmFibGVkKCksIGl0ZW1fYWN0aXZlOiAkcGFyZW50LmludmVudG9yeS5nZXRBY3RpdmVCb3JkZXIoJGRhdGEpID09IDEsIGl0ZW1faW5hY3RpdmU6ICRwYXJlbnQuaW52ZW50b3J5LmdldEFjdGl2ZUJvcmRlcigkZGF0YSkgPT0gMCB9LCBhdHRyOnsgc3JjOiAkcGFyZW50LmludmVudG9yeS5nZXRJdGVtSW1hZ2UoJGRhdGEpIH0sIGNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmludmVudG9yeS50b2dnbGVJdGVtKCRpbmRleCwgZGF0YSwgZXZlbnQpOyB9LCBldmVudDogeyBkYmxjbGljazogJHBhcmVudC5pbnZlbnRvcnkucmVtb3ZlSXRlbSB9XFxcIi8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cXFwiZmxvYXQ6bGVmdFxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiAkcGFyZW50LmludmVudG9yeS5nZXRJdGVtU2l6ZUxhYmVsKCRkYXRhKSAhPSAnJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJodG1sOiAkcGFyZW50LmludmVudG9yeS5nZXRJdGVtU2l6ZUxhYmVsKCRkYXRhKVxcXCIgc3R5bGU9XFxcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtib3R0b206MDtjb2xvcjp3aGl0ZTtvcGFjaXR5Oi41O2JhY2tncm91bmQtY29sb3I6YmxhY2s7cGFkZGluZzowcHggMnB4XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImh0bWw6ICRwYXJlbnQuaW52ZW50b3J5LmdldEl0ZW1TaXplTGFiZWwoJGRhdGEpXFxcIiBzdHlsZT1cXFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDowO2JvdHRvbTowO2NvbG9yOndoaXRlO3BhZGRpbmc6MHB4IDJweFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XCIgfSk7XG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdidWZmLXNldHRpbmdzJywgeyB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiPlxcbiAgICA8ZGl2IGRhdGEtYmluZD1cXFwiZm9yZWFjaDogZGF0YVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IChkaXNwbGF5ID09IHVuZGVmaW5lZCB8fCBkaXNwbGF5ID09ICdidWZmJylcXFwiPlxcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29sLW1kLTYgY29udHJvbC1sYWJlbFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY2hlY2tib3gtbGFiZWwnOiBjb250cm9sVHlwZSA9PSAnY2hlY2tib3gnfSwgYXR0cjogeydmb3InOiBsYWJlbE5hbWV9LCBodG1sOiBsYWJlbE5hbWVcXFwiPjwvbGFiZWw+XFxuICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImlmOiBjb250cm9sVHlwZSA9PSAnaW5wdXQnICYmIChkaXNwbGF5ID09IHVuZGVmaW5lZCB8fCBkaXNwbGF5ID09ICdidWZmJyB8fCBkaXNwbGF5ID09ICdoaWRkZW4nKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj48aW5wdXQgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOiB7J2lkJzogbGFiZWxOYW1lfSwgdmFsdWU6IGNvbnRyb2xWYWxcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJpZjogY29udHJvbFR5cGUgPT0gJ2NoZWNrYm94JyAmJiAoZGlzcGxheSA9PSB1bmRlZmluZWQgfHwgZGlzcGxheSA9PSAnYnVmZicgfHwgZGlzcGxheSA9PSAnaGlkZGVuJylcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGVja2JveFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBkYXRhLWJpbmQ9XFxcImF0dHI6IHsnaWQnOiBsYWJlbE5hbWV9LCBjaGVja2VkOiBjb250cm9sVmFsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiaWY6IChjb250cm9sVHlwZSA9PSAndGV4dCcgfHwgY29udHJvbFR5cGUgPT0gJ21ldGhvZCcpICYmIChkaXNwbGF5ID09IHVuZGVmaW5lZCB8fCBkaXNwbGF5ID09ICdidWZmJyB8fCBkaXNwbGF5ID09ICdoaWRkZW4nKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj48cCBjbGFzcz1cXFwiZm9ybS1jb250cm9sLXN0YXRpY1xcXCIgZGF0YS1iaW5kPVxcXCJodG1sOiBjb250cm9sVmFsXFxcIj48L3A+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImlmOiBjb250cm9sVHlwZSA9PSAncmFkaW8nICYmIChkaXNwbGF5ID09IHVuZGVmaW5lZCB8fCBkaXNwbGF5ID09ICdidWZmJyB8fCBkaXNwbGF5ID09ICdoaWRkZW4nKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDwhLS0ga28gZm9yZWFjaDogY29udHJvbE9wdGlvbnMgLS0+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyYWRpb1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeydpZCc6ICRwYXJlbnQubGFiZWxOYW1lICsgdmFsdWUsIHZhbHVlOiB2YWx1ZX0sIGNoZWNrZWQ6ICRwYXJlbnQuY29udHJvbFZhbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogdGV4dFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cIiB9KTtcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2l0ZW0tYnVmZicsIHsgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwXFxcIj5cXG4gICAgPGltZyBzdHlsZT1cXFwid2lkdGg6NzVweDtcXFwiIGNsYXNzPVxcXCJpbWctcm91bmRlZFxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsgaXRlbV9kaXNhYmxlZDogIWVuYWJsZWQoKSwgaXRlbV9hY3RpdmU6ICRwYXJlbnRzWzFdLmJ1ZmZzLml0ZW1CdWZmcy5nZXRBY3RpdmVCb3JkZXIoJGRhdGEpID09IDEsIGl0ZW1faW5hY3RpdmU6ICRwYXJlbnRzWzFdLmJ1ZmZzLml0ZW1CdWZmcy5nZXRBY3RpdmVCb3JkZXIoJGRhdGEpID09IDAgfSwgYXR0cjp7IHNyYzogJHBhcmVudHNbMV0uYnVmZnMuaXRlbUJ1ZmZzLmdldEl0ZW1JbWFnZSgkZGF0YSkgfSwgY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnRzWzFdLmJ1ZmZzLml0ZW1CdWZmcy50b2dnbGVJdGVtKCRpbmRleCwgZGF0YSwgZXZlbnQpOyB9LCBldmVudDogeyBkYmxjbGljazogJHBhcmVudHNbMV0uYnVmZnMuaXRlbUJ1ZmZzLnJlbW92ZUl0ZW0gfVxcXCIvPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAtdmVydGljYWxcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiBzdHlsZT1cXFwicGFkZGluZzozcHggMTBweDtcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzXFxcIiB0aXRsZT1cXFwiUmVtb3ZlIEl0ZW1cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6ICRwYXJlbnRzWzFdLmJ1ZmZzLml0ZW1CdWZmcy5yZW1vdmVJdGVtXFxcIj4mdGltZXM7PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIHN0eWxlPVxcXCJwYWRkaW5nOjNweCAxMHB4O1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHNcXFwiIHRpdGxlPVxcXCJEaXNhYmxlL0VuYWJsZSBJdGVtXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiAkcGFyZW50c1sxXS5idWZmcy5pdGVtQnVmZnMudG9nZ2xlTXV0ZUl0ZW0sIGh0bWw6IGVuYWJsZWQoKSA/ICdvJyA6ICctJywgYXR0cjoge3RpdGxlOiBlbmFibGVkKCkgPyAnRGlzYWJsZSBJdGVtJyA6ICdFbmFibGUgSXRlbSd9XFxcIj5vPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiIH0pO1xua28uY29tcG9uZW50cy5yZWdpc3RlcignaXRlbS1kZWJ1ZmYnLCB7IHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cFxcXCI+XFxuICAgIDxpbWcgc3R5bGU9XFxcIndpZHRoOjc1cHg7XFxcIiBjbGFzcz1cXFwiaW1nLXJvdW5kZWRcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7IGl0ZW1fZGlzYWJsZWQ6ICFlbmFibGVkKCksIGl0ZW1fYWN0aXZlOiAkcGFyZW50c1sxXS5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRBY3RpdmVCb3JkZXIoJGRhdGEpID09IDEsIGl0ZW1faW5hY3RpdmU6ICRwYXJlbnRzWzFdLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEFjdGl2ZUJvcmRlcigkZGF0YSkgPT0gMCB9LCBhdHRyOnsgc3JjOiAkcGFyZW50c1sxXS5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRJdGVtSW1hZ2UoJGRhdGEpIH0sIGNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50c1sxXS5kZWJ1ZmZzLml0ZW1CdWZmcy50b2dnbGVJdGVtKCRpbmRleCwgZGF0YSwgZXZlbnQpOyB9LCBldmVudDogeyBkYmxjbGljazogJHBhcmVudHNbMV0uZGVidWZmcy5pdGVtQnVmZnMucmVtb3ZlSXRlbSB9XFxcIi8+XFxuICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cC12ZXJ0aWNhbFxcXCI+XFxuICAgICAgICA8YnV0dG9uIHN0eWxlPVxcXCJwYWRkaW5nOjNweCAxMHB4O1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHNcXFwiIHRpdGxlPVxcXCJSZW1vdmUgSXRlbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogJHBhcmVudHNbMV0uZGVidWZmcy5pdGVtQnVmZnMucmVtb3ZlSXRlbVxcXCI+JnRpbWVzOzwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBzdHlsZT1cXFwicGFkZGluZzozcHggMTBweDtcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzXFxcIiB0aXRsZT1cXFwiRGlzYWJsZS9FbmFibGUgSXRlbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogJHBhcmVudHNbMV0uZGVidWZmcy5pdGVtQnVmZnMudG9nZ2xlTXV0ZUl0ZW0sIGh0bWw6IGVuYWJsZWQoKSA/ICdvJyA6ICctJywgYXR0cjoge3RpdGxlOiBlbmFibGVkKCkgPyAnRGlzYWJsZSBJdGVtJyA6ICdFbmFibGUgSXRlbSd9XFxcIj5vPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiIH0pO1xua28uY29tcG9uZW50cy5yZWdpc3RlcignYnVmZi1zZWN0aW9uJywgeyB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJzZWN0aW9uX2hlYWRlclxcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNlY3Rpb25EaXNwbGF5KCkuYnVmZiwgY3NzOiB7IHNlY3Rpb25fZGlzYWJsZWQ6ICFzZWN0aW9uRGlzcGxheSgpLmJ1ZmYoKSB9XFxcIj5CdWZmczwvaDM+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5idWZmKClcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVxcXCJidWZmc2VsZWN0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBkYXRhLWJpbmQ9XFxcIm9wdGlvbnM6IGJ1ZmZzLmF2YWlsYWJsZUJ1ZmZzICwgb3B0aW9uc1RleHQ6ICdidWZmRGlzcGxheU5hbWUnLCB2YWx1ZTogYnVmZnMuc2VsZWN0ZWRCdWZmXFxcIj48L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogYnVmZnMuYWRkQnVmZlxcXCI+QWRkPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsZXZlbnQpIHsgYnVmZnMucmVtb3ZlQnVmZihkYXRhLCBldmVudCwgYnVmZnMuc2VsZWN0ZWRCdWZmKCkuYnVmZk5hbWUpIH1cXFwiPlJlbW92ZTwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93XFxcIiBkYXRhLWJpbmQ9XFxcImZvcmVhY2g6IGJ1ZmZzLmJ1ZmZzLCB2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmJ1ZmYoKVxcXCI+XFxuICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImNzczoge3JvdzogJGRhdGEuZGF0YS5pc0RldGFpbCgpIHx8ICgkaW5kZXgoKSA8ICRwYXJlbnQuYnVmZnMuYnVmZnMoKS5sZW5ndGgtMSAmJiAkcGFyZW50LmJ1ZmZzLmJ1ZmZzKClbJGluZGV4KCkrMV0uZGF0YS5pc0RldGFpbCgpKSwgcm93MjogJGRhdGEuZGF0YS5pc0RldGFpbCgpIHx8ICgkaW5kZXgoKSA8ICRwYXJlbnQuYnVmZnMuYnVmZnMoKS5sZW5ndGgtMSAmJiAkcGFyZW50LmJ1ZmZzLmJ1ZmZzKClbJGluZGV4KCkrMV0uZGF0YS5pc0RldGFpbCgpKSB9XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTMgdGV4dC1jZW50ZXIgYm90dG9tLWJ1ZmZlcjJcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7J2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0yJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzdHlsZT1cXFwicGFkZGluZzowcHg7bWFyZ2luLWJvdHRvbToxcHg7XFxcIiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgYWJpbGl0eVxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsgYWJpbGl0eV9hY3RpdmU6ICRkYXRhLmRhdGEuaXNBY3RpdmUoKSB8fCAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSwgYWJpbGl0eV9pbmFjdGl2ZTogISRkYXRhLmRhdGEuaXNBY3RpdmUoKSAmJiAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSA9PSAtMSwgYnRuOiAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSA9PSAtMSwgJ2J0bi1kZWZhdWx0JzogJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPT0gLTF9LCBhdHRyOntzcmM6ICcvbWVkaWEvaW1hZ2VzL3NwZWxsaWNvbnMvJyArICRkYXRhLmRhdGEubmFtZSgpICsgJy5wbmcnfSwgY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuYnVmZnMudG9nZ2xlQnVmZigkaW5kZXgsIGRhdGEuZGF0YSwgZXZlbnQpOyB9LCBldmVudDogeyBkYmxjbGljazogZnVuY3Rpb24oZGF0YSxldmVudCkgeyAkcGFyZW50LmJ1ZmZzLnJlbW92ZUJ1ZmYoZGF0YSwgZXZlbnQsICRkYXRhLmRhdGEubmFtZSgpKSB9IH1cXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBzdHlsZT1cXFwicG9zaXRpb246cmVsYXRpdmVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XFxcInBvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7Y29sb3I6d2hpdGU7XFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkgPiAwLCB0ZXh0OiAkZGF0YS5kYXRhLmxldmVsKCkgKyAnLycgKyAkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1kYW5nZXJcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCI2MFxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwiMTAwXFxcIiBzdHlsZT1cXFwid2lkdGg6IDYwJTtcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyAnYXJpYS12YWx1ZW5vdyc6ICgkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAgPyAkZGF0YS5kYXRhLmxldmVsKCkvJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkqMTAwIDogMCkgfSwgc3R5bGU6IHsgd2lkdGg6ICgkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAgPyAkZGF0YS5kYXRhLmxldmVsKCkvJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkqMTAwIDogMCkgKyAnJScgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIiBkYXRhLWJpbmQ9XFxcImlmOiAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKSA9PSAtMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuYnVmZnMubGV2ZWxEb3duQWJpbGl0eSgkaW5kZXgsIGRhdGEuZGF0YSwgZXZlbnQsICRwYXJlbnQpOyB9XFxcIj4tPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmJ1ZmZzLmxldmVsVXBBYmlsaXR5KCRpbmRleCwgZGF0YS5kYXRhLCBldmVudCwgJHBhcmVudCk7IH1cXFwiPis8L2E+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5idWZmcy50b2dnbGVCdWZmRGV0YWlsKCRpbmRleCwgZGF0YSwgZXZlbnQpOyB9LCBjc3M6IHsndG9nZ2xlZCc6ICRkYXRhLmRhdGEuaXNEZXRhaWx9XFxcIj5EZXRhaWxzPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtOSBib3R0b20tYnVmZmVyXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRkYXRhLmRhdGEuaXNEZXRhaWwoKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmJ1ZmZzLnRvZ2dsZUJ1ZmZEZXRhaWwoJGluZGV4LCBkYXRhLmRhdGEsIGV2ZW50KTsgfVxcXCI+JnRpbWVzOzwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImh0bWw6ICRwYXJlbnQuYWJpbGl0eSgpLmdldEFiaWxpdHlUb29sdGlwRGF0YSgkZGF0YS5oZXJvLCAkZGF0YS5kYXRhLm5hbWUoKSlcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImlmOiAkZGF0YS5kYXRhLm5hbWUoKSBpbiAkcGFyZW50LmJ1ZmZzLmFiaWxpdHlEYXRhICYmICRwYXJlbnQuYnVmZnMuYnVmZnMoKVskaW5kZXgoKV0uZGF0YS5sZXZlbCgpID4gMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdidWZmLXNldHRpbmdzJywgcGFyYW1zOiAkcGFyZW50LmJ1ZmZzLmFiaWxpdHlTZXR0aW5nc0RhdGEoJGRhdGEuZGF0YS5uYW1lKCksICRwYXJlbnQsICRpbmRleCgpKSB9XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5idWZmKClcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJhdXRvMlxcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOiB7aWQ6IGlkKCkgKyAnLWF1dG8yJyB9LCBqcUF1dG86IHsgYXV0b0ZvY3VzOiB0cnVlLCBodG1sOiB0cnVlIH0sIGpxQXV0b1NvdXJjZTogYnVmZnMuaXRlbUJ1ZmZzLml0ZW1CdWZmT3B0aW9ucywganFBdXRvVmFsdWU6IGJ1ZmZzLml0ZW1CdWZmcy5zZWxlY3RlZEl0ZW1CdWZmLCBqcUF1dG9Tb3VyY2VMYWJlbDogJ2Rpc3BsYXluYW1lJywganFBdXRvU291cmNlSW5wdXRWYWx1ZTogJ25hbWUnLCBqcUF1dG9Tb3VyY2VWYWx1ZTogJ3ZhbHVlJ1xcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYnRuXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLWJpbmQ9XFxcImpxQXV0b0NvbWJvOiBpZCgpICsgJy1hdXRvMidcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFxcXCI+PC9zcGFuPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBidWZmcy5pdGVtQnVmZnMuYWRkSXRlbUJ1ZmZcXFwiPkFkZDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImZvcmVhY2g6IGJ1ZmZzLml0ZW1CdWZmcy5pdGVtcywgdmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5idWZmKClcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInB1bGwtbGVmdFxcXCIgc3R5bGU9XFxcIm1hcmdpbi1yaWdodDoxMHB4XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnaXRlbS1idWZmJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcInNlY3Rpb25faGVhZGVyXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogc2VjdGlvbkRpc3BsYXkoKS5kZWJ1ZmYsIGNzczogeyBzZWN0aW9uX2Rpc2FibGVkOiAhc2VjdGlvbkRpc3BsYXkoKS5kZWJ1ZmYoKSB9XFxcIj5EZWJ1ZmZzPC9oMz5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbFxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmRlYnVmZigpXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwiYnVmZnNlbGVjdFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJvcHRpb25zOiBkZWJ1ZmZzLmF2YWlsYWJsZURlYnVmZnMgLCBvcHRpb25zVGV4dDogJ2J1ZmZEaXNwbGF5TmFtZScsIHZhbHVlOiBkZWJ1ZmZzLnNlbGVjdGVkQnVmZlxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGRlYnVmZnMuYWRkQnVmZlxcXCI+QWRkPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsZXZlbnQpIHsgZGVidWZmcy5yZW1vdmVCdWZmKGRhdGEsIGV2ZW50LCBkZWJ1ZmZzLnNlbGVjdGVkQnVmZigpLmJ1ZmZOYW1lKSB9XFxcIj5SZW1vdmU8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCIgZGF0YS1iaW5kPVxcXCJmb3JlYWNoOiBkZWJ1ZmZzLmJ1ZmZzLCB2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmRlYnVmZigpXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiY3NzOiB7cm93OiAkZGF0YS5kYXRhLmlzRGV0YWlsKCkgfHwgKCRpbmRleCgpIDwgJHBhcmVudC5kZWJ1ZmZzLmJ1ZmZzKCkubGVuZ3RoLTEgJiYgJHBhcmVudC5kZWJ1ZmZzLmJ1ZmZzKClbJGluZGV4KCkrMV0uZGF0YS5pc0RldGFpbCgpKSwgcm93MjogJGRhdGEuZGF0YS5pc0RldGFpbCgpIHx8ICgkaW5kZXgoKSA8ICRwYXJlbnQuZGVidWZmcy5idWZmcygpLmxlbmd0aC0xICYmICRwYXJlbnQuZGVidWZmcy5idWZmcygpWyRpbmRleCgpKzFdLmRhdGEuaXNEZXRhaWwoKSkgfVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0zIHRleHQtY2VudGVyIGJvdHRvbS1idWZmZXIyXFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtMyc6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMic6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3R5bGU9XFxcInBhZGRpbmc6MHB4O21hcmdpbi1ib3R0b206MXB4O1xcXCIgY2xhc3M9XFxcImltZy1yb3VuZGVkIGFiaWxpdHlcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7IGFiaWxpdHlfYWN0aXZlOiAkZGF0YS5kYXRhLmlzQWN0aXZlKCkgfHwgJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEsIGFiaWxpdHlfaW5hY3RpdmU6ICEkZGF0YS5kYXRhLmlzQWN0aXZlKCkgJiYgJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPT0gLTEsIGJ0bjogJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPT0gLTEsICdidG4tZGVmYXVsdCc6ICRkYXRhLmRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpID09IC0xfSwgYXR0cjp7c3JjOiAnL21lZGlhL2ltYWdlcy9zcGVsbGljb25zLycgKyAkZGF0YS5kYXRhLm5hbWUoKSArICcucG5nJ30sIGNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmRlYnVmZnMudG9nZ2xlQnVmZigkaW5kZXgsIGRhdGEuZGF0YSwgZXZlbnQpOyB9LCBldmVudDogeyBkYmxjbGljazogZnVuY3Rpb24oZGF0YSxldmVudCkgeyAkcGFyZW50LmRlYnVmZnMucmVtb3ZlQnVmZihkYXRhLCBldmVudCwgJGRhdGEuZGF0YS5uYW1lKCkpIH0gfVxcXCIvPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3NcXFwiIHN0eWxlPVxcXCJwb3NpdGlvbjpyZWxhdGl2ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cXFwicG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtjb2xvcjp3aGl0ZTtcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiAkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAsIHRleHQ6ICRkYXRhLmRhdGEubGV2ZWwoKSArICcvJyArICRwYXJlbnQuZ2V0QWJpbGl0eUxldmVsTWF4KCRkYXRhLmRhdGEpXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLWRhbmdlclxcXCIgcm9sZT1cXFwicHJvZ3Jlc3NiYXJcXFwiIGFyaWEtdmFsdWVub3c9XFxcIjYwXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCIxMDBcXFwiIHN0eWxlPVxcXCJ3aWR0aDogNjAlO1xcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOiB7ICdhcmlhLXZhbHVlbm93JzogKCRwYXJlbnQuZ2V0QWJpbGl0eUxldmVsTWF4KCRkYXRhLmRhdGEpID4gMCA/ICRkYXRhLmRhdGEubGV2ZWwoKS8kcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSoxMDAgOiAwKSB9LCBzdHlsZTogeyB3aWR0aDogKCRwYXJlbnQuZ2V0QWJpbGl0eUxldmVsTWF4KCRkYXRhLmRhdGEpID4gMCA/ICRkYXRhLmRhdGEubGV2ZWwoKS8kcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSoxMDAgOiAwKSArICclJyB9XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIGJ0bi1ncm91cC1qdXN0aWZpZWRcXFwiIGRhdGEtYmluZD1cXFwiaWY6ICRkYXRhLmRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfTk9UX0xFQVJOQUJMRScpID09IC0xXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5kZWJ1ZmZzLmxldmVsRG93bkFiaWxpdHkoJGluZGV4LCBkYXRhLmRhdGEsIGV2ZW50LCAkcGFyZW50KTsgfVxcXCI+LTwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5kZWJ1ZmZzLmxldmVsVXBBYmlsaXR5KCRpbmRleCwgZGF0YS5kYXRhLCBldmVudCwgJHBhcmVudCk7IH1cXFwiPis8L2E+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5kZWJ1ZmZzLnRvZ2dsZUJ1ZmZEZXRhaWwoJGluZGV4LCBkYXRhLCBldmVudCk7IH0sIGNzczogeyd0b2dnbGVkJzogJGRhdGEuZGF0YS5pc0RldGFpbH1cXFwiPkRldGFpbHM8L2E+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC05IGJvdHRvbS1idWZmZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJGRhdGEuZGF0YS5pc0RldGFpbCgpXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiY2xvc2VcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuZGVidWZmcy50b2dnbGVCdWZmRGV0YWlsKCRpbmRleCwgZGF0YS5kYXRhLCBldmVudCk7IH1cXFwiPiZ0aW1lczs8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJodG1sOiAkcGFyZW50LmFiaWxpdHkoKS5nZXRBYmlsaXR5VG9vbHRpcERhdGEoJGRhdGEuaGVybywgJGRhdGEuZGF0YS5uYW1lKCkpXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJpZjogJGRhdGEuZGF0YS5uYW1lKCkgaW4gJHBhcmVudC5kZWJ1ZmZzLmFiaWxpdHlEYXRhICYmICRwYXJlbnQuZGVidWZmcy5idWZmcygpWyRpbmRleCgpXS5kYXRhLmxldmVsKCkgPiAwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtOFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ2J1ZmYtc2V0dGluZ3MnLCBwYXJhbXM6ICRwYXJlbnQuZGVidWZmcy5hYmlsaXR5U2V0dGluZ3NEYXRhKCRkYXRhLmRhdGEubmFtZSgpLCAkcGFyZW50LCAkaW5kZXgoKSkgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHNlY3Rpb25EaXNwbGF5KCkuZGVidWZmKClcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJhdXRvM1xcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOiB7aWQ6IGlkKCkgKyAnLWF1dG8zJyB9LCBqcUF1dG86IHsgYXV0b0ZvY3VzOiB0cnVlLCBodG1sOiB0cnVlIH0sIGpxQXV0b1NvdXJjZTogZGVidWZmcy5pdGVtQnVmZnMuaXRlbURlYnVmZk9wdGlvbnMsIGpxQXV0b1ZhbHVlOiBkZWJ1ZmZzLml0ZW1CdWZmcy5zZWxlY3RlZEl0ZW1EZWJ1ZmYsIGpxQXV0b1NvdXJjZUxhYmVsOiAnZGlzcGxheW5hbWUnLCBqcUF1dG9Tb3VyY2VJbnB1dFZhbHVlOiAnbmFtZScsIGpxQXV0b1NvdXJjZVZhbHVlOiAndmFsdWUnXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJpbnB1dC1ncm91cC1idG5cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtYmluZD1cXFwianFBdXRvQ29tYm86IGlkKCkgKyAnLWF1dG8zJ1xcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoXFxcIj48L3NwYW4+PC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGRlYnVmZnMuaXRlbUJ1ZmZzLmFkZEl0ZW1EZWJ1ZmZcXFwiPkFkZDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBkYXRhLWJpbmQ9XFxcImZvcmVhY2g6IGRlYnVmZnMuaXRlbUJ1ZmZzLml0ZW1zLCB2aXNpYmxlOiBzZWN0aW9uRGlzcGxheSgpLmRlYnVmZigpXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwdWxsLWxlZnRcXFwiIHN0eWxlPVxcXCJtYXJnaW4tcmlnaHQ6MTBweFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ2l0ZW0tZGVidWZmJywgcGFyYW1zOiAkZGF0YX1cXFwiPjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiIH0pO1xua28uY29tcG9uZW50cy5yZWdpc3RlcignZGFtYWdlLWRldGFpbHMnLCB7IHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuICAgICAgICA8aDMgc3R5bGU9XFxcImRpc3BsYXk6YmxvY2s7XFxcIiBjbGFzcz1cXFwic2VjdGlvbl9oZWFkZXJcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBzaG93RGFtYWdlRGV0YWlscywgY3NzOiB7IHNlY3Rpb25fZGlzYWJsZWQ6ICFzaG93RGFtYWdlRGV0YWlscygpIH1cXFwiPkRhbWFnZSBEZXRhaWxzXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInB1bGwtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2hvd0RhbWFnZURldGFpbHMoKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzbWFsbCBzdHlsZT1cXFwidGV4dC1hbGlnbjpjZW50ZXJcXFwiIGRhdGEtYmluZD1cXFwic3R5bGU6IHtjb2xvcjogZ2V0RGFtYWdlVHlwZUNvbG9yKCdwaHlzaWNhbCcpfVxcXCI+UGh5c2ljYWw8L3NtYWxsPlxcbiAgICAgICAgICAgICAgICA8c21hbGwgc3R5bGU9XFxcInRleHQtYWxpZ246Y2VudGVyXFxcIiBkYXRhLWJpbmQ9XFxcInN0eWxlOiB7Y29sb3I6IGdldERhbWFnZVR5cGVDb2xvcignbWFnaWMnKX1cXFwiPk1hZ2ljYWw8L3NtYWxsPlxcbiAgICAgICAgICAgICAgICA8c21hbGwgc3R5bGU9XFxcInRleHQtYWxpZ246Y2VudGVyXFxcIiBkYXRhLWJpbmQ9XFxcInN0eWxlOiB7Y29sb3I6IGdldERhbWFnZVR5cGVDb2xvcigncHVyZScpfVxcXCI+UHVyZTwvc21hbGw+XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9oMz5cXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cXFwidGFibGUgZGFtYWdlLWRldGFpbHNcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2hvd0RhbWFnZURldGFpbHMoKVxcXCI+XFxuICAgICAgICAgICAgPHRoZWFkPlxcbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcImRhbWFnZS1kZXRhaWxzLWhlYWRlci1yb3dcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiBjb2xzcGFuPVxcXCIyXFxcIj48c3Ryb25nPkF0dGFjayBEYW1hZ2U8L3N0cm9uZz48aW1nIHNyYz1cXFwiaW1nL3JlZHVjX2ljb24ucG5nXFxcIiBjbGFzcz1cXFwicHVsbC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOiB7dGl0bGU6ICdBZnRlciByZWR1Y3Rpb25zIGZyb20gJyArIGVuZW15KCkuaGVyb0RhdGEoKS5kaXNwbGF5bmFtZX1cXFwiPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiBjb2xzcGFuPVxcXCIyXFxcIj48c3Ryb25nPkRQUzwvc3Ryb25nPjxpbWcgc3JjPVxcXCJpbWcvcmVkdWNfaWNvbi5wbmdcXFwiIGNsYXNzPVxcXCJwdWxsLXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImF0dHI6IHt0aXRsZTogJ0FmdGVyIHJlZHVjdGlvbnMgZnJvbSAnICsgZW5lbXkoKS5oZXJvRGF0YSgpLmRpc3BsYXluYW1lfVxcXCI+PC90ZD5cXG4gICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXCJkYW1hZ2UtZGV0YWlscy1oZWFkZXItcm93LTIgdG90YWwtcm93XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZD48c3Ryb25nPlRvdGFsPC9zdHJvbmc+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBkYW1hZ2VUb3RhbEluZm8oKS50b3RhbFJvd1swXSgpLnRvRml4ZWQoMilcXFwiPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogZGFtYWdlVG90YWxJbmZvKCkudG90YWxSb3dbMV0oKS50b0ZpeGVkKDIpXFxcIj48L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IGRhbWFnZVRvdGFsSW5mbygpLnRvdGFsUm93WzJdKCkudG9GaXhlZCgyKVxcXCI+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBkYW1hZ2VUb3RhbEluZm8oKS50b3RhbFJvd1szXSgpLnRvRml4ZWQoMilcXFwiPjwvdGQ+XFxuICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgICAgICA8IS0tIGtvIGZvcmVhY2g6IGRhbWFnZVRvdGFsSW5mbygpLmF0dGFja3MgLS0+XFxuICAgICAgICAgICAgPHRib2R5PlxcbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcImluZGVudCBzdWJ0b3RhbC1yb3dcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiAkZGF0YS5lbmFibGVkLCBjc3M6IHsgJ2luYWN0aXZlJzogISRkYXRhLmVuYWJsZWQoKSB9XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGdseXBoaWNvbiBwdWxsLWxlZnRcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiAkZGF0YS5lbmFibGVkLCBjc3M6IHsnZ2x5cGhpY29uLWV5ZS1vcGVuJzogJGRhdGEuZW5hYmxlZCgpLCAnZ2x5cGhpY29uLWV5ZS1jbG9zZSc6ICEkZGF0YS5lbmFibGVkKCl9LCBwcmV2ZW50QnViYmxlOiAnY2xpY2snXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGdseXBoaWNvbiBwdWxsLXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogJGRhdGEudmlzaWJsZSwgY3NzOiB7J2dseXBoaWNvbi1taW51cyc6ICRkYXRhLnZpc2libGUoKSwgJ2dseXBoaWNvbi1wbHVzJzogISRkYXRhLnZpc2libGUoKX0sIHByZXZlbnRCdWJibGU6ICdjbGljaydcXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS5uYW1lXFxcIj48L3NwYW4+PC9zdHJvbmc+XFxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRkYXRhLnRvdGFsUm93WzBdKCkudG9GaXhlZCgyKVxcXCI+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS50b3RhbFJvd1sxXSgpLnRvRml4ZWQoMilcXFwiPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogJGRhdGEudG90YWxSb3dbMl0oKS50b0ZpeGVkKDIpXFxcIj48L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRkYXRhLnRvdGFsUm93WzNdKCkudG9GaXhlZCgyKVxcXCI+PC90ZD5cXG4gICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgIDx0Ym9keSBjbGFzcz1cXFwiaW5kZW50XFxcIiBkYXRhLWJpbmQ9XFxcImZvcmVhY2g6ICRkYXRhLnNvdXJjZXMsIHZpc2libGU6ICRkYXRhLnZpc2libGVcXFwiPlxcbiAgICAgICAgICAgICAgICA8dHIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6ICRkYXRhLmVuYWJsZWQsIGNzczogeyAnaW5hY3RpdmUnOiAhJGRhdGEuZW5hYmxlZCgpIH1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJpbmRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogJGRhdGEubmFtZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgZ2x5cGhpY29uIHB1bGwtbGVmdFxcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6ICRkYXRhLmVuYWJsZWQsIGNzczogeydnbHlwaGljb24tZXllLW9wZW4nOiAkZGF0YS5lbmFibGVkKCksICdnbHlwaGljb24tZXllLWNsb3NlJzogISRkYXRhLmVuYWJsZWQoKX0sIHByZXZlbnRCdWJibGU6ICdjbGljaydcXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkZGF0YS5kYW1hZ2UudG9GaXhlZCgyKSwgc3R5bGU6IHtjb2xvcjogJHBhcmVudHNbMV0uZ2V0RGFtYWdlVHlwZUNvbG9yKCRkYXRhLmRhbWFnZVR5cGUpfVxcXCI+PC9zcGFuPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJGRhdGEuZGFtYWdlUmVkdWNlZC50b0ZpeGVkKDIpLCBzdHlsZToge2NvbG9yOiAkcGFyZW50c1sxXS5nZXREYW1hZ2VUeXBlQ29sb3IoJGRhdGEuZGFtYWdlVHlwZSl9XFxcIj48L3NwYW4+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkZGF0YS5kcHMudG9GaXhlZCgyKSwgc3R5bGU6IHtjb2xvcjogJHBhcmVudHNbMV0uZ2V0RGFtYWdlVHlwZUNvbG9yKCRkYXRhLmRhbWFnZVR5cGUpfVxcXCI+PC9zcGFuPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJGRhdGEuZHBzUmVkdWNlZC50b0ZpeGVkKDIpLCBzdHlsZToge2NvbG9yOiAkcGFyZW50c1sxXS5nZXREYW1hZ2VUeXBlQ29sb3IoJGRhdGEuZGFtYWdlVHlwZSl9XFxcIj48L3NwYW4+PC90ZD5cXG4gICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgIDx0ciBjbGFzcz1cXFwiaW5kZW50IGNyaXRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJGRhdGEudmlzaWJsZSgpICYmICRkYXRhLnNvdXJjZXNDcml0Lmxlbmd0aCA+IDBcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImluZGVudFxcXCI+Q3JpdGljYWwgU3RyaWtlIFByb2MsIDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogKCRkYXRhLnRvdGFsQ3JpdENoYW5jZSAqIDEwMCkudG9GaXhlZCgxKSArICclJ1xcXCI+PC9zcGFuPjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS50b3RhbENyaXRSb3dbMF0oKS50b0ZpeGVkKDIpXFxcIj48L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogJGRhdGEudG90YWxDcml0Um93WzFdKCkudG9GaXhlZCgyKVxcXCI+PC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRkYXRhLnRvdGFsQ3JpdFJvd1syXSgpLnRvRml4ZWQoMilcXFwiPjwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS50b3RhbENyaXRSb3dbM10oKS50b0ZpeGVkKDIpXFxcIj48L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPHRib2R5IGNsYXNzPVxcXCJpbmRlbnRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJGRhdGEudmlzaWJsZSwgZm9yZWFjaDogJGRhdGEuc291cmNlc0NyaXRcXFwiPlxcbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcImluZGVudCBjcml0XFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogJGRhdGEuZW5hYmxlZCwgY3NzOiB7ICdpbmFjdGl2ZSc6ICEkZGF0YS5lbmFibGVkKCkgfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImluZGVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS5uYW1lXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14cyBnbHlwaGljb24gcHVsbC1sZWZ0XFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogJGRhdGEuZW5hYmxlZCwgY3NzOiB7J2dseXBoaWNvbi1leWUtb3Blbic6ICRkYXRhLmVuYWJsZWQoKSwgJ2dseXBoaWNvbi1leWUtY2xvc2UnOiAhJGRhdGEuZW5hYmxlZCgpfSwgcHJldmVudEJ1YmJsZTogJ2NsaWNrJ1xcXCI+PC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcImh0bWw6ICRkYXRhLmRhbWFnZS50b0ZpeGVkKDIpXFxcIj48L3NwYW4+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkZGF0YS5kYW1hZ2VSZWR1Y2VkLnRvRml4ZWQoMilcXFwiPjwvc3Bhbj48L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcImh0bWw6ICRkYXRhLmRwcy50b0ZpeGVkKDIpXFxcIj48L3NwYW4+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkZGF0YS5kcHNSZWR1Y2VkLnRvRml4ZWQoMilcXFwiPjwvc3Bhbj48L3RkPlxcbiAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDwvdGJvZHk+XFxuICAgICAgICAgICAgPCEtLSAva28gLS0+XFxuICAgICAgICAgICAgPHRib2R5PlxcbiAgICAgICAgICAgICAgICA8dHIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBjbGVhdmVJbmZvKCkubGVuZ3RoID4gMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0zPjxzdHJvbmc+Q2xlYXZlPC9zdHJvbmc+PC90ZD5cXG4gICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICA8L3Rib2R5PiAgICBcXG4gICAgICAgICAgICA8dGJvZHkgZGF0YS1iaW5kPVxcXCJmb3JlYWNoOiBjbGVhdmVJbmZvKClcXFwiPlxcbiAgICAgICAgICAgICAgICA8dHI+PHRkPlJhZGl1czo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkZGF0YS5yYWRpdXNcXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj48dGQ+TWFnbml0dWRlOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcImh0bWw6ICgkZGF0YS5tYWduaXR1ZGUgKiAxMDApLnRvRml4ZWQoMikgKyAnJSdcXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5DbGVhdmUgRGFtYWdlOjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogKCRkYXRhLm1hZ25pdHVkZSAqICRwYXJlbnQuZGFtYWdlVG90YWxJbmZvKCkudG90YWwpLnRvRml4ZWQoMilcXFwiPjwvc3Bhbj48L3RkPlxcbiAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDwvdGJvZHk+XFxuICAgICAgICBcXG4gICAgICAgIDwvdGFibGU+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiIH0pO1xua28uY29tcG9uZW50cy5yZWdpc3RlcignZGFtYWdlLWFtcCcsIHsgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG4gICAgPGgzIGNsYXNzPVxcXCJzZWN0aW9uX2hlYWRlclxcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNlY3Rpb25EaXNwbGF5KCkuZGFtYWdlYW1wLCBjc3M6IHsgc2VjdGlvbl9kaXNhYmxlZDogIXNlY3Rpb25EaXNwbGF5KCkuZGFtYWdlYW1wKCkgfVxcXCI+RGFtYWdlIEFtcGxpZmljYXRpb24gJiBSZWR1Y3Rpb248L2gzPlxcbiAgICA8ZGl2IGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VjdGlvbkRpc3BsYXkoKS5kYW1hZ2VhbXAoKSwgbGF6eUJpbmRpbmc6IHNlY3Rpb25EaXNwbGF5KCkuZGFtYWdlYW1wXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMyBjb250cm9sLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJkYW1hZ2VpbnB1dFxcXCI+RGFtYWdlPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwiZGFtYWdlaW5wdXRcXFwiIGRhdGEtYmluZD1cXFwidmFsdWU6IGRhbWFnZUlucHV0VmFsdWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ob3Jpem9udGFsXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0zIGNvbnRyb2wtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImJ1ZmZhbXBzZWxlY3RcXFwiPkFtcGxpZmljYXRpb248L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwiYnVmZmFtcHNlbGVjdFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgZGF0YS1iaW5kPVxcXCJvcHRpb25zOiBkYW1hZ2VBbXBsaWZpY2F0aW9uLmF2YWlsYWJsZUJ1ZmZzICwgb3B0aW9uc1RleHQ6ICdidWZmRGlzcGxheU5hbWUnLCB2YWx1ZTogZGFtYWdlQW1wbGlmaWNhdGlvbi5zZWxlY3RlZEJ1ZmZcXFwiPjwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBkYW1hZ2VBbXBsaWZpY2F0aW9uLmFkZEJ1ZmZcXFwiPkFkZDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSxldmVudCkgeyBkYW1hZ2VBbXBsaWZpY2F0aW9uLnJlbW92ZUJ1ZmYoZGF0YSwgZXZlbnQsIGRhbWFnZUFtcGxpZmljYXRpb24uc2VsZWN0ZWRCdWZmKCkuYnVmZk5hbWUpIH1cXFwiPlJlbW92ZTwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCIgZGF0YS1iaW5kPVxcXCJmb3JlYWNoOiBkYW1hZ2VBbXBsaWZpY2F0aW9uLmJ1ZmZzXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiY3NzOiB7cm93OiAkZGF0YS5kYXRhLmlzRGV0YWlsKCkgfHwgKCRpbmRleCgpIDwgJHBhcmVudC5kYW1hZ2VBbXBsaWZpY2F0aW9uLmJ1ZmZzKCkubGVuZ3RoLTEgJiYgJHBhcmVudC5kYW1hZ2VBbXBsaWZpY2F0aW9uLmJ1ZmZzKClbJGluZGV4KCkrMV0uZGF0YS5pc0RldGFpbCgpKSwgcm93MjogJGRhdGEuZGF0YS5pc0RldGFpbCgpIHx8ICgkaW5kZXgoKSA8ICRwYXJlbnQuZGFtYWdlQW1wbGlmaWNhdGlvbi5idWZmcygpLmxlbmd0aC0xICYmICRwYXJlbnQuZGFtYWdlQW1wbGlmaWNhdGlvbi5idWZmcygpWyRpbmRleCgpKzFdLmRhdGEuaXNEZXRhaWwoKSkgfVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0zIHRleHQtY2VudGVyIGJvdHRvbS1idWZmZXIgcm93MlxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTMnOiAkcm9vdC5sYXlvdXQoKSA9PSAwLCAnY29sLW1kLTInOiAkcm9vdC5sYXlvdXQoKSA9PSAxfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW1nIHN0eWxlPVxcXCJwYWRkaW5nOjBweDttYXJnaW4tYm90dG9tOjFweDtcXFwiIGNsYXNzPVxcXCJpbWctcm91bmRlZCBhYmlsaXR5XFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeyBhYmlsaXR5X2FjdGl2ZTogJGRhdGEuZGF0YS5pc0FjdGl2ZSgpIHx8ICRkYXRhLmRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xLCBhYmlsaXR5X2luYWN0aXZlOiAhJGRhdGEuZGF0YS5pc0FjdGl2ZSgpICYmICRkYXRhLmRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpID09IC0xLCBidG46ICRkYXRhLmRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpID09IC0xLCAnYnRuLWRlZmF1bHQnOiAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSA9PSAtMX0sIGF0dHI6e3NyYzogJy9tZWRpYS9pbWFnZXMvc3BlbGxpY29ucy8nICsgJGRhdGEuZGF0YS5uYW1lKCkgKyAnLnBuZyd9LCBjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5kYW1hZ2VBbXBsaWZpY2F0aW9uLnRvZ2dsZUJ1ZmYoJGluZGV4LCBkYXRhLmRhdGEsIGV2ZW50KTsgfSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGZ1bmN0aW9uKGRhdGEsZXZlbnQpIHsgJHBhcmVudC5kYW1hZ2VBbXBsaWZpY2F0aW9uLnJlbW92ZUJ1ZmYoZGF0YSwgZXZlbnQsICRkYXRhLmRhdGEubmFtZSgpKSB9IH1cXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBzdHlsZT1cXFwicG9zaXRpb246cmVsYXRpdmVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XFxcInBvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7Y29sb3I6d2hpdGU7XFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkgPiAwLCB0ZXh0OiAkZGF0YS5kYXRhLmxldmVsKCkgKyAnLycgKyAkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1kYW5nZXJcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCI2MFxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwiMTAwXFxcIiBzdHlsZT1cXFwid2lkdGg6IDYwJTtcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyAnYXJpYS12YWx1ZW5vdyc6ICgkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAgPyAkZGF0YS5kYXRhLmxldmVsKCkvJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkqMTAwIDogMCkgfSwgc3R5bGU6IHsgd2lkdGg6ICgkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAgPyAkZGF0YS5kYXRhLmxldmVsKCkvJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkqMTAwIDogMCkgKyAnJScgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIiBkYXRhLWJpbmQ9XFxcImlmOiAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKSA9PSAtMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuZGFtYWdlQW1wbGlmaWNhdGlvbi5sZXZlbERvd25BYmlsaXR5KCRpbmRleCwgZGF0YS5kYXRhLCBldmVudCwgJHBhcmVudCk7IH1cXFwiPi08L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuZGFtYWdlQW1wbGlmaWNhdGlvbi5sZXZlbFVwQWJpbGl0eSgkaW5kZXgsIGRhdGEuZGF0YSwgZXZlbnQsICRwYXJlbnQpOyB9XFxcIj4rPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgYnRuLWdyb3VwLWp1c3RpZmllZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuZGFtYWdlQW1wbGlmaWNhdGlvbi50b2dnbGVCdWZmRGV0YWlsKCRpbmRleCwgZGF0YSwgZXZlbnQpOyB9LCBjc3M6IHsndG9nZ2xlZCc6ICRkYXRhLmRhdGEuaXNEZXRhaWx9XFxcIj5EZXRhaWxzPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtOSBib3R0b20tYnVmZmVyXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRkYXRhLmRhdGEuaXNEZXRhaWwoKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmRhbWFnZUFtcGxpZmljYXRpb24udG9nZ2xlQnVmZkRldGFpbCgkaW5kZXgsIGRhdGEuZGF0YSwgZXZlbnQpOyB9XFxcIj4mdGltZXM7PC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiaHRtbDogJHBhcmVudC5hYmlsaXR5KCkuZ2V0QWJpbGl0eVRvb2x0aXBEYXRhKCRkYXRhLmhlcm8sICRkYXRhLmRhdGEubmFtZSgpKVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiaWY6ICRkYXRhLmRhdGEubmFtZSgpIGluICRwYXJlbnQuZGFtYWdlQW1wbGlmaWNhdGlvbi5hYmlsaXR5RGF0YSAmJiAkcGFyZW50LmRhbWFnZUFtcGxpZmljYXRpb24uYnVmZnMoKVskaW5kZXgoKV0uZGF0YS5sZXZlbCgpID4gMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdidWZmLXNldHRpbmdzJywgcGFyYW1zOiAkcGFyZW50LmRhbWFnZUFtcGxpZmljYXRpb24uYWJpbGl0eVNldHRpbmdzRGF0YSgkZGF0YS5kYXRhLm5hbWUoKSwgJHBhcmVudCwgJGluZGV4KCkpIH1cXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWhvcml6b250YWxcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTMgY29udHJvbC1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiYnVmZnJlZHVjdGlvbnNlbGVjdFxcXCI+UmVkdWN0aW9uPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XFxcImJ1ZmZyZWR1Y3Rpb25zZWxlY3RcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGRhdGEtYmluZD1cXFwib3B0aW9uczogZGFtYWdlUmVkdWN0aW9uLmF2YWlsYWJsZURlYnVmZnMgLCBvcHRpb25zVGV4dDogJ2J1ZmZEaXNwbGF5TmFtZScsIHZhbHVlOiBkYW1hZ2VSZWR1Y3Rpb24uc2VsZWN0ZWRCdWZmXFxcIj48L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZGFtYWdlUmVkdWN0aW9uLmFkZEJ1ZmZcXFwiPkFkZDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSxldmVudCkgeyBkYW1hZ2VSZWR1Y3Rpb24ucmVtb3ZlQnVmZihkYXRhLCBldmVudCwgZGFtYWdlUmVkdWN0aW9uLnNlbGVjdGVkQnVmZigpLmJ1ZmZOYW1lKSB9XFxcIj5SZW1vdmU8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiIGRhdGEtYmluZD1cXFwiZm9yZWFjaDogZGFtYWdlUmVkdWN0aW9uLmJ1ZmZzXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiY3NzOiB7cm93OiAkZGF0YS5kYXRhLmlzRGV0YWlsKCkgfHwgKCRpbmRleCgpIDwgJHBhcmVudC5kYW1hZ2VSZWR1Y3Rpb24uYnVmZnMoKS5sZW5ndGgtMSAmJiAkcGFyZW50LmRhbWFnZVJlZHVjdGlvbi5idWZmcygpWyRpbmRleCgpKzFdLmRhdGEuaXNEZXRhaWwoKSksIHJvdzI6ICRkYXRhLmRhdGEuaXNEZXRhaWwoKSB8fCAoJGluZGV4KCkgPCAkcGFyZW50LmRhbWFnZVJlZHVjdGlvbi5idWZmcygpLmxlbmd0aC0xICYmICRwYXJlbnQuZGFtYWdlUmVkdWN0aW9uLmJ1ZmZzKClbJGluZGV4KCkrMV0uZGF0YS5pc0RldGFpbCgpKSB9XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTMgdGV4dC1jZW50ZXIgYm90dG9tLWJ1ZmZlciByb3cyXFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtMyc6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMic6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3R5bGU9XFxcInBhZGRpbmc6MHB4O21hcmdpbi1ib3R0b206MXB4O1xcXCIgY2xhc3M9XFxcImltZy1yb3VuZGVkIGFiaWxpdHlcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7IGFiaWxpdHlfYWN0aXZlOiAkZGF0YS5kYXRhLmlzQWN0aXZlKCkgfHwgJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEsIGFiaWxpdHlfaW5hY3RpdmU6ICEkZGF0YS5kYXRhLmlzQWN0aXZlKCkgJiYgJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPT0gLTEsIGJ0bjogJGRhdGEuZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPT0gLTEsICdidG4tZGVmYXVsdCc6ICRkYXRhLmRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpID09IC0xfSwgYXR0cjp7c3JjOiAnL21lZGlhL2ltYWdlcy9zcGVsbGljb25zLycgKyAkZGF0YS5kYXRhLm5hbWUoKSArICcucG5nJ30sIGNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmRhbWFnZVJlZHVjdGlvbi50b2dnbGVCdWZmKCRpbmRleCwgZGF0YS5kYXRhLCBldmVudCk7IH0sIGV2ZW50OiB7IGRibGNsaWNrOiBmdW5jdGlvbihkYXRhLGV2ZW50KSB7ICRwYXJlbnQuZGFtYWdlUmVkdWN0aW9uLnJlbW92ZUJ1ZmYoZGF0YSwgZXZlbnQsICRkYXRhLmRhdGEubmFtZSgpKSB9IH1cXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBzdHlsZT1cXFwicG9zaXRpb246cmVsYXRpdmVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XFxcInBvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7Y29sb3I6d2hpdGU7XFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkgPiAwLCB0ZXh0OiAkZGF0YS5kYXRhLmxldmVsKCkgKyAnLycgKyAkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1kYW5nZXJcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCI2MFxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwiMTAwXFxcIiBzdHlsZT1cXFwid2lkdGg6IDYwJTtcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyAnYXJpYS12YWx1ZW5vdyc6ICgkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAgPyAkZGF0YS5kYXRhLmxldmVsKCkvJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkqMTAwIDogMCkgfSwgc3R5bGU6IHsgd2lkdGg6ICgkcGFyZW50LmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YS5kYXRhKSA+IDAgPyAkZGF0YS5kYXRhLmxldmVsKCkvJHBhcmVudC5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEuZGF0YSkqMTAwIDogMCkgKyAnJScgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIiBkYXRhLWJpbmQ9XFxcImlmOiAkZGF0YS5kYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKSA9PSAtMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnQuZGFtYWdlUmVkdWN0aW9uLmxldmVsRG93bkFiaWxpdHkoJGluZGV4LCBkYXRhLmRhdGEsIGV2ZW50LCAkcGFyZW50KTsgfVxcXCI+LTwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudC5kYW1hZ2VSZWR1Y3Rpb24ubGV2ZWxVcEFiaWxpdHkoJGluZGV4LCBkYXRhLmRhdGEsIGV2ZW50LCAkcGFyZW50KTsgfVxcXCI+KzwvYT5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIGJ0bi1ncm91cC1qdXN0aWZpZWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmRhbWFnZVJlZHVjdGlvbi50b2dnbGVCdWZmRGV0YWlsKCRpbmRleCwgZGF0YSwgZXZlbnQpOyB9LCBjc3M6IHsndG9nZ2xlZCc6ICRkYXRhLmRhdGEuaXNEZXRhaWx9XFxcIj5EZXRhaWxzPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtOSBib3R0b20tYnVmZmVyXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRkYXRhLmRhdGEuaXNEZXRhaWwoKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50LmRhbWFnZVJlZHVjdGlvbi50b2dnbGVCdWZmRGV0YWlsKCRpbmRleCwgZGF0YS5kYXRhLCBldmVudCk7IH1cXFwiPiZ0aW1lczs8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJodG1sOiAkcGFyZW50LmFiaWxpdHkoKS5nZXRBYmlsaXR5VG9vbHRpcERhdGEoJGRhdGEuaGVybywgJGRhdGEuZGF0YS5uYW1lKCkpXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJpZjogJGRhdGEuZGF0YS5uYW1lKCkgaW4gJHBhcmVudC5kYW1hZ2VSZWR1Y3Rpb24uYWJpbGl0eURhdGEgJiYgJHBhcmVudC5kYW1hZ2VSZWR1Y3Rpb24uYnVmZnMoKVskaW5kZXgoKV0uZGF0YS5sZXZlbCgpID4gMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLThcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdidWZmLXNldHRpbmdzJywgcGFyYW1zOiAkcGFyZW50LmRhbWFnZVJlZHVjdGlvbi5hYmlsaXR5U2V0dGluZ3NEYXRhKCRkYXRhLmRhdGEubmFtZSgpLCAkcGFyZW50LCAkaW5kZXgoKSkgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFxcbiAgICAgICAgPGg0PkNhbGN1bGF0aW9ucyA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1xcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IHNob3dEYW1hZ2VBbXBDYWxjRGV0YWlscywgdGV4dDogIXNob3dEYW1hZ2VBbXBDYWxjRGV0YWlscygpID8gJ1Nob3cgZGV0YWlscycgOiAnSGlkZSBkZXRhaWxzJ1xcXCI+PC9hPjwvaDQ+XFxuICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlXFxcIj5cXG4gICAgICAgICAgICA8dGJvZHk+XFxuICAgICAgICAgICAgICAgIDwhLS0ga28gZm9yZWFjaDogZGFtYWdlSW5wdXRNb2RpZmllZCgpLmRhdGEgLS0+XFxuICAgICAgICAgICAgICAgIDx0ciBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRwYXJlbnQuc2hvd0RhbWFnZUFtcENhbGNEZXRhaWxzKClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuIHN0eWxlPVxcXCJ0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogJGRhdGEubGFiZWwgKyAnIGRhbWFnZSdcXFwiPjwvc3Bhbj48L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcImh0bWw6IE1hdGgucm91bmQoJGRhdGEudmFsdWUgKiAxMDApIC8gMTAwLCBzdHlsZToge2NvbG9yOiAkcGFyZW50LmdldERhbWFnZVR5cGVDb2xvcigkZGF0YS5kYW1hZ2VUeXBlKX1cXFwiPjwvc3Bhbj48L3RkPlxcbiAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgICAgICAgICAgPCEtLSBrbyBmb3JlYWNoOiAkZGF0YS5kYXRhIC0tPlxcbiAgICAgICAgICAgICAgICAgICAgPHRyIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudHNbMV0uc2hvd0RhbWFnZUFtcENhbGNEZXRhaWxzKClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRkYXRhLmxhYmVsXFxcIj48L3NwYW4+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogTWF0aC5yb3VuZCgkZGF0YS52YWx1ZSAqIDEwMCkgLyAxMDAsIGRpZmZTdHlsZTogJGRhdGEudmFsdWVcXFwiPjwvc3Bhbj48L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxcbiAgICAgICAgICAgICAgICA8dHIgZGF0YS1iaW5kPVxcXCJjc3M6IHtzdWJ0b3RhbDogJHBhcmVudC5zaG93RGFtYWdlQW1wQ2FsY0RldGFpbHMoKX1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudC5zaG93RGFtYWdlQW1wQ2FsY0RldGFpbHMoKVxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS5sYWJlbCArICcgZGFtYWdlIHN1YnRvdGFsJ1xcXCI+PC9zcGFuPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiAhJHBhcmVudC5zaG93RGFtYWdlQW1wQ2FsY0RldGFpbHMoKVxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS5sYWJlbCArICcgZGFtYWdlJ1xcXCI+PC9zcGFuPjwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogTWF0aC5yb3VuZCgkZGF0YS50b3RhbCAqIDEwMCkgLyAxMDAsIHN0eWxlOiB7Y29sb3I6ICRwYXJlbnQuZ2V0RGFtYWdlVHlwZUNvbG9yKCRkYXRhLmRhbWFnZVR5cGUpfVxcXCI+PC9zcGFuPjwvdGQ+XFxuICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgIDwhLS0gL2tvIC0tPlxcbiAgICAgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgICAgICA8dGQ+PHN0cm9uZyBkYXRhLWJpbmQ9XFxcInRleHQ6IGRhbWFnZUlucHV0TW9kaWZpZWQoKS5sYWJlbCArICcgZGFtYWdlJ1xcXCI+PC9zdHJvbmc+PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHN0cm9uZyBkYXRhLWJpbmQ9XFxcImh0bWw6IE1hdGgucm91bmQoZGFtYWdlSW5wdXRNb2RpZmllZCgpLnRvdGFsICogMTAwKSAvIDEwMCwgc3R5bGU6IHtjb2xvcjogZ2V0RGFtYWdlVHlwZUNvbG9yKGRhbWFnZUlucHV0TW9kaWZpZWQoKS5kYW1hZ2VUeXBlKX1cXFwiPjwvc3Ryb25nPjwvdGQ+XFxuICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgIDwvdGFibGU+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiIH0pO1xua28uY29tcG9uZW50cy5yZWdpc3RlcignYWJpbGl0eScsIHsgdGVtcGxhdGU6IFwiPGRpdiBkYXRhLWJpbmQ9XFxcImlmOiAkZGF0YS5kaXNwbGF5bmFtZSgpICE9ICdFbXB0eScgJiYgICgkZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9ISURERU4nKSA9PSAtMSB8fCAkZGF0YS5uYW1lKCkuaW5kZXhPZignaW52b2tlcl8nKSAhPSAtMSksXFxuc3R5bGU6IHtjbGVhcjogJGRhdGEubmFtZSgpID09ICdpbnZva2VyX2NvbGRfc25hcCcgfHwgJGRhdGEubmFtZSgpID09ICdpbnZva2VyX2NoYW9zX21ldGVvcicgPyAnYm90aCcgOiAnJ30sXFxuY3NzOiB7cm93OiAkZGF0YS5pc0RldGFpbCgpIHx8ICgkaW5kZXgoKSA8ICRwYXJlbnRzWzFdLmFiaWxpdHkoKS5hYmlsaXRpZXMoKS5sZW5ndGgtMSAmJiAkcGFyZW50c1sxXS5hYmlsaXR5KCkuYWJpbGl0aWVzKClbJGluZGV4KCkrMV0uaXNEZXRhaWwoKSksIHJvdzM6ICRkYXRhLmlzRGV0YWlsKCkgfHwgKCRpbmRleCgpIDwgJHBhcmVudHNbMV0uYWJpbGl0eSgpLmFiaWxpdGllcygpLmxlbmd0aC0xICYmICRwYXJlbnRzWzFdLmFiaWxpdHkoKS5hYmlsaXRpZXMoKVskaW5kZXgoKSsxXS5pc0RldGFpbCgpKSB9XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTMgdGV4dC1jZW50ZXIgYm90dG9tLWJ1ZmZlciByb3cyXFxcIiBkYXRhLWJpbmQ9XFxcImNzczogeydjb2wtbWQtMyc6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMic6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgICAgIDxpbWcgc3R5bGU9XFxcInBhZGRpbmc6MHB4O21hcmdpbi1ib3R0b206MXB4O1xcXCIgY2xhc3M9XFxcImltZy1yb3VuZGVkIGFiaWxpdHlcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7IGFiaWxpdHlfYWN0aXZlOiAkZGF0YS5pc0FjdGl2ZSgpIHx8ICRkYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSwgYWJpbGl0eV9pbmFjdGl2ZTogISRkYXRhLmlzQWN0aXZlKCkgJiYgJGRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpID09IC0xLCBidG46ICRkYXRhLmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSA9PSAtMSwgJ2J0bi1kZWZhdWx0JzogJGRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpID09IC0xfSwgYXR0cjp7c3JjOiAnL21lZGlhL2ltYWdlcy9zcGVsbGljb25zLycgKyAkZGF0YS5uYW1lKCkgKyAnLnBuZyd9LCBjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudHNbMV0uYWJpbGl0eSgpLnRvZ2dsZUFiaWxpdHkoJGluZGV4LCBkYXRhLCBldmVudCk7IH1cXFwiLz5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBzdHlsZT1cXFwicG9zaXRpb246cmVsYXRpdmVcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XFxcInBvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7Y29sb3I6d2hpdGU7XFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogJHBhcmVudHNbMV0uZ2V0QWJpbGl0eUxldmVsTWF4KCRkYXRhKSA+IDAsIHRleHQ6ICRkYXRhLmxldmVsKCkgKyAnLycgKyAkcGFyZW50c1sxXS5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEpXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLWRhbmdlclxcXCIgcm9sZT1cXFwicHJvZ3Jlc3NiYXJcXFwiIGFyaWEtdmFsdWVub3c9XFxcIjYwXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCIxMDBcXFwiIHN0eWxlPVxcXCJ3aWR0aDogNjAlO1xcXCIgZGF0YS1iaW5kPVxcXCJhdHRyOiB7ICdhcmlhLXZhbHVlbm93JzogKCRwYXJlbnRzWzFdLmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YSkgPiAwID8gJGRhdGEubGV2ZWwoKS8kcGFyZW50c1sxXS5nZXRBYmlsaXR5TGV2ZWxNYXgoJGRhdGEpKjEwMCA6IDApIH0sIHN0eWxlOiB7IHdpZHRoOiAoJHBhcmVudHNbMV0uZ2V0QWJpbGl0eUxldmVsTWF4KCRkYXRhKSA+IDAgPyAkZGF0YS5sZXZlbCgpLyRwYXJlbnRzWzFdLmdldEFiaWxpdHlMZXZlbE1heCgkZGF0YSkqMTAwIDogMCkgKyAnJScgfVxcXCI+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIiBkYXRhLWJpbmQ9XFxcImlmOiAkZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9OT1RfTEVBUk5BQkxFJykgPT0gLTFcXFwiPlxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBmdW5jdGlvbihkYXRhLCBldmVudCkgeyAkcGFyZW50c1sxXS5hYmlsaXR5KCkubGV2ZWxEb3duQWJpbGl0eSgkaW5kZXgsIGRhdGEsIGV2ZW50LCAkcGFyZW50c1sxXSk7IH1cXFwiPi08L2E+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7ICRwYXJlbnRzWzFdLmFiaWxpdHkoKS5sZXZlbFVwQWJpbGl0eSgkaW5kZXgsIGRhdGEsIGV2ZW50LCAkcGFyZW50c1sxXSk7IH1cXFwiPis8L2E+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtanVzdGlmaWVkXFxcIj5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudHNbMV0uYWJpbGl0eSgpLnRvZ2dsZUFiaWxpdHlEZXRhaWwoJGluZGV4LCBkYXRhLCBldmVudCk7IH0sIGNzczogeyd0b2dnbGVkJzogJGRhdGEuaXNEZXRhaWx9XFxcIj5EZXRhaWxzPC9hPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgYnRuLWdyb3VwLWp1c3RpZmllZFxcXCIgZGF0YS1iaW5kPVxcXCJpZjogJGRhdGEuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfTk9UX0xFQVJOQUJMRScpICE9IC0xXFxcIj5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBidG4tYmxvY2tcXFwiIHN0eWxlPVxcXCJ2aXNpYmlsaXR5OmhpZGRlbjtcXFwiPiZtZGFzaDs8L2E+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC05IGJvdHRvbS1idWZmZXIyXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6ICRkYXRhLmlzRGV0YWlsKClcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsgJHBhcmVudHNbMV0uYWJpbGl0eSgpLnRvZ2dsZUFiaWxpdHlEZXRhaWwoJGluZGV4LCBkYXRhLCBldmVudCk7IH1cXFwiPiZ0aW1lczs8L2J1dHRvbj5cXG4gICAgICAgIDxkaXYgZGF0YS1iaW5kPVxcXCJodG1sOiAkcGFyZW50c1sxXS5hYmlsaXR5KCkuZ2V0QWJpbGl0eVRvb2x0aXBEYXRhKCducGNfZG90YV9oZXJvXycgKyAkcGFyZW50c1sxXS5oZXJvSWQoKSwgJGRhdGEubmFtZSgpKVxcXCI+PC9kaXY+XFxuICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiaWY6ICRkYXRhLm5hbWUoKSBpbiAkcGFyZW50c1sxXS5hYmlsaXR5KCkuYWJpbGl0eURhdGEgJiYgJHBhcmVudHNbMV0uYWJpbGl0eSgpLmFiaWxpdGllcygpWyRpbmRleCgpXS5sZXZlbCgpID4gMFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIiBzdHlsZT1cXFwibWFyZ2luLXRvcDogMTBweFxcXCIgPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwidGVtcGxhdGU6IHsgbmFtZTogJ2FiaWxpdHktc2V0dGluZ3MtdGVtcGxhdGUnLCBkYXRhOiAkcGFyZW50c1sxXS5hYmlsaXR5KCkuYWJpbGl0eVNldHRpbmdzRGF0YSgkZGF0YS5uYW1lKCksICRwYXJlbnRzWzFdLCAkaW5kZXgoKSkgfVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XCIgfSk7XG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdzaG9wJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9zaG9wJykpO1xua28uY29tcG9uZW50cy5yZWdpc3Rlcignc3RhdCcsIHsgdGVtcGxhdGU6IFwiPHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBwYXJzZUZsb2F0KGhlcm9bc3RhdF0oKSkudG9TdHJpbmcoKVxcXCI+PC9zcGFuPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJHJvb3QuZ2V0RGlmZlRleHQoaGVyby5kaWZmW3N0YXRdKCkpLCBkaWZmQ3NzOiBoZXJvLmRpZmZbc3RhdF0sIGRpZmZDc3NTdGF0OiBzdGF0LCB2aXNpYmxlOiBoZXJvLnNob3dEaWZmXFxcIj48L3NwYW4+XCIgfSk7XG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdzdGF0czAnLCB7IHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMiBzdGF0czBcXFwiIGRhdGEtYmluZD1cXFwiY3NzOiB7J2NvbC1tZC0xMic6ICRyb290LmxheW91dCgpID09IDAsICdjb2wtbWQtMyc6ICRyb290LmxheW91dCgpID09IDF9XFxcIj5cXG4gICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1jb25kZW5zZWRcXFwiPlxcbiAgICA8dGJvZHk+XFxuICAgIDx0cj48dGQ+U3RyZW5ndGg6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAndG90YWxTdHInIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPkFnaWxpdHk6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAndG90YWxBZ2knIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPkludGVsbGlnZW5jZTo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICd0b3RhbEludCcgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+PGFiYnIgdGl0bGU9XFxcIk1vdmVtZW50IFNwZWVkXFxcIj5NUzwvYWJicj46PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAndG90YWxNb3ZlbWVudFNwZWVkJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPHRyPjx0ZD5UdXJuIFJhdGU6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAndG90YWxUdXJuUmF0ZScgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+U2lnaHQgUmFuZ2U6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJzxhYmJyIHRpdGxlPVxcXFwnRGF5XFxcXCc+JyArIHZpc2lvbnJhbmdlZGF5KCkgKyAnPC9hYmJyPi88YWJiciB0aXRsZT1cXFxcJ05pZ2h0XFxcXCc+JyArIHZpc2lvbnJhbmdlbmlnaHQoKSArICc8L2FiYnI+J1xcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgPC90Ym9keT5cXG4gICAgPC90YWJsZT5cXG48L2Rpdj5cIiB9KTtcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3N0YXRzMScsIHsgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIHN0YXRzMVxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWNvbmRlbnNlZFxcXCI+XFxuICAgIDx0Ym9keT5cXG4gICAgPHRyPjx0ZD5Bcm1vcjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICd0b3RhbEFybW9yUGh5c2ljYWwnIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPkhlYWx0aDo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICdoZWFsdGgnIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPkhlYWx0aCBSZWdlbjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICdoZWFsdGhyZWdlbicgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+TWFuYTo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICdtYW5hJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPHRyPjx0ZD5NYW5hIFJlZ2VuOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ21hbmFyZWdlbicgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+UGh5c2ljYWwgPGFiYnIgdGl0bGU9XFxcIkVmZmVjdGl2ZSBIaXQgUG9pbnRzXFxcIj5FSFA8L2FiYnI+OjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ2VocFBoeXNpY2FsJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPHRyPjx0ZD5NYWdpY2FsIDxhYmJyIHRpdGxlPVxcXCJFZmZlY3RpdmUgSGl0IFBvaW50c1xcXCI+RUhQPC9hYmJyPjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICdlaHBNYWdpY2FsJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPC90Ym9keT5cXG4gICAgPC90YWJsZT5cXG48L2Rpdj5cIiB9KTtcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3N0YXRzMicsIHsgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIHN0YXRzMlxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWNvbmRlbnNlZFxcXCI+XFxuICAgIDx0Ym9keT5cXG4gICAgPHRyPjx0ZD4lUGh5cyBSZXM6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAndG90YWxBcm1vclBoeXNpY2FsUmVkdWN0aW9uJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPHRyPjx0ZD4lTWFnaWMgUmVzOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ3RvdGFsTWFnaWNSZXNpc3RhbmNlJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPHRyPjx0ZD4lTGlmZXN0ZWFsOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ2xpZmVzdGVhbCcgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+JUV2YXNpb246PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAnZXZhc2lvbicgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+JUJhc2g6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAnYmFzaCcgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+JU1pc3MgQ2hhbmNlOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ21pc3NDaGFuY2UnIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHIgc3R5bGU9XFxcImRpc3BsYXk6IG5vbmVcXFwiPjx0ZCBjb2xzcGFuPTI+PGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tYmxvY2sgYnRuLXhzXFxcIiBkYXRhLWJpbmQ9XFxcImNzczoge2Rpc2FibGVkOiBjcml0SW5mbygpLnNvdXJjZXMubGVuZ3RoID09IDAgPyAnZGlzYWJsZWQnIDogJycsICd0b2dnbGVkJzogc2hvd0NyaXRpY2FsU3RyaWtlRGV0YWlsc30sIHRvZ2dsZTogc2hvd0NyaXRpY2FsU3RyaWtlRGV0YWlsc1xcXCI+Q3JpdGljYWwgU3RyaWtlIERldGFpbHM8L2E+PC90ZD48L3RyPlxcbiAgICA8L3Rib2R5PlxcbiAgICA8dGJvZHkgY2xhc3M9XFxcInRhYmxlZHJvcGRvd25cXFwiIHN0eWxlPVxcXCJib3JkZXItdG9wOjBcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2hvd0NyaXRpY2FsU3RyaWtlRGV0YWlscygpLGZvcmVhY2g6IGNyaXRJbmZvKCkuc291cmNlc1xcXCI+XFxuICAgIDx0cj48dGQgY29sc3Bhbj0yPjxzdHJvbmcgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkZGF0YS5uYW1lXFxcIj48L3N0cm9uZz48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+Q3JpdCBDaGFuY2U6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogKCRkYXRhLnRvdGFsY2hhbmNlICogMTAwKS50b0ZpeGVkKDIpICsgJyUnXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPkNyaXQgTXVsdGlwbGllcjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiAoJGRhdGEubXVsdGlwbGllciAqIDEwMCkudG9GaXhlZCgyKSArICclJ1xcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgPC90Ym9keT5cXG4gICAgPC90YWJsZT5cXG48L2Rpdj5cIiB9KTtcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3N0YXRzMycsIHsgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIHN0YXRzM1xcXCIgZGF0YS1iaW5kPVxcXCJjc3M6IHsnY29sLW1kLTEyJzogJHJvb3QubGF5b3V0KCkgPT0gMCwgJ2NvbC1tZC0zJzogJHJvb3QubGF5b3V0KCkgPT0gMX1cXFwiPlxcbiAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWNvbmRlbnNlZFxcXCI+XFxuICAgIDx0Ym9keT5cXG4gICAgPHRyPlxcbiAgICAgICAgPHRkPkRhbWFnZTo8L3RkPlxcbiAgICAgICAgPHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBkYXRhLWJpbmQ9XFxcImh0bWw6IGJhc2VEYW1hZ2UoKVswXS50b0ZpeGVkKDApXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkcm9vdC5nZXREaWZmVGV4dChkaWZmWydiYXNlRGFtYWdlJ10oKVswXSksIGNzczogeydkaWZmUG9zJzogZGlmZlsnYmFzZURhbWFnZSddKClbMF0gPiAwLCAnZGlmZk5lZyc6IGRpZmZbJ2Jhc2VEYW1hZ2UnXSgpWzBdIDwgMH0sIHZpc2libGU6IHNob3dEaWZmXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4+Jm5kYXNoOzwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBkYXRhLWJpbmQ9XFxcImh0bWw6IGJhc2VEYW1hZ2UoKVsxXS50b0ZpeGVkKDApXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gZGF0YS1iaW5kPVxcXCJodG1sOiAkcm9vdC5nZXREaWZmVGV4dChkaWZmWydiYXNlRGFtYWdlJ10oKVsxXSksIGNzczogeydkaWZmUG9zJzogZGlmZlsnYmFzZURhbWFnZSddKClbMV0gPiAwLCAnZGlmZk5lZyc6IGRpZmZbJ2Jhc2VEYW1hZ2UnXSgpWzFdIDwgMH0sIHZpc2libGU6IHNob3dEaWZmXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gc3R5bGU9XFxcImNvbG9yOmdyZWVuXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IGJvbnVzRGFtYWdlKCkgPiAwLCBodG1sOiAnICsgJyArIGJvbnVzRGFtYWdlKCkudG9GaXhlZCgwKVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJHJvb3QuZ2V0RGlmZlRleHQoZGlmZlsnYm9udXNEYW1hZ2UnXSgpKSwgY3NzOiB7J2RpZmZQb3MnOiBkaWZmWydib251c0RhbWFnZSddKCkgPiAwLCAnZGlmZk5lZyc6IGRpZmZbJ2JvbnVzRGFtYWdlJ10oKSA8IDB9LCB2aXNpYmxlOiBzaG93RGlmZlxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIHN0eWxlPVxcXCJjb2xvcjpyZWRcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogYm9udXNEYW1hZ2VSZWR1Y3Rpb24oKSAhPSAwLCBodG1sOiAnIC0gJyArIGJvbnVzRGFtYWdlUmVkdWN0aW9uKCkudG9GaXhlZCgwKVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJHJvb3QuZ2V0RGlmZlRleHQoZGlmZlsnYm9udXNEYW1hZ2VSZWR1Y3Rpb24nXSgpKSwgY3NzOiB7J2RpZmZQb3MnOiBkaWZmWydib251c0RhbWFnZVJlZHVjdGlvbiddKCkgPiAwLCAnZGlmZk5lZyc6IGRpZmZbJ2JvbnVzRGFtYWdlUmVkdWN0aW9uJ10oKSA8IDB9LCB2aXNpYmxlOiBzaG93RGlmZlxcXCI+PC9zcGFuPlxcbiAgICAgICAgPC90ZD5cXG4gICAgPC90cj5cXG4gICAgPHRyPjx0ZD48YWJiciB0aXRsZT1cXFwiSW5jcmVhc2VkIEF0dGFjayBTcGVlZFxcXCI+SUFTPC9hYmJyPjo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICdpYXMnIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPjxhYmJyIHRpdGxlPVxcXCJCYXNlIEF0dGFjayBUaW1lXFxcIj5CQVQ8L2FiYnI+OjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ2JhdCcgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+QXR0YWNrIFRpbWU6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwiY29tcG9uZW50OiB7IG5hbWU6ICdzdGF0JywgcGFyYW1zOiB7J2hlcm8nOiAkZGF0YSwgJ3N0YXQnOiAnYXR0YWNrVGltZScgfSB9XFxcIj48L3RkPjwvdHI+XFxuICAgIDx0cj48dGQ+QXR0YWNrICZmcmFzbDsgU2VjOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcImNvbXBvbmVudDogeyBuYW1lOiAnc3RhdCcsIHBhcmFtczogeydoZXJvJzogJGRhdGEsICdzdGF0JzogJ2F0dGFja3NQZXJTZWNvbmQnIH0gfVxcXCI+PC90ZD48L3RyPlxcbiAgICA8dHI+PHRkPkF0dGFjayBSYW5nZTo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJjb21wb25lbnQ6IHsgbmFtZTogJ3N0YXQnLCBwYXJhbXM6IHsnaGVybyc6ICRkYXRhLCAnc3RhdCc6ICd0b3RhbGF0dGFja3JhbmdlJyB9IH1cXFwiPjwvdGQ+PC90cj5cXG4gICAgPC90Ym9keT5cXG4gICAgPC90YWJsZT5cXG48L2Rpdj5cIiB9KTtcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3N0YXRzLWFkZGl0aW9uYWwnLCB7IHRlbXBsYXRlOiBcIjx0YWJsZSBjbGFzcz1cXFwidGFibGUgdGFibGUtY29uZGVuc2VkXFxcIj5cXG4gICAgPHRib2R5PlxcbiAgICAgICAgPHRyPjx0ZD5CYXNlIFN0cmVuZ3RoOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZXN0cmVuZ3RoXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD5TdHJlbmd0aCBHYWluOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9EYXRhKCkuYXR0cmlidXRlc3RyZW5ndGhnYWluXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD5CYXNlIEFnaWxpdHk6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogaGVyb0RhdGEoKS5hdHRyaWJ1dGViYXNlYWdpbGl0eVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgIDx0cj48dGQ+QWdpbGl0eSBHYWluOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9EYXRhKCkuYXR0cmlidXRlYWdpbGl0eWdhaW5cXFwiPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICA8dHI+PHRkPkJhc2UgSW50ZWxsaWdlbmNlOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZWludGVsbGlnZW5jZVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgIDx0cj48dGQ+SW50ZWxsaWdlbmNlIEdhaW46PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogaGVyb0RhdGEoKS5hdHRyaWJ1dGVpbnRlbGxpZ2VuY2VnYWluXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD5CYXNlIEFybW9yOjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IGhlcm9EYXRhKCkuYXJtb3JwaHlzaWNhbFxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgIDx0cj48dGQ+PGFiYnIgdGl0bGU9XFxcIkJhc2UgQXJtb3IgKyBhcm1vciBmcm9tIGJhc2UgYWdpbGl0eVxcXCI+U3RhcnRpbmcgQXJtb3I6PC9hYmJyPjwvdGQ+PHRkIGNsYXNzPVxcXCJ0ZXh0LXJpZ2h0XFxcIj48c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IHBhcnNlRmxvYXQoJGRhdGEuc3RhcnRpbmdBcm1vcigpKS50b1N0cmluZygpXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD5CYXNlIE1hZ2ljIFJlczo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBoZXJvRGF0YSgpLm1hZ2ljYWxyZXNpc3RhbmNlICsgJyUnXFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD5CYXNlIEF0dGFjayBQb2ludDo8L3RkPjx0ZCBjbGFzcz1cXFwidGV4dC1yaWdodFxcXCI+PHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBoZXJvRGF0YSgpLmF0dGFja3BvaW50XFxcIj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD48YWJiciBkYXRhLWJpbmQ9XFxcImF0dHI6IHsgdGl0bGU6ICdUb3RhbCBleHBlcmllbmNlIHJlcXVpcmVkIHRvIHJlYWNoIGxldmVsICcgKyAkZGF0YS5zZWxlY3RlZEhlcm9MZXZlbCgpIH1cXFwiPlRvdGFsIEV4cDo8L2FiYnI+PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogJGRhdGEudG90YWxFeHAoKVxcXCI+PC9zcGFuPjwvc3Bhbj48L3RkPjwvdHI+XFxuICAgICAgICA8dHI+PHRkPjxhYmJyIHRpdGxlPVxcXCJFeHBlcmllbmNlIHJlcXVpcmVkIGZvciBuZXh0IGxldmVsXFxcIj5OZXh0IGxldmVsIGV4cDo8L2FiYnI+PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwiaHRtbDogJGRhdGEubmV4dExldmVsRXhwKClcXFwiPjwvc3Bhbj48L3NwYW4+PC90ZD48L3RyPlxcbiAgICAgICAgPHRyPjx0ZD5SZXNwYXduIFRpbWU6PC90ZD48dGQgY2xhc3M9XFxcInRleHQtcmlnaHRcXFwiPjxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogJGRhdGEucmVzcGF3blRpbWUoKVxcXCI+PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgPC90Ym9keT5cXG48L3RhYmxlPlwiIH0pO1xuXG4vLyBUaGUgYXBwIGV4dGVuZHMgdGhlIGhlcm9jYWxjIGxpYnJhcnksIHByb3ZpZGVzIGEgZnJvbnRlbmRcbnZhciBteSA9IHJlcXVpcmUoXCIuLi9oZXJvY2FsYy9tYWluXCIpO1xudmFyIGdldEl0ZW1Ub29sdGlwRGF0YSA9IHJlcXVpcmUoXCIuLi9oZXJvY2FsYy9oZXJvY2FsY190b29sdGlwc19pdGVtXCIpO1xudmFyIGdldEFiaWxpdHlUb29sdGlwRGF0YSA9IHJlcXVpcmUoXCIuLi9oZXJvY2FsYy9oZXJvY2FsY190b29sdGlwc19hYmlsaXR5XCIpO1xubXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbC5wcm90b3R5cGUuZ2V0QWJpbGl0eVRvb2x0aXBEYXRhID0gZnVuY3Rpb24gKGhlcm8sIGVsKSB7XG4gICAgcmV0dXJuIGdldEFiaWxpdHlUb29sdGlwRGF0YShteS5wcm90b3R5cGUuaGVyb0RhdGEsIG15LnByb3RvdHlwZS51bml0RGF0YSwgaGVybywgZWwpO1xufVxuLy9yZXF1aXJlKFwiLi9oZXJvY2FsY190b29sdGlwc1wiKTtcbnJlcXVpcmUoXCIuL2hlcm92aWV3bW9kZWxcIik7XG5cbm15LnByb3RvdHlwZS5QbGF5ZXJDb2xvcnMgPSBbXG4gICAgXCIjMkU2QUU2XCIsIC8vQmx1ZVxuICAgIFwiIzVERTZBRFwiLCAvL1RlYWxcbiAgICBcIiNBRDAwQURcIiwgLy9QdXJwbGVcbiAgICBcIiNEQ0Q5MEFcIiwgLy9ZZWxsb3dcbiAgICBcIiNFNjYyMDBcIiwgLy9PcmFuZ2VcbiAgICBcIiNFNjdBQjBcIiwgLy9QaW5rXG4gICAgXCIjOTJBNDQwXCIsIC8vUHVzIFllbGxvd1xuICAgIFwiIzVDQzVFMFwiLCAvL0xpZ2h0IEJsdWVcbiAgICBcIiMwMDc3MUZcIiwgLy9HcmVlblxuICAgIFwiIzk1NjAwMFwiIC8vQnJvd25cbl07XG5cbm15LnByb3RvdHlwZS5UYWIgPSBmdW5jdGlvbiAoaWQsIGhyZWYsIGRhdGEsIHRleHQsIGNvbG9yLCB0ZW1wbGF0ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLmlkID0gaWQ7XG4gICAgc2VsZi5ocmVmID0gaHJlZjtcbiAgICBzZWxmLmNvbG9yID0gY29sb3I7XG4gICAgc2VsZi5kYXRhID0gZGF0YTtcbiAgICBzZWxmLmRhdGEuaWQgPSBrby5vYnNlcnZhYmxlKHNlbGYuaHJlZik7XG4gICAgc2VsZi50ZXh0ID0gdGV4dDtcbiAgICBzZWxmLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgcmV0dXJuIHNlbGY7XG59XG5teS5wcm90b3R5cGUuVGFiLnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICBocmVmOiB0aGlzLmhyZWYsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICB0ZXh0OiB0aGlzLnRleHQsXG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlXG4gICAgfVxufVxuXG5teS5wcm90b3R5cGUuVGFiR3JvdXAgPSBmdW5jdGlvbiAoaGVybywgdW5pdCwgY2xvbmUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5oZXJvID0gaGVybztcbiAgICBzZWxmLnVuaXQgPSB1bml0O1xuICAgIHNlbGYuY2xvbmUgPSBjbG9uZTtcbiAgICBzZWxmLmlsbHVzaW9ucyA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7XG4gICAgcmV0dXJuIHNlbGY7XG59XG5teS5wcm90b3R5cGUuVGFiR3JvdXAucHJvdG90eXBlLnRvSlMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVybzogdGhpcy5oZXJvLnRvSlMoKSxcbiAgICAgICAgdW5pdDogdGhpcy51bml0LnRvSlMoKSxcbiAgICAgICAgY2xvbmU6IHRoaXMuY2xvbmUudG9KUygpLFxuICAgICAgICBpbGx1c2lvbnM6IHRoaXMuaWxsdXNpb25zKCkubWFwKGZ1bmN0aW9uIChpbGx1c2lvbikgeyByZXR1cm4gaWxsdXNpb24udG9KUygpOyB9KVxuICAgIH1cbn1cblxubXkucHJvdG90eXBlLkhlcm9DYWxjdWxhdG9yVmlld01vZGVsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLmhlcm9lcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIHNlbGYuaGVyb2VzLnB1c2gobmV3IG15LnByb3RvdHlwZS5IZXJvQ2FsY3VsYXRvck1vZGVsKGkpKTtcbiAgICB9XG4gICAgXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICBmb3IgKHZhciBqID0gNTsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHNlbGYuaGVyb2VzW2pdKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmhlcm9lc1tpXS5lbmVtaWVzLnB1c2guYXBwbHkoc2VsZi5oZXJvZXNbaV0uZW5lbWllcywgYXJyKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDU7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA1OyBqKyspIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHNlbGYuaGVyb2VzW2pdKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmhlcm9lc1tpXS5lbmVtaWVzLnB1c2guYXBwbHkoc2VsZi5oZXJvZXNbaV0uZW5lbWllcywgYXJyKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gaikgYXJyLnB1c2goc2VsZi5oZXJvZXNbal0pO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuaGVyb2VzW2ldLm90aGVySGVyb2VzLnB1c2guYXBwbHkoc2VsZi5oZXJvZXNbaV0ub3RoZXJIZXJvZXMsIGFycik7XG4gICAgfVxuICAgIFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBzZWxmLmhlcm9lc1tpXS5jbG9uZSA9IGtvLm9ic2VydmFibGUobmV3IG15LnByb3RvdHlwZS5DbG9uZVZpZXdNb2RlbCgnbWVlcG8nLCBzZWxmLmhlcm9lc1tpXSkpO1xuICAgICAgICBzZWxmLmhlcm9lc1tpXS51bml0ID0ga28ub2JzZXJ2YWJsZShuZXcgbXkucHJvdG90eXBlLlVuaXRWaWV3TW9kZWwoJ2FiYWRkb24nLCBzZWxmLmhlcm9lc1tpXSkpO1xuICAgICAgICBcbiAgICAgICAgc2VsZi5oZXJvZXNbaV0uc2VsZWN0ZWRDb21wYXJlKHNlbGYuaGVyb2VzW2ldLmF2YWlsYWJsZUNvbXBhcmUoKVtpIDwgNSA/IDQgKyBpIDogaSAtIDVdKTtcbiAgICAgICAgc2VsZi5oZXJvZXNbaV0uc2VsZWN0ZWRFbmVteShzZWxmLmhlcm9lc1tpXS5hdmFpbGFibGVFbmVtaWVzKClbaSAlIDVdKTtcbiAgICAgICAgLy9zZWxmLmhlcm9lc1tpXS5lbmVteSA9IGtvLm9ic2VydmFibGUoc2VsZi5oZXJvZXNbaSA8IDIgPyAyIDogMF0pO1xuICAgICAgICBzZWxmLmhlcm9lc1tpXS51bml0KCkuZW5lbXkoc2VsZi5oZXJvZXNbaV0uZW5lbXkoKSk7XG4gICAgICAgIC8vc2VsZi5oZXJvZXNbaV0udW5pdCgpLmVuZW15ID0ga28ub2JzZXJ2YWJsZShzZWxmLmhlcm9lc1tpIDwgMiA/IDIgOiAwXSk7XG4gICAgICAgIC8vc2VsZi5oZXJvZXNbaV0uaGVyb0NvbXBhcmUgPSBrby5vYnNlcnZhYmxlKHNlbGYuaGVyb2VzWzEgLSAoaSAlIDIpICsgKGkgPCAyID8gMCA6IDIpXSk7XG4gICAgICAgIFxuICAgICAgICBzZWxmLmhlcm9lc1tpXS51bml0KCkuc2VsZWN0ZWRVbml0KHNlbGYuaGVyb2VzW2ldLnVuaXQoKS5hdmFpbGFibGVVbml0cygpWzBdKTtcbiAgICAgICAgLy9zZWxmLmhlcm9lc1tpXS5zZWxlY3RlZEhlcm8oc2VsZi5oZXJvZXNbaV0uYXZhaWxhYmxlSGVyb2VzKClbaSA8IDIgPyAwIDogMl0pO1xuICAgICAgICBzZWxmLmhlcm9lc1tpXS5pbGx1c2lvbnMuc3Vic2NyaWJlKGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlc1tpXS5zdGF0dXMgPT0gJ2FkZGVkJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSB0aGlzLmluZGV4IDwgMiA/ICcjNWNiODVjJyA6ICcjZDk1MzRmJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSBteS5wcm90b3R5cGUudW5pcXVlSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50YWJzKClbdGhpcy5pbmRleF0uaWxsdXNpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLlRhYihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWxsdXNpb25UYWInICsgdGhpcy5pbmRleCArICctJyArIGosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lsbHVzaW9uUGFuZScgKyB0aGlzLmluZGV4ICsgJy0nICsgaixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlcm9lc1t0aGlzLmluZGV4XS5pbGx1c2lvbnMoKVtzZWxmLnRhYnMoKVt0aGlzLmluZGV4XS5pbGx1c2lvbnMoKS5sZW5ndGhdKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0lsbHVzaW9uICcgKyBqLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbGx1c2lvbi1wYW5lJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHt2bTogdGhpcywgaW5kZXg6IGl9LCBcImFycmF5Q2hhbmdlXCIpO1xuICAgIH1cbiAgICAvL3NlbGYuaGVyb2VzWzBdLnNob3dVbml0VGFiKHRydWUpO1xuICAgIHNlbGYuaGVyb2VzWzBdLmJvdW5kKHRydWUpO1xuICAgIHNlbGYudGFicyA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7XG4gICAgdmFyIHRhYnNBcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgLy92YXIgY29sb3IgPSBpIDwgNSA/ICcjNWNiODVjJyA6ICcjZDk1MzRmJztcbiAgICAgICAgdmFyIGNvbG9yID0gbXkucHJvdG90eXBlLlBsYXllckNvbG9yc1tpXTtcbiAgICAgICAgdmFyIHRhYkdyb3VwID0gbmV3IG15LnByb3RvdHlwZS5UYWJHcm91cChcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuVGFiKCdoZXJvVGFiJyArIGksICdoZXJvUGFuZScgKyBpLCBzZWxmLmhlcm9lc1tpXSwgJ0hlcm8gJyArIGksIGNvbG9yLCAnaGVyby1wYW5lJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLlRhYigndW5pdFRhYicgKyBpLCAndW5pdFBhbmUnICsgaSwgc2VsZi5oZXJvZXNbaV0udW5pdCgpLCAnVW5pdCAnICsgaSwgY29sb3IsICd1bml0LXBhbmUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuVGFiKCdjbG9uZVRhYicgKyBpLCAnY2xvbmVQYW5lJyArIGksIHNlbGYuaGVyb2VzW2ldLmNsb25lKCksICdNZWVwbyBDbG9uZSAnICsgaSwgY29sb3IsICdjbG9uZS1wYW5lJylcbiAgICAgICAgKTtcbiAgICAgICAgLy9zZWxmLnRhYnMucHVzaCh0YWJHcm91cCk7XG4gICAgICAgIHRhYnNBcnIucHVzaCh0YWJHcm91cCk7XG4gICAgfVxuICAgIHNlbGYudGFicy5wdXNoLmFwcGx5KHNlbGYudGFicywgdGFic0Fycik7Ly8uc2xpY2UoMCwgMSkpO1xuXG4gICAgc2VsZi5zZWxlY3RlZEl0ZW0gPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgc2VsZi5sYXlvdXQgPSBrby5vYnNlcnZhYmxlKFwiMVwiKTtcbiAgICBzZWxmLmRpc3BsYXlTaG9wID0ga28ub2JzZXJ2YWJsZSh0cnVlKTtcbiAgICBzZWxmLmRpc3BsYXlTaG9wSXRlbVRvb2x0aXAgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xuICAgIHNlbGYuYWxsSXRlbXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW1xuICAgICAgICB7bmFtZTogJ1N0ciwgQWdpLCBJbnQsIE1TLCBUdXJuLCBTaWdodCcsIHZhbHVlOiAnc3RhdHMwJ30sXG4gICAgICAgIHtuYW1lOiAnQXJtb3IsIEhlYWx0aCwgTWFuYSwgUmVnZW4sIEVIUCcsIHZhbHVlOiAnc3RhdHMxJ30sXG4gICAgICAgIHtuYW1lOiAnUGh5cyBSZXMsIE1hZ2ljIFJlcywgTGlmZXN0ZWFsLCBFdmFzaW9uLCBCYXNoLCBNaXNzJywgdmFsdWU6ICdzdGF0czInfSxcbiAgICAgICAge25hbWU6ICdEYW1hZ2UsIElBUywgQkFULCBBdHRhY2snLCB2YWx1ZTogJ3N0YXRzMyd9XG4gICAgXSk7IC8vIEluaXRpYWwgaXRlbXNcbiAgICBzZWxmLnNlbGVjdGVkSXRlbXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pOyBcbiAgICBzZWxmLm1vdmVVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gc2VsZi5hbGxJdGVtcy5pbmRleE9mKHNlbGYuc2VsZWN0ZWRJdGVtcygpWzBdKSxcbiAgICAgICAgICAgIGVuZCA9IHNlbGYuYWxsSXRlbXMuaW5kZXhPZihzZWxmLnNlbGVjdGVkSXRlbXMoKVtzZWxmLnNlbGVjdGVkSXRlbXMoKS5sZW5ndGggLSAxXSk7XG4gICAgICAgIGlmIChzdGFydCA+IDApIHtcbiAgICAgICAgICAgIHZhciBlID0gc2VsZi5hbGxJdGVtcy5zcGxpY2Uoc3RhcnQgLSAxLCAxKTtcbiAgICAgICAgICAgIHNlbGYuYWxsSXRlbXMuc3BsaWNlKGVuZCwgMCwgZVswXSk7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNlbGYubW92ZURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHNlbGYuYWxsSXRlbXMuaW5kZXhPZihzZWxmLnNlbGVjdGVkSXRlbXMoKVswXSksXG4gICAgICAgICAgICBlbmQgPSBzZWxmLmFsbEl0ZW1zLmluZGV4T2Yoc2VsZi5zZWxlY3RlZEl0ZW1zKClbc2VsZi5zZWxlY3RlZEl0ZW1zKCkubGVuZ3RoIC0gMV0pOyAgICAgICAgXG4gICAgICAgIGlmIChlbmQgPCBzZWxmLmFsbEl0ZW1zKCkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdmFyIGUgPSBzZWxmLmFsbEl0ZW1zLnNwbGljZShlbmQgKyAxLCAxKTtcbiAgICAgICAgICAgIHNlbGYuYWxsSXRlbXMuc3BsaWNlKHN0YXJ0LCAwLCBlWzBdKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgc2VsZi5zZWxlY3RlZFRhYklkID0ga28ub2JzZXJ2YWJsZSgnaGVyb1RhYjAnKTtcbiAgICBzZWxmLmdldFNlbGVjdGVkVGFiID0gZnVuY3Rpb24gKHRhYklkKSB7XG4gICAgICAgIHZhciBpbmRpY2VzID0gdGFiSWQucmVwbGFjZSgnaGVyb1RhYicsICcnKS5yZXBsYWNlKCdjbG9uZVRhYicsICcnKS5yZXBsYWNlKCd1bml0VGFiJywgJycpLnJlcGxhY2UoJ2lsbHVzaW9uVGFiJywgJycpLnNwbGl0KCctJyksXG4gICAgICAgICAgICBpbmRleCA9IGluZGljZXNbMF0sXG4gICAgICAgICAgICB0YWIgPSBzZWxmLnRhYnMoKVtpbmRleF07XG4gICAgICAgIHJldHVybiB0YWI7XG4gICAgfVxuICAgIHNlbGYuc2VsZWN0ZWRUYWIgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qdmFyIGluZGljZXMgPSBzZWxmLnNlbGVjdGVkVGFiSWQoKS5yZXBsYWNlKCdoZXJvVGFiJywgJycpLnJlcGxhY2UoJ2Nsb25lVGFiJywgJycpLnJlcGxhY2UoJ3VuaXRUYWInLCAnJykucmVwbGFjZSgnaWxsdXNpb25UYWInLCAnJykuc3BsaXQoJy0nKSxcbiAgICAgICAgICAgIGluZGV4ID0gaW5kaWNlc1swXSxcbiAgICAgICAgICAgIHRhYiA9IHNlbGYudGFicygpW2luZGV4XTsqL1xuICAgICAgICB2YXIgdGFiID0gc2VsZi5nZXRTZWxlY3RlZFRhYihzZWxmLnNlbGVjdGVkVGFiSWQoKSk7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkVGFiSWQoKS5pbmRleE9mKCdoZXJvJykgIT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWIuaGVybztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLnNlbGVjdGVkVGFiSWQoKS5pbmRleE9mKCd1bml0JykgIT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWIudW5pdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLnNlbGVjdGVkVGFiSWQoKS5pbmRleE9mKCdjbG9uZScpICE9IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFiLmNsb25lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuc2VsZWN0ZWRUYWJJZCgpLmluZGV4T2YoJ2lsbHVzaW9uJykgIT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWIuaWxsdXNpb25zKCkuZmluZChmdW5jdGlvbiAodGFiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYi5pZCA9PSBzZWxmLnNlbGVjdGVkVGFiSWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYudGFicygpWzBdLmhlcm87XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLnNlbGVjdGVkVGFicyA9IGtvLm9ic2VydmFibGVBcnJheShbJ2hlcm9UYWIwJywgJ2hlcm9UYWIxJ10pO1xuICAgIC8vc2VsZi5zZWxlY3RlZFRhYnMucHVzaCgnaGVyb1RhYjAnKTtcbiAgICAvL3NlbGYuc2VsZWN0ZWRUYWJzLnB1c2goJ2hlcm9UYWIxJyk7XG4gICAgc2VsZi5ib3VuZFNldHRpbmdzID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgc2VsZi5jbGlja1RhYiA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCwgaW5kZXgpIHtcbiAgICAgICAgLyppZiAoZXZlbnQudGFyZ2V0LmlkICE9ICdzZXR0aW5nc1RhYicpIHtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRUYWJJZChldmVudC50YXJnZXQuaWQpO1xuICAgICAgICB9Ki9cbiAgICAgICAgc2VsZi5zZWxlY3RlZFRhYklkKGV2ZW50LnRhcmdldC5pZCk7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkVGFicygpWzFdICE9IGV2ZW50LnRhcmdldC5pZCkge1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZFRhYnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRUYWJzLnB1c2goZXZlbnQudGFyZ2V0LmlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZFRhYigpLmRhdGEuaGFzT3duUHJvcGVydHkoJ2JvdW5kJykpIHtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRUYWIoKS5kYXRhLmJvdW5kKHRydWUpO1xuXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgYnVpbGQgZXhwbG9yZXIgZ3JhcGggcmVuZGVyc1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZFRhYigpLmRhdGEuYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEudmFsdWVIYXNNdXRhdGVkKCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSAnc2V0dGluZ3NUYWInKSBzZWxmLmJvdW5kU2V0dGluZ3ModHJ1ZSk7XG4gICAgfTtcbiAgICBzZWxmLmlzU2Vjb25kVGFiID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnNlbGVjdGVkVGFicygpLmluZGV4T2YoaWQpID4gLTEgJiYgc2VsZi5zZWxlY3RlZFRhYklkKCkgIT0gaWQ7XG4gICAgfVxuICAgIFxuICAgIHNlbGYuc2hvd1NpZGVUYWJJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gc2VsZi5zZWxlY3RlZFRhYnMoKS5pbmRleE9mKGlkKSA+IC0xICYmIHNlbGYuc2lkZVZpZXcoKTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYucmVtb3ZlVGFiID0gZnVuY3Rpb24gKGluZGV4LCBkYXRhLCBldmVudCwgdGFiKSB7XG4gICAgICAgIGlmIChkYXRhLmlkID09IHNlbGYuc2VsZWN0ZWRUYWJJZCgpKSB7XG4gICAgICAgICAgICAvL3NlbGYuc2VsZWN0ZWRUYWJJZCgnaGVyb1RhYjAnKTtcbiAgICAgICAgICAgIHNlbGYuY2xpY2tUYWIobnVsbCwge3RhcmdldDoge2lkOiAnaGVyb1RhYjAnfX0pO1xuICAgICAgICAgICAgJCgnI2hlcm9UYWIwJykudGFiKCdzaG93Jyk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi50YWJzKClbdGFiXS5pbGx1c2lvbnMucmVtb3ZlKGZ1bmN0aW9uIChpbGx1c2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIGlsbHVzaW9uID09IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmhlcm9lc1t0YWJdLmlsbHVzaW9ucy5yZW1vdmUoZnVuY3Rpb24gKGlsbHVzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gaWxsdXNpb24oKSA9PSBkYXRhLmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5zaWRlVmlldyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHNlbGYuc2lkZVZpZXcuc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5zaG9wUG9wb3V0KCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRpc3BsYXlTaG9wKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5zZWxlY3RlZFRhYnMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB0YWIgPSBzZWxmLmdldFNlbGVjdGVkVGFiKHNlbGYuc2VsZWN0ZWRUYWJzKClbaV0pO1xuICAgICAgICAgICAgICAgIGlmICh0YWIgJiYgdGFiLmhlcm8uZGF0YS5oYXNPd25Qcm9wZXJ0eSgnYm91bmQnKSkge1xuICAgICAgICAgICAgICAgICAgICB0YWIuaGVyby5kYXRhLmJvdW5kKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYubGF5b3V0KFwiMFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZhciAkd2luZG93ID0gJCh3aW5kb3cpO1xuICAgIHNlbGYud2luZG93V2lkdGggPSBrby5vYnNlcnZhYmxlKCR3aW5kb3cud2lkdGgoKSk7XG4gICAgc2VsZi53aW5kb3dIZWlnaHQgPSBrby5vYnNlcnZhYmxlKCR3aW5kb3cuaGVpZ2h0KCkpO1xuICAgICR3aW5kb3cucmVzaXplKGZ1bmN0aW9uICgpIHsgXG4gICAgICAgIHNlbGYud2luZG93V2lkdGgoJHdpbmRvdy53aWR0aCgpKTtcbiAgICAgICAgc2VsZi53aW5kb3dIZWlnaHQoJHdpbmRvdy5oZWlnaHQoKSk7XG4gICAgfSk7XG4gICAgc2VsZi5zaG9wRG9jayA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHNlbGYuc2hvcERvY2suc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGYuc2hvcFBvcG91dChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlbGYuc2hvcERvY2tUcmlnZ2VyID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLndpbmRvd1dpZHRoKCk7XG4gICAgICAgIHNlbGYuc2hvcERvY2soKTtcbiAgICB9KTtcbiAgICBzZWxmLnNob3BQb3BvdXQgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICBzZWxmLnNob3BQb3BvdXQuc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGYuZGlzcGxheVNob3AodHJ1ZSk7XG4gICAgICAgICAgICAkKCBcIiNzaG9wLWRpYWxvZ1wiICkuZGlhbG9nKHtcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogMzgwLFxuICAgICAgICAgICAgICAgIG1pbkhlaWdodDogMCxcbiAgICAgICAgICAgICAgICBjbG9zZVRleHQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24gKCBldmVudCwgdWkgKSB7XG4gICAgICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0Lm9mZnNldFBhcmVudCkuZmluZCgnLnVpLWRpYWxvZy10aXRsZWJhcicpLmZpbmQoJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2Nsb3NlIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHNob3AtYnV0dG9uIGJ0biBidG4tZGVmYXVsdCBidG4teHMgcHVsbC1yaWdodCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIGNsb3NlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoJ21hcmdpbi1yaWdodCcsJzBweCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucGFyZW50KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJyNzaG9wLW1pbmltaXplJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCcjc2hvcC1tYXhpbWl6ZScpKTtcbiAgICAgICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQub2Zmc2V0UGFyZW50KS5maW5kKCcudWktZGlhbG9nLXRpdGxlYmFyJykuZGJsY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5U2hvcCghc2VsZi5kaXNwbGF5U2hvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCBldmVudCwgdWkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvcFBvcG91dChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkKCcjc2hvcC1jb250YWluZXInKS5wcmVwZW5kKCQoJyNzaG9wLW1pbmltaXplJykpLnByZXBlbmQoJCgnI3Nob3AtbWF4aW1pemUnKSk7XG4gICAgICAgICAgICAkKCBcIiNzaG9wLWRpYWxvZ1wiICkuZGlhbG9nKFwiZGVzdHJveVwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2VsZi5hZGRJdGVtID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWRUYWIoKS5kYXRhLmJ1aWxkRXhwbG9yZXIuZ2V0U2VsZWN0ZWRJbnZlbnRvcnkoKS5hZGRJdGVtKGRhdGEsIGV2ZW50KTtcbiAgICB9XG4gICAgc2VsZi5pdGVtT3B0aW9ucyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuc2VsZWN0ZWRUYWIoKS5kYXRhLmludmVudG9yeS5pdGVtT3B0aW9ucygpO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuY2hhbmdlU2VsZWN0ZWRJdGVtID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIHNlbGYuaXRlbUlucHV0VmFsdWUoMSk7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWRJdGVtKGV2ZW50LnRhcmdldC5pZCk7XG4gICAgfVxuICAgIFxuICAgIHNlbGYuZ2V0SXRlbVRvb2x0aXBEYXRhID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0SXRlbVRvb2x0aXBEYXRhKG15LnByb3RvdHlwZS5pdGVtRGF0YSwgc2VsZi5zZWxlY3RlZEl0ZW0oKSk7XG4gICAgfSwgdGhpcyk7XG4gICAgc2VsZi5nZXRJdGVtSW5wdXRMYWJlbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG15LnByb3RvdHlwZS5zdGFja2FibGVJdGVtcy5pbmRleE9mKHNlbGYuc2VsZWN0ZWRJdGVtKCkpICE9IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1N0YWNrIFNpemUnXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobXkucHJvdG90eXBlLmxldmVsaXRlbXMuaW5kZXhPZihzZWxmLnNlbGVjdGVkSXRlbSgpKSAhPSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuICdVcGdyYWRlIExldmVsJ1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuc2VsZWN0ZWRJdGVtKCkgPT0gJ2Jsb29kc3RvbmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0NoYXJnZXMnXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHNlbGYuaXRlbUlucHV0VmFsdWUgPSBrby5vYnNlcnZhYmxlKDEpO1xuICAgIHNlbGYuc2F2ZUxpbmsgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgc2VsZi5nZXRBcHBTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHNlbGYuc2VsZWN0ZWRJdGVtLFxuICAgICAgICAgICAgbGF5b3V0OiBzZWxmLmxheW91dCxcbiAgICAgICAgICAgIGRpc3BsYXlTaG9wOiBzZWxmLmRpc3BsYXlTaG9wLFxuICAgICAgICAgICAgZGlzcGxheVNob3BJdGVtVG9vbHRpcDogc2VsZi5kaXNwbGF5U2hvcEl0ZW1Ub29sdGlwLFxuICAgICAgICAgICAgYWxsSXRlbXM6IHNlbGYuYWxsSXRlbXMsXG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW1zOiBzZWxmLnNlbGVjdGVkSXRlbXMsXG4gICAgICAgICAgICBzZWxlY3RlZFRhYklkOiBzZWxmLnNlbGVjdGVkVGFiSWQsXG4gICAgICAgICAgICBzZWxlY3RlZFRhYnM6IHNlbGYuc2VsZWN0ZWRUYWJzLFxuICAgICAgICAgICAgYm91bmRTZXR0aW5nczogc2VsZi5ib3VuZFNldHRpbmdzLFxuICAgICAgICAgICAgc2lkZVZpZXc6IHNlbGYuc2lkZVZpZXcsXG4gICAgICAgICAgICB3aW5kb3dXaWR0aDogc2VsZi53aW5kb3dXaWR0aCxcbiAgICAgICAgICAgIHdpbmRvd0hlaWdodDogc2VsZi53aW5kb3dIZWlnaHQsXG4gICAgICAgICAgICBzaG9wRG9jazogc2VsZi5zaG9wRG9jayxcbiAgICAgICAgICAgIHNob3BQb3BvdXQ6IHNlbGYuc2hvcFBvcG91dCxcbiAgICAgICAgICAgIGl0ZW1JbnB1dFZhbHVlOiBzZWxmLml0ZW1JbnB1dFZhbHVlLFxuICAgICAgICAgICAgc2F2ZUxpbms6IHNlbGYuc2F2ZUxpbmtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLnRhYnMgPSBzZWxmLnRhYnMoKS5tYXAoZnVuY3Rpb24gKHRhYikgeyByZXR1cm4gdGFiLnRvSlMoKSB9KTtcbiAgICAgICAgcmV0dXJuIGtvLnRvSlMoZGF0YSk7XG4gICAgfVxuICAgIHNlbGYuZ2V0U2F2ZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogXCIxLjMuMFwiLFxuICAgICAgICAgICAgaGVyb2VzOiBbXVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgdmFyIGhlcm8gPSBzZWxmLmhlcm9lc1tpXTtcbiAgICAgICAgICAgIHZhciBkID0ge1xuICAgICAgICAgICAgICAgIGhlcm86IGhlcm8uc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWUsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IGhlcm8uc2VsZWN0ZWRIZXJvTGV2ZWwoKSxcbiAgICAgICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgICAgICAgYWJpbGl0aWVzOiBbXSxcbiAgICAgICAgICAgICAgICBza2lsbFBvaW50SGlzdG9yeTogaGVyby5za2lsbFBvaW50SGlzdG9yeSgpLFxuICAgICAgICAgICAgICAgIGJ1ZmZzOiBbXSxcbiAgICAgICAgICAgICAgICBpdGVtQnVmZnM6IFtdLFxuICAgICAgICAgICAgICAgIGRlYnVmZnM6IFtdLFxuICAgICAgICAgICAgICAgIGl0ZW1EZWJ1ZmZzOiBbXSxcbiAgICAgICAgICAgICAgICBncmFwaERhdGE6IFtdLFxuICAgICAgICAgICAgICAgIGVuZW15SW5kZXg6IGhlcm8uZW5lbXkoKS5pbmRleCgpLFxuICAgICAgICAgICAgICAgIGhlcm9Db21wYXJlSW5kZXg6IGhlcm8uaGVyb0NvbXBhcmUoKS5pbmRleCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdGVtc1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZXJvLmludmVudG9yeS5pdGVtcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZC5pdGVtcy5wdXNoKGtvLnRvSlMoaGVyby5pbnZlbnRvcnkuaXRlbXMoKVtqXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWJpbGl0aWVzXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGhlcm8uYWJpbGl0eSgpLmFiaWxpdGllcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZC5hYmlsaXRpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsOiBoZXJvLmFiaWxpdHkoKS5hYmlsaXRpZXMoKVtqXS5sZXZlbCgpLFxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogaGVyby5hYmlsaXR5KCkuYWJpbGl0aWVzKClbal0uaXNBY3RpdmUoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYnVmZnNcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVyby5idWZmcy5idWZmcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZC5idWZmcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaGVyby5idWZmcy5idWZmcygpW2pdLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxldmVsOiBoZXJvLmJ1ZmZzLmJ1ZmZzKClbal0uZGF0YS5sZXZlbCgpLFxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogaGVyby5idWZmcy5idWZmcygpW2pdLmRhdGEuaXNBY3RpdmUoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBkZWJ1ZmZzXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGhlcm8uZGVidWZmcy5idWZmcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZC5kZWJ1ZmZzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBoZXJvLmRlYnVmZnMuYnVmZnMoKVtqXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBsZXZlbDogaGVyby5kZWJ1ZmZzLmJ1ZmZzKClbal0uZGF0YS5sZXZlbCgpLFxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogaGVyby5kZWJ1ZmZzLmJ1ZmZzKClbal0uZGF0YS5pc0FjdGl2ZSgpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGl0ZW0gYnVmZnNcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVyby5idWZmcy5pdGVtQnVmZnMuaXRlbXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGQuaXRlbUJ1ZmZzLnB1c2goa28udG9KUyhoZXJvLmJ1ZmZzLml0ZW1CdWZmcy5pdGVtcygpW2pdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGl0ZW0gZGVidWZmc1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZXJvLmRlYnVmZnMuaXRlbUJ1ZmZzLml0ZW1zKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBkLml0ZW1EZWJ1ZmZzLnB1c2goa28udG9KUyhoZXJvLmRlYnVmZnMuaXRlbUJ1ZmZzLml0ZW1zKClbal0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZ3JhcGggZGF0YVxuICAgICAgICAgICAgZC5ncmFwaERhdGEgPSBrby50b0pTKGhlcm8uYnVpbGRFeHBsb3Jlci5ncmFwaERhdGEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkYXRhLmhlcm9lcy5wdXNoKGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBzZWxmLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gc2VsZi5nZXRTYXZlRGF0YSgpO1xuICAgICAgICB2YXIgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICB1cmw6IFwic2F2ZS5waHBcIixcbiAgICAgICAgICAgIGRhdGE6IHsnZGF0YSc6IHNlcmlhbGl6ZWR9LFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpe1xuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZUxpbmsoW2xvY2F0aW9uLnByb3RvY29sLCAnLy8nLCBsb2NhdGlvbi5ob3N0LCBsb2NhdGlvbi5wYXRobmFtZV0uam9pbignJykgKyAnP2lkPScgKyBkYXRhLmZpbGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnJNc2cpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIlNhdmUgcmVxdWVzdCBmYWlsZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2VsZi5sb2FkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmhlcm9lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGhlcm8gPSBzZWxmLmhlcm9lc1tpXTtcbiAgICAgICAgICAgIGhlcm8uc2VsZWN0ZWRIZXJvKG15LnByb3RvdHlwZS5maW5kV2hlcmUoaGVyby5hdmFpbGFibGVIZXJvZXMoKSwgeydoZXJvTmFtZSc6IGRhdGEuaGVyb2VzW2ldLmhlcm99KSk7XG4gICAgICAgICAgICBoZXJvLnNlbGVjdGVkSGVyb0xldmVsKGRhdGEuaGVyb2VzW2ldLmxldmVsKTtcbiAgICAgICAgICAgIGhlcm8uaW52ZW50b3J5Lml0ZW1zLnJlbW92ZUFsbCgpO1xuICAgICAgICAgICAgaGVyby5pbnZlbnRvcnkuYWN0aXZlSXRlbXMucmVtb3ZlQWxsKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxvYWQgaGVybyBjb21wYXJlXG4gICAgICAgICAgICBpZiAoZGF0YS5oZXJvZXNbaV0uaGFzT3duUHJvcGVydHkoJ2hlcm9Db21wYXJlSW5kZXgnKSkge1xuICAgICAgICAgICAgICAgIHZhciBvID0gaGVyby5hdmFpbGFibGVDb21wYXJlKCkuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5oZXJvLmluZGV4KCkgPT0gZGF0YS5oZXJvZXNbaV0uaGVyb0NvbXBhcmVJbmRleDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoby5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVyby5zZWxlY3RlZENvbXBhcmUob1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGhlcm8uaGVyb0NvbXBhcmUob1swXS5oZXJvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxvYWQgZW5lbXlcbiAgICAgICAgICAgIGlmIChkYXRhLmhlcm9lc1tpXS5oYXNPd25Qcm9wZXJ0eSgnZW5lbXlJbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBoZXJvLmF2YWlsYWJsZUVuZW1pZXMoKS5maWx0ZXIoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uLmhlcm8uaW5kZXgoKSA9PSBkYXRhLmhlcm9lc1tpXS5lbmVteUluZGV4O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChvLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBoZXJvLnNlbGVjdGVkRW5lbXkob1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGhlcm8uZW5lbXkob1swXS5oZXJvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxvYWQgaXRlbXNcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5oZXJvZXNbaV0uaXRlbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRhdGEuaGVyb2VzW2ldLml0ZW1zW2pdO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbS5pdGVtLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZToga28ub2JzZXJ2YWJsZShpdGVtLnN0YXRlKSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogaXRlbS5zaXplLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKGl0ZW0uZW5hYmxlZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVyby5pbnZlbnRvcnkuaXRlbXMucHVzaChuZXdfaXRlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxvYWQgYWJpbGl0aWVzXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRhdGEuaGVyb2VzW2ldLmFiaWxpdGllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGhlcm8uYWJpbGl0eSgpLmFiaWxpdGllcygpW2pdLmxldmVsKGRhdGEuaGVyb2VzW2ldLmFiaWxpdGllc1tqXS5sZXZlbCk7XG4gICAgICAgICAgICAgICAgaGVyby5hYmlsaXR5KCkuYWJpbGl0aWVzKClbal0uaXNBY3RpdmUoZGF0YS5oZXJvZXNbaV0uYWJpbGl0aWVzW2pdLmlzQWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlcm8uc2tpbGxQb2ludEhpc3RvcnkoZGF0YS5oZXJvZXNbaV0uc2tpbGxQb2ludEhpc3RvcnkpO1xuXG4gICAgICAgICAgICAvLyBsb2FkIGJ1ZmZzXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRhdGEuaGVyb2VzW2ldLmJ1ZmZzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaGVyby5idWZmcy5zZWxlY3RlZEJ1ZmYobXkucHJvdG90eXBlLmZpbmRXaGVyZShoZXJvLmJ1ZmZzLmF2YWlsYWJsZUJ1ZmZzKCksIHtidWZmTmFtZTogZGF0YS5oZXJvZXNbaV0uYnVmZnNbal0ubmFtZX0pKTtcbiAgICAgICAgICAgICAgICBoZXJvLmJ1ZmZzLmFkZEJ1ZmYoaGVybywge30pO1xuICAgICAgICAgICAgICAgIHZhciBiID0gbXkucHJvdG90eXBlLmZpbmRXaGVyZShoZXJvLmJ1ZmZzLmJ1ZmZzKCksIHsgbmFtZTogZGF0YS5oZXJvZXNbaV0uYnVmZnNbal0ubmFtZSB9KTtcbiAgICAgICAgICAgICAgICBiLmRhdGEubGV2ZWwoZGF0YS5oZXJvZXNbaV0uYnVmZnNbal0ubGV2ZWwpO1xuICAgICAgICAgICAgICAgIGIuZGF0YS5pc0FjdGl2ZShkYXRhLmhlcm9lc1tpXS5idWZmc1tqXS5pc0FjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxvYWQgZGVidWZmc1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhLmhlcm9lc1tpXS5kZWJ1ZmZzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaGVyby5kZWJ1ZmZzLnNlbGVjdGVkQnVmZihteS5wcm90b3R5cGUuZmluZFdoZXJlKGhlcm8uZGVidWZmcy5hdmFpbGFibGVEZWJ1ZmZzKCksIHtidWZmTmFtZTogZGF0YS5oZXJvZXNbaV0uZGVidWZmc1tqXS5uYW1lfSkpO1xuICAgICAgICAgICAgICAgIGhlcm8uZGVidWZmcy5hZGRCdWZmKGhlcm8sIHt9KTtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IG15LnByb3RvdHlwZS5maW5kV2hlcmUoaGVyby5kZWJ1ZmZzLmJ1ZmZzKCksIHsgbmFtZTogZGF0YS5oZXJvZXNbaV0uZGVidWZmc1tqXS5uYW1lIH0pO1xuICAgICAgICAgICAgICAgIGIuZGF0YS5sZXZlbChkYXRhLmhlcm9lc1tpXS5kZWJ1ZmZzW2pdLmxldmVsKTtcbiAgICAgICAgICAgICAgICBiLmRhdGEuaXNBY3RpdmUoZGF0YS5oZXJvZXNbaV0uZGVidWZmc1tqXS5pc0FjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxvYWQgaXRlbSBidWZmc1xuICAgICAgICAgICAgaWYgKGRhdGEuaGVyb2VzW2ldLml0ZW1CdWZmcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5oZXJvZXNbaV0uaXRlbUJ1ZmZzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZGF0YS5oZXJvZXNbaV0uaXRlbUJ1ZmZzW2pdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X2l0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZToga28ub2JzZXJ2YWJsZShpdGVtLnN0YXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGl0ZW0uc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUoaXRlbS5lbmFibGVkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGhlcm8uYnVmZnMuaXRlbUJ1ZmZzLml0ZW1zLnB1c2gobmV3X2l0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbG9hZCBpdGVtIGRlYnVmZnNcbiAgICAgICAgICAgIGlmIChkYXRhLmhlcm9lc1tpXS5pdGVtRGVidWZmcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5oZXJvZXNbaV0uaXRlbURlYnVmZnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBkYXRhLmhlcm9lc1tpXS5pdGVtRGVidWZmc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19pdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbS5pdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGtvLm9ic2VydmFibGUoaXRlbS5zdGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBpdGVtLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKGl0ZW0uZW5hYmxlZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBoZXJvLmRlYnVmZnMuaXRlbUJ1ZmZzLml0ZW1zLnB1c2gobmV3X2l0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbG9hZCBncmFwaCBkYXRhXG4gICAgICAgICAgICBpZiAoZGF0YS5oZXJvZXNbaV0uZ3JhcGhEYXRhKSB7XG4gICAgICAgICAgICAgICAgaGVyby5idWlsZEV4cGxvcmVyLmxvYWRHcmFwaERhdGEoZGF0YS5oZXJvZXNbaV0uZ3JhcGhEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzZWxmLnNlbmRSZXBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKCcjQnVnUmVwb3J0Rm9ybVRleHQnKS52YWwoKSkge1xuICAgICAgICAgICAgJC5wb3N0KCBcInJlcG9ydC5waHBcIiwgeyBuYW1lOiAkKCcjQnVnUmVwb3J0Rm9ybU5hbWUnKS52YWwoKSwgZW1haWw6ICQoJyNCdWdSZXBvcnRGb3JtRW1haWwnKS52YWwoKSwgYm9keTogJCgnI0J1Z1JlcG9ydEZvcm1UZXh0JykudmFsKCkgfSlcbiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT0gJ1N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdSZXBvcnQgc3VjY2Vzc2Z1bGx5IHNlbnQuIFRoYW5rcyEnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI0J1Z1JlcG9ydEZvcm1UZXh0JykudmFsKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdGYWlsZWQgdG8gc2VuZCByZXBvcnQuIFRyeSBhZ2FpbiBsYXRlciBvciBlbWFpbCBhZG1pbkBkZXZpbGVzay5jb20nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoJyNteU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KCdNZXNzYWdlIGlzIHJlcXVpcmVkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHNlbGYuZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBvYmo7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3Byb3BlcnRpZXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldERpZmZUZXh0V3JhcHBlciA9IGZ1bmN0aW9uIChoZXJvLCBwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gc2VsZi5nZXREaWZmVGV4dChzZWxmLmdldERpZmZNYWduaXR1ZGUoaGVybywgcHJvcGVydHkpKTtcbiAgICB9XG4gICAgXG4gICAgc2VsZi5nZXREaWZmTWFnbml0dWRlID0gZnVuY3Rpb24gKGhlcm8sIHByb3BlcnR5KSB7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gcHJvcGVydHkuc3BsaXQoJy4nKTtcbiAgICAgICAgcmV0dXJuIHNlbGYuZ2V0UHJvcGVydHkoaGVyby5kYW1hZ2VUb3RhbEluZm8oKSwgcHJvcGVydGllcykudG9GaXhlZCgyKSAtIHNlbGYuZ2V0UHJvcGVydHkoaGVyby5oZXJvQ29tcGFyZSgpLmRhbWFnZVRvdGFsSW5mbygpLCBwcm9wZXJ0aWVzKS50b0ZpeGVkKDIpO1xuICAgIH1cbiAgICBcbiAgICBzZWxmLmdldERpZmZUZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnKycgKyBwYXJzZUZsb2F0KHZhbHVlLnRvRml4ZWQoMikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuICcmbWludXM7JyArIHBhcnNlRmxvYXQodmFsdWUudG9GaXhlZCgyKSotMSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmhpZ2hsaWdodGVkVGFiSW50ZXJuYWwgPSBrby5vYnNlcnZhYmxlKCcnKTtcbiAgICBzZWxmLmhpZ2hsaWdodGVkVGFiID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5oaWdobGlnaHRlZFRhYkludGVybmFsKCk7XG4gICAgfSkuZXh0ZW5kKHsgdGhyb3R0bGU6IDEwMCB9KTtcbiAgICBzZWxmLmhpZ2hsaWdodFRhYiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYuaGlnaGxpZ2h0ZWRUYWJJbnRlcm5hbChkYXRhKTtcbiAgICB9XG4gICAgc2VsZi51bmhpZ2hsaWdodFRhYiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYuaGlnaGxpZ2h0ZWRUYWJJbnRlcm5hbCgnJyk7XG4gICAgfVxufVxuXG5teS5wcm90b3R5cGUudGhlbWUgPSBrby5vYnNlcnZhYmxlKCdkYXJrJyk7IC8va28ub2JzZXJ2YWJsZSgkKCcjdGhlbWUtc2VsZWN0JykudmFsKCkpO1xubXkucHJvdG90eXBlLmhlcm9DYWxjdWxhdG9yID0ge307XG5cbm15LnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgbXkucHJvdG90eXBlLmhlcm9DYWxjdWxhdG9yID0gbmV3IG15LnByb3RvdHlwZS5IZXJvQ2FsY3VsYXRvclZpZXdNb2RlbCgpO1xuICAgIGtvLmFwcGx5QmluZGluZ3MobXkucHJvdG90eXBlLmhlcm9DYWxjdWxhdG9yKTtcbiAgICAvKiQoJyN0aGVtZS1zZWxlY3QnKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICBteS5wcm90b3R5cGUudGhlbWUoJCh0aGlzKS52YWwoKSk7XG4gICAgfSk7Ki9cbiAgICAkKCcjc3Bpbm5lcicpLmhpZGUoKTtcbiAgICAkKCcuaW5pdGlhbC1oaWRkZW4nKS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XG4gICAgJCgnI3BvcEhlcm8wJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICQoJyNoZXJvUGFuZTAnKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcbiAgICB2YXIgc2F2ZUlkID0gbXkucHJvdG90eXBlLmdldFBhcmFtZXRlckJ5TmFtZSgnaWQnKTtcbiAgICBpZiAoc2F2ZUlkKSB7XG4gICAgICAgICQuZ2V0KCdzYXZlLycgKyBzYXZlSWQgKyAnLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgbXkucHJvdG90eXBlLmhlcm9DYWxjdWxhdG9yLmxvYWQoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubXkucHJvdG90eXBlLmludmVudG9yeUNsaXBCb2FyZCA9IHtcbiAgICBpdGVtczogW10sXG4gICAgYWN0aXZlSXRlbXM6IFtdXG59O1xuXG5teS5wcm90b3R5cGUuZ2V0UGFyYW1ldGVyQnlOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sIFwiXFxcXFtcIikucmVwbGFjZSgvW1xcXV0vLCBcIlxcXFxdXCIpO1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbXFxcXD8mXVwiICsgbmFtZSArIFwiPShbXiYjXSopXCIpLFxuICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyhsb2NhdGlvbi5zZWFyY2gpO1xuICAgIHJldHVybiByZXN1bHRzID09IG51bGwgPyBcIlwiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMV0ucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbXk7IiwiZnVuY3Rpb24gVmlld01vZGVsKHBhcmFtcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLndpbmRvd1dpZHRoID0gcGFyYW1zLndpbmRvd1dpZHRoO1xuICAgIHNlbGYud2luZG93SGVpZ2h0ID0gcGFyYW1zLndpbmRvd0hlaWdodDtcbiAgICBzZWxmLmRpc3BsYXlTaG9wID0gcGFyYW1zLmRpc3BsYXlTaG9wO1xuICAgIHNlbGYuZGlzcGxheVNob3BJdGVtVG9vbHRpcCA9IHBhcmFtcy5kaXNwbGF5U2hvcEl0ZW1Ub29sdGlwO1xuICAgIHNlbGYuc2hvcERvY2sgPSBwYXJhbXMuc2hvcERvY2s7XG4gICAgc2VsZi5zaG9wRG9ja1RyaWdnZXIgPSBwYXJhbXMuc2hvcERvY2tUcmlnZ2VyO1xuICAgIHNlbGYuc2hvcFBvcG91dCA9IHBhcmFtcy5zaG9wUG9wb3V0O1xuICAgIHNlbGYuc2VsZWN0ZWRJdGVtID0gcGFyYW1zLnNlbGVjdGVkSXRlbTtcbiAgICBzZWxmLmFkZEl0ZW0gPSBwYXJhbXMuYWRkSXRlbTtcbiAgICBzZWxmLmNoYW5nZVNlbGVjdGVkSXRlbSA9IHBhcmFtcy5jaGFuZ2VTZWxlY3RlZEl0ZW07XG4gICAgc2VsZi5nZXRJdGVtVG9vbHRpcERhdGEgPSBwYXJhbXMuZ2V0SXRlbVRvb2x0aXBEYXRhO1xuICAgIHNlbGYuZ2V0SXRlbUlucHV0TGFiZWwgPSBwYXJhbXMuZ2V0SXRlbUlucHV0TGFiZWw7XG4gICAgc2VsZi5pdGVtSW5wdXRWYWx1ZSA9IHBhcmFtcy5pdGVtSW5wdXRWYWx1ZTtcbiAgICBzZWxmLml0ZW1PcHRpb25zID0gcGFyYW1zLml0ZW1PcHRpb25zO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB2aWV3TW9kZWw6IFZpZXdNb2RlbCxcbiAgICB0ZW1wbGF0ZTogXCIgICAgICAgIDxkaXYgaWQ9XFxcInNob3AtY29udGFpbmVyXFxcIiBjbGFzcz1cXFwiY29sLW1kLTEyIGNvbC1sZy00XFxcIiBkYXRhLWJpbmQ9XFxcInNob3BEb2NrU3R5bGU6IHNob3BEb2NrVHJpZ2dlciwgdmlzaWJsZTogZGlzcGxheVNob3AoKSB8fCBzaG9wUG9wb3V0KCksIGNzczogeydjb2wtbGctNCc6ICFzaG9wUG9wb3V0KCl9LCBzdHlsZTogeyAncGFkZGluZy10b3AnOiBzaG9wUG9wb3V0KCkgPyAnNXB4JyA6ICcwcHgnfVxcXCI+XFxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVxcXCJzaG9wLW1pbmltaXplXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14cyBzaG9wLWJ1dHRvbiBnbHlwaGljb24gZ2x5cGhpY29uLW1pbnVzIHB1bGwtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBkaXNwbGF5U2hvcCwgdmlzaWJsZTogZGlzcGxheVNob3AoKVxcXCIgdGl0bGU9XFxcIk1pbmltaXplIHNob3BcXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwic2hvcC1tYXhpbWl6ZVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgc2hvcC1idXR0b24gZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzIHB1bGwtcmlnaHRcXFwiIGRhdGEtYmluZD1cXFwidG9nZ2xlOiBkaXNwbGF5U2hvcCwgdmlzaWJsZTogIWRpc3BsYXlTaG9wKClcXFwiIHRpdGxlPVxcXCJNYXhpbWl6ZSBzaG9wXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgc2hvcC1idXR0b24gZ2x5cGhpY29uIGdseXBoaWNvbi1uZXctd2luZG93IHB1bGwtcmlnaHQgaGlkZGVuLXhzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBzaG9wUG9wb3V0LCB2aXNpYmxlOiAhc2hvcFBvcG91dCgpXFxcIiB0aXRsZT1cXFwiUG9wb3V0IHNob3BcXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14cyBzaG9wLWJ1dHRvbiBnbHlwaGljb24gZ2x5cGhpY29uLWFsaWduLXJpZ2h0IHB1bGwtcmlnaHQgaGlkZGVuLXhzXFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogc2hvcERvY2ssIGF0dHI6IHsgdGl0bGU6IHNob3BEb2NrKCkgPyAnVW5kb2NrIHNob3AgdG8gcmlnaHQgc2lkZSBvZiBzY3JlZW4nIDogJ0RvY2sgc2hvcCB0byByaWdodCBzaWRlIG9mIHNjcmVlbicgfVxcXCIgPjwvYnV0dG9uPlxcbiAgICAgICAgICAgIDx1bCBpZD1cXFwic2hvcHRhYnNcXFwiIGNsYXNzPVxcXCJuYXYgbmF2LXRhYnNcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogZGlzcGxheVNob3AoKVxcXCI+XFxuICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiI3Nob3BfYmFzaWNcXFwiIGRhdGEtdG9nZ2xlPVxcXCJ0YWJcXFwiPkJhc2ljPC9hPjwvbGk+XFxuICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiI3Nob3BfdXBncmFkZVxcXCIgZGF0YS10b2dnbGU9XFxcInRhYlxcXCI+VXBncmFkZTwvYT48L2xpPlxcbiAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcIiNzaG9wX3NlY3JldFxcXCIgZGF0YS10b2dnbGU9XFxcInRhYlxcXCI+U2VjcmV0PC9hPjwvbGk+XFxuICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0YWItY29udGVudCB0ZXh0LWNlbnRlciBib3R0b20tYnVmZmVyMlxcXCIgZGF0YS1iaW5kPVxcXCJ2aXNpYmxlOiBkaXNwbGF5U2hvcCgpXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidGFiLXBhbmUgYWN0aXZlXFxcIiBpZD1cXFwic2hvcF9iYXNpY1xcXCI+XFxuPGRpdiBjbGFzcz1cXFwic2hvcC1jb2x1bW5cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiaGMtc2hvcCBoYy1zaG9wLWNvbnN1bWFibGVzXFxcIiBpZD1cXFwiY29uc3VtYWJsZXNcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWNsYXJpdHlcXFwiIGlkPVxcXCJjbGFyaXR5XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWZhZXJpZV9maXJlXFxcIiBpZD1cXFwiZmFlcmllX2ZpcmVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZW5jaGFudGVkX21hbmdvXFxcIiBpZD1cXFwiZW5jaGFudGVkX21hbmdvXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXRhbmdvXFxcIiBpZD1cXFwidGFuZ29cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZmxhc2tcXFwiIGlkPVxcXCJmbGFza1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zbW9rZV9vZl9kZWNlaXRcXFwiIGlkPVxcXCJzbW9rZV9vZl9kZWNlaXRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tdHBzY3JvbGxcXFwiIGlkPVxcXCJ0cHNjcm9sbFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1kdXN0XFxcIiBpZD1cXFwiZHVzdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1jb3VyaWVyXFxcIiBpZD1cXFwiY291cmllclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1mbHlpbmdfY291cmllclxcXCIgaWQ9XFxcImZseWluZ19jb3VyaWVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXdhcmRfb2JzZXJ2ZXJcXFwiIGlkPVxcXCJ3YXJkX29ic2VydmVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXdhcmRfc2VudHJ5XFxcIiBpZD1cXFwid2FyZF9zZW50cnlcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tdG9tZV9vZl9rbm93bGVkZ2VcXFwiIGlkPVxcXCJ0b21lX29mX2tub3dsZWRnZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1ib3R0bGVcXFwiIGlkPVxcXCJib3R0bGVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwic2hvcC1jb2x1bW5cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiaGMtc2hvcCBoYy1zaG9wLWF0dHJpYnV0ZXNcXFwiIGlkPVxcXCJhdHRyaWJ1dGVzXFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1icmFuY2hlc1xcXCIgaWQ9XFxcImJyYW5jaGVzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWdhdW50bGV0c1xcXCIgaWQ9XFxcImdhdW50bGV0c1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zbGlwcGVyc1xcXCIgaWQ9XFxcInNsaXBwZXJzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLW1hbnRsZVxcXCIgaWQ9XFxcIm1hbnRsZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1jaXJjbGV0XFxcIiBpZD1cXFwiY2lyY2xldFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1iZWx0X29mX3N0cmVuZ3RoXFxcIiBpZD1cXFwiYmVsdF9vZl9zdHJlbmd0aFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1ib290c19vZl9lbHZlc1xcXCIgaWQ9XFxcImJvb3RzX29mX2VsdmVzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJvYmVcXFwiIGlkPVxcXCJyb2JlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLW9ncmVfYXhlXFxcIiBpZD1cXFwib2dyZV9heGVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYmxhZGVfb2ZfYWxhY3JpdHlcXFwiIGlkPVxcXCJibGFkZV9vZl9hbGFjcml0eVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zdGFmZl9vZl93aXphcmRyeVxcXCIgaWQ9XFxcInN0YWZmX29mX3dpemFyZHJ5XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWVtcHR5aXRlbWJnXFxcIiBpZD1cXFwiZW1wdHlpdGVtYmdcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWVtcHR5aXRlbWJnXFxcIiBpZD1cXFwiZW1wdHlpdGVtYmdcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWVtcHR5aXRlbWJnXFxcIiBpZD1cXFwiZW1wdHlpdGVtYmdcXFwiPjwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcInNob3AtY29sdW1uXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImhjLXNob3AgaGMtc2hvcC1hcm1hbWVudHNcXFwiIGlkPVxcXCJhcm1hbWVudHNcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJpbmdfb2ZfcHJvdGVjdGlvblxcXCIgaWQ9XFxcInJpbmdfb2ZfcHJvdGVjdGlvblxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zdG91dF9zaGllbGRcXFwiIGlkPVxcXCJzdG91dF9zaGllbGRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tcXVlbGxpbmdfYmxhZGVcXFwiIGlkPVxcXCJxdWVsbGluZ19ibGFkZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1pbmZ1c2VkX3JhaW5kcm9wXFxcIiBpZD1cXFwiaW5mdXNlZF9yYWluZHJvcFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1ibGlnaHRfc3RvbmVcXFwiIGlkPVxcXCJibGlnaHRfc3RvbmVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tb3JiX29mX3Zlbm9tXFxcIiBpZD1cXFwib3JiX29mX3Zlbm9tXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWJsYWRlc19vZl9hdHRhY2tcXFwiIGlkPVxcXCJibGFkZXNfb2ZfYXR0YWNrXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWNoYWlubWFpbFxcXCIgaWQ9XFxcImNoYWlubWFpbFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1xdWFydGVyc3RhZmZcXFwiIGlkPVxcXCJxdWFydGVyc3RhZmZcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0taGVsbV9vZl9pcm9uX3dpbGxcXFwiIGlkPVxcXCJoZWxtX29mX2lyb25fd2lsbFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1icm9hZHN3b3JkXFxcIiBpZD1cXFwiYnJvYWRzd29yZFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1jbGF5bW9yZVxcXCIgaWQ9XFxcImNsYXltb3JlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWphdmVsaW5cXFwiIGlkPVxcXCJqYXZlbGluXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLW1pdGhyaWxfaGFtbWVyXFxcIiBpZD1cXFwibWl0aHJpbF9oYW1tZXJcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwic2hvcC1jb2x1bW5cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiaGMtc2hvcCBoYy1zaG9wLWFyY2FuZVxcXCIgaWQ9XFxcImFyY2FuZVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0td2luZF9sYWNlXFxcIiBpZD1cXFwid2luZF9sYWNlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLW1hZ2ljX3N0aWNrXFxcIiBpZD1cXFwibWFnaWNfc3RpY2tcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tc29iaV9tYXNrXFxcIiBpZD1cXFwic29iaV9tYXNrXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJpbmdfb2ZfcmVnZW5cXFwiIGlkPVxcXCJyaW5nX29mX3JlZ2VuXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWJvb3RzXFxcIiBpZD1cXFwiYm9vdHNcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZ2xvdmVzXFxcIiBpZD1cXFwiZ2xvdmVzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWNsb2FrXFxcIiBpZD1cXFwiY2xvYWtcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tcmluZ19vZl9oZWFsdGhcXFwiIGlkPVxcXCJyaW5nX29mX2hlYWx0aFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS12b2lkX3N0b25lXFxcIiBpZD1cXFwidm9pZF9zdG9uZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1nZW1cXFwiIGlkPVxcXCJnZW1cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tbGlmZXN0ZWFsXFxcIiBpZD1cXFwibGlmZXN0ZWFsXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXNoYWRvd19hbXVsZXRcXFwiIGlkPVxcXCJzaGFkb3dfYW11bGV0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWdob3N0XFxcIiBpZD1cXFwiZ2hvc3RcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYmxpbmtcXFwiIGlkPVxcXCJibGlua1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG48L2Rpdj5cXG5cXG5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiBpZD1cXFwic2hvcF91cGdyYWRlXFxcIj5cXG48ZGl2IGNsYXNzPVxcXCJzaG9wLWNvbHVtblxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJoYy1zaG9wIGhjLXNob3AtY29tbW9uXFxcIiBpZD1cXFwiY29tbW9uXFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1tYWdpY193YW5kXFxcIiBpZD1cXFwibWFnaWNfd2FuZFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1udWxsX3RhbGlzbWFuXFxcIiBpZD1cXFwibnVsbF90YWxpc21hblxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS13cmFpdGhfYmFuZFxcXCIgaWQ9XFxcIndyYWl0aF9iYW5kXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXBvb3JfbWFuc19zaGllbGRcXFwiIGlkPVxcXCJwb29yX21hbnNfc2hpZWxkXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWJyYWNlclxcXCIgaWQ9XFxcImJyYWNlclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zb3VsX3JpbmdcXFwiIGlkPVxcXCJzb3VsX3JpbmdcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tcGhhc2VfYm9vdHNcXFwiIGlkPVxcXCJwaGFzZV9ib290c1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1wb3dlcl90cmVhZHNcXFwiIGlkPVxcXCJwb3dlcl90cmVhZHNcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tb2JsaXZpb25fc3RhZmZcXFwiIGlkPVxcXCJvYmxpdmlvbl9zdGFmZlxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1wZXJzXFxcIiBpZD1cXFwicGVyc1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1oYW5kX29mX21pZGFzXFxcIiBpZD1cXFwiaGFuZF9vZl9taWRhc1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS10cmF2ZWxfYm9vdHNcXFwiIGlkPVxcXCJ0cmF2ZWxfYm9vdHNcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tbW9vbl9zaGFyZFxcXCIgaWQ9XFxcIm1vb25fc2hhcmRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZW1wdHlpdGVtYmdcXFwiIGlkPVxcXCJlbXB0eWl0ZW1iZ1xcXCI+PC9kaXY+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwic2hvcC1jb2x1bW5cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiaGMtc2hvcCBoYy1zaG9wLXN1cHBvcnRcXFwiIGlkPVxcXCJzdXBwb3J0XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1yaW5nX29mX2Jhc2lsaXVzXFxcIiBpZD1cXFwicmluZ19vZl9iYXNpbGl1c1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1pcm9uX3RhbG9uXFxcIiBpZD1cXFwiaXJvbl90YWxvblxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1oZWFkZHJlc3NcXFwiIGlkPVxcXCJoZWFkZHJlc3NcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYnVja2xlclxcXCIgaWQ9XFxcImJ1Y2tsZXJcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tdXJuX29mX3NoYWRvd3NcXFwiIGlkPVxcXCJ1cm5fb2Zfc2hhZG93c1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS10cmFucXVpbF9ib290c1xcXCIgaWQ9XFxcInRyYW5xdWlsX2Jvb3RzXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJpbmdfb2ZfYXF1aWxhXFxcIiBpZD1cXFwicmluZ19vZl9hcXVpbGFcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tbWVkYWxsaW9uX29mX2NvdXJhZ2VcXFwiIGlkPVxcXCJtZWRhbGxpb25fb2ZfY291cmFnZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1hcmNhbmVfYm9vdHNcXFwiIGlkPVxcXCJhcmNhbmVfYm9vdHNcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYW5jaWVudF9qYW5nZ29cXFwiIGlkPVxcXCJhbmNpZW50X2phbmdnb1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1tZWthbnNtXFxcIiBpZD1cXFwibWVrYW5zbVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS12bGFkbWlyXFxcIiBpZD1cXFwidmxhZG1pclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1waXBlXFxcIiBpZD1cXFwicGlwZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1ndWFyZGlhbl9ncmVhdmVzXFxcIiBpZD1cXFwiZ3VhcmRpYW5fZ3JlYXZlc1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG48L2Rpdj5cXG48ZGl2IGNsYXNzPVxcXCJzaG9wLWNvbHVtblxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJoYy1zaG9wIGhjLXNob3AtY2FzdGVyXFxcIiBpZD1cXFwiY2FzdGVyXFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1nbGltbWVyX2NhcGVcXFwiIGlkPVxcXCJnbGltbWVyX2NhcGVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZm9yY2Vfc3RhZmZcXFwiIGlkPVxcXCJmb3JjZV9zdGFmZlxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS12ZWlsX29mX2Rpc2NvcmRcXFwiIGlkPVxcXCJ2ZWlsX29mX2Rpc2NvcmRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYWV0aGVyX2xlbnNcXFwiIGlkPVxcXCJhZXRoZXJfbGVuc1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1uZWNyb25vbWljb25cXFwiIGlkPVxcXCJuZWNyb25vbWljb25cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZGFnb25cXFwiIGlkPVxcXCJkYWdvblxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1jeWNsb25lXFxcIiBpZD1cXFwiY3ljbG9uZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zb2xhcl9jcmVzdFxcXCIgaWQ9XFxcInNvbGFyX2NyZXN0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJvZF9vZl9hdG9zXFxcIiBpZD1cXFwicm9kX29mX2F0b3NcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tb3JjaGlkXFxcIiBpZD1cXFwib3JjaGlkXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXVsdGltYXRlX3NjZXB0ZXJcXFwiIGlkPVxcXCJ1bHRpbWF0ZV9zY2VwdGVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJlZnJlc2hlclxcXCIgaWQ9XFxcInJlZnJlc2hlclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zaGVlcHN0aWNrXFxcIiBpZD1cXFwic2hlZXBzdGlja1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1vY3RhcmluZV9jb3JlXFxcIiBpZD1cXFwib2N0YXJpbmVfY29yZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG48L2Rpdj5cXG48ZGl2IGNsYXNzPVxcXCJzaG9wLWNvbHVtblxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJoYy1zaG9wIGhjLXNob3Atd2VhcG9uc1xcXCIgaWQ9XFxcIndlYXBvbnNcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWxlc3Nlcl9jcml0XFxcIiBpZD1cXFwibGVzc2VyX2NyaXRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYXJtbGV0XFxcIiBpZD1cXFwiYXJtbGV0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWludmlzX3N3b3JkXFxcIiBpZD1cXFwiaW52aXNfc3dvcmRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYmFzaGVyXFxcIiBpZD1cXFwiYmFzaGVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWJmdXJ5XFxcIiBpZD1cXFwiYmZ1cnlcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZXRoZXJlYWxfYmxhZGVcXFwiIGlkPVxcXCJldGhlcmVhbF9ibGFkZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zaWx2ZXJfZWRnZVxcXCIgaWQ9XFxcInNpbHZlcl9lZGdlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJhZGlhbmNlXFxcIiBpZD1cXFwicmFkaWFuY2VcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tbW9ua2V5X2tpbmdfYmFyXFxcIiBpZD1cXFwibW9ua2V5X2tpbmdfYmFyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWdyZWF0ZXJfY3JpdFxcXCIgaWQ9XFxcImdyZWF0ZXJfY3JpdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1idXR0ZXJmbHlcXFwiIGlkPVxcXCJidXR0ZXJmbHlcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tcmFwaWVyXFxcIiBpZD1cXFwicmFwaWVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWFieXNzYWxfYmxhZGVcXFwiIGlkPVxcXCJhYnlzc2FsX2JsYWRlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWJsb29kdGhvcm5cXFwiIGlkPVxcXCJibG9vZHRob3JuXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcInNob3AtY29sdW1uXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImhjLXNob3AgaGMtc2hvcC1hcm1vclxcXCIgaWQ9XFxcImFybW9yXFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1ob29kX29mX2RlZmlhbmNlXFxcIiBpZD1cXFwiaG9vZF9vZl9kZWZpYW5jZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS12YW5ndWFyZFxcXCIgaWQ9XFxcInZhbmd1YXJkXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWJsYWRlX21haWxcXFwiIGlkPVxcXCJibGFkZV9tYWlsXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXNvdWxfYm9vc3RlclxcXCIgaWQ9XFxcInNvdWxfYm9vc3RlclxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1jcmltc29uX2d1YXJkXFxcIiBpZD1cXFwiY3JpbXNvbl9ndWFyZFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1ibGFja19raW5nX2JhclxcXCIgaWQ9XFxcImJsYWNrX2tpbmdfYmFyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWxvdHVzX29yYlxcXCIgaWQ9XFxcImxvdHVzX29yYlxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zaGl2YXNfZ3VhcmRcXFwiIGlkPVxcXCJzaGl2YXNfZ3VhcmRcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tYmxvb2RzdG9uZVxcXCIgaWQ9XFxcImJsb29kc3RvbmVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tbWFudGFcXFwiIGlkPVxcXCJtYW50YVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1zcGhlcmVcXFwiIGlkPVxcXCJzcGhlcmVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0taHVycmljYW5lX3Bpa2VcXFwiIGlkPVxcXCJodXJyaWNhbmVfcGlrZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1hc3NhdWx0XFxcIiBpZD1cXFwiYXNzYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1oZWFydFxcXCIgaWQ9XFxcImhlYXJ0XFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcInNob3AtY29sdW1uXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImhjLXNob3AgaGMtc2hvcC1hcnRpZmFjdHNcXFwiIGlkPVxcXCJhcnRpZmFjdHNcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLW1hc2tfb2ZfbWFkbmVzc1xcXCIgaWQ9XFxcIm1hc2tfb2ZfbWFkbmVzc1xcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1oZWxtX29mX3RoZV9kb21pbmF0b3JcXFwiIGlkPVxcXCJoZWxtX29mX3RoZV9kb21pbmF0b3JcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZHJhZ29uX2xhbmNlXFxcIiBpZD1cXFwiZHJhZ29uX2xhbmNlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXNhbmdlXFxcIiBpZD1cXFwic2FuZ2VcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0teWFzaGFcXFwiIGlkPVxcXCJ5YXNoYVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1lY2hvX3NhYnJlXFxcIiBpZD1cXFwiZWNob19zYWJyZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1tYWVsc3Ryb21cXFwiIGlkPVxcXCJtYWVsc3Ryb21cXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZGlmZnVzYWxfYmxhZGVcXFwiIGlkPVxcXCJkaWZmdXNhbF9ibGFkZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1kZXNvbGF0b3JcXFwiIGlkPVxcXCJkZXNvbGF0b3JcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0taGVhdmVuc19oYWxiZXJkXFxcIiBpZD1cXFwiaGVhdmVuc19oYWxiZXJkXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXNhbmdlX2FuZF95YXNoYVxcXCIgaWQ9XFxcInNhbmdlX2FuZF95YXNoYVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1za2FkaVxcXCIgaWQ9XFxcInNrYWRpXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLW1qb2xsbmlyXFxcIiBpZD1cXFwibWpvbGxuaXJcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tc2F0YW5pY1xcXCIgaWQ9XFxcInNhdGFuaWNcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0YWItcGFuZVxcXCIgaWQ9XFxcInNob3Bfc2VjcmV0XFxcIj5cXG48ZGl2IGNsYXNzPVxcXCJzaG9wLWNvbHVtblxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJoYy1zaG9wIGhjLXNob3Atc2VjcmV0XFxcIiBpZD1cXFwic2VjcmV0XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1lbmVyZ3lfYm9vc3RlclxcXCIgaWQ9XFxcImVuZXJneV9ib29zdGVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXZpdGFsaXR5X2Jvb3N0ZXJcXFwiIGlkPVxcXCJ2aXRhbGl0eV9ib29zdGVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXBvaW50X2Jvb3N0ZXJcXFwiIGlkPVxcXCJwb2ludF9ib29zdGVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXBsYXRlbWFpbFxcXCIgaWQ9XFxcInBsYXRlbWFpbFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS10YWxpc21hbl9vZl9ldmFzaW9uXFxcIiBpZD1cXFwidGFsaXNtYW5fb2ZfZXZhc2lvblxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS1oeXBlcnN0b25lXFxcIiBpZD1cXFwiaHlwZXJzdG9uZVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY2hhbmdlU2VsZWN0ZWRJdGVtLCBldmVudDogeyBkYmxjbGljazogYWRkSXRlbSB9XFxcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcImltZy1yb3VuZGVkIGhjLWl0ZW0gaGMtaXRlbS11bHRpbWF0ZV9vcmJcXFwiIGlkPVxcXCJ1bHRpbWF0ZV9vcmJcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tZGVtb25fZWRnZVxcXCIgaWQ9XFxcImRlbW9uX2VkZ2VcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tbXlzdGljX3N0YWZmXFxcIiBpZD1cXFwibXlzdGljX3N0YWZmXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLWVhZ2xlXFxcIiBpZD1cXFwiZWFnbGVcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbWctcm91bmRlZCBoYy1pdGVtIGhjLWl0ZW0tcmVhdmVyXFxcIiBpZD1cXFwicmVhdmVyXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOiBjaGFuZ2VTZWxlY3RlZEl0ZW0sIGV2ZW50OiB7IGRibGNsaWNrOiBhZGRJdGVtIH1cXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiaW1nLXJvdW5kZWQgaGMtaXRlbSBoYy1pdGVtLXJlbGljXFxcIiBpZD1cXFwicmVsaWNcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNoYW5nZVNlbGVjdGVkSXRlbSwgZXZlbnQ6IHsgZGJsY2xpY2s6IGFkZEl0ZW0gfVxcXCI+PC9kaXY+XFxuPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIGRhdGEtYmluZD1cXFwidmlzaWJsZTogZGlzcGxheVNob3AoKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwiYXV0b1xcXCIgZGF0YS1iaW5kPVxcXCJqcUF1dG86IHsgYXV0b0ZvY3VzOiB0cnVlLCBodG1sOiB0cnVlIH0sIGpxQXV0b1NvdXJjZTogaXRlbU9wdGlvbnMsIGpxQXV0b1ZhbHVlOiBzZWxlY3RlZEl0ZW0sIGpxQXV0b1NvdXJjZUxhYmVsOiAnZGlzcGxheW5hbWUnLCBqcUF1dG9Tb3VyY2VJbnB1dFZhbHVlOiAnbmFtZScsIGpxQXV0b1NvdXJjZVZhbHVlOiAndmFsdWUnXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImlucHV0LWdyb3VwLWJ0blxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLWJpbmQ9XFxcImpxQXV0b0NvbWJvOiAnYXV0bydcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFxcXCI+PC9zcGFuPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwidmlzaWJsZTogc2VsZWN0ZWRJdGVtKCkgJiYgZGlzcGxheVNob3AoKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4teHMgZ2x5cGhpY29uIGdseXBoaWNvbi1taW51cyBwdWxsLXJpZ2h0XFxcIiBkYXRhLWJpbmQ9XFxcInRvZ2dsZTogZGlzcGxheVNob3BJdGVtVG9vbHRpcCwgdmlzaWJsZTogZGlzcGxheVNob3BJdGVtVG9vbHRpcCgpXFxcIiB0aXRsZT1cXFwiSGlkZSBpdGVtIGRlc2NyaXB0aW9uXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14cyBnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMgcHVsbC1yaWdodFxcXCIgZGF0YS1iaW5kPVxcXCJ0b2dnbGU6IGRpc3BsYXlTaG9wSXRlbVRvb2x0aXAsIHZpc2libGU6ICFkaXNwbGF5U2hvcEl0ZW1Ub29sdGlwKClcXFwiIHRpdGxlPVxcXCJTaG93IGl0ZW0gZGVzY3JpcHRpb25cXFwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtYmluZD1cXFwiaHRtbDogZ2V0SXRlbVRvb2x0aXBEYXRhLCBjc3M6IHsgJ2hpZGUtc2hvcC1pdGVtLWRldGFpbHMnOiAhZGlzcGxheVNob3BJdGVtVG9vbHRpcCgpIH1cXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVxcXCJtYXJnaW4tdG9wOjEwcHg7bWFyZ2luLWJvdHRvbToxMHB4O1xcXCIgY2xhc3M9XFxcImZvcm0taW5saW5lXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IGdldEl0ZW1JbnB1dExhYmVsKCkgIT0gJydcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiaXRlbWlucHV0XFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IGdldEl0ZW1JbnB1dExhYmVsXFxcIj48L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwiaXRlbWlucHV0XFxcIiBkYXRhLWJpbmQ9XFxcInZhbHVlOiBpdGVtSW5wdXRWYWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCB0ZXh0LXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogYWRkSXRlbVxcXCI+QWRkIEl0ZW08L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cIlxufTsiLCIndXNlIHN0cmljdCc7XG52YXIga28gPSByZXF1aXJlKCcuL2hlcm9jYWxjX2tub2Nrb3V0Jyk7XG4gICAgXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuQWJpbGl0eU1vZGVsID0gZnVuY3Rpb24gKGEsIGgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5oZXJvID0gaDtcbiAgICBzZWxmLmFiaWxpdHlEYXRhID0gbXkucHJvdG90eXBlLmFiaWxpdHlEYXRhO1xuICAgIHNlbGYuaGFzU2NlcHRlciA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHNlbGYuaXNTaGFwZVNoaWZ0QWN0aXZlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgc2VsZi5hYmlsaXRpZXMgPSBhO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmlzQWN0aXZlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uaXNEZXRhaWwgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5iYXNlRGFtYWdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5iYXNlRGFtYWdlUmVkdWN0aW9uUGN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5iYXNlRGFtYWdlTXVsdGlwbGllciA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYmFzaCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYmFzaEJvbnVzRGFtYWdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5ib251c0RhbWFnZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYm9udXNEYW1hZ2VPcmIgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmJvbnVzRGFtYWdlUGN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5ib251c0RhbWFnZVByZWNpc2lvbkF1cmEgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmJvbnVzRGFtYWdlUmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5ib251c0hlYWx0aCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYm9udXNTdHJlbmd0aCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYm9udXNTdHJlbmd0aDIgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmJvbnVzQWdpbGl0eSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYm9udXNBZ2lsaXR5MiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYm9udXNJbnQgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmJvbnVzQWxsU3RhdHNSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmRhbWFnZUFtcGxpZmljYXRpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmRhbWFnZVJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uZXZhc2lvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0ubWFnaWNSZXNpc3QgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLm1hbmFyZWdlbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0ubWFuYXJlZ2VucmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5taXNzQ2hhbmNlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5tb3ZlbWVudFNwZWVkRmxhdCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0ubW92ZW1lbnRTcGVlZFBjdCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0ubW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0udHVyblJhdGVSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmF0dGFja3JhbmdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRhY2tzcGVlZCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0YWNrc3BlZWRyZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmFybW9yID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5hcm1vclJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0uaGVhbHRocmVnZW4gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmxpZmVzdGVhbCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaV0udmlzaW9ubmlnaHQgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLnZpc2lvbmRheSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgfVxuICAgIHNlbGYuYWJpbGl0eUNvbnRyb2xEYXRhID0ge307XG4gICAgc2VsZi5hYmlsaXR5U2V0dGluZ3NEYXRhID0gZnVuY3Rpb24gKGRhdGEsIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHNlbGYuYWJpbGl0eUNvbnRyb2xEYXRhW2RhdGFdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYucHJvY2Vzc0FiaWxpdHkoZGF0YSwgcGFyZW50LCBpbmRleCwgc2VsZi5hYmlsaXR5RGF0YVtkYXRhXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbZGF0YV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2VsZi5wcm9jZXNzQWJpbGl0eSA9IGZ1bmN0aW9uIChkYXRhLCBwYXJlbnQsIGluZGV4LCBhcmdzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBbXTtcbiAgICAgICAgdmFyIHY7XG4gICAgICAgIHZhciB2X2xpc3QgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3dpdGNoIChhcmdzW2ldLmNvbnRyb2xUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgICAgICAgICAgICB2ID0ga28ub2JzZXJ2YWJsZSgwKS5leHRlbmQoeyBudW1lcmljOiAyIH0pO1xuICAgICAgICAgICAgICAgICAgICB2LmNvbnRyb2xWYWx1ZVR5cGUgPSBhcmdzW2ldLmNvbnRyb2xWYWx1ZVR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0YS5wdXNoKHsgbGFiZWxOYW1lOiBhcmdzW2ldLmxhYmVsLnRvVXBwZXJDYXNlKCkgKyAnOicsIGNvbnRyb2xWYWw6IHYsIGNvbnRyb2xUeXBlOiBhcmdzW2ldLmNvbnRyb2xUeXBlLCBkaXNwbGF5OiBhcmdzW2ldLmRpc3BsYXkgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgICAgICAgICAgICB2ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHYuY29udHJvbFZhbHVlVHlwZSA9IGFyZ3NbaV0uY29udHJvbFZhbHVlVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdl9saXN0LnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kYXRhLnB1c2goeyBsYWJlbE5hbWU6IGFyZ3NbaV0ubGFiZWwudG9VcHBlckNhc2UoKSArICc/JywgY29udHJvbFZhbDogdiwgY29udHJvbFR5cGU6IGFyZ3NbaV0uY29udHJvbFR5cGUsIGRpc3BsYXk6IGFyZ3NbaV0uZGlzcGxheSB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIHYgPSBrby5vYnNlcnZhYmxlKGFyZ3NbaV0uY29udHJvbE9wdGlvbnNbMF0udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB2LmNvbnRyb2xWYWx1ZVR5cGUgPSBhcmdzW2ldLmNvbnRyb2xWYWx1ZVR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0YS5wdXNoKHsgbGFiZWxOYW1lOiBhcmdzW2ldLmxhYmVsLnRvVXBwZXJDYXNlKCkgKyAnPycsIGNvbnRyb2xWYWw6IHYsIGNvbnRyb2xUeXBlOiBhcmdzW2ldLmNvbnRyb2xUeXBlLCBkaXNwbGF5OiBhcmdzW2ldLmRpc3BsYXksIGNvbnRyb2xPcHRpb25zOiBhcmdzW2ldLmNvbnRyb2xPcHRpb25zIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21ldGhvZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmdsZSBpbnB1dCBhYmlsaXRpZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0uY29udHJvbHMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXS5ub0xldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmbjoga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKS5maW5kKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5uYW1lKCkgPT0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKF9hYmlsaXR5LmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlTmFtZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmbjoga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKS5maW5kKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5uYW1lKCkgPT0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKF9hYmlsaXR5LmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlTmFtZSwgX2FiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBhdHRyaWJ1dGVWYWx1ZShhcmdzW2ldLmF0dHJpYnV0ZU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHNlbGYuZ2V0Q29tcHV0ZWRGdW5jdGlvbih2LCBnLmZuLCBhcmdzW2ldLmZuLCBwYXJlbnQsIGluZGV4LCBzZWxmLCBhcmdzW2ldLnJldHVyblByb3BlcnR5LCB1bmRlZmluZWQsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0uaWdub3JlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gYXJnc1tpXS5sYWJlbCB8fCBhcmdzW2ldLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbHRpcCA9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVRvb2x0aXAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleF0uYXR0cmlidXRlcygpLCBhcmdzW2ldLmF0dHJpYnV0ZU5hbWUpIHx8IGFyZ3NbaV0ubGFiZWwgfHwgYXJnc1tpXS5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEucHVzaCh7IGxhYmVsTmFtZTogdG9vbHRpcC50b1VwcGVyQ2FzZSgpLCBjb250cm9sVmFsOiByLCBjb250cm9sVHlwZTogYXJnc1tpXS5jb250cm9sVHlwZSwgZGlzcGxheTogYXJnc1tpXS5kaXNwbGF5LCBjbGVhbjogZy5mbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBtdWx0aSBpbnB1dCBhYmlsaXRpZXNcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXS5ub0xldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmbjoga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaW5kZXhdLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlTmFtZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmbjoga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaW5kZXhdLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlTmFtZSwgc2VsZi5hYmlsaXRpZXMoKVtpbmRleF0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBhdHRyaWJ1dGVWYWx1ZShhcmdzW2ldLmF0dHJpYnV0ZU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHNlbGYuZ2V0Q29tcHV0ZWRGdW5jdGlvbih2X2xpc3QsIGcuZm4sIGFyZ3NbaV0uZm4sIHBhcmVudCwgaW5kZXgsIHNlbGYsIGFyZ3NbaV0ucmV0dXJuUHJvcGVydHksIGFyZ3NbaV0uY29udHJvbHMsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0uaWdub3JlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gYXJnc1tpXS5sYWJlbCB8fCBhcmdzW2ldLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbHRpcCA9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVRvb2x0aXAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleF0uYXR0cmlidXRlcygpLCBhcmdzW2ldLmF0dHJpYnV0ZU5hbWUpIHx8IGFyZ3NbaV0ubGFiZWwgfHwgYXJnc1tpXS5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEucHVzaCh7IGxhYmVsTmFtZTogdG9vbHRpcC50b1VwcGVyQ2FzZSgpLCBjb250cm9sVmFsOiByLCBjb250cm9sVHlwZTogYXJnc1tpXS5jb250cm9sVHlwZSwgZGlzcGxheTogYXJnc1tpXS5kaXNwbGF5LCBjbGVhbjogZy5mbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0uY29udHJvbFR5cGUgPT0gJ21ldGhvZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbZGF0YV0gPSByZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc2VsZi5nZXRDb21wdXRlZEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYsIGF0dHJpYnV0ZVZhbHVlLCBmbiwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCByZXR1cm5Qcm9wZXJ0eSwgY29udHJvbHMsIGFiaWxpdHlOYW1lKSB7XG4gICAgICAgIHZhciBfYWJpbGl0eSA9IGFiaWxpdHlNb2RlbC5hYmlsaXRpZXMoKS5maW5kKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLm5hbWUoKSA9PSBhYmlsaXR5TmFtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh2ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYoKSA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodi5jb250cm9sVmFsdWVUeXBlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gcGFyc2VGbG9hdCh2KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2LmNvbnRyb2xWYWx1ZVR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBwYXJzZUZsb2F0KHYoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZfbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDtpPGNvbnRyb2xzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2Ygdltjb250cm9sc1tpXV0oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHZbY29udHJvbHNbaV1dKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHBhcnNlRmxvYXQodltjb250cm9sc1tpXV0oKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZfbGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IGZuLmNhbGwodGhpcywgaW5wdXRWYWx1ZSwgYXR0cmlidXRlVmFsdWUoKSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBfYWJpbGl0eSk7XG4gICAgICAgICAgICBpZiAocmV0dXJuUHJvcGVydHkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX2FiaWxpdHlbcmV0dXJuUHJvcGVydHldKHJldHVyblZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG5cbiAgICBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lLCBsZXZlbCkge1xuICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlc1tpXS5uYW1lKCkgPT0gYXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGF0dHJpYnV0ZXNbaV0udmFsdWUoKVswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxldmVsID4gYXR0cmlidXRlc1tpXS52YWx1ZSgpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhdHRyaWJ1dGVzW2ldLnZhbHVlKClbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXR0cmlidXRlc1tpXS52YWx1ZSgpW2xldmVsLTFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVUb29sdGlwID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzW2ldLm5hbWUoKSA9PSBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXNbaV0uaGFzT3duUHJvcGVydHkoJ3Rvb2x0aXAnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGF0dHJpYnV0ZXNbaV0udG9vbHRpcCgpLnJlcGxhY2UoL1xcXFxuL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgXG4gICAgc2VsZi5nZXRBYmlsaXR5TGV2ZWxCeUFiaWxpdHlOYW1lID0gZnVuY3Rpb24gKGFiaWxpdHlOYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaV0ubmFtZSgpID09IGFiaWxpdHlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgc2VsZi5nZXRBYmlsaXR5QnlOYW1lID0gZnVuY3Rpb24gKGFiaWxpdHlOYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaV0ubmFtZSgpID09IGFiaWxpdHlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzZWxmLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gKGFiaWxpdHksIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGFiaWxpdHlbcHJvcGVydHldKClbYWJpbGl0eS5sZXZlbCgpLTFdKTtcbiAgICB9XG4gICAgXG4gICAgc2VsZi5nZXRBdHRyaWJ1dGVCb251c0xldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2ldLm5hbWUoKSA9PSAnYXR0cmlidXRlX2JvbnVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmFiaWxpdGllcygpW2ldLmxldmVsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7ICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2VsZi5nZXRBbGxTdGF0c1JlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLypzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludm9rZXJfcXVhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX3N0cmVuZ3RoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlKClbYWJpbGl0eS5sZXZlbCgpLTFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5ib251c0FsbFN0YXRzUmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2xhcmtfZXNzZW5jZV9zaGlmdFxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0FsbFN0YXRzUmVkdWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldFN0cmVuZ3RoUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAvKnN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW52b2tlcl9xdWFzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3RyZW5ndGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWUoKVthYmlsaXR5LmxldmVsKCktMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzU3RyZW5ndGggIT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSgpID09ICd1bmR5aW5nX2RlY2F5Jykge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5keWluZ19kZWNheVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZS09YWJpbGl0eS5ib251c1N0cmVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldFN0cmVuZ3RoID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAvKnN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW52b2tlcl9xdWFzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3RyZW5ndGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWUoKVthYmlsaXR5LmxldmVsKCktMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5ib251c1N0cmVuZ3RoICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ2ludm9rZXJfcXVhcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwdWRnZV9mbGVzaF9oZWFwLGludm9rZXJfcXVhcyxtb3JwaGxpbmdfbW9ycGhfc3RyLG1vcnBobGluZ19tb3JwaF9hZ2ksdW5keWluZ19kZWNheVxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNTdHJlbmd0aCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmJvbnVzU3RyZW5ndGgyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtb3JwaGxpbmdfbW9ycGhfc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c1N0cmVuZ3RoMigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEFnaWxpdHkgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfbWFya3NtYW5zaGlwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFya3NtYW5zaGlwX2FnaWxpdHlfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmJvbnVzQWdpbGl0eSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpIHx8IGFiaWxpdHkubmFtZSgpID09ICdpbnZva2VyX3dleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZva2VyX3dleCxtb3JwaGxpbmdfbW9ycGhfYWdpLG1vcnBobGluZ19tb3JwaF9zdHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmJvbnVzQWdpbGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmJvbnVzQWdpbGl0eTIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludm9rZXJfd2V4LG1vcnBobGluZ19tb3JwaF9hZ2ksbW9ycGhsaW5nX21vcnBoX3N0clxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNBZ2lsaXR5MigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0SW50ZWxsaWdlbmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludm9rZXJfZXhvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qICAgIGNhc2UgJ2JvbnVzX2ludGVsbGlnZW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzSW50ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnaW52b2tlcl9leG9ydCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGludm9rZXJfZXhvcnRcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNJbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0QXJtb3IgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXhlX2JlcnNlcmtlcnNfY2FsbCxkcmFnb25fa25pZ2h0X2RyYWdvbl9ibG9vZCx0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZSxseWNhbl9zaGFwZXNoaWZ0LGVucmFnZWRfd2lsZGtpbl90b3VnaG5lc3NfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpICE9ICd0ZW1wbGFyX2Fzc2Fzc2luX21lbGQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN2ZW5fd2FyY3J5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2FyY3J5X2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGljaF9mcm9zdF9hcm1vcixvZ3JlX21hZ2lfZnJvc3RfYXJtb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcm1vcl9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnbGljaF9mcm9zdF9hcm1vcicgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ29ncmVfbWFnaV9mcm9zdF9hcm1vcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmFybW9yICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hyZWRkZXJfcmVhY3RpdmVfYXJtb3IsdmlzYWdlX2dyYXZla2VlcGVyc19jbG9ha1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5hcm1vcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldEFybW9yQmFzZVJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2VsZGVyX3RpdGFuX25hdHVyYWxfb3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VsZGVyX3RpdGFuX25hdHVyYWxfb3JkZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxLXNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnYXJtb3JfcmVkdWN0aW9uX3BjdCcsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEFybW9yUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYWJpbGl0eS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGVtcGxhcl9hc3Nhc3Npbl9tZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZW1wbGFyX2Fzc2Fzc2luX21lbGQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnYm9udXNfYXJtb3InLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aWRlaHVudGVyX2d1c2hcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RpZGVodW50ZXJfZ3VzaCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdhcm1vcl9ib251cycsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5hZ2Ffc2lyZW5fcmlwX3RpZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25hZ2Ffc2lyZW5fcmlwX3RpZGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2xhcmRhcl9hbXBsaWZ5X2RhbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xhcmRhcl9hbXBsaWZ5X2RhbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2ZW5nZWZ1bHNwaXJpdF93YXZlX29mX3RlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmVuZ2VmdWxzcGlyaXRfd2F2ZV9vZl90ZXJyb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnYXJtb3JfcmVkdWN0aW9uJywgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV2ZXJtb3JlX2RhcmtfbG9yZFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX2RhcmtfbG9yZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdwcmVzZW5jZV9hcm1vcl9yZWR1Y3Rpb24nLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmFybW9yUmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxjaGVtaXN0X2FjaWRfc3ByYXlcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYXJtb3JSZWR1Y3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRIZWFsdGggPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9uZV9kcnVpZF90cnVlX2Zvcm0sbHljYW5fc2hhcGVzaGlmdCx0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2hwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9uZV9kcnVpZF9zeW5lcmd5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJ1ZV9mb3JtX2hwX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaXNUcnVlRm9ybUFjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5ib251c0hlYWx0aCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaW5rel9kZWF0aF9wYWN0XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmJvbnVzSGVhbHRoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmlzVHJ1ZUZvcm1BY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNBY3RpdmUoKSAmJiBhYmlsaXR5Lm5hbWUoKSA9PSAnbG9uZV9kcnVpZF90cnVlX2Zvcm0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNlbGYuZ2V0SGVhbHRoUmVnZW4gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxjaGVtaXN0X2NoZW1pY2FsX3JhZ2UsIGRyYWdvbl9rbmlnaHRfZHJhZ29uX2Jsb29kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfaGVhbHRoX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9vZG1vdGhlcl9zcGluX3dlYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hlYXRoX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbW5pa25pZ2h0X2d1YXJkaWFuX2FuZ2VsLHRyZWFudF9saXZpbmdfYXJtb3Isc2F0eXJfaGVsbGNhbGxlcl91bmhvbHlfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hlYWx0aF9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlZ2lvbl9jb21tYW5kZXJfcHJlc3NfdGhlX2F0dGFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hwX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmhlYWx0aHJlZ2VuICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hyZWRkZXJfcmVhY3RpdmVfYXJtb3IsaW52b2tlcl9xdWFzLG5lY3JvbHl0ZV9zYWRpc3RcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuaGVhbHRocmVnZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRNYW5hID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ic2lkaWFuX2Rlc3Ryb3llcl9lc3NlbmNlX2F1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tYW5hJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0TWFuYVJlZ2VuID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsY2hlbWlzdF9jaGVtaWNhbF9yYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbWFuYV9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tYW5hcmVnZW4gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZWNyb2x5dGVfc2FkaXN0XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5Lm1hbmFyZWdlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRNYW5hUmVnZW5BcmNhbmVBdXJhID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyeXN0YWxfbWFpZGVuX2JyaWxsaWFuY2VfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hbmFfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2NyeXN0YWxfbWFpZGVuX2JyaWxsaWFuY2VfYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRNYW5hUmVnZW5SZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIC8vIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgY2FzZSAnJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWUoKVthYmlsaXR5LmxldmVsKCktMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkubWFuYXJlZ2VucmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVnbmFfbmV0aGVyX3dhcmRcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkubWFuYXJlZ2VucmVkdWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEF0dGFja1JhbmdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbnRlcl93eXZlcm5fYXJjdGljX2J1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2tfcmFuZ2VfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZW1wbGFyX2Fzc2Fzc2luX3BzaV9ibGFkZXMsc25pcGVyX3Rha2VfYWltXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrX3JhbmdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXJyb3JibGFkZV9tZXRhbW9ycGhvc2lzLHRyb2xsX3dhcmxvcmRfYmVyc2Vya2Vyc19yYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfcmFuZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3RlcnJvcmJsYWRlX21ldGFtb3JwaG9zaXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3Ryb2xsX3dhcmxvcmRfYmVyc2Vya2Vyc19yYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW55X2dyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19yYW5nZV9zY2VwdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICd0aW55X2dyb3cnICYmIHNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuY2hhbnRyZXNzX2ltcGV0dXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tfcmFuZ2Vfc2NlcHRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnZW5jaGFudHJlc3NfaW1wZXR1cycgJiYgc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9uZV9kcnVpZF90cnVlX2Zvcm1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdsb25lX2RydWlkX3RydWVfZm9ybScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IDQyMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIGFiaWxpdHkubmFtZSgpID09ICdlbmNoYW50cmVzc19pbXBldHVzJyAmJiBzZWxmLmhhc1NjZXB0ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tfcmFuZ2Vfc2NlcHRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5hdHRhY2tyYW5nZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYWdvbl9rbmlnaHRfZWxkZXJfZHJhZ29uX2Zvcm1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYXR0YWNrcmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0QXR0YWNrU3BlZWQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWJhZGRvbl9mcm9zdG1vdXJuZSx0cm9sbF93YXJsb3JkX2JhdHRsZV90cmFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZpc2FnZV9ncmF2ZV9jaGlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja3NwZWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtaXJhbmFfbGVhcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlYXBfc3BlZWRib251c19hcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGlmZV9zdGVhbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3NwZWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xpbmt6X3N0cmFmZSx1cnNhX292ZXJwb3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja19zcGVlZF9ib251c19wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2NsaW5rel9zdHJhZmUnIHx8IGFiaWxpdHkubmFtZSgpID09ICd1cnNhX292ZXJwb3dlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXhlX2N1bGxpbmdfYmxhZGUsbmVjcm9ub21pY29uX2FyY2hlcl9hb2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnYXhlX2N1bGxpbmdfYmxhZGUnIHx8IGFiaWxpdHkubmFtZSgpID09ICduZWNyb25vbWljb25fYXJjaGVyX2FvZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5jaWVudF9hcHBhcml0aW9uX2NoaWxsaW5nX3RvdWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnYW5jaWVudF9hcHBhcml0aW9uX2NoaWxsaW5nX3RvdWNoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWFzdG1hc3Rlcl9pbm5lcl9iZWFzdCxseWNhbl9mZXJhbF9pbXB1bHNlLGxvbmVfZHJ1aWRfcmFiaWQsdGlueV9ncm93LHBoYW50b21fYXNzYXNzaW5fcGhhbnRvbV9zdHJpa2Usd2luZHJ1bm5lcl9mb2N1c2ZpcmUsb2dyZV9tYWdpX2Jsb29kbHVzdCxjZW50YXVyX2toYW5fZW5kdXJhbmNlX2F1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2JlYXN0bWFzdGVyX2lubmVyX2JlYXN0JyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSgpID09ICdseWNhbl9mZXJhbF9pbXB1bHNlJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSgpID09ICdsb25lX2RydWlkX3JhYmlkJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSgpID09ICd0aW55X2dyb3cnIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ3BoYW50b21fYXNzYXNzaW5fcGhhbnRvbV9zdHJpa2UnIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ3dpbmRydW5uZXJfZm9jdXNmaXJlJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSgpID09ICdvZ3JlX21hZ2lfYmxvb2RsdXN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ2NlbnRhdXJfa2hhbl9lbmR1cmFuY2VfYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmF0dGFja3NwZWVkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJvbGxfd2FybG9yZF9mZXJ2b3Isd2lzcF9vdmVyY2hhcmdlLGxpbmFfZmllcnlfc291bCxpbnZva2VyX2FsYWNyaXR5LGludm9rZXJfd2V4LGh1c2thcl9iZXJzZXJrZXJzX2Jsb29kXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmF0dGFja3NwZWVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0QXR0YWNrU3BlZWRSZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmlnaHRfc3RhbGtlcl92b2lkLGNyeXN0YWxfbWFpZGVuX2NyeXN0YWxfbm92YSxnaG9zdF9mcm9zdF9hdHRhY2ssb2dyZV9tYWdpX2Zyb3N0X2FybW9yLHBvbGFyX2Z1cmJvbGdfdXJzYV93YXJyaW9yX3RodW5kZXJfY2xhcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja3NwZWVkX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpY2hfZnJvc3RfYXJtb3IsbGljaF9mcm9zdF9ub3ZhLGVuY2hhbnRyZXNzX3VudG91Y2hhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvd19hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlYXN0bWFzdGVyX3ByaW1hbF9yb2FyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvd19hdHRhY2tfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9ybV9zcGlyaXRfb3ZlcmxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvdmVybG9hZF9hdHRhY2tfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9tbmlrbmlnaHRfZGVnZW5fYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdvbW5pa25pZ2h0X2RlZ2VuX2F1cmEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHR1c2tfZnJvemVuX3NpZ2lsLGNyeXN0YWxfbWFpZGVuX2ZyZWV6aW5nX2ZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2NyeXN0YWxfbWFpZGVuX2ZyZWV6aW5nX2ZpZWxkJyAmJiAhc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkubmFtZSgpID09ICd0dXNrX2Zyb3plbl9zaWdpbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3Nsb3dfc2NlcHRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnY3J5c3RhbF9tYWlkZW5fZnJlZXppbmdfZmllbGQnICYmIHNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZhY2VsZXNzX3ZvaWRfdGltZV93YWxrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnZmFjZWxlc3Nfdm9pZF90aW1lX3dhbGsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvdW50eV9odW50ZXJfamluYWRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2JvdW50eV9odW50ZXJfamluYWRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicmV3bWFzdGVyX3RodW5kZXJfY2xhcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja19zcGVlZF9zbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdicmV3bWFzdGVyX3RodW5kZXJfY2xhcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVkdXNhX3N0b25lX2dhemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdtZWR1c2Ffc3RvbmVfZ2F6ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlzYWdlX2dyYXZlX2NoaWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrc3BlZWRfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhYmFkZG9uX2Zyb3N0bW91cm5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3Nsb3dfdG9vbHRpcCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnYWJhZGRvbl9mcm9zdG1vdXJuZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdlbnJhZ2VkX3dpbGRraW5fdG9ybmFkbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IDE1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5hdHRhY2tzcGVlZHJlZHVjdGlvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZpcGVyX3ZpcGVyX3N0cmlrZSx2aXBlcl9jb3Jyb3NpdmVfc2tpbixqYWtpcm9fbGlxdWlkX2ZpcmUsbGljaF9jaGFpbl9mcm9zdCxzYW5ka2luZ19lcGljZW50ZXIsZWFydGhfc3Bpcml0X3JvbGxpbmdfYm91bGRlclxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5hdHRhY2tzcGVlZHJlZHVjdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgc2VsZi5nZXRCYXNoID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNsYXJkYXJfYmFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc25pcGVyX2hlYWRzaG90XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvY19jaGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJhc2ggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoLGZhY2VsZXNzX3ZvaWRfdGltZV9sb2NrXG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIGFiaWxpdHkuYmFzaCgpLzEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTsgICAgXG4gICAgc2VsZi5nZXRCYXNlRGFtYWdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICB2YXIgdG90YWxNdWx0aXBsaWVyID0gMTtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW55X2dyb3csdGVycm9yYmxhZGVfbWV0YW1vcnBob3Npc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2RhbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAndGlueV9ncm93JyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAndGVycm9yYmxhZGVfbWV0YW1vcnBob3NpcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuYmFzZURhbWFnZU11bHRpcGxpZXIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVhcnRoc2hha2VyX2VuY2hhbnRfdG90ZW1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNdWx0aXBsaWVyICs9IGFiaWxpdHkuYmFzZURhbWFnZU11bHRpcGxpZXIoKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKnRvdGFsQXR0cmlidXRlICs9IGFiaWxpdHkuYmFzZURhbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYmFzZURhbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmJhc2VEYW1hZ2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaW5rel9kZWF0aF9wYWN0XG4gICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IGFiaWxpdHkuYmFzZURhbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYmFzZURhbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzb3VyY2VzOiBzb3VyY2VzLCB0b3RhbDogdG90YWxBdHRyaWJ1dGUsIG11bHRpcGxpZXI6IHRvdGFsTXVsdGlwbGllciB9O1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0U2VsZkJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVkdXNhX3NwbGl0X3Nob3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2VfbW9kaWZpZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZHJ1bm5lcl9mb2N1c2ZpcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb2N1c2ZpcmVfZGFtYWdlX3JlZHVjdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvY3VzZmlyZV9kYW1hZ2VfcmVkdWN0aW9uX3NjZXB0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmVuZ2VmdWxzcGlyaXRfY29tbWFuZF9hdXJhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfZGFtYWdlX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAndmVuZ2VmdWxzcGlyaXRfY29tbWFuZF9hdXJhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXZlcm1vcmVfcmVxdWllbVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIGFiaWxpdHkuYmFzZURhbWFnZVJlZHVjdGlvblBjdCgpLzEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEJBVCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZSxhbGNoZW1pc3RfY2hlbWljYWxfcmFnZSxsb25lX2RydWlkX3RydWVfZm9ybSxseWNhbl9zaGFwZXNoaWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFzZV9hdHRhY2tfdGltZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyb29kbW90aGVyX2luc2F0aWFibGVfaHVuZ2VyLGx1bmFfbHVuYXJfYmxlc3NpbmcsdGVtcGxhcl9hc3Nhc3Npbl9yZWZyYWN0aW9uLHRlbXBsYXJfYXNzYXNzaW5fbWVsZCx0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZSxsb25lX2RydWlkX3RydWVfZm9ybV9iYXR0bGVfY3J5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdicm9vZG1vdGhlcl9pbnNhdGlhYmxlX2h1bmdlcicgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ2x1bmFfbHVuYXJfYmxlc3NpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAndGVtcGxhcl9hc3Nhc3Npbl9yZWZyYWN0aW9uJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAndGVtcGxhcl9hc3Nhc3Npbl9tZWxkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ3Ryb2xsX3dhcmxvcmRfYmVyc2Vya2Vyc19yYWdlJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnbG9uZV9kcnVpZF90cnVlX2Zvcm1fYmF0dGxlX2NyeScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGx5Y2FuX2hvd2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoZXJvX2JvbnVzX2RhbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdzdG9ybV9zcGlyaXRfb3ZlcmxvYWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdtYWdpYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzRGFtYWdlICE9IHVuZGVmaW5lZCAmJiBhYmlsaXR5LmJvbnVzRGFtYWdlKCkgIT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV2ZXJtb3JlX25lY3JvbWFzdGVyeSx1cnNhX2Z1cnlfc3dpcGVzLHVyc2FfZW5yYWdlLGludm9rZXJfYWxhY3JpdHksaW52b2tlcl9leG9ydCxlbGRlcl90aXRhbl9hbmNlc3RyYWxfc3Bpcml0LHNwZWN0cmVfZGVzb2xhdGUscmF6b3Jfc3RhdGljX2xpbmtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNEYW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5ib251c0RhbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiBhYmlsaXR5Lm5hbWUoKSA9PSAnc3BlY3RyZV9kZXNvbGF0ZScgPyAncHVyZScgOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgdG90YWw6IHRvdGFsQXR0cmlidXRlIH07XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlUGVyY2VudCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBibG9vZHNlZWtlcl9ibG9vZHJhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2VfaW5jcmVhc2VfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdibG9vZHNlZWtlcl9ibG9vZHJhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hZ25hdGF1cl9lbXBvd2VyLHZlbmdlZnVsc3Bpcml0X2NvbW1hbmRfYXVyYSxhbHBoYV93b2xmX2NvbW1hbmRfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2RhbWFnZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ21hZ25hdGF1cl9lbXBvd2VyJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAndmVuZ2VmdWxzcGlyaXRfY29tbWFuZF9hdXJhJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnYWxwaGFfd29sZl9jb21tYW5kX2F1cmEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN2ZW5fZ29kc19zdHJlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dvZHNfc3RyZW5ndGhfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdzdmVuX2dvZHNfc3RyZW5ndGgnICYmIHNlbGYuaGVybyAhPSB1bmRlZmluZWQgJiYgc2VsZi5oZXJvLmhlcm9JZCgpID09ICdzdmVuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdnb2RzX3N0cmVuZ3RoX2RhbWFnZV9zY2VwdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdzdmVuX2dvZHNfc3RyZW5ndGgnICYmIHNlbGYuaGVybyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzRGFtYWdlUGN0ICE9IHVuZGVmaW5lZCAmJiBhYmlsaXR5LmJvbnVzRGFtYWdlUGN0KCkgIT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmxvb2RzZWVrZXJfYmxvb2RyYWdlXG4gICAgICAgICAgICAgICAgICAgIC8qdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNEYW1hZ2VQY3QoKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYm9udXNEYW1hZ2VQY3QoKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHNvdXJjZXMsIHRvdGFsOiB0b3RhbEF0dHJpYnV0ZSB9O1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRCb251c0RhbWFnZUJhY2tzdGFiID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUxID0gMDtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlMiA9IDA7XG4gICAgICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdyaWtpX2JhY2tzdGFiJykge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByaWtpX2JhY2tzdGFiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGFtYWdlX211bHRpcGxpZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZTEgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0vKlxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5ib251c0RhbWFnZUJhY2tzdGFiICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2JvbnVzRGFtYWdlQmFja3N0YWInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRhbWFnZV9tdWx0aXBsaWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZTIrPWFiaWxpdHkuYm9udXNEYW1hZ2VCYWNrc3RhYigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5ib251c0RhbWFnZUJhY2tzdGFiKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgdG90YWw6IFt0b3RhbEF0dHJpYnV0ZTEsdG90YWxBdHRyaWJ1dGUyXSB9O1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0Qm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUxID0gMDtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlMiA9IDA7XG4gICAgICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdkcm93X3Jhbmdlcl90cnVlc2hvdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfdHJ1ZXNob3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cnVlc2hvdF9yYW5nZWRfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUxICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuYm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfdHJ1ZXNob3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlMis9YWJpbGl0eS5ib251c0RhbWFnZVByZWNpc2lvbkF1cmEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgdG90YWw6IFt0b3RhbEF0dHJpYnV0ZTEsdG90YWxBdHRyaWJ1dGUyXSB9O1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0Qm9udXNEYW1hZ2VSZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFuZV9lbmZlZWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZmVlYmxlX2F0dGFja19yZWR1Y3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYm9udXNEYW1hZ2VSZWR1Y3Rpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBydWJpY2tfZmFkZV9ib2x0LHJhem9yX3N0YXRpY19saW5rXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmJvbnVzRGFtYWdlUmVkdWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlUmVkdWN0aW9uUGN0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lZHVzYV9zcGxpdF9zaG90XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGFtYWdlX21vZGlmaWVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgKyBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbmRydW5uZXJfZm9jdXNmaXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9jdXNmaXJlX2RhbWFnZV9yZWR1Y3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb2N1c2ZpcmVfZGFtYWdlX3JlZHVjdGlvbl9zY2VwdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldERhbWFnZUFtcGxpZmljYXRpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAvKmlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiYW5lX2VuZmVlYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5mZWVibGVfYXR0YWNrX3JlZHVjdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmRhbWFnZUFtcGxpZmljYXRpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1bmR5aW5nX2ZsZXNoX2dvbGVtXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgYWJpbGl0eS5kYW1hZ2VBbXBsaWZpY2F0aW9uKCkvMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0RGFtYWdlUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJsb29kc2Vla2VyX2Jsb29kcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhbWFnZV9pbmNyZWFzZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2Jsb29kc2Vla2VyX2Jsb29kcmFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGt1bmtrYV9naG9zdHNoaXBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdrdW5ra2FfZ2hvc3RzaGlwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSA1MC8xMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5kYW1hZ2VSZWR1Y3Rpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aXNwX292ZXJjaGFyZ2UsYnJpc3RsZWJhY2tfYnJpc3RsZWJhY2ssc3BlY3RyZV9kaXNwZXJzaW9uLG1lZHVzYV9tYW5hX3NoaWVsZCx1cnNhX2VucmFnZVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIGFiaWxpdHkuZGFtYWdlUmVkdWN0aW9uKCkvMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRDcml0U291cmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYWJpbGl0eS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBoYW50b21fYXNzYXNzaW5fY291cF9kZV9ncmFjZSxicmV3bWFzdGVyX2RydW5rZW5fYnJhd2xlcixjaGFvc19rbmlnaHRfY2hhb3Nfc3RyaWtlLGx5Y2FuX3NoYXBlc2hpZnQsc2tlbGV0b25fa2luZ19tb3J0YWxfc3RyaWtlLGp1Z2dlcm5hdXRfYmxhZGVfZGFuY2UsYWxwaGFfd29sZl9jcml0aWNhbF9zdHJpa2UsZ2lhbnRfd29sZl9jcml0aWNhbF9zdHJpa2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BoYW50b21fYXNzYXNzaW5fY291cF9kZV9ncmFjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgJ2NyaXRfY2hhbmNlJywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnY3JpdF9ib251cycsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnJld21hc3Rlcl9kcnVua2VuX2JyYXdsZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdjcml0X2NoYW5jZScsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgJ2NyaXRfbXVsdGlwbGllcicsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2hhb3Nfa25pZ2h0X2NoYW9zX3N0cmlrZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdseWNhbl9zaGFwZXNoaWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnY3JpdF9jaGFuY2UnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdjcml0X211bHRpcGxpZXInLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NrZWxldG9uX2tpbmdfbW9ydGFsX3N0cmlrZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgJ2NyaXRfY2hhbmNlJywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnY3JpdF9tdWx0JywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdqdWdnZXJuYXV0X2JsYWRlX2RhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnYmxhZGVfZGFuY2VfY3JpdF9jaGFuY2UnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdibGFkZV9kYW5jZV9jcml0X211bHQnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FscGhhX3dvbGZfY3JpdGljYWxfc3RyaWtlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dpYW50X3dvbGZfY3JpdGljYWxfc3RyaWtlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAnY3JpdF9jaGFuY2UnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdjcml0X211bHQnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9KTsgICAgXG5cbiAgICBzZWxmLmdldENsZWF2ZVNvdXJjZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWduYXRhdXJfZW1wb3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFnbmF0YXVyX2VtcG93ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdjbGVhdmVfcmFkaXVzJywgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgJ2NsZWF2ZV9kYW1hZ2VfcGN0JywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdmVuX2dyZWF0X2NsZWF2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3Zlbl9ncmVhdF9jbGVhdmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdncmVhdF9jbGVhdmVfcmFkaXVzJywgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgJ2dyZWF0X2NsZWF2ZV9kYW1hZ2UnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGt1bmtrYV90aWRlYnJpbmdlclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAna3Vua2thX3RpZGVicmluZ2VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cyc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCAncmFkaXVzJywgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGlueV9ncm93XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0aW55X2dyb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmhhc1NjZXB0ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksICdib251c19jbGVhdmVfcmFkaXVzX3NjZXB0ZXInLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgJ2JvbnVzX2NsZWF2ZV9kYW1hZ2Vfc2NlcHRlcicsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZXM7XG4gICAgfSk7ICAgIFxuICAgIFxuICAgIHNlbGYuZ2V0Q3JpdENoYW5jZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwaGFudG9tX2Fzc2Fzc2luX2NvdXBfZGVfZ3JhY2UsYnJld21hc3Rlcl9kcnVua2VuX2JyYXdsZXIsY2hhb3Nfa25pZ2h0X2NoYW9zX3N0cmlrZSxseWNhbl9zaGFwZXNoaWZ0LHNrZWxldG9uX2tpbmdfbW9ydGFsX3N0cmlrZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyaXRfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTsgICAgICAgICAgICBcbiAgICBcbiAgICBzZWxmLmdldEV2YXNpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGhhbnRvbV9hc3Nhc3Npbl9ibHVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfZXZhc2lvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJld21hc3Rlcl9kcnVua2VuX2JyYXdsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkb2RnZV9jaGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0RXZhc2lvbkJhY2t0cmFjayA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWNlbGVzc192b2lkX2JhY2t0cmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RvZGdlX2NoYW5jZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0TWlzc0NoYW5jZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9vZG1vdGhlcl9pbmNhcGFjaXRhdGluZ19iaXRlLGJyZXdtYXN0ZXJfZHJ1bmtlbl9oYXplXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlzc19jaGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJpa2lfc21va2Vfc2NyZWVuLGtlZXBlcl9vZl90aGVfbGlnaHRfYmxpbmRpbmdfbGlnaHQsdGlua2VyX2xhc2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlzc19yYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5taXNzQ2hhbmNlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmlnaHRfc3RhbGtlcl9jcmlwcGxpbmdfZmVhclxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSo9KDEtYWJpbGl0eS5taXNzQ2hhbmNlKCkvMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0TGlmZXN0ZWFsID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNrZWxldG9uX2tpbmdfdmFtcGlyaWNfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZhbXBpcmljX2F1cmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyb29kbW90aGVyX2luc2F0aWFibGVfaHVuZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGlmZXN0ZWFsX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5saWZlc3RlYWwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBsaWZlX3N0ZWFsZXJfb3Blbl93b3VuZHNcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkubGlmZXN0ZWFsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldE1hZ2ljUmVzaXN0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFudGltYWdlX3NwZWxsX3NoaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWxsX3NoaWVsZF9yZXNpc3RhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBoYW50b21fbGFuY2VyX3BoYW50b21fZWRnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hZ2ljX3Jlc2lzdGFuY2VfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdwaGFudG9tX2xhbmNlcl9waGFudG9tX2VkZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBydWJpY2tfbnVsbF9maWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hZ2ljX2RhbWFnZV9yZWR1Y3Rpb25fcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdydWJpY2tfbnVsbF9maWVsZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tYWdpY1Jlc2lzdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGh1c2thcl9iZXJzZXJrZXJzX2Jsb29kLHZpcGVyX2NvcnJvc2l2ZV9za2luLHZpc2FnZV9ncmF2ZWtlZXBlcnNfY2xvYWtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBhYmlsaXR5Lm1hZ2ljUmVzaXN0KCkvMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmNpZW50X2FwcGFyaXRpb25faWNlX3ZvcnRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWxsX3Jlc2lzdF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHB1Z25hX2RlY3JlcGlmeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX3NwZWxsX2RhbWFnZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNreXdyYXRoX21hZ2VfYW5jaWVudF9zZWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVzaXN0X2RlYnVmZic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbGRlcl90aXRhbl9uYXR1cmFsX29yZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFnaWNfcmVzaXN0YW5jZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0TW92ZW1lbnRTcGVlZEZsYXQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxjaGVtaXN0X2NoZW1pY2FsX3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2FsY2hlbWlzdF9jaGVtaWNhbF9yYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW55X2dyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAndGlueV9ncm93Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3Ryb2xsX3dhcmxvcmRfYmVyc2Vya2Vyc19yYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvbmVfZHJ1aWRfdHJ1ZV9mb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlZWRfbG9zcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tb3ZlbWVudFNwZWVkRmxhdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBkcmFnb25fa25pZ2h0X2VsZGVyX2RyYWdvbl9mb3JtXG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5tb3ZlbWVudFNwZWVkRmxhdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhYmFkZG9uX2Zyb3N0bW91cm5lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBib3VudHlfaHVudGVyX3RyYWNrIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtaXJhbmFfbGVhcCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsZWFwX3NwZWVkYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN2ZW5fd2FyY3J5IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dhcmNyeV9tb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsaW5rel93aW5kX3dhbGtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlX3NwZWVkX2JvbnVzX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZHJ1bm5lcl93aW5kcnVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkX2JvbnVzX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9vZG1vdGhlcl9zcGluX3dlYixzcGVjdHJlX3NwZWN0cmFsX2RhZ2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVzcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnYnJvb2Rtb3RoZXJfc3Bpbl93ZWInIHx8IGFiaWxpdHkubmFtZSgpID09ICdzcGVjdHJlX3NwZWN0cmFsX2RhZ2dlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF4ZV9jdWxsaW5nX2JsYWRlLG5lY3Jvbm9taWNvbl9hcmNoZXJfYW9lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlZWRfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2F4ZV9jdWxsaW5nX2JsYWRlJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnbmVjcm9ub21pY29uX2FyY2hlcl9hb2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBueXhfYXNzYXNzaW5fdmVuZGV0dGEgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ255eF9hc3Nhc3Npbl92ZW5kZXR0YScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwaXJpdF9icmVha2VyX2VtcG93ZXJpbmdfaGFzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3Zlc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdzcGlyaXRfYnJlYWtlcl9lbXBvd2VyaW5nX2hhc3RlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2dyZV9tYWdpX2Jsb29kbHVzdCxkZWF0aF9wcm9waGV0X3dpdGNoY3JhZnQsa29ib2xkX3Rhc2ttYXN0ZXJfc3BlZWRfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdvZ3JlX21hZ2lfYmxvb2RsdXN0JyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnZGVhdGhfcHJvcGhldF93aXRjaGNyYWZ0JyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAna29ib2xkX3Rhc2ttYXN0ZXJfc3BlZWRfYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJhem9yX3Vuc3RhYmxlX2N1cnJlbnQscGhhbnRvbV9sYW5jZXJfZG9wcGVsd2Fsa1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAncmF6b3JfdW5zdGFibGVfY3VycmVudCcgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ3BoYW50b21fbGFuY2VyX2RvcHBlbHdhbGsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmVhbnRfbmF0dXJlc19ndWlzZSxsb25lX2RydWlkX3JhYmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbW92ZV9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAndHJlYW50X25hdHVyZXNfZ3Vpc2UnIHx8IGFiaWxpdHkubmFtZSgpID09ICdsb25lX2RydWlkX3JhYmlkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2lzcF90ZXRoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3dpc3BfdGV0aGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga3Vua2thX2dob3N0c2hpcCx2aXNhZ2VfZ3JhdmVfY2hpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWRfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2t1bmtrYV9naG9zdHNoaXAnIHx8IGFiaWxpdHkubmFtZSgpID09ICd2aXNhZ2VfZ3JhdmVfY2hpbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tb3ZlbWVudFNwZWVkUGN0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGF4ZV9iYXR0bGVfaHVuZ2VyLGJyaXN0bGViYWNrX3dhcnBhdGgsc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoLGxpbmFfZmllcnlfc291bCxpbnZva2VyX2dob3N0X3dhbGssaW52b2tlcl93ZXgsZWxkZXJfdGl0YW5fYW5jZXN0cmFsX3NwaXJpdFxuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkubW92ZW1lbnRTcGVlZFBjdCgpLzEwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUoKSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVzcGVlZF9zbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZCcgJiYgIXNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWRfc2xvd19zY2VwdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZCcgJiYgc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZGVyX3RpdGFuX2VhcnRoX3NwbGl0dGVyLG1hZ25hdGF1cl9za2V3ZXIsYWJhZGRvbl9mcm9zdG1vdXJuZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93X3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuaWdodF9zdGFsa2VyX3ZvaWQsY3J5c3RhbF9tYWlkZW5fY3J5c3RhbF9ub3ZhLGdob3N0X2Zyb3N0X2F0dGFjayxvZ3JlX21hZ2lfZnJvc3RfYXJtb3IscG9sYXJfZnVyYm9sZ191cnNhX3dhcnJpb3JfdGh1bmRlcl9jbGFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgIT0gJ2NyeXN0YWxfbWFpZGVuX2ZyZWV6aW5nX2ZpZWxkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGljaF9mcm9zdF9hcm1vcixsaWNoX2Zyb3N0X25vdmEsZW5jaGFudHJlc3NfZW5jaGFudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nsb3dfbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlYXN0bWFzdGVyX3ByaW1hbF9yb2FyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvd19tb3ZlbWVudF9zcGVlZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyb3dfcmFuZ2VyX2Zyb3N0X2Fycm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Zyb3N0X2Fycm93c19tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2tlbGV0b25fa2luZ19oZWxsZmlyZV9ibGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsYXN0X3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNsYXJkYXJfc2xpdGhlcmVlbl9jcnVzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NydXNoX2V4dHJhX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3JtX3NwaXJpdF9vdmVybG9hZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvdmVybG9hZF9tb3ZlX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbmRydW5uZXJfd2luZHJ1blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZW15X21vdmVzcGVlZF9ib251c19wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGhhbnRvbV9hc3Nhc3Npbl9zdGlmbGluZ19kYWdnZXIsdHVza19mcm96ZW5fc2lnaWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3BoYW50b21fYXNzYXNzaW5fc3RpZmxpbmdfZGFnZ2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkubmFtZSgpID09ICd0dXNrX2Zyb3plbl9zaWdpbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludm9rZXJfaWNlX3dhbGwsbWVkdXNhX3N0b25lX2dhemUsd2lzcF90ZXRoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdtZWR1c2Ffc3RvbmVfZ2F6ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyb29kbW90aGVyX2luY2FwYWNpdGF0aW5nX2JpdGUsYm91bnR5X2h1bnRlcl9qaW5hZGEsc3BlY3RyZV9zcGVjdHJhbF9kYWdnZXIsd2ludGVyX3d5dmVybl9hcmN0aWNfYnVyblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVzcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnYnJvb2Rtb3RoZXJfaW5jYXBhY2l0YXRpbmdfYml0ZScgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ2JvdW50eV9odW50ZXJfamluYWRhJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnd2ludGVyX3d5dmVybl9hcmN0aWNfYnVybicgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ3dpbnRlcl93eXZlcm5fc3BsaW50ZXJfYmxhc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3NwZWN0cmVfc3BlY3RyYWxfZGFnZ2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb21uaWtuaWdodF9kZWdlbl9hdXJhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlZWRfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ29tbmlrbmlnaHRfZGVnZW5fYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRpZGVodW50ZXJfZ3VzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICd0aWRlaHVudGVyX2d1c2gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwdWduYV9kZWNyZXBpZnksY2hlbl9wZW5pdGVuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAncHVnbmFfZGVjcmVwaWZ5JyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnY2hlbl9wZW5pdGVuY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmNpZW50X2FwcGFyaXRpb25faWNlX3ZvcnRleCxwaGFudG9tX2xhbmNlcl9zcGlyaXRfbGFuY2Usc2t5d3JhdGhfbWFnZV9jb25jdXNzaXZlX3Nob3QsZmFjZWxlc3Nfdm9pZF90aW1lX3dhbGtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlbWVudF9zcGVlZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2FuY2llbnRfYXBwYXJpdGlvbl9pY2Vfdm9ydGV4JyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAncGhhbnRvbV9sYW5jZXJfc3Bpcml0X2xhbmNlJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnZmFjZWxlc3Nfdm9pZF90aW1lX3dhbGsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3NreXdyYXRoX21hZ2VfY29uY3Vzc2l2ZV9zaG90Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmF6b3JfdW5zdGFibGVfY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nsb3dfYW1vdW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdyYXpvcl91bnN0YWJsZV9jdXJyZW50Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJld21hc3Rlcl9kcnVua2VuX2hhemUsYnJld21hc3Rlcl90aHVuZGVyX2NsYXAsdHJlYW50X2xlZWNoX3NlZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlbWVudF9zbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdicmV3bWFzdGVyX2RydW5rZW5faGF6ZScgfHwgYWJpbGl0eS5uYW1lKCkgPT0gJ2JyZXdtYXN0ZXJfdGh1bmRlcl9jbGFwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkubmFtZSgpID09ICd1cnNhX2VhcnRoc2hvY2snIHx8IGFiaWxpdHkubmFtZSgpID09ICd0cmVhbnRfbGVlY2hfc2VlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNrZWxldG9uX2tpbmdfcmVpbmNhcm5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVzcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAnc2tlbGV0b25fa2luZ19yZWluY2FybmF0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga3Vua2thX3RvcnJlbnQsdmlzYWdlX2dyYXZlX2NoaWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdrdW5ra2FfdG9ycmVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5Lm5hbWUoKSA9PSAndmlzYWdlX2dyYXZlX2NoaWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdzYXR5cl90cmlja3N0ZXJfcHVyZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSA4MC8xMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2VucmFnZWRfd2lsZGtpbl90b3JuYWRvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gMTUvMTAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXhlX2JhdHRsZV9odW5nZXIsYmF0cmlkZXJfc3RpY2t5X25hcGFsbSxzaHJlZGRlcl9jaGFrcmFtLG1lZXBvX2dlb3N0cmlrZSxsaWZlX3N0ZWFsZXJfb3Blbl93b3VuZHMsXG4gICAgICAgICAgICAgICAgICAgIC8vIHZlbm9tYW5jZXJfcG9pc29uX3N0aW5nLHZpcGVyX3ZpcGVyX3N0cmlrZSx2aXBlcl9jb3Jyb3NpdmVfc2tpbix2aXBlcl9wb2lzb25fYXR0YWNrLHZlbm9tYW5jZXJfdmVub21vdXNfZ2FsZSx0cmVhbnRfbGVlY2hfc2VlZFxuICAgICAgICAgICAgICAgICAgICAvLyBsaWNoX2NoYWluX2Zyb3N0LHNuaXBlcl9zaHJhcG5lbCxjZW50YXVyX3N0YW1wZWRlLGh1c2thcl9saWZlX2JyZWFrLGpha2lyb19kdWFsX2JyZWF0aCxtZWVwb19nZW9zdHJpa2Usc2FuZGtpbmdfZXBpY2VudGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVhcnRoX3NwaXJpdF9yb2xsaW5nX2JvdWxkZXIsaW52b2tlcl9naG9zdF93YWxrLGludm9rZXJfaWNlX3dhbGwsZWxkZXJfdGl0YW5fZWFydGhfc3BsaXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5keWluZ19mbGVzaF9nb2xlbSx0ZW1wbGFyX2Fzc2Fzc2luX3BzaW9uaWNfdHJhcCxuZXZlcm1vcmVfcmVxdWllbSxxdWVlbm9mcGFpbl9zaGFkb3dfc3RyaWtlXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5Lm1vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24oKS8xMDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0VHVyblJhdGVSZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVkdXNhX3N0b25lX2dhemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdtZWR1c2Ffc3RvbmVfZ2F6ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS50dXJuUmF0ZVJlZHVjdGlvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJhdHJpZGVyX3N0aWNreV9uYXBhbG1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkudHVyblJhdGVSZWR1Y3Rpb24oKS8xMDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldFZpc2lvblJhbmdlTmlnaHQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2ludGVyX3d5dmVybl9hcmN0aWNfYnVyblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25pZ2h0X3Zpc2lvbl9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbHljYW5fc2hhcGVzaGlmdCxsdW5hX2x1bmFyX2JsZXNzaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbmlnaHRfdmlzaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LnZpc2lvbm5pZ2h0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LnZpc2lvbm5pZ2h0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0VmlzaW9uUmFuZ2VQY3RSZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmlnaHRfc3RhbGtlcl9kYXJrbmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsaW5kX3BlcmNlbnRhZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKSwgYXR0cmlidXRlLm5hbWUoKSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5zZXRFdmFzaW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ3dpbmRydW5uZXJfd2luZHJ1bicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLnNldE1vdmVtZW50U3BlZWQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNQVhfTU9WRVNQRUVEID0gNTIyO1xuICAgICAgICB2YXIgTUlOX01PVkVTUEVFRCA9IDEwMDtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKClbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdzcGlyaXRfYnJlYWtlcl9jaGFyZ2Vfb2ZfZGFya25lc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ21vdmVtZW50X3NwZWVkJywgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSgpID09ICdkYXJrX3NlZXJfc3VyZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNQVhfTU9WRVNQRUVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2NlbnRhdXJfc3RhbXBlZGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNQVhfTU9WRVNQRUVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2x5Y2FuX3NoYXBlc2hpZnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNQVhfTU9WRVNQRUVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lKCkgPT0gJ2xpb25fdm9vZG9vJyB8fCBhYmlsaXR5Lm5hbWUoKSA9PSAnc2hhZG93X3NoYW1hbl92b29kb28nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNSU5fTU9WRVNQRUVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldEJhc2hTb3VyY2UgPSBmdW5jdGlvbiAoYXR0YWNrdHlwZSkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKVtpXTtcbiAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSgpIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuYWJpbGl0aWVzKClbaV0uYXR0cmlidXRlcygpLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKClbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNuaXBlcl9oZWFkc2hvdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2NfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID09IHVuZGVmaW5lZCAmJiBhYmlsaXR5Lm5hbWUoKSA9PSAnc25pcGVyX2hlYWRzaG90Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbGFyZGFyX2Jhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSgpID09ICdzbGFyZGFyX2Jhc2gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JvbnVzX2RhbWFnZScsIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYmFzaEJvbnVzRGFtYWdlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFjZWxlc3Nfdm9pZF90aW1lX2xvY2tcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID09IHVuZGVmaW5lZCAmJiBhYmlsaXR5Lm5hbWUoKSA9PSAnZmFjZWxlc3Nfdm9pZF90aW1lX2xvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogYWJpbGl0eS5iYXNoKCkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBhYmlsaXR5LmJhc2hCb251c0RhbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAnbWFnaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHNwaXJpdF9icmVha2VyX2dyZWF0ZXJfYmFzaFxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSgpID09ICdzcGlyaXRfYnJlYWtlcl9ncmVhdGVyX2Jhc2gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogYWJpbGl0eS5iYXNoKCkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBhYmlsaXR5LmJhc2hCb251c0RhbWFnZSgpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ21hZ2ljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRPcmJTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLmFiaWxpdGllcygpW2ldO1xuICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lKCkgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yKCkuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5hYmlsaXRpZXMoKVtpXS5hdHRyaWJ1dGVzKCkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLmFiaWxpdGllcygpW2ldLmF0dHJpYnV0ZXMoKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW50aW1hZ2VfbWFuYV9icmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hbmFfcGVyX2hpdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9PSB1bmRlZmluZWQgJiYgYWJpbGl0eS5uYW1lKCkgPT0gJ2FudGltYWdlX21hbmFfYnJlYWsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZGFtYWdlX3Blcl9idXJuJywgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGlua3pfc2VhcmluZ19hcnJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2VfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSgpID09ICdjbGlua3pfc2VhcmluZ19hcnJvd3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksIGF0dHJpYnV0ZS5uYW1lKCksIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2lsZW5jZXJfZ2xhaXZlc19vZl93aXNkb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnRlbGxlY3RfZGFtYWdlX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9PSB1bmRlZmluZWQgJiYgYWJpbGl0eS5uYW1lKCkgPT0gJ3NpbGVuY2VyX2dsYWl2ZXNfb2Zfd2lzZG9tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWUoKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCBhdHRyaWJ1dGUubmFtZSgpLCBhYmlsaXR5LmxldmVsKCkpLzEwMCAqIHNlbGYuaGVyby50b3RhbEludCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3B1cmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzRGFtYWdlT3JiICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb2JzaWRpYW5fZGVzdHJveWVyX2FyY2FuZV9vcmJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lKCldID09IHVuZGVmaW5lZCAmJiBhYmlsaXR5Lm5hbWUoKSA9PSAnb2JzaWRpYW5fZGVzdHJveWVyX2FyY2FuZV9vcmInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZSgpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5ib251c0RhbWFnZU9yYigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3B1cmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9O1xuICAgIFxuICAgIHNlbGYudG9nZ2xlQWJpbGl0eSA9IGZ1bmN0aW9uIChpbmRleCwgZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uYmVoYXZpb3IoKS5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpIDwgMCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5pc0FjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubmFtZSgpID09ICdseWNhbl9zaGFwZXNoaWZ0Jykge1xuICAgICAgICAgICAgICAgIHNlbGYuaXNTaGFwZVNoaWZ0QWN0aXZlKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNBY3RpdmUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICBzZWxmLnRvZ2dsZUFiaWxpdHlEZXRhaWwgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmlzRGV0YWlsKCkpIHtcbiAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNEZXRhaWwoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5pc0RldGFpbCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKTtcbiAgICBcbiAgICBzZWxmLmdldEFiaWxpdHkgPSBmdW5jdGlvbiAoYWJpbGl0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5uYW1lKCkgPT0gYWJpbGl0eU5hbWU7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbC5wcm90b3R5cGUubGV2ZWxVcEFiaWxpdHkgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50LCBoZXJvKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPCBoZXJvLmdldEFiaWxpdHlMZXZlbE1heChkYXRhKSAmJiBoZXJvLmF2YWlsYWJsZVNraWxsUG9pbnRzKCkgPiAwICkge1xuICAgICAgICBzd2l0Y2goc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5hYmlsaXR5dHlwZSgpKSB7XG4gICAgICAgICAgICBjYXNlICdET1RBX0FCSUxJVFlfVFlQRV9VTFRJTUFURSc6XG4gICAgICAgICAgICAgICAgaWYgKGhlcm8uaGVyb0lkKCkgPT0gJ2ludm9rZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPT0gMCkgJiYgKHBhcnNlSW50KGhlcm8uc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPj0gMikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPT0gMSkgJiYgKHBhcnNlSW50KGhlcm8uc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPj0gNykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPT0gMikgJiYgKHBhcnNlSW50KGhlcm8uc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPj0gMTEpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpID09IDMpICYmIChwYXJzZUludChoZXJvLnNlbGVjdGVkSGVyb0xldmVsKCkpID49IDE3KVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVyby5za2lsbFBvaW50SGlzdG9yeS5wdXNoKGluZGV4KCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhlcm8uaGVyb0lkKCkgPT0gJ21lZXBvJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpICogNyArIDMgPD0gcGFyc2VJbnQoaGVyby5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkrMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJvLnNraWxsUG9pbnRIaXN0b3J5LnB1c2goaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKzEpICogNSArIDEgPD0gcGFyc2VJbnQoaGVyby5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkrMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJvLnNraWxsUG9pbnRIaXN0b3J5LnB1c2goaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSAqIDIgKyAxIDw9IHBhcnNlSW50KGhlcm8uc2VsZWN0ZWRIZXJvTGV2ZWwoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkrMSk7XG4gICAgICAgICAgICAgICAgICAgIGhlcm8uc2tpbGxQb2ludEhpc3RvcnkucHVzaChpbmRleCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubmFtZSgpKSB7XG4gICAgICAgICAgICBjYXNlICdiZWFzdG1hc3Rlcl9jYWxsX29mX3RoZV93aWxkJzpcbiAgICAgICAgICAgIGNhc2UgJ2NoZW5fdGVzdF9vZl9mYWl0aCc6XG4gICAgICAgICAgICBjYXNlICdtb3JwaGxpbmdfbW9ycGhfYWdpJzpcbiAgICAgICAgICAgIGNhc2UgJ3NoYWRvd19kZW1vbl9zaGFkb3dfcG9pc29uJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb3JwaGxpbmdfbW9ycGhfc3RyJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdrZWVwZXJfb2ZfdGhlX2xpZ2h0X3NwaXJpdF9mb3JtJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMSc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTInOlxuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUzJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2VtYmVyX3NwaXJpdF9maXJlX3JlbW5hbnQnOlxuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xvbmVfZHJ1aWRfdHJ1ZV9mb3JtJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59O1xubXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbC5wcm90b3R5cGUubGV2ZWxEb3duQWJpbGl0eSA9IGZ1bmN0aW9uIChpbmRleCwgZGF0YSwgZXZlbnQsIGhlcm8pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSA+IDApIHtcbiAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgLSAxKTtcbiAgICAgICAgaGVyby5za2lsbFBvaW50SGlzdG9yeS5zcGxpY2UoaGVyby5za2lsbFBvaW50SGlzdG9yeSgpLmxhc3RJbmRleE9mKGluZGV4KCkpLCAxKTtcbiAgICAgICAgc3dpdGNoIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLm5hbWUoKSkge1xuICAgICAgICAgICAgY2FzZSAnYmVhc3RtYXN0ZXJfY2FsbF9vZl90aGVfd2lsZCc6XG4gICAgICAgICAgICBjYXNlICdjaGVuX3Rlc3Rfb2ZfZmFpdGgnOlxuICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX2FnaSc6XG4gICAgICAgICAgICBjYXNlICdzaGFkb3dfZGVtb25fc2hhZG93X3BvaXNvbic6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX3N0cic6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAna2VlcGVyX29mX3RoZV9saWdodF9zcGlyaXRfZm9ybSc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTEnOlxuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMl0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUyJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMyc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlbWJlcl9zcGlyaXRfZmlyZV9yZW1uYW50JzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsb25lX2RydWlkX3RydWVfZm9ybSc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufTsiLCIndXNlIHN0cmljdCc7XG4gICAgXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuYWJpbGl0eURhdGEgPSB7XG4gICAgJ2FsY2hlbWlzdF9hY2lkX3NwcmF5JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2FybW9yX3JlZHVjdGlvbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhcm1vclJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2FsY2hlbWlzdF91bnN0YWJsZV9jb25jb2N0aW9uJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0JyZXcgVGltZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWF4X2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYXhfc3R1bicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIFN0dW4nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS81O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYW5jaWVudF9hcHBhcml0aW9uX2NvbGRfZmVldCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzdHVuX2R1cmF0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgU3R1bicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2FuY2llbnRfYXBwYXJpdGlvbl9pY2VfYmxhc3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RvdF9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykrdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYW50aW1hZ2VfbWFuYV92b2lkJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IE1pc3NpbmcgTWFuYScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV92b2lkX2RhbWFnZV9wZXJfbWFuYScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYXhlX2JhdHRsZV9odW5nZXInOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQmF0dGxlIEh1bmdlcmVkIEVuZW1pZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NwZWVkX2JvbnVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTW92ZW1lbnQgU3BlZWQgQm9udXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIG5vTGV2ZWw6IHRydWUsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ01vdmVtZW50IFNwZWVkIEJvbnVzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBub0xldmVsOiB0cnVlLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdiYW5lX25pZ2h0bWFyZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2JhbmVfZmllbmRzX2dyaXAnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggTWFuYScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmllbmRfZ3JpcF9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pbnZlbnRvcnkuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKmFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdmaWVuZF9ncmlwX2RhbWFnZV9zY2VwdGVyJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0qYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdmaWVuZF9ncmlwX21hbmFfZHJhaW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBNYW5hIERyYWluJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBub0xldmVsOiB0cnVlLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LmludmVudG9yeS5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0qdlsxXSphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZmllbmRfZ3JpcF9tYW5hX2RyYWluX3NjZXB0ZXInLGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0qdlsxXSphLzEwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdiYXRyaWRlcl9zdGlja3lfbmFwYWxtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgQm9udXMgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X3NwZWVkX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IE1vdmVtZW50IFNwZWVkIFNsb3cnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0dXJuX3JhdGVfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgVHVybiBSYXRlIFNsb3cnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICd0dXJuUmF0ZVJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2JhdHJpZGVyX2ZpcmVmbHknOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdibG9vZHNlZWtlcl9ydXB0dXJlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IERpc3RhbmNlIFRyYXZlbGVkJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlbWVudF9kYW1hZ2VfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykgKyB2KmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYnJpc3RsZWJhY2tfdmlzY291c19uYXNhbF9nb28nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhcm1vcl9wZXJfc3RhY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBBcm1vciBSZWR1Y3Rpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC12KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhcm1vclJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVfc2xvd19wZXJfc3RhY2snLFxuICAgICAgICAgICAgbGFiZWw6ICclU0xPVzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtKGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdiYXNlX21vdmVfc2xvdycsMCkrdiphKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdicmlzdGxlYmFja19xdWlsbF9zcHJheSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGFja3MnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3F1aWxsX3N0YWNrX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAncXVpbGxfYmFzZV9kYW1hZ2UnLGFiaWxpdHkubGV2ZWwoKSkrdiphLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9jYXAgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnbWF4X2RhbWFnZScsMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRvdGFsID4gZGFtYWdlX2NhcCkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IGRhbWFnZV9jYXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2JyaXN0bGViYWNrX2JyaXN0bGViYWNrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RhbWFnZSBGcm9tJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAncmFkaW8nLFxuICAgICAgICAgICAgY29udHJvbFZhbHVlVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBjb250cm9sT3B0aW9uczogW1xuICAgICAgICAgICAgICAgIHt0ZXh0OiAnQmFjaycsIHZhbHVlOiAnYmFjayd9LFxuICAgICAgICAgICAgICAgIHt0ZXh0OiAnU2lkZScsIHZhbHVlOiAnc2lkZSd9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdiYWNrX2RhbWFnZV9yZWR1Y3Rpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICclREFNQUdFIFJFRFVDVElPTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gYWJpbGl0eU1vZGVsLmFiaWxpdGllcygpLmZpbmQoZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5uYW1lKCkgPT0gJ2JyaXN0bGViYWNrX2JyaXN0bGViYWNrJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAnYmFjaycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JhY2tfZGFtYWdlX3JlZHVjdGlvbicsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnc2lkZV9kYW1hZ2VfcmVkdWN0aW9uJywgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIC10b3RhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2RhbWFnZVJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2JyaXN0bGViYWNrX3dhcnBhdGgnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyX3N0YWNrJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQk9OVVMgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdiYXNlX2RhbWFnZScsYWJpbGl0eS5sZXZlbCgpKSsodi0xKSphO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVfc3BlZWRfcGVyX3N0YWNrJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkVNRU5UOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdiYXNlX21vdmVfc3BlZWQnLGFiaWxpdHkubGV2ZWwoKSkrKHYtMSkqYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0J1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnY2VudGF1cl9yZXR1cm4nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RyZW5ndGgnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3N0cmVuZ3RoX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdyZXR1cm5fZGFtYWdlJyxhYmlsaXR5LmxldmVsKCkpICsgdiphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2NlbnRhdXJfc3RhbXBlZGUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RyZW5ndGgnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3N0cmVuZ3RoX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93X21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgTW92ZW1lbnQgU3BlZWQgU2xvdycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnY2xpbmt6X2RlYXRoX3BhY3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ29uc3VtZWQgVW5pdCBIUCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX2dhaW5fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnQkFTRSBEQU1BR0UgR0FJTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEvMTAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYmFzZURhbWFnZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9nYWluX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ0hFQUxUSCBHQUlOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0hlYWx0aCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2NyeXN0YWxfbWFpZGVuX2Zyb3N0Yml0ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2Rhcmtfc2Vlcl9pb25fc2hlbGwnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkYXp6bGVfc2hhZG93X3dhdmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnVGFyZ2V0cycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2RhenpsZV93ZWF2ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYXJtb3JfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ0FSTU9SJyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXJtb3InXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhcm1vcl9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQVJNT1IgUkVEVUNUSU9OOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC12KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhcm1vclJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2RlYXRoX3Byb3BoZXRfZXhvcmNpc20nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlIERlYWx0JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsX3BlcmNlbnQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBBcm1vcicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2Rpc3J1cHRvcl9zdGF0aWNfc3Rvcm0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2V2YWx1ZSA9IDAuMjUgKiAoMTMwICsgNDAgKiBhYmlsaXR5LmxldmVsKCkpICogKDEvMjApLFxuICAgICAgICAgICAgICAgIG11bHQgPSAodio0KSooKHYqNCkrMSkvMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGFtYWdldmFsdWUgKiBtdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZG9vbV9icmluZ2VyX3Njb3JjaGVkX2VhcnRoJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfbW92ZW1lbnRfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnSFAgUkVHRU46JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2hlYWx0aHJlZ2VuJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZG9vbV9icmluZ2VyX2Rvb20nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LmludmVudG9yeS5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYqYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2RhbWFnZV9zY2VwdGVyJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkcmFnb25fa25pZ2h0X2VsZGVyX2RyYWdvbl9mb3JtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hdHRhY2tfcmFuZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tyYW5nZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZEZsYXQnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkcm93X3Jhbmdlcl90cnVlc2hvdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEcm93XFwncyBBZ2lsaXR5JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2J1ZmYnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0cnVlc2hvdF9yYW5nZWRfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFIEJPTlVTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdidWZmJyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZVByZWNpc2lvbkF1cmEnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlYXJ0aF9zcGlyaXRfcm9sbGluZ19ib3VsZGVyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1VzaW5nIFN0b25lJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnY2hlY2tib3gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlX3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2VhcnRoc2hha2VyX2VuY2hhbnRfdG90ZW0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQWN0aXZhdGVkJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnY2hlY2tib3gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0b3RlbV9kYW1hZ2VfcGVyY2VudGFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2VEYW1hZ2VNdWx0aXBsaWVyJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZWFydGhzaGFrZXJfZWNob19zbGFtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW1pZXMgaW4gUmFuZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2VjaG9fc2xhbV9lY2hvX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZWxkZXJfdGl0YW5fYW5jZXN0cmFsX3NwaXJpdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdIRVJPRVMgUEFTU0VEIFRIUk9VR0gnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDUkVFUFMgUEFTU0VEIFRIUk9VR0gnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9jcmVlcHMnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZGFtYWdlX2hlcm9lcycsYWJpbGl0eS5sZXZlbCgpKSArIHZbMV0qYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW92ZV9wY3RfY3JlZXBzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJUJPTlVTIFNQRUVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0qYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ21vdmVfcGN0X2hlcm9lcycsYWJpbGl0eS5sZXZlbCgpKSArIHZbMV0qYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3QnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlbGRlcl90aXRhbl9lYXJ0aF9zcGxpdHRlcic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggSGVhbHRoJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2VuY2hhbnRyZXNzX25hdHVyZXNfYXR0ZW5kYW50cyc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbCcsXG4gICAgICAgICAgICBsYWJlbDogJ0hFQUw6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ3dpc3BfY291bnQnLGFiaWxpdHkubGV2ZWwoKSkqdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZW5pZ21hX21hbGVmaWNlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hpdHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzdHVuX2R1cmF0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlbmlnbWFfbWlkbmlnaHRfcHVsc2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggSGVhbHRoJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyY2VudCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKnZbMV0qYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlbmlnbWFfYmxhY2tfaG9sZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmFyX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbmVhcl9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ZhY2VsZXNzX3ZvaWRfdGltZV9sb2NrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0luIENocm9ub3NwaGVyZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2NoZWNrYm94J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkVTUEVFRCBBUyBEQU1BR0UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEqMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2hCb251c0RhbWFnZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2R1cmF0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnY2hhbmNlX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2gnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdneXJvY29wdGVyX3JvY2tldF9iYXJyYWdlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1JvY2tldHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JvY2tldHNfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuLyogICAgICAgICdneXJvY29wdGVyX2hvbWluZ19taXNzaWxlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Rpc3RhbmNlIFRyYXZlbGVkJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2d5cm9jb3B0ZXJfZmxha19jYW5ub24nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQXR0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLCovXG4gICAgJ2h1c2thcl9idXJuaW5nX3NwZWFyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbHRoX2Nvc3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdodXNrYXJfYmVyc2Vya2Vyc19ibG9vZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICclSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hwX3RocmVzaG9sZF9tYXgnLFxuICAgICAgICAgICAgbGFiZWw6ICdIZWFsdGggYXQgZ2l2ZW4gJUhQOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5oZWFsdGgoKSp2LzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hwX3RocmVzaG9sZF9tYXgnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYXhpbXVtX3Jlc2lzdGFuY2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdNQUdJQyBSRVNJU1RBTkNFIEJPTlVTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBNYXRoLm1pbih2LCAxMDApO1xuICAgICAgICAgICAgICAgIHYgPSBNYXRoLm1heCh2LCAxMCk7XG4gICAgICAgICAgICAgICAgdmFyIGhwX3RocmVzaG9sZF9tYXggPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnaHBfdGhyZXNob2xkX21heCcsMCk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAxMDAgLSBocF90aHJlc2hvbGRfbWF4O1xuICAgICAgICAgICAgICAgIHZhciBjID0gKHYgLSBocF90aHJlc2hvbGRfbWF4KSAvIGQ7XG4gICAgICAgICAgICAgICAgYyA9IDEgLSBjO1xuICAgICAgICAgICAgICAgIHJldHVybiBjKmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtYWdpY1Jlc2lzdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21heGltdW1fYXR0YWNrX3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQVRUQUNLIFNQRUVEIEJPTlVTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBNYXRoLm1pbih2LCAxMDApO1xuICAgICAgICAgICAgICAgIHYgPSBNYXRoLm1heCh2LCAxMCk7XG4gICAgICAgICAgICAgICAgdmFyIGhwX3RocmVzaG9sZF9tYXggPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnaHBfdGhyZXNob2xkX21heCcsMCk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAxMDAgLSBocF90aHJlc2hvbGRfbWF4O1xuICAgICAgICAgICAgICAgIHZhciBjID0gKHYgLSBocF90aHJlc2hvbGRfbWF4KSAvIGQ7XG4gICAgICAgICAgICAgICAgYyA9IDEgLSBjO1xuICAgICAgICAgICAgICAgIHJldHVybiBjKmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2h1c2thcl9saWZlX2JyZWFrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IEN1cnJlbnQgSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0h1c2thciBDdXJyZW50IEhQJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsdGhfY29zdF9wZXJjZW50JyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFIFRBS0VOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVzcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdpbnZva2VyX3F1YXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSW5zdGFuY2VzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19zdHJlbmd0aCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzU3RyZW5ndGgnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsdGhfcmVnZW5fcGVyX2luc3RhbmNlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnSFAgUkVHRU46JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnaGVhbHRocmVnZW4nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdpbnZva2VyX3dleCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdJbnN0YW5jZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2FnaWxpdHknLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0FnaWxpdHknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlX3NwZWVkX3Blcl9pbnN0YW5jZScsXG4gICAgICAgICAgICBsYWJlbDogJyVNT1ZFIFNQRUVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3QnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhdHRhY2tfc3BlZWRfcGVyX2luc3RhbmNlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJUFUVEFDSyBTUEVFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfZXhvcnQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSW5zdGFuY2VzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19pbnRlbGxpZ2VuY2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0ludCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZV9wZXJfaW5zdGFuY2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdpbnZva2VyX2dob3N0X3dhbGsnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnUXVhcyBMZXZlbCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZW5lbXlfc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2VuZW15X3Nsb3cnLHYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdXZXggTGV2ZWwnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYWJpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NlbGZfc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2FiaWxpdHknLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ3NlbGZfc2xvdycsdik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0J1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnaW52b2tlcl9hbGFjcml0eSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdXZXggTGV2ZWwnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dGFja19zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JvbnVzX2F0dGFja19zcGVlZCcsdik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFeG9ydCBMZXZlbCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0JyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JvbnVzX2RhbWFnZScsdik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfaWNlX3dhbGwnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnUXVhcyBMZXZlbCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ3Nsb3cnLHYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFeG9ydCBMZXZlbCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdhYmlsaXR5J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2FiaWxpdHknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYWJpbGl0eScsXG4gICAgICAgICAgICBjb250cm9sczogWzEsMl0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2WzBdID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZGFtYWdlX3Blcl9zZWNvbmQnLHZbMF0pKnZbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdqYWtpcm9fZHVhbF9icmVhdGgnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKjIgKyBcbiAgICAgICAgICAgICAgICBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnYnVybl9kYW1hZ2UnLGFiaWxpdHkubGV2ZWwoKSkqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfbW92ZW1lbnRfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfYXR0YWNrX3NwZWVkX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJyVBVFRBQ0sgU0xPVzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdqYWtpcm9fbGlxdWlkX2ZpcmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19hdHRhY2tfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdqYWtpcm9fbWFjcm9weXJlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2p1Z2dlcm5hdXRfYmxhZGVfZnVyeSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2p1Z2dlcm5hdXRfaGVhbGluZ193YXJkJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTWF4IEhlYWx0aCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbGluZ193YXJkX2hlYWxfYW1vdW50JyxcbiAgICAgICAgICAgIGxhYmVsOiAnSEVBTCBPVkVSIFRJTUU6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSp2WzFdKmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnanVnZ2VybmF1dF9vbW5pX3NsYXNoJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0p1bXBzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTUlOIERBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnb21uaV9zbGFzaF9kYW1hZ2UnLDEpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTUFYIERBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnb21uaV9zbGFzaF9kYW1hZ2UnLDIpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdrZWVwZXJfb2ZfdGhlX2xpZ2h0X2lsbHVtaW5hdGUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2tlZXBlcl9vZl90aGVfbGlnaHRfbWFuYV9sZWFrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Rpc3RhbmNlIE1vdmVkJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgTWF4IE1hbmEnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfbGVha19wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdNQU5BIExFQUtFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzBdLzEwMCp2WzFdKmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnbGVnaW9uX2NvbW1hbmRlcl9kdWVsJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1ZWwgV2lucycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncmV3YXJkX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xlc2hyYWNfcHVsc2Vfbm92YSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYW5hX2Nvc3RfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ01BTkEgQ09TVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdsaWNoX2NoYWluX2Zyb3N0JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0JvdW5jZSBIaXRzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNb3ZlbWVudCBTcGVlZCBTbG93JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfYXR0YWNrX3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdsaWZlX3N0ZWFsZXJfZmVhc3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgQ3VycmVudCBIUCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaHBfbGVlY2hfcGVyY2VudCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzEwMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnbGlmZV9zdGVhbGVyX29wZW5fd291bmRzJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsX3BlcmNlbnQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdsaWZlc3RlYWwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93X3N0ZXBzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJVNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgbm9MZXZlbDogdHJ1ZSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdzbG93X3N0ZXBzJyx2KzEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xpbmFfZmllcnlfc291bCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmllcnlfc291bF9tb3ZlX3NwZWVkX2JvbnVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgTW92ZW1lbnQgU3BlZWQgU2xvdycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2ZpZXJ5X3NvdWxfYXR0YWNrX3NwZWVkX2JvbnVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xpb25fbWFuYV9kcmFpbic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTUFOQSBEUkFJTkVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2x1bmFfbW9vbl9nbGFpdmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcmVkdWN0aW9uX3BlcmNlbnQnLFxuICAgICAgICAgICAgbGFiZWw6ICdCT1VOQ0UgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh2Kk1hdGgucG93KGEvMTAwLGkpKS50b0ZpeGVkKDIpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJzxicj4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2x1bmFfZWNsaXBzZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdCZWFtIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdiZWFtcycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbHVjZW50QmVhbUFiaWxpdHkgPSBhYmlsaXR5TW9kZWwuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiLm5hbWUoKSA9PSAnbHVuYV9sdWNlbnRfYmVhbSc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGx1Y2VudEJlYW1BYmlsaXR5LmxldmVsKCkgPT0gMCkgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShsdWNlbnRCZWFtQWJpbGl0eSwgJ2RhbWFnZScpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmRhbWFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ21lZHVzYV9teXN0aWNfc25ha2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSnVtcCBDb3VudCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc25ha2VfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlIFBlciBKdW1wOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc25ha2VfanVtcHMgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnc25ha2VfanVtcHMnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgdmFyIHNuYWtlX3NjYWxlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ3NuYWtlX3NjYWxlJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbmFrZV9qdW1wczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZS5wdXNoKGEgKyBhICogaSAqIHNuYWtlX3NjYWxlLzEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbmFrZV9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2UgUGVyIEp1bXA6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlsxXS5qb2luKCcgLyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NuYWtlX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzFdLnNsaWNlKDAsIHZbMF0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8gfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbmFrZV9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdNYXggRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMV0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgbyB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ21lZHVzYV9tYW5hX3NoaWVsZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfbWFuYScsXG4gICAgICAgICAgICBsYWJlbDogJ01BTkEgVVNFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodi9hKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYWJzb3JwdGlvbl90b29sdGlwJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJURBTUFHRSBSRURVQ1RJT046JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdkYW1hZ2VSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdtZWVwb19wb29mJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ01lZXBvIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnbWVlcG9fZ2Vvc3RyaWtlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnJVNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgbm9MZXZlbDogdHJ1ZSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdzbG93JyxhYmlsaXR5LmxldmVsKCkpKnY7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnbWlyYW5hX2Fycm93JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Fycm93IFRyYXZlbCBEaXN0YW5jZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYXJyb3dfbWF4X3N0dW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdTVFVOIERVUkFUSU9OOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFycm93X21pbl9zdHVuID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2Fycm93X21pbl9zdHVuJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgYXJyb3dfbWF4X3N0dW5yYW5nZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdhcnJvd19tYXhfc3R1bnJhbmdlJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLm1pbih2LCBhcnJvd19tYXhfc3R1bnJhbmdlKSAvIGFycm93X21heF9zdHVucmFuZ2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGFycm93X21pbl9zdHVuLCBNYXRoLmZsb29yKGEgKiBzY2FsZSAvIDAuMSkgKiAwLjEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYXJyb3dfYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVE9UQUwgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBhYmlsaXR5O1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2UgPSBhYmlsaXR5LmRhbWFnZSgpW2FiaWxpdHkubGV2ZWwoKS0xXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJyb3dfbWF4X3N0dW5yYW5nZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdhcnJvd19tYXhfc3R1bnJhbmdlJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLm1pbih2LCBhcnJvd19tYXhfc3R1bnJhbmdlKSAvIGFycm93X21heF9zdHVucmFuZ2U7XG4gICAgICAgICAgICAgICAgdmFyIGJvbnVzX2RhbWFnZSA9IE1hdGguZmxvb3IoYSAqIHNjYWxlIC8gMi44KSAqIDIuODtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGFtYWdlICsgJyArICcgKyBib251c19kYW1hZ2UgKyAnID0gJyArIChkYW1hZ2UgKyBib251c19kYW1hZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnbW9ycGhsaW5nX21vcnBoX2FnaSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTaGlmdHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3BvaW50c19wZXJfdGljaycsXG4gICAgICAgICAgICBsYWJlbDogJ0FHSSBTSElGVCBHQUlOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzQWdpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3BvaW50c19wZXJfdGljaycsXG4gICAgICAgICAgICBsYWJlbDogJ1NUUiBTSElGVCBMT1NTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC12KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c1N0cmVuZ3RoJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfYXR0cmlidXRlcycsXG4gICAgICAgICAgICBsYWJlbDogJ1NISUZUIFRJTUU6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNBZ2lsaXR5MidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vcnBoX2Nvb2xkb3duJyxcbiAgICAgICAgICAgIGxhYmVsOiAnU0hJRlQgVElNRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYW5hX2Nvc3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdTSElGVCBNQU5BIENPU1Q6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphKmFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdtb3JwaF9jb29sZG93bicsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ21vcnBobGluZ19tb3JwaF9zdHInOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU2hpZnRzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdwb2ludHNfcGVyX3RpY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdTVFIgU0hJRlQgR0FJTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c1N0cmVuZ3RoJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncG9pbnRzX3Blcl90aWNrJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQUdJIFNISUZUIExPU1M6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzQWdpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dHJpYnV0ZXMnLFxuICAgICAgICAgICAgbGFiZWw6ICdTSElGVCBUSU1FOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzU3RyZW5ndGgyJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW9ycGhfY29vbGRvd24nLFxuICAgICAgICAgICAgbGFiZWw6ICdTSElGVCBUSU1FOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfY29zdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1NISUZUIE1BTkEgQ09TVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEqYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ21vcnBoX2Nvb2xkb3duJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZnVyaW9uX3dyYXRoX29mX25hdHVyZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICduZWNyb2x5dGVfaGVhcnRzdG9wcGVyX2F1cmEnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggSGVhbHRoJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhdXJhX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0hFQUxUSCBMT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0qdlsxXSphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ25lY3JvbHl0ZV9zYWRpc3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnVW5pdCBLaWxscycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hlcm8gS2lsbHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9yZWdlbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVyb19tdWx0aXBsaWVyID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2hlcm9fbXVsdGlwbGllcicsMClcbiAgICAgICAgICAgICAgICByZXR1cm4gKHZbMF0rdlsxXSpoZXJvX211bHRpcGxpZXIpKmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdoZWFsdGhyZWdlbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfcmVnZW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlcm9fbXVsdGlwbGllciA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdoZXJvX211bHRpcGxpZXInLDApXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2WzBdK3ZbMV0qaGVyb19tdWx0aXBsaWVyKSphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbWFuYXJlZ2VuJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnbmlnaHRfc3RhbGtlcl9jcmlwcGxpbmdfZmVhcic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdJcyBOaWdodCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2NoZWNrYm94J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWlzc19yYXRlX25pZ2h0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnJUNIQU5DRSBUTyBNSVNTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdtaXNzX3JhdGVfbmlnaHQnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ21pc3NfcmF0ZV9kYXknLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbWlzc0NoYW5jZSdcbiAgICAgICAgfVxuICAgIF0sICAgIFxuICAgICduaWdodF9zdGFsa2VyX2h1bnRlcl9pbl90aGVfbmlnaHQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSXMgTmlnaHQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdjaGVja2JveCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dGFja19zcGVlZF9uaWdodCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfbW92ZW1lbnRfc3BlZWRfcGN0X25pZ2h0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfVxuICAgIF0sICAgIFxuICAgICdvYnNpZGlhbl9kZXN0cm95ZXJfYXJjYW5lX29yYic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDdXJyZW50IE1hbmEnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfcG9vbF9kYW1hZ2VfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEvMTAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2VPcmInXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdvZ3JlX21hZ2lfaWduaXRlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdidXJuX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19tb3ZlbWVudF9zcGVlZF9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAncHVkZ2Vfcm90JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncm90X3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAncHVkZ2VfZmxlc2hfaGVhcCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGFja3MnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2ZsZXNoX2hlYXBfc3RyZW5ndGhfYnVmZl9hbW91bnQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzU3RyZW5ndGgnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdmbGVzaF9oZWFwX21hZ2ljX3Jlc2lzdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21hZ2ljUmVzaXN0J1xuICAgICAgICB9XG4gICAgXSxcbiAgICAncHVkZ2VfZGlzbWVtYmVyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkaXNtZW1iZXJfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdwdWduYV9uZXRoZXJfd2FyZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYW5hIFNwZW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYW5hX211bHRpcGxpZXInLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9yZWdlbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21hbmFyZWdlbnJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3B1Z25hX2xpZmVfZHJhaW4nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9kcmFpbicsXG4gICAgICAgICAgICBsYWJlbDogJ0hFQUxUSCBEUkFJTkVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3F1ZWVub2ZwYWluX3NoYWRvd19zdHJpa2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc3RyaWtlX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbl9kYW1hZ2UgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZHVyYXRpb25fZGFtYWdlJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGguZmxvb3Iodi8zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSArIGR1cmF0aW9uX2RhbWFnZSAqIHRpY2tzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAncmF6b3JfcGxhc21hX2ZpZWxkJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Rpc3RhbmNlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyYWRpdXMnLFxuICAgICAgICAgICAgbGFiZWw6ICdNSU4gRElTVEFOQ0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncmFkaXVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTUFYIERJU1RBTkNFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDIwMCArIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyYWRpdXMnLFxuICAgICAgICAgICAgbGFiZWw6ICdJbnN0YW5jZSBEYW1hZ2UnLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXhfcmFkaXVzID0gYSArIDIwMDtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAoTWF0aC5taW4oTWF0aC5tYXgodiwgMjAwKSwgbWF4X3JhZGl1cykgLSAyMDApIC8gKG1heF9yYWRpdXMgLSAyMDApO1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2VfbWluID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2RhbWFnZV9taW4nLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZV9tYXggPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZGFtYWdlX21heCcsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGFtYWdlX21pbiArIChkYW1hZ2VfbWF4IC0gZGFtYWdlX21pbikgKiBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Jhem9yX3N0YXRpY19saW5rJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkcmFpbl9sZW5ndGgnLFxuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2UgRHJhaW5lZDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciB0aWNrX2R1cmF0aW9uID0gTWF0aC5mbG9vcih2ICogNCkgKyAxO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGgubWluKGEgKiA0ICsgMSwgdGlja19kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWluX3JhdGUgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnZHJhaW5fcmF0ZScsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGlja3MgKiBkcmFpbl9yYXRlLzQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RyYWluX2xlbmd0aCcsXG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IERhbWFnZSBMb3N0OicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGlja19kdXJhdGlvbiA9IE1hdGguZmxvb3IodiAqIDQpICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgdGlja3MgPSBNYXRoLm1pbihhICogNCArIDEsIHRpY2tfZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHZhciBkcmFpbl9yYXRlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2RyYWluX3JhdGUnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpY2tzICogZHJhaW5fcmF0ZS80O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2VSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdyYXpvcl9leWVfb2ZfdGhlX3N0b3JtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3J1Ymlja19mYWRlX2JvbHQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSnVtcHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAqICgxIC0gdiphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnanVtcF9kYW1hZ2VfcmVkdWN0aW9uX3BjdCcsYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVyb19hdHRhY2tfZGFtYWdlX3JlZHVjdGlvbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc2FuZGtpbmdfc2FuZF9zdG9ybSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NhbmRraW5nX2VwaWNlbnRlcic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdQdWxzZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2VwaWNlbnRlcl9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZXBpY2VudGVyX3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZXBpY2VudGVyX3Nsb3dfYXMnLFxuICAgICAgICAgICAgbGFiZWw6ICclQVRUQUNLIFNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkcmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc2hhZG93X2RlbW9uX3NoYWRvd19wb2lzb24nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3N0YWNrX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhY2ttdWx0ID0gWzEsMiw0LDhdO1xuICAgICAgICAgICAgICAgIGlmICh2ID4gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAqIHN0YWNrbXVsdFszXSArIDUwICogKHYgLSA0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodiA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAqIHN0YWNrbXVsdFt2LTFdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnbmV2ZXJtb3JlX25lY3JvbWFzdGVyeSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTb3VscycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbmVjcm9tYXN0ZXJ5X2RhbWFnZV9wZXJfc291bCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ25ldmVybW9yZV9yZXF1aWVtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0xpbmUgSGl0IENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyZXF1aWVtX3JlZHVjdGlvbl9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1JldHVybiBMaW5lIEhpdCBDb3VudCAoU2NlcHRlciknLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JlcXVpZW1fZGFtYWdlX3BjdF9zY2VwdGVyJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlL0hlYWw6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2KmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncmVxdWllbV9kYW1hZ2VfcGN0X3NjZXB0ZXInLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGFtYWdlKnZbMF0gKyBkYW1hZ2UqdlsxXSphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JlcXVpZW1fcmVkdWN0aW9uX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJyVEQU1BR0UgUkVEVUNUSU9OOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdiYXNlRGFtYWdlUmVkdWN0aW9uUGN0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncmVxdWllbV9yZWR1Y3Rpb25fbXMnLFxuICAgICAgICAgICAgbGFiZWw6ICclREFNQUdFIFJFRFVDVElPTjonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc2hhZG93X3NoYW1hbl9zaGFja2xlcyc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NpbGVuY2VyX2N1cnNlX29mX3RoZV9zaWxlbnQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih2KSphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW92ZXNwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4vKiAgICAgICAgJ3NpbGVuY2VyX2dsYWl2ZXNfb2Zfd2lzZG9tJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sKi9cbiAgICAnc2t5d3JhdGhfbWFnZV9teXN0aWNfZmxhcmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnc2xhcmtfZXNzZW5jZV9zaGlmdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdBdHRhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhZ2lfZ2FpbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2FiaWxpdHknLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNBZ2lsaXR5J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc3RhdF9sb3NzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNBbGxTdGF0c1JlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NsYXJrX3NoYWRvd19kYW5jZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfcmVnZW5fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVE9UQUwgSEVBTFRIIFJFR0VORVJBVEVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqcGFyZW50LmhlYWx0aCgpKmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfcmVnZW5fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnSEVBTFRIIEdBSU5FRCBQRVIgU0VDT05EOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5oZWFsdGgoKSphLzEwMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2hlYWx0aHJlZ2VuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICclTU9WRSBTUEVFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NuaXBlcl9zaHJhcG5lbCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdidWlsZGluZ19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdCVUlMRElORyBEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19tb3ZlbWVudF9zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IE1vdmVtZW50IFNwZWVkIFNsb3cnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc3BlY3RyZV9kZXNvbGF0ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBBbG9uZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2NoZWNrYm94J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzcGVjdHJlX2Rpc3BlcnNpb24nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlIFRha2VuJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcmVmbGVjdGlvbl9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0UgUkVGTEVDVEVEOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdkYW1hZ2VSZWR1Y3Rpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcmVmbGVjdGlvbl9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0UgUkVGTEVDVEVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzdG9ybV9zcGlyaXRfYmFsbF9saWdodG5pbmcnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTUFYIE1BTkEnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEaXN0YW5jZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYmFsbF9saWdodG5pbmdfaW5pdGlhbF9tYW5hX2Jhc2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLCAxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykvMTAwKnZbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdiYWxsX2xpZ2h0bmluZ19pbml0aWFsX21hbmFfYmFzZScsXG4gICAgICAgICAgICBsYWJlbDogJ0ZMQVQgTUFOQSBDT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLCAxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlX2ludGVydmFscyA9IE1hdGguZmxvb3IodlsxXS8xMDApO1xuICAgICAgICAgICAgICAgIHZhciB0cmF2ZWxfY29zdF9iYXNlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2JhbGxfbGlnaHRuaW5nX3RyYXZlbF9jb3N0X2Jhc2UnLDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBhICsgZGlzdGFuY2VfaW50ZXJ2YWxzICogdHJhdmVsX2Nvc3RfYmFzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JhbGxfbGlnaHRuaW5nX2luaXRpYWxfbWFuYV9wZXJjZW50YWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1BWCBNQU5BIENPU1Q6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ21ldGhvZCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsIDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VfaW50ZXJ2YWxzID0gTWF0aC5mbG9vcih2WzFdLzEwMCk7XG4gICAgICAgICAgICAgICAgdmFyIHRyYXZlbF9jb3N0X3BlcmNlbnQgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnYmFsbF9saWdodG5pbmdfdHJhdmVsX2Nvc3RfcGVyY2VudCcsMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBkaXN0YW5jZV9pbnRlcnZhbHMgKiB0cmF2ZWxfY29zdF9wZXJjZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYmFsbF9saWdodG5pbmdfaW5pdGlhbF9tYW5hX2Jhc2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUT1RBTCBNQU5BIENPU1Q6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLCAxLCAyLCAzXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMl0gKyAnICsgJyArICh2WzNdLzEwMCAqIHZbMF0pICsgJyAoJyArIHZbM10gKyAnJSBvZiBtYXgpID0gJyArICh2WzJdICsgdlszXS8xMDAgKiB2WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3RlbXBsYXJfYXNzYXNzaW5fcHNpb25pY190cmFwJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0NoYXJnZSBUaW1lJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlbWVudF9zcGVlZF9taW5fdG9vbHRpcCcsXG4gICAgICAgICAgICBsYWJlbDogJyVNT1ZFIFNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF4X3Nsb3cgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnbW92ZW1lbnRfc3BlZWRfbWF4X3Rvb2x0aXAnLDApO1xuICAgICAgICAgICAgICAgIHZhciBzbG93X3Blcl90aWNrID0gKG1heF9zbG93IC0gYSkvNDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0oYSArIHNsb3dfcGVyX3RpY2sgKiBNYXRoLm1pbihNYXRoLm1heCgwLCB2KSwgNCkgKiAxMCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc2hyZWRkZXJfcmVhY3RpdmVfYXJtb3InOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hcm1vcicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIEFybW9yIEJvbnVzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBub0xldmVsOiB0cnVlLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXJtb3InXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19ocF9yZWdlbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIEhQIFJlZ2VuIEJvbnVzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBub0xldmVsOiB0cnVlLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnaGVhbHRocmVnZW4nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzaHJlZGRlcl9jaGFrcmFtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdkYW1hZ2VfaW50ZXJ2YWwnLDApO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGguZmxvb3IodiAvIGludGVydmFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSppbnRlcnZhbCp0aWNrcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ01BTkEgQ09TVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdkYW1hZ2VfaW50ZXJ2YWwnLDApO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGguZmxvb3IodiAvIGludGVydmFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSppbnRlcnZhbCp0aWNrcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFTkVNWSAlSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdNQU5BIENPU1Q6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IDIwIC0gTWF0aC5mbG9vcihNYXRoLm1pbihNYXRoLm1heCh2LTEsIDApLCA5OSkgLyA1KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWEqdGlja3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Jhc2ggUHJvYycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2NoZWNrYm94J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkVTUEVFRCBBUyBEQU1BR0UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdiYXNoQm9udXNEYW1hZ2UnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19tb3Zlc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2NoYW5jZV9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2gnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd0ZWNoaWVzX2xhbmRfbWluZXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTnVtYmVyIG9mIE1pbmVzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0FGVEVSIFJFRFVDVElPTlM6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGh5c19yZWR1Y3Rpb24gPSBwYXJlbnQuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWxSZWR1Y3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbWFnaWNfcmVkdWN0aW9uID0gcGFyZW50LmVuZW15KCkudG90YWxNYWdpY1Jlc2lzdGFuY2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYgKiBhICogKDEgLSBwaHlzX3JlZHVjdGlvbiAvIDEwMCkgKiAoMSAtIG1hZ2ljX3JlZHVjdGlvbiAvIDEwMCkpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd0ZWNoaWVzX3N1aWNpZGUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdGVUxMIERBTUFHRSBBRlRFUiBSRURVQ1RJT05TOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBoeXNfcmVkdWN0aW9uID0gcGFyZW50LmVuZW15KCkudG90YWxBcm1vclBoeXNpY2FsUmVkdWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIG1hZ2ljX3JlZHVjdGlvbiA9IHBhcmVudC5lbmVteSgpLnRvdGFsTWFnaWNSZXNpc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhICogKDEgLSBwaHlzX3JlZHVjdGlvbiAvIDEwMCkgKiAoMSAtIG1hZ2ljX3JlZHVjdGlvbiAvIDEwMCkpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdwYXJ0aWFsX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1BBUlRJQUwgREFNQUdFIEFGVEVSIFJFRFVDVElPTlM6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGh5c19yZWR1Y3Rpb24gPSBwYXJlbnQuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWxSZWR1Y3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbWFnaWNfcmVkdWN0aW9uID0gcGFyZW50LmVuZW15KCkudG90YWxNYWdpY1Jlc2lzdGFuY2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEgKiAoMSAtIHBoeXNfcmVkdWN0aW9uIC8gMTAwKSAqICgxIC0gbWFnaWNfcmVkdWN0aW9uIC8gMTAwKSkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1JFU1BBV04gVElNRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAocGFyZW50LnJlc3Bhd25UaW1lKCkgLyAyKS50b0ZpeGVkKDApICsgJyBzZWNvbmRzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3RlY2hpZXNfcmVtb3RlX21pbmVzJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ051bWJlciBvZiBNaW5lcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdBRlRFUiBSRURVQ1RJT05TOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hZ2ljX3JlZHVjdGlvbiA9IHBhcmVudC5lbmVteSgpLnRvdGFsTWFnaWNSZXNpc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2ICogYSAqICgxIC0gbWFnaWNfcmVkdWN0aW9uIC8gMTAwKSkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Rpbmtlcl9tYXJjaF9vZl90aGVfbWFjaGluZXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnUm9ib3QgRXhwbG9zaW9ucycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFjaGluZXNfcGVyX3NlYycsXG4gICAgICAgICAgICBsYWJlbDogJ1RPVEFMIERBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd0cmVhbnRfbGVlY2hfc2VlZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdQdWxzZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2xlZWNoX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRS9IRUFMOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndHJvbGxfd2FybG9yZF9mZXJ2b3InOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhdHRhY2tfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdBVFRBQ0sgU1BFRUQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWQnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd1bmR5aW5nX2RlY2F5JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc3RyX3N0ZWFsJyxcbiAgICAgICAgICAgIGxhYmVsOiAnU1RSRU5HVEggU1RPTEVOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pbnZlbnRvcnkuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJfc3RlYWxfc2NlcHRlciA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdzdHJfc3RlYWxfc2NlcHRlcicsMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2KnN0cl9zdGVhbF9zY2VwdGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c1N0cmVuZ3RoJ1xuICAgICAgICB9LFxuICAgIF0sXG4gICAgJ3VuZHlpbmdfc291bF9yaXAnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnVW5pdHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfdW5pdCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRS9IRUFMOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3VuZHlpbmdfZmxlc2hfZ29sZW0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGlzdGFuY2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21heF9zcGVlZF9zbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkUgU0xPVzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBtaW5fc3BlZWRfc2xvdyA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdtaW5fc3BlZWRfc2xvdycsIDApO1xuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAncmFkaXVzJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxfcG93ZXJfcmFkaXVzID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2Z1bGxfcG93ZXJfcmFkaXVzJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5taW4oTWF0aC5tYXgodiwgZnVsbF9wb3dlcl9yYWRpdXMpLCByYWRpdXMpO1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IDEgLSAoZGlzdGFuY2UgLSBmdWxsX3Bvd2VyX3JhZGl1cykgLyAocmFkaXVzIC0gZnVsbF9wb3dlcl9yYWRpdXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiAtTWF0aC5tYXgoc2NhbGUgKiBhLCBtaW5fc3BlZWRfc2xvdyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWF4X2RhbWFnZV9hbXAnLFxuICAgICAgICAgICAgbGFiZWw6ICclREFNQUdFIEFNUDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBtaW5fZGFtYWdlX2FtcCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdtaW5fZGFtYWdlX2FtcCcsIDApO1xuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAncmFkaXVzJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxfcG93ZXJfcmFkaXVzID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2Z1bGxfcG93ZXJfcmFkaXVzJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5taW4oTWF0aC5tYXgodiwgZnVsbF9wb3dlcl9yYWRpdXMpLCByYWRpdXMpO1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IDEgLSAoZGlzdGFuY2UgLSBmdWxsX3Bvd2VyX3JhZGl1cykgLyAocmFkaXVzIC0gZnVsbF9wb3dlcl9yYWRpdXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChzY2FsZSAqIGEsIG1pbl9kYW1hZ2VfYW1wKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2RhbWFnZUFtcGxpZmljYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTUFYIEhQJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSGVybyBEZWF0aCBDb3VudCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0NyZWVwIERlYXRoIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkZWF0aF9oZWFsJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREVBVEggSEVBTCAoSEVST0VTKTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMSwgMl0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKnZbMV0qYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkZWF0aF9oZWFsX2NyZWVwJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREVBVEggSEVBTCAoQ1JFRVBTKTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMSwgM10sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKnZbMV0qYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkZWF0aF9oZWFsX2NyZWVwJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVE9UQUwgREVBVEggSEVBTDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzQsIDVdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSt2WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAndXJzYV9mdXJ5X3N3aXBlcyc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGFja3MnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc3RhY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVucmFnZUFiaWxpdHkgPSBhYmlsaXR5TW9kZWwuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiLm5hbWUoKSA9PSAndXJzYV9lbnJhZ2UnO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChlbnJhZ2VBYmlsaXR5LmlzQWN0aXZlKCkgJiYgZW5yYWdlQWJpbGl0eS5sZXZlbCgpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5yYWdlX211bHRpcGxpZXIgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGVucmFnZUFiaWxpdHkuYXR0cmlidXRlcygpLCAnZW5yYWdlX211bHRpcGxpZXInLCBlbnJhZ2VBYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdiphKmVucmFnZV9tdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd1cnNhX2VucmFnZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9yZWR1Y3Rpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnZGFtYWdlUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmVub21hbmNlcl92ZW5vbW91c19nYWxlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0aWNrX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ3N0cmlrZV9kYW1hZ2UnLGFiaWxpdHkubGV2ZWwoKSkgKyBNYXRoLmZsb29yKHYvMykqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmVub21hbmNlcl9wb2lzb25fc3RpbmcnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmVub21hbmNlcl9wb2lzb25fbm92YSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd2aXBlcl9wb2lzb25fYXR0YWNrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dGFja19zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkcmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmlwZXJfY29ycm9zaXZlX3NraW4nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfYXR0YWNrX3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19tYWdpY19yZXNpc3RhbmNlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbWFnaWNSZXNpc3QnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd2aXBlcl92aXBlcl9zdHJpa2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfYXR0YWNrX3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd2aXNhZ2Vfc291bF9hc3N1bXB0aW9uJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0NoYXJnZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NvdWxfY2hhcmdlX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VsX2Jhc2VfZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ3NvdWxfYmFzZV9kYW1hZ2UnLDApO1xuICAgICAgICAgICAgICAgIHZhciBzdGFja19saW1pdCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdzdGFja19saW1pdCcsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgc3RhY2tfbGltaXQgPSBNYXRoLm1heChNYXRoLm1pbih2LCBzdGFja19saW1pdCksIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBzb3VsX2Jhc2VfZGFtYWdlICsgc3RhY2tfbGltaXQqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Zpc2FnZV9ncmF2ZWtlZXBlcnNfY2xvYWsnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTGF5ZXJzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hcm1vcicsXG4gICAgICAgICAgICBsYWJlbDogJ0FSTU9SOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2FybW9yJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfcmVzaXN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnJVJFU0lTVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtYWdpY1Jlc2lzdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3dhcmxvY2tfc2hhZG93X3dvcmQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2FybG9ja191cGhlYXZhbCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDaGFubmVsIER1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93X3JhdGVfZHVyYXRpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICclTU9WRSBTTE9XOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heF9zbG93ID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ21heF9zbG93JywwKTtcbiAgICAgICAgICAgICAgICB2YXIgc2xvd19wZXJfdGljayA9IG1heF9zbG93IC8gKGEgLSAwLjUpIC8gMjtcbiAgICAgICAgICAgICAgICB2YXIgdGlja3MgPSBNYXRoLm1heChNYXRoLmZsb29yKHYgKiAyKSAtIDEsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiAtTWF0aC5taW4odGlja3MgKiBzbG93X3Blcl90aWNrLCBtYXhfc2xvdyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2VhdmVyX3RoZV9zd2FybSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdBdHRhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhcm1vcl9yZWR1Y3Rpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXJtb3JSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aW5kcnVubmVyX3Bvd2Vyc2hvdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aW50ZXJfd3l2ZXJuX2NvbGRfZW1icmFjZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0FsbHkgTWF4IEhlYWx0aCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbF9wZXJjZW50YWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVE9UQUwgSEVBTDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBiYXNlX2hlYWwgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnaGVhbF9hZGRpdGl2ZScsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGJhc2VfaGVhbCArIHZbMV0gKiBhLzEwMCkgKiB2WzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2lzcF9zcGlyaXRzJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0NvbGxpc2lvbiBDb3VudCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVyb19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2NyZWVwX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2lzcF9vdmVyY2hhcmdlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0N1cnJlbnQgSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RyYWluX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ0hQIERSQUlORUQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsIFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDdXJyZW50IE1QJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkcmFpbl9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdNUCBEUkFJTkVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLCBcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hdHRhY2tfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZV9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdkYW1hZ2VSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXRjaF9kb2N0b3JfcGFyYWx5emluZ19jYXNrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hlcm8gQm91bmNlIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZXJvX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmNlcyA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdib3VuY2VzJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2LCAwKSwgYm91bmNlcykqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDcmVlcCBCb3VuY2UgQ291bnQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlcm9fZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQ1JFRVAgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5jZXMgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcygpLCAnYm91bmNlcycsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodiwgMCksIGJvdW5jZXMpKmRhbWFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3dpdGNoX2RvY3Rvcl92b29kb29fcmVzdG9yYXRpb24nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWwnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMoKSwgJ2hlYWxfaW50ZXJ2YWwnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWxfcGVyX3RpY2sgPSBhICogaW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgdmFyIHRpY2tzID0gTWF0aC5tYXgoTWF0aC5mbG9vcih2IC8gaW50ZXJ2YWwpIC0gMSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlYWxfcGVyX3RpY2sgKiB0aWNrcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ01BTkEgQ09TVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdoZWFsX2ludGVydmFsJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHZhciBtYW5hX3Blcl90aWNrID0gYSAqIGludGVydmFsO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGgubWF4KE1hdGguZmxvb3IodiAvIGludGVydmFsKSAtIDEsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYW5hX3Blcl90aWNrICogdGlja3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXRjaF9kb2N0b3JfbWFsZWRpY3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnZGFtYWdlIDAtNHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdkYW1hZ2UgNC04cycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ2RhbWFnZSA4LTEycycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRG90IERhbWFnZSBhZnRlciAzczonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDMqZGFtYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQnVyc3QgRGFtYWdlIGF0IDRzOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLCAzXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB2LnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8gfSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGQsIDApICogYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEb3QgRGFtYWdlIGFmdGVyIDdzOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gNypkYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdCdXJzdCBEYW1hZ2UgYXQgOHM6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ21ldGhvZCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsIDEsIDQsIDVdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHYucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgbyB9LCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoZCwgMCkgKiBhLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RvdCBEYW1hZ2UgYWZ0ZXIgMTFzOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTEqZGFtYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQnVyc3QgRGFtYWdlIGF0IDEyczonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwgMSwgMiwgNCwgNiwgN10sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2UgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpO1xuICAgICAgICAgICAgICAgIHZhciBkID0gdi5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIG8pIHsgcmV0dXJuIG1lbW8gKyBvIH0sIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChkLCAwKSAqIGEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgQnVyc3QgRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgY29udHJvbHM6IFs0LCA2LCA4XSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgbyB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIE1hbGVkaWN0IERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbOV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdkdXJhdGlvbl90b29sdGlwJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGFtYWdlICogZHVyYXRpb24gKyB2WzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdET1QgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzKCksICdkdXJhdGlvbl90b29sdGlwJywwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSpNYXRoLm1pbihNYXRoLm1heCh2LCAwKSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2l0Y2hfZG9jdG9yX2RlYXRoX3dhcmQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnenV1c19zdGF0aWNfZmllbGQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9oZWFsdGhfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdXG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGtvID0gcmVxdWlyZSgnLi9oZXJvY2FsY19rbm9ja291dCcpO1xuICAgIFxudmFyIG15ID0gcmVxdWlyZShcIi4vaGVyb2NhbGNfY29yZVwiKTtcblxubXkucHJvdG90eXBlLkJ1ZmZPcHRpb24gPSBmdW5jdGlvbiAoaGVybywgYWJpbGl0eSkge1xuICAgIHRoaXMuYnVmZk5hbWUgPSBhYmlsaXR5O1xuICAgIGlmIChteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIGhlcm9dID09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmhlcm8gPSBoZXJvO1xuICAgICAgICB0aGlzLmFiaWxpdHlEYXRhID0gbXkucHJvdG90eXBlLmZpbmRXaGVyZShteS5wcm90b3R5cGUudW5pdERhdGFbaGVyb10uYWJpbGl0aWVzLCB7bmFtZTogYWJpbGl0eX0pXG4gICAgICAgIHRoaXMuYnVmZkRpc3BsYXlOYW1lID0gbXkucHJvdG90eXBlLnVuaXREYXRhW2hlcm9dLmRpc3BsYXluYW1lICsgJyAtICcgKyB0aGlzLmFiaWxpdHlEYXRhLmRpc3BsYXluYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5oZXJvID0gJ25wY19kb3RhX2hlcm9fJyArIGhlcm87XG4gICAgICAgIHRoaXMuYWJpbGl0eURhdGEgPSBteS5wcm90b3R5cGUuZmluZFdoZXJlKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgaGVyb10uYWJpbGl0aWVzLCB7bmFtZTogYWJpbGl0eX0pXG4gICAgICAgIHRoaXMuYnVmZkRpc3BsYXlOYW1lID0gbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBoZXJvXS5kaXNwbGF5bmFtZSArICcgLSAnICsgdGhpcy5hYmlsaXR5RGF0YS5kaXNwbGF5bmFtZTsgICAgICAgIFxuICAgICAgICBpZiAoYWJpbGl0eSA9PSAnc3Zlbl9nb2RzX3N0cmVuZ3RoJykge1xuICAgICAgICAgICAgdGhpcy5idWZmRGlzcGxheU5hbWUgKz0gJyAoQXVyYSBmb3IgYWxsaWVzKSc7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cbm15LnByb3RvdHlwZS5JdGVtQnVmZk9wdGlvbiA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdGhpcy5idWZmTmFtZSA9IGl0ZW07XG4gICAgaWYgKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgaGVyb10gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuaGVybyA9IGhlcm87XG4gICAgICAgIHRoaXMuYWJpbGl0eURhdGEgPSBteS5wcm90b3R5cGUuZmluZFdoZXJlKG15LnByb3RvdHlwZS51bml0RGF0YVtoZXJvXS5hYmlsaXRpZXMsIHtuYW1lOiBpdGVtfSlcbiAgICAgICAgdGhpcy5idWZmRGlzcGxheU5hbWUgPSBteS5wcm90b3R5cGUudW5pdERhdGFbaGVyb10uZGlzcGxheW5hbWUgKyAnIC0gJyArIHRoaXMuYWJpbGl0eURhdGEuZGlzcGxheW5hbWU7ICAgICAgICBcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuaGVybyA9ICducGNfZG90YV9oZXJvXycgKyBoZXJvO1xuICAgICAgICB0aGlzLmFiaWxpdHlEYXRhID0gbXkucHJvdG90eXBlLmZpbmRXaGVyZShteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIGhlcm9dLmFiaWxpdGllcywge25hbWU6IGl0ZW19KVxuICAgICAgICB0aGlzLmJ1ZmZEaXNwbGF5TmFtZSA9IG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgaGVyb10uZGlzcGxheW5hbWUgKyAnIC0gJyArIHRoaXMuYWJpbGl0eURhdGEuZGlzcGxheW5hbWU7ICAgICAgICBcbiAgICB9XG5cbn07XG5cbm15LnByb3RvdHlwZS5CdWZmVmlld01vZGVsID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgc2VsZiA9IG5ldyBteS5wcm90b3R5cGUuQWJpbGl0eU1vZGVsKGtvLm9ic2VydmFibGVBcnJheShbXSkpO1xuICAgIHNlbGYuYXZhaWxhYmxlQnVmZnMgPSBrby5vYnNlcnZhYmxlQXJyYXkobXkucHJvdG90eXBlLmF2YWlsYWJsZUJ1ZmZzKTtcbiAgICBzZWxmLmF2YWlsYWJsZURlYnVmZnMgPSBrby5vYnNlcnZhYmxlQXJyYXkobXkucHJvdG90eXBlLmF2YWlsYWJsZURlYnVmZnMpO1xuICAgIHNlbGYuc2VsZWN0ZWRCdWZmID0ga28ub2JzZXJ2YWJsZShzZWxmLmF2YWlsYWJsZUJ1ZmZzKClbMF0pO1xuICAgIFxuICAgIHNlbGYuYnVmZnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuaXRlbUJ1ZmZzID0gbmV3IG15LnByb3RvdHlwZS5JbnZlbnRvcnlWaWV3TW9kZWwoKTtcbiAgICBcbiAgICBzZWxmLmFkZEJ1ZmYgPSBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgaWYgKG15LnByb3RvdHlwZS5maW5kV2hlcmUoc2VsZi5idWZmcygpLCB7IG5hbWU6IHNlbGYuc2VsZWN0ZWRCdWZmKCkuYnVmZk5hbWUgfSkgID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGEgPSBrby53cmFwLmZyb21KUyhzZWxmLnNlbGVjdGVkQnVmZigpLmFiaWxpdHlEYXRhKTtcbiAgICAgICAgICAgIGEuaXNBY3RpdmUgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIGEuaXNEZXRhaWwgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIGEuYmFzZURhbWFnZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJhc2ggPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5iYXNoQm9udXNEYW1hZ2UgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c0RhbWFnZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzRGFtYWdlT3JiID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNEYW1hZ2VQY3QgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c0RhbWFnZVByZWNpc2lvbkF1cmEgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c0RhbWFnZVJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzSGVhbHRoID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNTdHJlbmd0aCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzU3RyZW5ndGgyID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNBZ2lsaXR5ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNBZ2lsaXR5MiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzSW50ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNBbGxTdGF0c1JlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmRhbWFnZUFtcGxpZmljYXRpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5kYW1hZ2VSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ldmFzaW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubWFnaWNSZXNpc3QgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5tYW5hcmVnZW4gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5tYW5hcmVnZW5yZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5taXNzQ2hhbmNlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubW92ZW1lbnRTcGVlZEZsYXQgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5tb3ZlbWVudFNwZWVkUGN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLnR1cm5SYXRlUmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYXR0YWNrcmFuZ2UgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5hdHRhY2tzcGVlZCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmF0dGFja3NwZWVkcmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYXJtb3IgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5hcm1vclJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmhlYWx0aHJlZ2VuID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubGlmZXN0ZWFsID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEudmlzaW9ubmlnaHQgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS52aXNpb25kYXkgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgc3dpdGNoIChhLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfY29sZF9zbmFwJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbnZva2VyX2dob3N0X3dhbGsnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfdG9ybmFkbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52b2tlcl9lbXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfYWxhY3JpdHknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfY2hhb3NfbWV0ZW9yJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbnZva2VyX3N1bl9zdHJpa2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfZm9yZ2Vfc3Bpcml0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbnZva2VyX2ljZV93YWxsJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbnZva2VyX2RlYWZlbmluZ19ibGFzdCc6XG4gICAgICAgICAgICAgICAgICAgIGEubGV2ZWwoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFiaWxpdGllcy5wdXNoKGEpO1xuICAgICAgICAgICAgc2VsZi5idWZmcy5wdXNoKHsgbmFtZTogc2VsZi5zZWxlY3RlZEJ1ZmYoKS5idWZmTmFtZSwgaGVybzogc2VsZi5zZWxlY3RlZEJ1ZmYoKS5oZXJvLCBkYXRhOiBhIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLnJlbW92ZUJ1ZmYgPSBmdW5jdGlvbiAoZGF0YSwgZXZlbnQsIGFiaWxpdHlOYW1lKSB7XG4gICAgICAgIGlmIChteS5wcm90b3R5cGUuZmluZFdoZXJlKHNlbGYuYnVmZnMoKSwgeyBuYW1lOiBhYmlsaXR5TmFtZSB9KSAgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5idWZmcy5yZW1vdmUobXkucHJvdG90eXBlLmZpbmRXaGVyZShzZWxmLmJ1ZmZzKCksIHsgbmFtZTogYWJpbGl0eU5hbWUgfSkpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmFiaWxpdHlDb250cm9sRGF0YVthYmlsaXR5TmFtZV0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbYWJpbGl0eU5hbWVdLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmFiaWxpdHlDb250cm9sRGF0YVthYmlsaXR5TmFtZV0uZGF0YVtpXS5jb250cm9sVmFsLmRpc3Bvc2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbYWJpbGl0eU5hbWVdLmRhdGFbaV0uY29udHJvbFZhbC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbYWJpbGl0eU5hbWVdLmRhdGFbaV0uY2xlYW4gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbYWJpbGl0eU5hbWVdLmRhdGFbaV0uY2xlYW4uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0eUNvbnRyb2xEYXRhW2FiaWxpdHlOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2ldLm5hbWUoKSA9PSBhYmlsaXR5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzLnJlbW92ZShzZWxmLmFiaWxpdGllcygpW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLnRvZ2dsZUJ1ZmYgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5iZWhhdmlvcigpLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5idWZmcygpW2luZGV4KCldLmRhdGEuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYnVmZnMoKVtpbmRleCgpXS5kYXRhLmlzQWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmlzQWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuYnVmZnMoKVtpbmRleCgpXS5kYXRhLmlzQWN0aXZlKHRydWUpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNBY3RpdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICBzZWxmLnRvZ2dsZUJ1ZmZEZXRhaWwgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5pc0RldGFpbCgpKSB7XG4gICAgICAgICAgICBzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5pc0RldGFpbChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5pc0RldGFpbCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIC8vIE92ZXJyaWRlcyB0aGUgYWJpbGl0eSBtb2R1bGUgZnVuY3Rpb24gdG8gcmVtb3ZlIGF2YWlsYWJsZSBza2lsbCBwb2ludCBjaGVja1xuICAgIHNlbGYubGV2ZWxVcEFiaWxpdHkgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50LCBoZXJvKSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPCBoZXJvLmdldEFiaWxpdHlMZXZlbE1heChkYXRhKSkge1xuICAgICAgICAgICAgc3dpdGNoKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uYWJpbGl0eXR5cGUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RPVEFfQUJJTElUWV9UWVBFX1VMVElNQVRFJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgKyAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSArIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JlYXN0bWFzdGVyX2NhbGxfb2ZfdGhlX3dpbGQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZW5fdGVzdF9vZl9mYWl0aCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX2FnaSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2hhZG93X2RlbW9uX3NoYWRvd19wb2lzb24nOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vcnBobGluZ19tb3JwaF9zdHInOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tlZXBlcl9vZl90aGVfbGlnaHRfc3Bpcml0X2Zvcm0nOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMSc6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUyJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTMnOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLmxldmVsRG93bkFiaWxpdHkgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50LCBoZXJvKSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPiAwKSB7XG4gICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSAtIDEpO1xuICAgICAgICAgICAgc3dpdGNoIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JlYXN0bWFzdGVyX2NhbGxfb2ZfdGhlX3dpbGQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZW5fdGVzdF9vZl9mYWl0aCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX2FnaSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2hhZG93X2RlbW9uX3NoYWRvd19wb2lzb24nOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vcnBobGluZ19tb3JwaF9zdHInOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tlZXBlcl9vZl90aGVfbGlnaHRfc3Bpcml0X2Zvcm0nOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMSc6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUyJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTMnOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VtYmVyX3NwaXJpdF9maXJlX3JlbW5hbnQnOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xvbmVfZHJ1aWRfdHJ1ZV9mb3JtJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIHNlbGY7XG59IiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5mdW5jdGlvbiBIRVJPQ0FMQ1VMQVRPUiAoKSB7XG4gICAvLyAuLi5cbn1cblxudmFyIG15ID0gSEVST0NBTENVTEFUT1I7XG5cbm15LnByb3RvdHlwZS5oZXJvRGF0YSA9IHt9O1xubXkucHJvdG90eXBlLml0ZW1EYXRhID0ge307XG5teS5wcm90b3R5cGUudW5pdERhdGEgPSB7fTtcbm15LnByb3RvdHlwZS5hYmlsaXR5RGF0YSA9IHt9O1xuXG5teS5wcm90b3R5cGUuSGVyb09wdGlvbnMgPSBbXTtcblxubXkucHJvdG90eXBlLkhlcm9PcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgZGlzcGxheW5hbWUsIGhlcm8pIHtcbiAgICB0aGlzLmhlcm9OYW1lID0gbmFtZTtcbiAgICB0aGlzLmhlcm9EaXNwbGF5TmFtZSA9IGRpc3BsYXluYW1lO1xuICAgIHRoaXMuaGVybyA9IGhlcm87XG59O1xuXG5teS5wcm90b3R5cGUuaWRDb3VudGVyID0gMDtcbm15LnByb3RvdHlwZS51bmlxdWVJZCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK215LnByb3RvdHlwZS5pZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbn07XG5teS5wcm90b3R5cGUuZmluZFdoZXJlID0gZnVuY3Rpb24gKGFyciwgb2JqKSB7XG4gICAgYXJyTG9vcDogZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb2JqTG9vcDogZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGFycltpXVtrZXldICE9IG9ialtrZXldKSB7XG4gICAgICAgICAgICAgICAgY29udGludWUgYXJyTG9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyW2ldO1xuICAgIH1cbn1cbm15LnByb3RvdHlwZS51bmlxdWVzID0gZnVuY3Rpb24gKGFycikge1xuICAgIHZhciBhID0gW107XG4gICAgZm9yICh2YXIgaT0wLCBsPWFyci5sZW5ndGg7IGk8bDsgaSsrKVxuICAgICAgICBpZiAoYS5pbmRleE9mKGFycltpXSkgPT09IC0xICYmIGFycltpXSAhPT0gJycpXG4gICAgICAgICAgICBhLnB1c2goYXJyW2ldKTtcbiAgICByZXR1cm4gYTtcbn1cbm15LnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGFyciA9IGEuY29uY2F0KGIpO1xuICAgIHJldHVybiBteS5wcm90b3R5cGUudW5pcXVlcyhhcnIpO1xufVxuXG5teS5wcm90b3R5cGUudG90YWxSZXNvdXJjZXMgPSAzO1xubXkucHJvdG90eXBlLm51bVJlc291cmNlc0xvYWRlZCA9IDA7XG5teS5wcm90b3R5cGUub25SZXNvdXJjZUxvYWRlZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIG15LnByb3RvdHlwZS5udW1SZXNvdXJjZXNMb2FkZWQrKztcbiAgICBpZiAobXkucHJvdG90eXBlLm51bVJlc291cmNlc0xvYWRlZCA9PSBteS5wcm90b3R5cGUudG90YWxSZXNvdXJjZXMpIHtcbiAgICAgICAgXG4gICAgICAgIG15LnByb3RvdHlwZS5hdmFpbGFibGVCdWZmcyA9IFtcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYWJhZGRvbicsICdhYmFkZG9uX2Zyb3N0bW91cm5lJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2F4ZScsICdheGVfY3VsbGluZ19ibGFkZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdiZWFzdG1hc3RlcicsICdiZWFzdG1hc3Rlcl9pbm5lcl9iZWFzdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdibG9vZHNlZWtlcicsICdibG9vZHNlZWtlcl9ibG9vZHJhZ2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYm91bnR5X2h1bnRlcicsICdib3VudHlfaHVudGVyX3RyYWNrJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2NlbnRhdXInLCAnY2VudGF1cl9zdGFtcGVkZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdjcnlzdGFsX21haWRlbicsICdjcnlzdGFsX21haWRlbl9icmlsbGlhbmNlX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZGFya19zZWVyJywgJ2Rhcmtfc2Vlcl9zdXJnZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdkYXp6bGUnLCAnZGF6emxlX3dlYXZlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2Ryb3dfcmFuZ2VyJywgJ2Ryb3dfcmFuZ2VyX3RydWVzaG90JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2ludm9rZXInLCAnaW52b2tlcl9hbGFjcml0eScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3aXNwJywgJ3dpc3BfdGV0aGVyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3dpc3AnLCAnd2lzcF9vdmVyY2hhcmdlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2t1bmtrYScsICdrdW5ra2FfZ2hvc3RzaGlwJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2xpY2gnLCAnbGljaF9mcm9zdF9hcm1vcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdsaWZlX3N0ZWFsZXInLCAnbGlmZV9zdGVhbGVyX29wZW5fd291bmRzJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2x1bmEnLCAnbHVuYV9sdW5hcl9ibGVzc2luZycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdseWNhbicsICdseWNhbl9ob3dsJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ21hZ25hdGF1cicsICdtYWduYXRhdXJfZW1wb3dlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdtaXJhbmEnLCAnbWlyYW5hX2xlYXAnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignb2dyZV9tYWdpJywgJ29ncmVfbWFnaV9ibG9vZGx1c3QnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignb21uaWtuaWdodCcsICdvbW5pa25pZ2h0X2d1YXJkaWFuX2FuZ2VsJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3J1YmljaycsICdydWJpY2tfbnVsbF9maWVsZCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdza2VsZXRvbl9raW5nJywgJ3NrZWxldG9uX2tpbmdfdmFtcGlyaWNfYXVyYScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzcGlyaXRfYnJlYWtlcicsICdzcGlyaXRfYnJlYWtlcl9lbXBvd2VyaW5nX2hhc3RlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3N2ZW4nLCAnc3Zlbl93YXJjcnknKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc3ZlbicsICdzdmVuX2dvZHNfc3RyZW5ndGgnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndHJlYW50JywgJ3RyZWFudF9saXZpbmdfYXJtb3InKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndHJvbGxfd2FybG9yZCcsICd0cm9sbF93YXJsb3JkX2JhdHRsZV90cmFuY2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmVuZ2VmdWxzcGlyaXQnLCAndmVuZ2VmdWxzcGlyaXRfY29tbWFuZF9hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfYWxwaGFfd29sZicsICdhbHBoYV93b2xmX2NyaXRpY2FsX3N0cmlrZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX2FscGhhX3dvbGYnLCAnYWxwaGFfd29sZl9jb21tYW5kX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9wb2xhcl9mdXJib2xnX3Vyc2Ffd2FycmlvcicsICdjZW50YXVyX2toYW5fZW5kdXJhbmNlX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9naWFudF93b2xmJywgJ2dpYW50X3dvbGZfY3JpdGljYWxfc3RyaWtlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfa29ib2xkX3Rhc2ttYXN0ZXInLCAna29ib2xkX3Rhc2ttYXN0ZXJfc3BlZWRfYXVyYScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX29ncmVfbWFnaScsICdvZ3JlX21hZ2lfZnJvc3RfYXJtb3InKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9zYXR5cl9oZWxsY2FsbGVyJywgJ3NhdHlyX2hlbGxjYWxsZXJfdW5ob2x5X2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9lbnJhZ2VkX3dpbGRraW4nLCAnZW5yYWdlZF93aWxka2luX3RvdWdobmVzc19hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25lY3Jvbm9taWNvbl9hcmNoZXJfMScsICduZWNyb25vbWljb25fYXJjaGVyX2FvZScpXG4gICAgICAgIF07XG5cbiAgICAgICAgbXkucHJvdG90eXBlLmF2YWlsYWJsZURlYnVmZnMgPSBbXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2FiYWRkb24nLCAnYWJhZGRvbl9mcm9zdG1vdXJuZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdhbGNoZW1pc3QnLCAnYWxjaGVtaXN0X2FjaWRfc3ByYXknKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYW5jaWVudF9hcHBhcml0aW9uJywgJ2FuY2llbnRfYXBwYXJpdGlvbl9pY2Vfdm9ydGV4JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2F4ZScsICdheGVfYmF0dGxlX2h1bmdlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdiYW5lJywgJ2JhbmVfZW5mZWVibGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYmF0cmlkZXInLCAnYmF0cmlkZXJfc3RpY2t5X25hcGFsbScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdiZWFzdG1hc3RlcicsICdiZWFzdG1hc3Rlcl9wcmltYWxfcm9hcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdib3VudHlfaHVudGVyJywgJ2JvdW50eV9odW50ZXJfamluYWRhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2JyZXdtYXN0ZXInLCAnYnJld21hc3Rlcl90aHVuZGVyX2NsYXAnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYnJld21hc3RlcicsICdicmV3bWFzdGVyX2RydW5rZW5faGF6ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdicmlzdGxlYmFjaycsICdicmlzdGxlYmFja192aXNjb3VzX25hc2FsX2dvbycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdicm9vZG1vdGhlcicsICdicm9vZG1vdGhlcl9pbmNhcGFjaXRhdGluZ19iaXRlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2NlbnRhdXInLCAnY2VudGF1cl9zdGFtcGVkZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdjaGVuJywgJ2NoZW5fcGVuaXRlbmNlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2NyeXN0YWxfbWFpZGVuJywgJ2NyeXN0YWxfbWFpZGVuX2NyeXN0YWxfbm92YScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdjcnlzdGFsX21haWRlbicsICdjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdkYXp6bGUnLCAnZGF6emxlX3dlYXZlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2Ryb3dfcmFuZ2VyJywgJ2Ryb3dfcmFuZ2VyX2Zyb3N0X2Fycm93cycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdlYXJ0aF9zcGlyaXQnLCAnZWFydGhfc3Bpcml0X3JvbGxpbmdfYm91bGRlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdlbGRlcl90aXRhbicsICdlbGRlcl90aXRhbl9uYXR1cmFsX29yZGVyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2VsZGVyX3RpdGFuJywgJ2VsZGVyX3RpdGFuX2VhcnRoX3NwbGl0dGVyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2VuY2hhbnRyZXNzJywgJ2VuY2hhbnRyZXNzX3VudG91Y2hhYmxlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2VuY2hhbnRyZXNzJywgJ2VuY2hhbnRyZXNzX2VuY2hhbnQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZmFjZWxlc3Nfdm9pZCcsICdmYWNlbGVzc192b2lkX3RpbWVfd2FsaycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdodXNrYXInLCAnaHVza2FyX2xpZmVfYnJlYWsnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignaW52b2tlcicsICdpbnZva2VyX2dob3N0X3dhbGsnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignaW52b2tlcicsICdpbnZva2VyX2ljZV93YWxsJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3dpc3AnLCAnd2lzcF90ZXRoZXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignamFraXJvJywgJ2pha2lyb19kdWFsX2JyZWF0aCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdqYWtpcm8nLCAnamFraXJvX2xpcXVpZF9maXJlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2tlZXBlcl9vZl90aGVfbGlnaHQnLCAna2VlcGVyX29mX3RoZV9saWdodF9ibGluZGluZ19saWdodCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdrdW5ra2EnLCAna3Vua2thX3RvcnJlbnQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbGljaCcsICdsaWNoX2Zyb3N0X25vdmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbGljaCcsICdsaWNoX2Zyb3N0X2FybW9yJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2xpY2gnLCAnbGljaF9jaGFpbl9mcm9zdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdsaWZlX3N0ZWFsZXInLCAnbGlmZV9zdGVhbGVyX29wZW5fd291bmRzJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2xpb24nLCAnbGlvbl92b29kb28nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbWFnbmF0YXVyJywgJ21hZ25hdGF1cl9za2V3ZXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbWVkdXNhJywgJ21lZHVzYV9zdG9uZV9nYXplJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ21lZXBvJywgJ21lZXBvX2dlb3N0cmlrZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCduYWdhX3NpcmVuJywgJ25hZ2Ffc2lyZW5fcmlwX3RpZGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbmlnaHRfc3RhbGtlcicsICduaWdodF9zdGFsa2VyX3ZvaWQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbmlnaHRfc3RhbGtlcicsICduaWdodF9zdGFsa2VyX2NyaXBwbGluZ19mZWFyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25pZ2h0X3N0YWxrZXInLCAnbmlnaHRfc3RhbGtlcl9kYXJrbmVzcycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdvZ3JlX21hZ2knLCAnb2dyZV9tYWdpX2lnbml0ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdvbW5pa25pZ2h0JywgJ29tbmlrbmlnaHRfZGVnZW5fYXVyYScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdwaGFudG9tX2Fzc2Fzc2luJywgJ3BoYW50b21fYXNzYXNzaW5fc3RpZmxpbmdfZGFnZ2VyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3BoYW50b21fbGFuY2VyJywgJ3BoYW50b21fbGFuY2VyX3NwaXJpdF9sYW5jZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdwdWRnZScsICdwdWRnZV9yb3QnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigncHVnbmEnLCAncHVnbmFfZGVjcmVwaWZ5JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3F1ZWVub2ZwYWluJywgJ3F1ZWVub2ZwYWluX3NoYWRvd19zdHJpa2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigncmlraScsICdyaWtpX3Ntb2tlX3NjcmVlbicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdydWJpY2snLCAncnViaWNrX2ZhZGVfYm9sdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzYW5kX2tpbmcnLCAnc2FuZGtpbmdfZXBpY2VudGVyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25ldmVybW9yZScsICduZXZlcm1vcmVfZGFya19sb3JkJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NoYWRvd19zaGFtYW4nLCAnc2hhZG93X3NoYW1hbl92b29kb28nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2tlbGV0b25fa2luZycsICdza2VsZXRvbl9raW5nX2hlbGxmaXJlX2JsYXN0JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NrZWxldG9uX2tpbmcnLCAnc2tlbGV0b25fa2luZ19yZWluY2FybmF0aW9uJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NreXdyYXRoX21hZ2UnLCAnc2t5d3JhdGhfbWFnZV9jb25jdXNzaXZlX3Nob3QnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2t5d3JhdGhfbWFnZScsICdza3l3cmF0aF9tYWdlX2FuY2llbnRfc2VhbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzbGFyZGFyJywgJ3NsYXJkYXJfc2xpdGhlcmVlbl9jcnVzaCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzbGFyZGFyJywgJ3NsYXJkYXJfYW1wbGlmeV9kYW1hZ2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2xhcmsnLCAnc2xhcmtfZXNzZW5jZV9zaGlmdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzbmlwZXInLCAnc25pcGVyX3NocmFwbmVsJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NwZWN0cmUnLCAnc3BlY3RyZV9zcGVjdHJhbF9kYWdnZXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc3Rvcm1fc3Bpcml0JywgJ3N0b3JtX3NwaXJpdF9vdmVybG9hZCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd0ZW1wbGFyX2Fzc2Fzc2luJywgJ3RlbXBsYXJfYXNzYXNzaW5fbWVsZCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd0aWRlaHVudGVyJywgJ3RpZGVodW50ZXJfZ3VzaCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd0aW5rZXInLCAndGlua2VyX2xhc2VyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3RyZWFudCcsICd0cmVhbnRfbGVlY2hfc2VlZCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd0dXNrJywgJ3R1c2tfZnJvemVuX3NpZ2lsJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3VuZHlpbmcnLCAndW5keWluZ19mbGVzaF9nb2xlbScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd1cnNhJywgJ3Vyc2FfZWFydGhzaG9jaycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd2ZW5nZWZ1bHNwaXJpdCcsICd2ZW5nZWZ1bHNwaXJpdF93YXZlX29mX3RlcnJvcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd2ZW5nZWZ1bHNwaXJpdCcsICd2ZW5nZWZ1bHNwaXJpdF9jb21tYW5kX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmVub21hbmNlcicsICd2ZW5vbWFuY2VyX3Zlbm9tb3VzX2dhbGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmVub21hbmNlcicsICd2ZW5vbWFuY2VyX3BvaXNvbl9zdGluZycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd2aXBlcicsICd2aXBlcl9wb2lzb25fYXR0YWNrJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3ZpcGVyJywgJ3ZpcGVyX2NvcnJvc2l2ZV9za2luJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3ZpcGVyJywgJ3ZpcGVyX3ZpcGVyX3N0cmlrZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd2aXNhZ2UnLCAndmlzYWdlX2dyYXZlX2NoaWxsJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3dhcmxvY2snLCAnd2FybG9ja191cGhlYXZhbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3ZWF2ZXInLCAnd2VhdmVyX3RoZV9zd2FybScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3aW5kcnVubmVyJywgJ3dpbmRydW5uZXJfd2luZHJ1bicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3aW50ZXJfd3l2ZXJuJywgJ3dpbnRlcl93eXZlcm5fYXJjdGljX2J1cm4nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignd2ludGVyX3d5dmVybicsICd3aW50ZXJfd3l2ZXJuX3NwbGludGVyX2JsYXN0JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfZ2hvc3QnLCAnZ2hvc3RfZnJvc3RfYXR0YWNrJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfcG9sYXJfZnVyYm9sZ191cnNhX3dhcnJpb3InLCAncG9sYXJfZnVyYm9sZ191cnNhX3dhcnJpb3JfdGh1bmRlcl9jbGFwJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfb2dyZV9tYWdpJywgJ29ncmVfbWFnaV9mcm9zdF9hcm1vcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX3NhdHlyX3RyaWNrc3RlcicsICdzYXR5cl90cmlja3N0ZXJfcHVyZ2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9lbnJhZ2VkX3dpbGRraW4nLCAnZW5yYWdlZF93aWxka2luX3Rvcm5hZG8nKVxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgbXkucHJvdG90eXBlLml0ZW1PcHRpb25zQXJyID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXkucHJvdG90eXBlLnZhbGlkSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG15LnByb3RvdHlwZS5pdGVtT3B0aW9uc0Fyci5wdXNoKG5ldyBteS5wcm90b3R5cGUuSXRlbUlucHV0KG15LnByb3RvdHlwZS52YWxpZEl0ZW1zW2ldLCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIG15LnByb3RvdHlwZS52YWxpZEl0ZW1zW2ldXS5kaXNwbGF5bmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaXRlbUJ1ZmZzID0gWydhc3NhdWx0JywgJ2FuY2llbnRfamFuZ2dvJywgJ2hlYWRkcmVzcycsICdtZWthbnNtJywgJ3BpcGUnLCAncmluZ19vZl9hcXVpbGEnLCAndmxhZG1pcicsICdyaW5nX29mX2Jhc2lsaXVzJywgJ2J1Y2tsZXInLCAnc29sYXJfY3Jlc3QnXTtcbiAgICAgICAgbXkucHJvdG90eXBlLml0ZW1CdWZmT3B0aW9ucyA9IGl0ZW1CdWZmcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBteS5wcm90b3R5cGUuSXRlbUlucHV0KGl0ZW0sIG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBpdGVtRGVidWZmcyA9IFtcbiAgICAgICAgICAgIHtpdGVtOiAnYXNzYXVsdCcsIGRlYnVmZjogbnVsbH0sXG4gICAgICAgICAgICB7aXRlbTogJ3NoaXZhc19ndWFyZCcsIGRlYnVmZjogbnVsbH0sXG4gICAgICAgICAgICB7aXRlbTogJ2Rlc29sYXRvcicsIGRlYnVmZjogbnVsbH0sXG4gICAgICAgICAgICB7aXRlbTogJ21lZGFsbGlvbl9vZl9jb3VyYWdlJywgZGVidWZmOiBudWxsfSxcbiAgICAgICAgICAgIHtpdGVtOiAncmFkaWFuY2UnLCBkZWJ1ZmY6IG51bGx9LFxuICAgICAgICAgICAge2l0ZW06ICdzaGVlcHN0aWNrJywgZGVidWZmOiBudWxsfSxcbiAgICAgICAgICAgIHtpdGVtOiAndmVpbF9vZl9kaXNjb3JkJywgZGVidWZmOiBudWxsfSxcbiAgICAgICAgICAgIHtpdGVtOiAnc29sYXJfY3Jlc3QnLCBkZWJ1ZmY6IG51bGx9LFxuICAgICAgICAgICAge2l0ZW06ICdzaWx2ZXJfZWRnZScsIGRlYnVmZjoge2lkOiAnc2hhZG93X3dhbGsnLCBuYW1lOiAnU2hhZG93IFdhbGsnfX0sXG4gICAgICAgICAgICB7aXRlbTogJ3NpbHZlcl9lZGdlJywgZGVidWZmOiB7aWQ6ICdtYWltJywgbmFtZTogJ0xlc3NlciBNYWltJ319XG4gICAgICAgIF1cbiAgICAgICAgbXkucHJvdG90eXBlLml0ZW1EZWJ1ZmZPcHRpb25zID0gaXRlbURlYnVmZnMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbXkucHJvdG90eXBlLkl0ZW1JbnB1dChpdGVtLml0ZW0sIG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbS5pdGVtXS5kaXNwbGF5bmFtZSwgaXRlbS5kZWJ1ZmYpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgIH1cbn1cblxubXkucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoSEVST0RBVEFfUEFUSCxJVEVNREFUQV9QQVRILFVOSVREQVRBX1BBVEgsIGNhbGxiYWNrKSB7XG4gICAgbXkucHJvdG90eXBlLm51bVJlc291cmNlc0xvYWRlZCA9IDA7XG4gICAgbXkucHJvdG90eXBlLmdldEpTT04oSEVST0RBVEFfUEFUSCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhID0gZGF0YTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX2NoZW4nXS5hYmlsaXRpZXNbMl0uYmVoYXZpb3IucHVzaCgnRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX25ldmVybW9yZSddLmFiaWxpdGllc1sxXS5iZWhhdmlvci5wdXNoKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfTk9UX0xFQVJOQUJMRScpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fbmV2ZXJtb3JlJ10uYWJpbGl0aWVzWzJdLmJlaGF2aW9yLnB1c2goJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9OT1RfTEVBUk5BQkxFJyk7XG4gICAgICAgIG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19tb3JwaGxpbmcnXS5hYmlsaXRpZXNbM10uYmVoYXZpb3IucHVzaCgnRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX29ncmVfbWFnaSddLmFiaWxpdGllc1szXS5iZWhhdmlvci5wdXNoKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfTk9UX0xFQVJOQUJMRScpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fdGVjaGllcyddLmFiaWxpdGllc1s0XS5iZWhhdmlvci5wdXNoKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfTk9UX0xFQVJOQUJMRScpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fYmVhc3RtYXN0ZXInXS5hYmlsaXRpZXNbMl0uYmVoYXZpb3IucHVzaCgnRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX2xvbmVfZHJ1aWQnXS5hYmlsaXRpZXNbM10uYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX0hJRERFTicpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fbG9uZV9kcnVpZCddLmFiaWxpdGllc1szXS5iZWhhdmlvci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBcbiAgICAgICAgaW5kZXggPSBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fYWJhZGRvbiddLmFiaWxpdGllc1syXS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fYWJhZGRvbiddLmFiaWxpdGllc1syXS5iZWhhdmlvci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBcbiAgICAgICAgaW5kZXggPSBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fcmlraSddLmFiaWxpdGllc1syXS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fcmlraSddLmFiaWxpdGllc1syXS5iZWhhdmlvci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaCBpbiBteS5wcm90b3R5cGUuaGVyb0RhdGEpIHtcbiAgICAgICAgICAgIG15LnByb3RvdHlwZS5IZXJvT3B0aW9ucy5wdXNoKG5ldyBteS5wcm90b3R5cGUuSGVyb09wdGlvbihoLnJlcGxhY2UoJ25wY19kb3RhX2hlcm9fJywgJycpLCBteS5wcm90b3R5cGUuaGVyb0RhdGFbaF0uZGlzcGxheW5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIG15LnByb3RvdHlwZS5vblJlc291cmNlTG9hZGVkKGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICBteS5wcm90b3R5cGUuZ2V0SlNPTihJVEVNREFUQV9QQVRILCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBteS5wcm90b3R5cGUuaXRlbURhdGEgPSBkYXRhO1xuICAgICAgICBteS5wcm90b3R5cGUub25SZXNvdXJjZUxvYWRlZChjYWxsYmFjayk7XG4gICAgfSk7XG4gICAgbXkucHJvdG90eXBlLmdldEpTT04oVU5JVERBVEFfUEFUSCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgbXkucHJvdG90eXBlLnVuaXREYXRhID0gZGF0YTtcbiAgICAgICAgbXkucHJvdG90eXBlLm9uUmVzb3VyY2VMb2FkZWQoY2FsbGJhY2spO1xuICAgIH0pO1xufVxuXG5teS5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gKG91dCkge1xuICAgIG91dCA9IG91dCB8fCB7fTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBvYmogPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgaWYgKCFvYmopXG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBkZWVwRXh0ZW5kKG91dFtrZXldLCBvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvdXRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbm15LnByb3RvdHlwZS5nZXRKU09OID0gZnVuY3Rpb24gKHVybCwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG5cbiAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgNDAwKSB7XG4gICAgICAgICAgICAvLyBTdWNjZXNzIVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdlIHJlYWNoZWQgb3VyIHRhcmdldCBzZXJ2ZXIsIGJ1dCBpdCByZXR1cm5lZCBhbiBlcnJvclxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUaGVyZSB3YXMgYSBjb25uZWN0aW9uIGVycm9yIG9mIHNvbWUgc29ydFxuICAgICAgICBlcnJvckNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIHJlcXVlc3Quc2VuZCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIRVJPQ0FMQ1VMQVRPUjsiLCIndXNlIHN0cmljdCc7XG52YXIga28gPSByZXF1aXJlKCcuL2hlcm9jYWxjX2tub2Nrb3V0Jyk7XG4gICAgXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuaWxsdXNpb25EYXRhID0ge1xuICAgIGNoYW9zX2tuaWdodF9waGFudGFzbToge1xuICAgICAgICBoZXJvOiAnY2hhb3Nfa25pZ2h0JyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdDaGFvcyBLbmlnaHQgUGhhbnRhc20nLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogZmFsc2UsXG4gICAgICAgIG1heF9sZXZlbDogMyxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnb3V0Z29pbmdfZGFtYWdlJyxcbiAgICAgICAgaW5jb21pbmdfZGFtYWdlOiAnaW5jb21pbmdfZGFtYWdlJ1xuICAgIH0sXG4gICAgbmFnYV9zaXJlbl9taXJyb3JfaW1hZ2U6IHtcbiAgICAgICAgaGVybzogJ25hZ2Ffc2lyZW4nLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ05hZ2EgU2lyZW4gTWlycm9yIEltYWdlJyxcbiAgICAgICAgdXNlX3NlbGVjdGVkX2hlcm86IGZhbHNlLFxuICAgICAgICBtYXhfbGV2ZWw6IDQsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ291dGdvaW5nX2RhbWFnZScsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2luY29taW5nX2RhbWFnZSdcbiAgICB9LFxuICAgIGRhcmtfc2Vlcl93YWxsX29mX3JlcGxpY2E6IHtcbiAgICAgICAgaGVybzogJ2Rhcmtfc2VlcicsXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnRGFyayBTZWVyIFdhbGwgb2YgUmVwbGljYScsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiB0cnVlLFxuICAgICAgICBtYXhfbGV2ZWw6IDMsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ3JlcGxpY2FfZGFtYWdlX291dGdvaW5nJyxcbiAgICAgICAgaW5jb21pbmdfZGFtYWdlOiAncmVwbGljYV9kYW1hZ2VfaW5jb21pbmcnLFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2Vfc2NlcHRlcjogJ3JlcGxpY2FfZGFtYWdlX291dGdvaW5nX3NjZXB0ZXInXG4gICAgfSxcbiAgICBtb3JwaGxpbmdfcmVwbGljYXRlOiB7XG4gICAgICAgIGhlcm86ICdtb3JwaGxpbmcnLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ01vcnBobGluZyBSZXBsaWNhdGUnLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogdHJ1ZSxcbiAgICAgICAgbWF4X2xldmVsOiAzLFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2Vfb3V0X3BjdCcsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2RhbWFnZV9pbl9wY3QnXG4gICAgfSxcbiAgICBwaGFudG9tX2xhbmNlcl9kb3BwZWx3YWxrOiB7XG4gICAgICAgIGhlcm86ICdwaGFudG9tX2xhbmNlcicsXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnUGhhbnRvbSBMYW5jZXIgRG9wcGVsd2FsaycsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiBmYWxzZSxcbiAgICAgICAgbWF4X2xldmVsOiA0LFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2Vfb3V0X3BjdCcsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2RhbWFnZV9pbl9wY3QnICAgICAgICBcbiAgICB9LFxuICAgIHBoYW50b21fbGFuY2VyX2p1eHRhcG9zZToge1xuICAgICAgICBoZXJvOiAncGhhbnRvbV9sYW5jZXInLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1BoYW50b20gTGFuY2VyIEp1eHRhcG9zZScsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiBmYWxzZSxcbiAgICAgICAgbWF4X2xldmVsOiA0LFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2Vfb3V0X3BjdCcsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2RhbWFnZV9pbl9wY3QnICAgICAgICBcbiAgICB9LFxuICAgIHBoYW50b21fbGFuY2VyX3NwaXJpdF9sYW5jZToge1xuICAgICAgICBoZXJvOiAncGhhbnRvbV9sYW5jZXInLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1BoYW50b20gTGFuY2VyIFNwaXJpdCBMYW5jZScsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiBmYWxzZSxcbiAgICAgICAgbWF4X2xldmVsOiA0LFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2Vfb3V0X3BjdCcsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2RhbWFnZV9pbl9wY3QnICAgICAgICBcbiAgICB9LFxuICAgIHNoYWRvd19kZW1vbl9kaXNydXB0aW9uOiB7XG4gICAgICAgIGhlcm86ICdzaGFkb3dfZGVtb24nLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1NoYWRvdyBEZW1vbiBEaXNydXB0aW9uJyxcbiAgICAgICAgdXNlX3NlbGVjdGVkX2hlcm86IHRydWUsXG4gICAgICAgIG1heF9sZXZlbDogNCxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnaWxsdXNpb25fb3V0Z29pbmdfZGFtYWdlJyxcbiAgICAgICAgaW5jb21pbmdfZGFtYWdlOiAnaWxsdXNpb25faW5jb21pbmdfZGFtYWdlJyAgICAgICAgXG4gICAgfSxcbiAgICBzcGVjdHJlX2hhdW50OiB7XG4gICAgICAgIGhlcm86ICdzcGVjdHJlJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdTcGVjdHJlIEhhdW50JyxcbiAgICAgICAgdXNlX3NlbGVjdGVkX2hlcm86IGZhbHNlLFxuICAgICAgICBtYXhfbGV2ZWw6IDMsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ2lsbHVzaW9uX2RhbWFnZV9vdXRnb2luZycsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2RhbWFnZV9pbmNvbWluZycgICAgICAgIFxuICAgIH0sXG4gICAgdGVycm9yYmxhZGVfY29uanVyZV9pbWFnZToge1xuICAgICAgICBoZXJvOiAndGVycm9yYmxhZGUnLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1RlcnJvcmJsYWRlIENvbmp1cmUgSW1hZ2UnLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogZmFsc2UsXG4gICAgICAgIG1heF9sZXZlbDogNCxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnaWxsdXNpb25fb3V0Z29pbmdfZGFtYWdlJyxcbiAgICAgICAgaW5jb21pbmdfZGFtYWdlOiAnaWxsdXNpb25faW5jb21pbmdfZGFtYWdlJyAgICAgICAgXG4gICAgfSxcbiAgICB0ZXJyb3JibGFkZV9yZWZsZWN0aW9uOiB7XG4gICAgICAgIGhlcm86ICd0ZXJyb3JibGFkZScsXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnVGVycm9yYmxhZGUgUmVmbGVjdGlvbicsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiB0cnVlLFxuICAgICAgICBtYXhfbGV2ZWw6IDQsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ2lsbHVzaW9uX291dGdvaW5nX2RhbWFnZScgICAgIFxuICAgIH0sXG4gICAgaXRlbV9tYW50YToge1xuICAgICAgICBoZXJvOiAnJyxcbiAgICAgICAgaXNfaXRlbTogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdNYW50YSBTdHlsZSBJbGx1c2lvbicsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiB0cnVlLFxuICAgICAgICBtYXhfbGV2ZWw6IDEsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZV9tZWxlZTogJ2ltYWdlc19kb19kYW1hZ2VfcGVyY2VudF9tZWxlZScsXG4gICAgICAgIGluY29taW5nX2RhbWFnZV9tZWxlZTogJ2ltYWdlc190YWtlX2RhbWFnZV9wZXJjZW50X21lbGVlJyxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlX3JhbmdlZDogJ2ltYWdlc19kb19kYW1hZ2VfcGVyY2VudF9yYW5nZWQnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2VfcmFuZ2VkOiAnaW1hZ2VzX3Rha2VfZGFtYWdlX3BlcmNlbnRfcmFuZ2VkJ1xuICAgIH1cbn1cblxubXkucHJvdG90eXBlLklsbHVzaW9uVmlld01vZGVsID0gZnVuY3Rpb24gKGgsIHAsIGFiaWxpdHlMZXZlbCkge1xuICAgIHZhciBzZWxmID0gbmV3IG15LnByb3RvdHlwZS5IZXJvTW9kZWwoMCk7XG4gICAgc2VsZi5wYXJlbnQgPSBwO1xuICAgIHNlbGYuaW52ZW50b3J5ID0gc2VsZi5wYXJlbnQuaW52ZW50b3J5O1xuICAgIHNlbGYuaWxsdXNpb25UeXBlID0ga28ub2JzZXJ2YWJsZShzZWxmLnBhcmVudC5zZWxlY3RlZElsbHVzaW9uKCkuaWxsdXNpb25OYW1lKTtcbiAgICBzZWxmLmlsbHVzaW9uRGlzcGxheU5hbWUgPSBrby5vYnNlcnZhYmxlKHNlbGYucGFyZW50LnNlbGVjdGVkSWxsdXNpb24oKS5pbGx1c2lvbkRpc3BsYXlOYW1lKTtcbiAgICBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsKGFiaWxpdHlMZXZlbCk7XG4gICAgc2VsZi5pbGx1c2lvbkFiaWxpdHlNYXhMZXZlbCA9IGtvLm9ic2VydmFibGUobXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLnBhcmVudC5zZWxlY3RlZElsbHVzaW9uKCkuaWxsdXNpb25OYW1lXS5tYXhfbGV2ZWwpO1xuICAgIGlmICghbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLmlsbHVzaW9uVHlwZSgpXS51c2Vfc2VsZWN0ZWRfaGVybykge1xuICAgICAgICBzZWxmLnNlbGVjdGVkSGVybyhteS5wcm90b3R5cGUuZmluZFdoZXJlKHNlbGYuYXZhaWxhYmxlSGVyb2VzKCksIHtoZXJvTmFtZTogc2VsZi5wYXJlbnQuc2VsZWN0ZWRJbGx1c2lvbigpLmJhc2VIZXJvfSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2VsZi5zZWxlY3RlZEhlcm8oc2VsZi5wYXJlbnQuc2VsZWN0ZWRIZXJvKCkpO1xuICAgIH1cbiAgICBzZWxmLnNlbGVjdGVkSGVyb0xldmVsKHNlbGYucGFyZW50LnNlbGVjdGVkSGVyb0xldmVsKCkpO1xuICAgIHNlbGYuaGVybyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ga28ud3JhcC5mcm9tSlMobXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBzZWxmLnNlbGVjdGVkSGVybygpLmhlcm9OYW1lXSk7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCA9IHNlbGYucGFyZW50LmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsO1xuICAgIHNlbGYudG90YWxBZ2kgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZWJhc2VhZ2lsaXR5XG4gICAgICAgICAgICAgICAgKyBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYWdpbGl0eWdhaW4gKiAoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMSkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRBdHRyaWJ1dGVzKCdhZ2knKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwoKSAqIDJcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEFnaWxpdHkoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuaW50U3RvbGVuID0ga28ub2JzZXJ2YWJsZSgwKS5leHRlbmQoeyBudW1lcmljOiAwIH0pO1xuICAgIHNlbGYudG90YWxJbnQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZWJhc2VpbnRlbGxpZ2VuY2UgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlaW50ZWxsaWdlbmNlZ2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ2ludCcpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpICogMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0SW50ZWxsaWdlbmNlKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEFsbFN0YXRzUmVkdWN0aW9uKCkgKyBzZWxmLmludFN0b2xlbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbFN0ciA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZXN0cmVuZ3RoIFxuICAgICAgICAgICAgICAgICsgc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZXN0cmVuZ3RoZ2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ3N0cicpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpICogMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0U3RyZW5ndGgoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24oaGVybywgYWJpbGl0eSwgYXR0cmlidXRlTmFtZSwgbGV2ZWwpIHtcbiAgICAgICAgaWYgKGFiaWxpdHkgPT0gJ2l0ZW1fbWFudGEnKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eU9iaiA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVthYmlsaXR5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5T2JqID0gbXkucHJvdG90eXBlLmZpbmRXaGVyZShteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIGhlcm9dLmFiaWxpdGllcywge25hbWU6IGFiaWxpdHl9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLmZpbmRXaGVyZShhYmlsaXR5T2JqLmF0dHJpYnV0ZXMsIHtuYW1lOiBhdHRyaWJ1dGVOYW1lfSk7XG4gICAgICAgIGlmIChsZXZlbCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxldmVsID4gYXR0cmlidXRlLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGF0dHJpYnV0ZS52YWx1ZVtsZXZlbCAtIDFdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzZWxmLmdldEluY29taW5nRGFtYWdlTXVsdGlwbGllciA9IGZ1bmN0aW9uKGlsbHVzaW9uVHlwZSwgaGFzU2NlcHRlciwgYXR0YWNrVHlwZSkge1xuICAgICAgICBpZiAoaWxsdXNpb25UeXBlID09ICdpdGVtX21hbnRhJykge1xuICAgICAgICAgICAgaWYgKGF0dGFja1R5cGUgPT0gJ0RPVEFfVU5JVF9DQVBfTUVMRUVfQVRUQUNLJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5pbGx1c2lvblR5cGUoKV0uaGVybywgc2VsZi5pbGx1c2lvblR5cGUoKSwgbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtpbGx1c2lvblR5cGVdLmluY29taW5nX2RhbWFnZV9tZWxlZSwgc2VsZi5pbGx1c2lvbkFiaWxpdHlMZXZlbCgpKS8xMDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDEgKyBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW3NlbGYuaWxsdXNpb25UeXBlKCldLmhlcm8sIHNlbGYuaWxsdXNpb25UeXBlKCksIG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbaWxsdXNpb25UeXBlXS5pbmNvbWluZ19kYW1hZ2VfcmFuZ2VkLCBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsKCkpLzEwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5pbGx1c2lvblR5cGUoKV0uaGVybywgc2VsZi5pbGx1c2lvblR5cGUoKSwgbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtpbGx1c2lvblR5cGVdLmluY29taW5nX2RhbWFnZSwgc2VsZi5pbGx1c2lvbkFiaWxpdHlMZXZlbCgpKS8xMDApXG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5nZXRPdXRnb2luZ0RhbWFnZU11bHRpcGxpZXIgPSBmdW5jdGlvbihpbGx1c2lvblR5cGUsIGhhc1NjZXB0ZXIsIGF0dGFja1R5cGUpIHtcbiAgICAgICAgaWYgKGlsbHVzaW9uVHlwZSA9PSAnaXRlbV9tYW50YScpIHtcbiAgICAgICAgICAgIGlmIChhdHRhY2tUeXBlID09ICdET1RBX1VOSVRfQ0FQX01FTEVFX0FUVEFDSycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDEgKyBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW3NlbGYuaWxsdXNpb25UeXBlKCldLmhlcm8sIHNlbGYuaWxsdXNpb25UeXBlKCksIG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbaWxsdXNpb25UeXBlXS5vdXRnb2luZ19kYW1hZ2VfbWVsZWUsIHNlbGYuaWxsdXNpb25BYmlsaXR5TGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5pbGx1c2lvblR5cGUoKV0uaGVybywgc2VsZi5pbGx1c2lvblR5cGUoKSwgbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtpbGx1c2lvblR5cGVdLm91dGdvaW5nX2RhbWFnZV9yYW5nZWQsIHNlbGYuaWxsdXNpb25BYmlsaXR5TGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5pbGx1c2lvblR5cGUoKV0uaGVybywgc2VsZi5pbGx1c2lvblR5cGUoKSwgbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtpbGx1c2lvblR5cGVdLm91dGdvaW5nX2RhbWFnZSwgc2VsZi5pbGx1c2lvbkFiaWxpdHlMZXZlbCgpKS8xMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZi5iYXNlRGFtYWdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbTWF0aC5mbG9vcihteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIHNlbGYuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWVdLmF0dGFja2RhbWFnZW1pbiArIHNlbGYudG90YWxBdHRyaWJ1dGUoc2VsZi5wcmltYXJ5QXR0cmlidXRlKCkpICsgc2VsZi5hYmlsaXR5KCkuZ2V0QmFzZURhbWFnZSgpLnRvdGFsKVxuICAgICAgICAgICAgICAgICogc2VsZi5nZXRPdXRnb2luZ0RhbWFnZU11bHRpcGxpZXIoc2VsZi5pbGx1c2lvblR5cGUoKSwgZmFsc2UsIHNlbGYuaGVybygpLmF0dGFja3R5cGUoKSksXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcihteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIHNlbGYuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWVdLmF0dGFja2RhbWFnZW1heCArIHNlbGYudG90YWxBdHRyaWJ1dGUoc2VsZi5wcmltYXJ5QXR0cmlidXRlKCkpICsgc2VsZi5hYmlsaXR5KCkuZ2V0QmFzZURhbWFnZSgpLnRvdGFsKVxuICAgICAgICAgICAgICAgICogc2VsZi5nZXRPdXRnb2luZ0RhbWFnZU11bHRpcGxpZXIoc2VsZi5pbGx1c2lvblR5cGUoKSwgZmFsc2UsIHNlbGYuaGVybygpLmF0dGFja3R5cGUoKSldO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZGFtYWdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbc2VsZi5iYXNlRGFtYWdlKClbMF0sXG4gICAgICAgICAgICAgICAgc2VsZi5iYXNlRGFtYWdlKClbMV1dO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZWhwUGh5c2ljYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVocCA9IChzZWxmLmhlYWx0aCgpICogKDEgKyAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSkgLyAoMSAtICgxIC0gKHNlbGYuaW52ZW50b3J5LmdldEV2YXNpb24oKSAqIHNlbGYuYWJpbGl0eSgpLmdldEV2YXNpb24oKSkpKVxuICAgICAgICBlaHAgKj0gKHNlbGYuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zKCkuc29tZShmdW5jdGlvbihpdGVtKSB7cmV0dXJuIGl0ZW0uaXRlbSA9PSAnbWFza19vZl9tYWRuZXNzJzt9KSA/ICgxIC8gMS4zKSA6IDEpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmdldEluY29taW5nRGFtYWdlTXVsdGlwbGllcihzZWxmLmlsbHVzaW9uVHlwZSgpLCBmYWxzZSwgc2VsZi5oZXJvKCkuYXR0YWNrdHlwZSgpKSk7XG4gICAgICAgIHJldHVybiBlaHAudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmVocE1hZ2ljYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVocCA9IHNlbGYuaGVhbHRoKCkgLyBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCgpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmdldEluY29taW5nRGFtYWdlTXVsdGlwbGllcihzZWxmLmlsbHVzaW9uVHlwZSgpLCBmYWxzZSwgc2VsZi5oZXJvKCkuYXR0YWNrdHlwZSgpKSk7XG4gICAgICAgIHJldHVybiBlaHAudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QXJtb3JCYXNlUmVkdWN0aW9uKCkgKiBzZWxmLmRlYnVmZnMuZ2V0QXJtb3JCYXNlUmVkdWN0aW9uKCkgKiAobXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBzZWxmLnNlbGVjdGVkSGVybygpLmhlcm9OYW1lXS5hcm1vcnBoeXNpY2FsICsgc2VsZi50b3RhbEFnaSgpICogLjE0KVxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXJtb3IoKSArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QXJtb3JSZWR1Y3Rpb24oKSArIHNlbGYuYnVmZnMuZ2V0QXJtb3IoKSArIHNlbGYuZGVidWZmcy5nZXRBcm1vclJlZHVjdGlvbigpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuaWFzID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWwgPSBwYXJzZUZsb2F0KHNlbGYudG90YWxBZ2koKSkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZCgpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRBdHRhY2tTcGVlZCgpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYudW5pdCgpLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZCgpOyBcbiAgICAgICAgaWYgKHZhbCA8IC04MCkge1xuICAgICAgICAgICAgcmV0dXJuIC04MDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgPiA0MDApIHtcbiAgICAgICAgICAgIHJldHVybiA0MDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbC50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBzZWxmO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcblxudmFyIG15ID0gcmVxdWlyZShcIi4vaGVyb2NhbGNfY29yZVwiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX2hlcm9fZGFtYWdlXCIpO1xuXG5teS5wcm90b3R5cGUudG90YWxFeHAgPSBbMCwgMjAwLCA1MDAsIDkwMCwgMTQwMCwgMjAwMCwgMjYwMCwgMzQwMCwgNDQwMCwgNTQwMCwgNjAwMCwgODIwMCwgOTAwMCwgMTA0MDAsIDExOTAwLCAxMzUwMCwgMTUyMDAsIDE3MDAwLCAxODkwMCwgMjA5MDAsIDIzMDAwLCAyNTIwMCwgMjc1MDAsIDI5OTAwLCAzMjQwMF07XG5teS5wcm90b3R5cGUubmV4dExldmVsRXhwID0gWzIwMCwgMzAwLCA0MDAsIDUwMCwgNjAwLCA2MDAsIDgwMCwgMTAwMCwgMTAwMCwgNjAwLCAyMjAwLCA4MDAsIDE0MDAsIDE1MDAsIDE2MDAsIDE3MDAsIDE4MDAsIDE5MDAsIDIwMDAsIDIxMDAsIDIyMDAsIDIzMDAsIDI0MDAsIDI1MDAsICcmbWRhc2g7J107XG5teS5wcm90b3R5cGUuZGlmZlByb3BlcnRpZXMgPSBbXG4gICAgJ3RvdGFsQWdpJyxcbiAgICAndG90YWxJbnQnLFxuICAgICd0b3RhbFN0cicsXG4gICAgJ2hlYWx0aCcsXG4gICAgJ2hlYWx0aHJlZ2VuJyxcbiAgICAnbWFuYScsXG4gICAgJ21hbmFyZWdlbicsXG4gICAgJ3RvdGFsQXJtb3JQaHlzaWNhbCcsXG4gICAgJ3RvdGFsQXJtb3JQaHlzaWNhbFJlZHVjdGlvbicsXG4gICAgJ3RvdGFsTW92ZW1lbnRTcGVlZCcsXG4gICAgJ3RvdGFsVHVyblJhdGUnLFxuICAgICdiYXNlRGFtYWdlJyxcbiAgICAnYm9udXNEYW1hZ2UnLFxuICAgICdib251c0RhbWFnZVJlZHVjdGlvbicsXG4gICAgJ2RhbWFnZScsXG4gICAgJ3RvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCcsXG4gICAgJ3RvdGFsTWFnaWNSZXNpc3RhbmNlJyxcbiAgICAnYmF0JyxcbiAgICAnaWFzJyxcbiAgICAnYXR0YWNrVGltZScsXG4gICAgJ2F0dGFja3NQZXJTZWNvbmQnLFxuICAgICdldmFzaW9uJyxcbiAgICAnZWhwUGh5c2ljYWwnLFxuICAgICdlaHBNYWdpY2FsJyxcbiAgICAnYmFzaCcsXG4gICAgJ2NyaXRDaGFuY2UnLFxuICAgIC8vJ2NyaXREYW1hZ2UnLFxuICAgICdtaXNzQ2hhbmNlJyxcbiAgICAndG90YWxhdHRhY2tyYW5nZScsXG4gICAgJ3Zpc2lvbnJhbmdlZGF5JyxcbiAgICAndmlzaW9ucmFuZ2VuaWdodCcsXG4gICAgJ2xpZmVzdGVhbCdcbl07XG5cbm15LnByb3RvdHlwZS5JbGx1c2lvbk9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkaXNwbGF5bmFtZSwgYmFzZUhlcm8pIHtcbiAgICB0aGlzLmlsbHVzaW9uTmFtZSA9IG5hbWU7XG4gICAgdGhpcy5pbGx1c2lvbkRpc3BsYXlOYW1lID0gZGlzcGxheW5hbWU7XG4gICAgdGhpcy5iYXNlSGVybyA9IGJhc2VIZXJvO1xufTtcblxubXkucHJvdG90eXBlLmNyZWF0ZUlsbHVzaW9uT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIGggaW4gbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YSkge1xuICAgICAgICBvcHRpb25zLnB1c2gobmV3IG15LnByb3RvdHlwZS5JbGx1c2lvbk9wdGlvbihoLCBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW2hdLmRpc3BsYXlOYW1lLCBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW2hdLmhlcm8pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbm15LnByb3RvdHlwZS5IZXJvTW9kZWwgPSBmdW5jdGlvbiAoaCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLmhlcm9JZCA9IGtvLm9ic2VydmFibGUoaCk7XG4gICAgc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCA9IGtvLm9ic2VydmFibGUoMSk7XG4gICAgc2VsZi5pbnZlbnRvcnkgPSBuZXcgbXkucHJvdG90eXBlLkludmVudG9yeVZpZXdNb2RlbChzZWxmKTtcbiAgICBzZWxmLnNlbGVjdGVkSW52ZW50b3J5ID0ga28ub2JzZXJ2YWJsZSgtMSk7XG4gICAgc2VsZi5idWZmcyA9IG5ldyBteS5wcm90b3R5cGUuQnVmZlZpZXdNb2RlbCgpO1xuICAgIHNlbGYuYnVmZnMuaGFzU2NlcHRlciA9IHNlbGYuaW52ZW50b3J5Lmhhc1NjZXB0ZXI7XG4gICAgc2VsZi5kZWJ1ZmZzID0gbmV3IG15LnByb3RvdHlwZS5CdWZmVmlld01vZGVsKCk7XG4gICAgLypzZWxmLmhlcm8gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBrby5tYXBwaW5nLmZyb21KUyhteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIHNlbGYuaGVyb0lkKCldKTtcbiAgICB9KTsqL1xuICAgIHNlbGYuaGVyb0RhdGEgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBzZWxmLmhlcm9JZCgpXTtcbiAgICB9KTtcbiAgICBzZWxmLmhlcm9Db21wYXJlID0ga28ub2JzZXJ2YWJsZShzZWxmKTtcbiAgICBzZWxmLmVuZW15ID0ga28ub2JzZXJ2YWJsZShzZWxmKTtcbiAgICBzZWxmLnVuaXQgPSBrby5vYnNlcnZhYmxlKHNlbGYpO1xuICAgIHNlbGYuY2xvbmUgPSBrby5vYnNlcnZhYmxlKHNlbGYpO1xuICAgIHNlbGYuaWxsdXNpb25zID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcbiAgICBzZWxmLmF2YWlsYWJsZUlsbHVzaW9ucyA9IGtvLm9ic2VydmFibGVBcnJheShteS5wcm90b3R5cGUuY3JlYXRlSWxsdXNpb25PcHRpb25zKCkpO1xuICAgIHNlbGYuc2VsZWN0ZWRJbGx1c2lvbiA9IGtvLm9ic2VydmFibGUoc2VsZi5hdmFpbGFibGVJbGx1c2lvbnMoKVswXSk7XG4gICAgc2VsZi5pbGx1c2lvbkFiaWxpdHlMZXZlbCA9IGtvLm9ic2VydmFibGUoMSk7XG4gICAgc2VsZi5pbGx1c2lvbkFiaWxpdHlNYXhMZXZlbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5zZWxlY3RlZElsbHVzaW9uKCkuaWxsdXNpb25OYW1lXS5tYXhfbGV2ZWw7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5za2lsbFBvaW50SGlzdG9yeSA9IGtvLm9ic2VydmFibGVBcnJheSgpO1xuICAgIFxuICAgIHNlbGYuYWJpbGl0eSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSBuZXcgbXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbChrby53cmFwLmZyb21KUyhzZWxmLmhlcm9EYXRhKCkuYWJpbGl0aWVzKSwgc2VsZik7XG4gICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAnZWFydGhfc3Bpcml0JyB8fCBzZWxmLmhlcm9JZCgpID09PSAnb2dyZV9tYWdpJykge1xuICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVszXS5sZXZlbCgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLmhlcm9JZCgpID09PSAnaW52b2tlcicpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSA2OyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbaV0ubGV2ZWwoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5za2lsbFBvaW50SGlzdG9yeS5yZW1vdmVBbGwoKTtcbiAgICAgICAgYS5oYXNTY2VwdGVyID0gc2VsZi5pbnZlbnRvcnkuaGFzU2NlcHRlclxuICAgICAgICByZXR1cm4gYTtcbiAgICB9KTtcblxuICAgIHNlbGYuYXZhaWxhYmxlU2tpbGxQb2ludHMgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjID0gc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZ2V0SW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3dpdGNoKHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpW2ldLmFiaWxpdHl0eXBlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdET1RBX0FCSUxJVFlfVFlQRV9VTFRJTUFURSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAnaW52b2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpW2ldLmxldmVsKCkgPT0gMSkgJiYgKHBhcnNlSW50KHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPCAyKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpW2ldLmxldmVsKCkgPT0gMikgJiYgKHBhcnNlSW50KHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPCA3KSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpW2ldLmxldmVsKCkgPT0gMykgJiYgKHBhcnNlSW50KHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPCAxMSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChzZWxmLmFiaWxpdHkoKS5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpID09IDQpICYmIChwYXJzZUludChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkpIDwgMTcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXR5KCkubGV2ZWxEb3duQWJpbGl0eShnZXRJbmRleCwgbnVsbCwgbnVsbCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5oZXJvSWQoKSA9PT0gJ21lZXBvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChzZWxmLmFiaWxpdHkoKS5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpLTEpICogNyArIDMgPiBwYXJzZUludChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXR5KCkubGV2ZWxEb3duQWJpbGl0eShnZXRJbmRleCwgbnVsbCwgbnVsbCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSAqIDUgKyAxID4gcGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmxldmVsRG93bkFiaWxpdHkoZ2V0SW5kZXgsIG51bGwsIG51bGwsIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpW2ldLmxldmVsKCkgKiAyIC0gMSA+IHBhcnNlSW50KHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmxldmVsRG93bkFiaWxpdHkoZ2V0SW5kZXgsIG51bGwsIG51bGwsIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdldEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2tpbGxQb2ludEhpc3RvcnkoKVtzZWxmLnNraWxsUG9pbnRIaXN0b3J5KCkubGVuZ3RoLTFdO1xuICAgICAgICB9O1xuICAgICAgICB3aGlsZSAoc2VsZi5za2lsbFBvaW50SGlzdG9yeSgpLmxlbmd0aCA+IGMpIHtcbiAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmxldmVsRG93bkFiaWxpdHkoZ2V0SW5kZXgsIG51bGwsIG51bGwsIHNlbGYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjLXNlbGYuc2tpbGxQb2ludEhpc3RvcnkoKS5sZW5ndGg7XG4gICAgfSwgdGhpcyk7XG4gICAgc2VsZi5wcmltYXJ5QXR0cmlidXRlID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHYgPSBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlcHJpbWFyeTtcbiAgICAgICAgaWYgKHYgPT09ICdET1RBX0FUVFJJQlVURV9BR0lMSVRZJykgcmV0dXJuICdhZ2knO1xuICAgICAgICBpZiAodiA9PT0gJ0RPVEFfQVRUUklCVVRFX0lOVEVMTEVDVCcpIHJldHVybiAnaW50JztcbiAgICAgICAgaWYgKHYgPT09ICdET1RBX0FUVFJJQlVURV9TVFJFTkdUSCcpIHJldHVybiAnc3RyJztcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxFeHAgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbXkucHJvdG90eXBlLnRvdGFsRXhwW3NlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSAtIDFdO1xuICAgIH0pO1xuICAgIHNlbGYubmV4dExldmVsRXhwID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG15LnByb3RvdHlwZS5uZXh0TGV2ZWxFeHBbc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMV07XG4gICAgfSk7XG4gICAgc2VsZi5zdGFydGluZ0FybW9yID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZWFnaWxpdHkgKiAuMTQgKyBzZWxmLmhlcm9EYXRhKCkuYXJtb3JwaHlzaWNhbCkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnJlc3Bhd25UaW1lID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDUgKyAzLjggKiBzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCk7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGlmIChhID09PSAnYWdpJykgcmV0dXJuIHBhcnNlRmxvYXQoc2VsZi50b3RhbEFnaSgpKTtcbiAgICAgICAgaWYgKGEgPT09ICdpbnQnKSByZXR1cm4gcGFyc2VGbG9hdChzZWxmLnRvdGFsSW50KCkpO1xuICAgICAgICBpZiAoYSA9PT0gJ3N0cicpIHJldHVybiBwYXJzZUZsb2F0KHNlbGYudG90YWxTdHIoKSk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgc2VsZi50b3RhbEFnaSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZWJhc2VhZ2lsaXR5XG4gICAgICAgICAgICAgICAgKyBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYWdpbGl0eWdhaW4gKiAoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMSkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRBdHRyaWJ1dGVzKCdhZ2knKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwoKSAqIDJcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEFnaWxpdHkoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuaW50U3RvbGVuID0ga28ub2JzZXJ2YWJsZSgwKS5leHRlbmQoeyBudW1lcmljOiAwIH0pO1xuICAgIHNlbGYudG90YWxJbnQgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGViYXNlaW50ZWxsaWdlbmNlIFxuICAgICAgICAgICAgICAgICsgc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZWludGVsbGlnZW5jZWdhaW4gKiAoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMSkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRBdHRyaWJ1dGVzKCdpbnQnKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwoKSAqIDJcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEludGVsbGlnZW5jZSgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBbGxTdGF0c1JlZHVjdGlvbigpICsgc2VsZi5pbnRTdG9sZW4oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxTdHIgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGViYXNlc3RyZW5ndGggXG4gICAgICAgICAgICAgICAgKyBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlc3RyZW5ndGhnYWluICogKHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSAtIDEpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0cmlidXRlcygnc3RyJykgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsKCkgKiAyXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRTdHJlbmd0aCgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldFN0cmVuZ3RoUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmhlYWx0aCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLnN0YXR1c2hlYWx0aCArIE1hdGguZmxvb3Ioc2VsZi50b3RhbFN0cigpKSAqIDIwIFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0SGVhbHRoKClcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEhlYWx0aCgpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuaGVhbHRocmVnZW4gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVhbHRoUmVnZW5BdXJhID0gW3NlbGYuaW52ZW50b3J5LmdldEhlYWx0aFJlZ2VuQXVyYSwgc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0SGVhbHRoUmVnZW5BdXJhXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5leGNsdWRlTGlzdCk7XG4gICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt2YWx1ZTogMCwgZXhjbHVkZUxpc3Q6IFtdfSk7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLnN0YXR1c2hlYWx0aHJlZ2VuICsgc2VsZi50b3RhbFN0cigpICogLjAzIFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0SGVhbHRoUmVnZW4oKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEhlYWx0aFJlZ2VuKClcbiAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0SGVhbHRoUmVnZW4oKVxuICAgICAgICAgICAgICAgICsgaGVhbHRoUmVnZW5BdXJhLnZhbHVlXG4gICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYubWFuYSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLnN0YXR1c21hbmFcbiAgICAgICAgICAgICAgICArIHNlbGYudG90YWxJbnQoKSAqIDEyXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRNYW5hKClcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldE1hbmEoKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLm1hbmFyZWdlbiA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoKHNlbGYuaGVyb0RhdGEoKS5zdGF0dXNtYW5hcmVnZW4gXG4gICAgICAgICAgICAgICAgKyBzZWxmLnRvdGFsSW50KCkgKiAuMDQgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRNYW5hUmVnZW4oKSkgXG4gICAgICAgICAgICAgICAgKiAoMSArIHNlbGYuaW52ZW50b3J5LmdldE1hbmFSZWdlblBlcmNlbnQoKSkgXG4gICAgICAgICAgICAgICAgKyAoc2VsZi5oZXJvSWQoKSA9PT0gJ2NyeXN0YWxfbWFpZGVuJyA/IHNlbGYuYWJpbGl0eSgpLmdldE1hbmFSZWdlbkFyY2FuZUF1cmEoKSAqIDIgOiBzZWxmLmJ1ZmZzLmdldE1hbmFSZWdlbkFyY2FuZUF1cmEoKSlcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldE1hbmFSZWdlbkJsb29kc3RvbmUoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0TWFuYVJlZ2VuKClcbiAgICAgICAgICAgICAgICAtIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0TWFuYVJlZ2VuUmVkdWN0aW9uKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEFybW9yUGh5c2ljYWwgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJtb3JBdXJhID0gW3NlbGYuaW52ZW50b3J5LmdldEFybW9yQXVyYSwgc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0QXJtb3JBdXJhXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5hdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt2YWx1ZTowLCBhdHRyaWJ1dGVzOltdfSk7XG4gICAgICAgIHZhciBhcm1vclJlZHVjdGlvbiA9IFtzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldEFybW9yUmVkdWN0aW9uLCBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEFybW9yUmVkdWN0aW9uXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5leGNsdWRlTGlzdCk7XG4gICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt2YWx1ZTogMCwgZXhjbHVkZUxpc3Q6IFtdfSk7XG4gICAgICAgIHJldHVybiAoc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBcm1vckJhc2VSZWR1Y3Rpb24oKSAqIHNlbGYuZGVidWZmcy5nZXRBcm1vckJhc2VSZWR1Y3Rpb24oKSAqIChzZWxmLmhlcm9EYXRhKCkuYXJtb3JwaHlzaWNhbCArIHNlbGYudG90YWxBZ2koKSAqIC4xNClcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEFybW9yKClcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5pbnZlbnRvcnkuZ2V0QXJtb3JBdXJhKCkudmFsdWVcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRBcm1vclJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBcm1vcigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFybW9yUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0QXJtb3IoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0QXJtb3IoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEFybW9yUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0QXJtb3JBdXJhKCkudmFsdWVcbiAgICAgICAgICAgICAgICArIGFybW9yQXVyYS52YWx1ZVxuICAgICAgICAgICAgICAgICsgYXJtb3JSZWR1Y3Rpb24udmFsdWVcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5kZWJ1ZmZzLmdldEFybW9yUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEFybW9yUGh5c2ljYWxSZWR1Y3Rpb24gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBcm1vciA9IHNlbGYudG90YWxBcm1vclBoeXNpY2FsKCk7XG4gICAgICAgIGlmICh0b3RhbEFybW9yID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiAoKDAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAvICgxICsgMC4wNiAqIHNlbGYudG90YWxBcm1vclBoeXNpY2FsKCkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0oKDAuMDYgKiAtc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSkgLyAoMSArIDAuMDYgKiAtc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsTW92ZW1lbnRTcGVlZCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNSU5fTU9WRVNQRUVEID0gMTAwO1xuICAgICAgICB2YXIgbXMgPSAoc2VsZi5hYmlsaXR5KCkuc2V0TW92ZW1lbnRTcGVlZCgpID4gMCA/IHNlbGYuYWJpbGl0eSgpLnNldE1vdmVtZW50U3BlZWQoKSA6IHNlbGYuYnVmZnMuc2V0TW92ZW1lbnRTcGVlZCgpKTtcbiAgICAgICAgaWYgKG1zID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG1zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1vdmVtZW50U3BlZWRQZXJjZW50ID0gW3NlbGYuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRQZXJjZW50LCBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudF0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBmbikge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSwge3ZhbHVlOjAsIGV4Y2x1ZGVMaXN0OltdfSk7XG4gICAgICAgICAgICB2YXIgbW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24gPSBbc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbiwgc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbl0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBmbikge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSwge3ZhbHVlOjAsIGV4Y2x1ZGVMaXN0OltdfSk7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgc2VsZi5lbmVteSgpLmludmVudG9yeS5pc1NoZWVwZWQoKSB8fCBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmlzU2hlZXBlZCgpID8gMTQwIDpcbiAgICAgICAgICAgICAgICAoc2VsZi5oZXJvRGF0YSgpLm1vdmVtZW50c3BlZWQgKyBzZWxmLmludmVudG9yeS5nZXRNb3ZlbWVudFNwZWVkRmxhdCgpKyBzZWxmLmFiaWxpdHkoKS5nZXRNb3ZlbWVudFNwZWVkRmxhdCgpKSAqIFxuICAgICAgICAgICAgICAgICgxIC8vKyBzZWxmLmludmVudG9yeS5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudCgpIFxuICAgICAgICAgICAgICAgICAgICsgbW92ZW1lbnRTcGVlZFBlcmNlbnQudmFsdWVcbiAgICAgICAgICAgICAgICAgICArIG1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudCgpIFxuICAgICAgICAgICAgICAgICAgIC8vKyBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICsgc2VsZi51bml0KCkuYWJpbGl0eSgpLmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgLCBNSU5fTU9WRVNQRUVEKS50b0ZpeGVkKDIpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbFR1cm5SYXRlID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkubW92ZW1lbnR0dXJucmF0ZSBcbiAgICAgICAgICAgICAgICAqICgxICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRUdXJuUmF0ZVJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRUdXJuUmF0ZVJlZHVjdGlvbigpKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmJhc2VEYW1hZ2UgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSBzZWxmLnRvdGFsQXR0cmlidXRlKHNlbGYucHJpbWFyeUF0dHJpYnV0ZSgpKSxcbiAgICAgICAgICAgIGFiaWxpdHlCYXNlRGFtYWdlID0gc2VsZi5hYmlsaXR5KCkuZ2V0QmFzZURhbWFnZSgpLFxuICAgICAgICAgICAgbWluRGFtYWdlID0gc2VsZi5oZXJvRGF0YSgpLmF0dGFja2RhbWFnZW1pbixcbiAgICAgICAgICAgIG1heERhbWFnZSA9IHNlbGYuaGVyb0RhdGEoKS5hdHRhY2tkYW1hZ2VtYXg7XG4gICAgICAgIHJldHVybiBbTWF0aC5mbG9vcigobWluRGFtYWdlICsgdG90YWxBdHRyaWJ1dGUgKyBhYmlsaXR5QmFzZURhbWFnZS50b3RhbCkgKiBzZWxmLmFiaWxpdHkoKS5nZXRTZWxmQmFzZURhbWFnZVJlZHVjdGlvblBjdCgpICogc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmRlYnVmZnMuZ2V0QmFzZURhbWFnZVJlZHVjdGlvblBjdCgpICogc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBhYmlsaXR5QmFzZURhbWFnZS5tdWx0aXBsaWVyKSxcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKChtYXhEYW1hZ2UgKyB0b3RhbEF0dHJpYnV0ZSArIGFiaWxpdHlCYXNlRGFtYWdlLnRvdGFsKSAqIHNlbGYuYWJpbGl0eSgpLmdldFNlbGZCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSAqIHNlbGYuZGVidWZmcy5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSAqIGFiaWxpdHlCYXNlRGFtYWdlLm11bHRpcGxpZXIpXTtcbiAgICB9KTtcbiAgICBzZWxmLmJhc2VEYW1hZ2VBdmcgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5iYXNlRGFtYWdlKClbMV0pIC8gMjtcbiAgICB9KTtcbiAgICBzZWxmLmJhc2VEYW1hZ2VNaW4gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5iYXNlRGFtYWdlKClbMF07XG4gICAgfSk7XG4gICAgc2VsZi5iYXNlRGFtYWdlTWF4ID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuYmFzZURhbWFnZSgpWzFdO1xuICAgIH0pO1xuICAgIHNlbGYuYm9udXNEYW1hZ2UgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKChzZWxmLmludmVudG9yeS5nZXRCb251c0RhbWFnZSgpLnRvdGFsXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZSgpLnRvdGFsXG4gICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEJvbnVzRGFtYWdlKCkudG90YWxcbiAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoKHNlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5iYXNlRGFtYWdlKClbMV0pIC8gMiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogKHNlbGYuYnVmZnMuaXRlbUJ1ZmZzLmdldEJvbnVzRGFtYWdlUGVyY2VudChzZWxmLmludmVudG9yeS5nZXRCb251c0RhbWFnZVBlcmNlbnQoKSkudG90YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50KCkudG90YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZVBlcmNlbnQoKS50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICsgTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICAgICAgKHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlID09ICdET1RBX1VOSVRfQ0FQX1JBTkdFRF9BVFRBQ0snIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHNlbGYuaGVyb0lkKCkgPT0gJ2Ryb3dfcmFuZ2VyJykgPyBzZWxmLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZVByZWNpc2lvbkF1cmEoKS50b3RhbFswXSAqIHNlbGYudG90YWxBZ2koKSA6IHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhKCkudG90YWxbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKyBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgICAoKHNlbGYuaGVyb0lkKCkgPT0gJ3Jpa2knKSA/IHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlQmFja3N0YWIoKS50b3RhbFswXSAqIHNlbGYudG90YWxBZ2koKSA6IDApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSAqIHNlbGYuYWJpbGl0eSgpLmdldFNlbGZCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KClcbiAgICAgICAgICAgICAgICAgICogc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KClcbiAgICAgICAgICAgICAgICAgICogc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkpO1xuICAgIH0pO1xuICAgIHNlbGYuYm9udXNEYW1hZ2VSZWR1Y3Rpb24gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZVJlZHVjdGlvbigpICsgc2VsZi5kZWJ1ZmZzLmdldEJvbnVzRGFtYWdlUmVkdWN0aW9uKCkpO1xuICAgIH0pO1xuICAgIHNlbGYuZGFtYWdlQXZnID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmJhc2VEYW1hZ2UoKVswXSArIHNlbGYuYmFzZURhbWFnZSgpWzFdKSAvIDIgKyBzZWxmLmJvbnVzRGFtYWdlKCk7XG4gICAgfSk7XG4gICAgc2VsZi5kYW1hZ2VNaW4gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5iYXNlRGFtYWdlKClbMF0gKyBzZWxmLmJvbnVzRGFtYWdlKCk7XG4gICAgfSk7XG4gICAgc2VsZi5kYW1hZ2VNYXggPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5iYXNlRGFtYWdlKClbMV0gKyBzZWxmLmJvbnVzRGFtYWdlKCk7XG4gICAgfSk7XG4gICAgc2VsZi5kYW1hZ2UgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW3NlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5ib251c0RhbWFnZSgpLFxuICAgICAgICAgICAgICAgIHNlbGYuYmFzZURhbWFnZSgpWzFdICsgc2VsZi5ib251c0RhbWFnZSgpXTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMSAtIHNlbGYuaGVyb0RhdGEoKS5tYWdpY2FscmVzaXN0YW5jZSAvIDEwMCkgXG4gICAgICAgICAgICAgICAgKiBzZWxmLmludmVudG9yeS5nZXRNYWdpY1Jlc2lzdCgpXG4gICAgICAgICAgICAgICAgKiBzZWxmLmFiaWxpdHkoKS5nZXRNYWdpY1Jlc2lzdCgpXG4gICAgICAgICAgICAgICAgKiBzZWxmLmJ1ZmZzLmdldE1hZ2ljUmVzaXN0KClcbiAgICAgICAgICAgICAgICAqIHNlbGYuaW52ZW50b3J5LmdldE1hZ2ljUmVzaXN0UmVkdWN0aW9uU2VsZigpXG4gICAgICAgICAgICAgICAgKiBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldE1hZ2ljUmVzaXN0UmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICAqIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICogc2VsZi5kZWJ1ZmZzLmdldE1hZ2ljUmVzaXN0UmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICAqIHNlbGYuZGVidWZmcy5pdGVtQnVmZnMuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24oKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgoMSAtIHNlbGYudG90YWxNYWdpY1Jlc2lzdGFuY2VQcm9kdWN0KCkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuYmF0ID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFiaWxpdHlCQVQgPSBzZWxmLmFiaWxpdHkoKS5nZXRCQVQoKTtcbiAgICAgICAgaWYgKGFiaWxpdHlCQVQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYWJpbGl0eUJBVDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZi5oZXJvRGF0YSgpLmF0dGFja3JhdGU7XG4gICAgfSk7XG4gICAgc2VsZi5pYXMgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0YWNrU3BlZWQgPSBbc2VsZi5pbnZlbnRvcnkuZ2V0QXR0YWNrU3BlZWQsIHNlbGYuYnVmZnMuaXRlbUJ1ZmZzLmdldEF0dGFja1NwZWVkXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5leGNsdWRlTGlzdCk7XG4gICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt2YWx1ZTowLCBleGNsdWRlTGlzdDpbXX0pO1xuICAgICAgICB2YXIgYXR0YWNrU3BlZWRSZWR1Y3Rpb24gPSBbc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbiwgc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbl0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBmbikge1xuICAgICAgICAgICAgdmFyIG9iaiA9IGZuKG1lbW8uZXhjbHVkZUxpc3QpO1xuICAgICAgICAgICAgb2JqLnZhbHVlICs9IG1lbW8udmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LCB7dmFsdWU6MCwgZXhjbHVkZUxpc3Q6IFtdfSk7XG4gICAgICAgIHZhciB2YWwgPSBwYXJzZUZsb2F0KHNlbGYudG90YWxBZ2koKSkgXG4gICAgICAgICAgICAgICAgLy8rIHNlbGYuaW52ZW50b3J5LmdldEF0dGFja1NwZWVkKCkgXG4gICAgICAgICAgICAgICAgKyBhdHRhY2tTcGVlZC52YWx1ZVxuICAgICAgICAgICAgICAgICsgYXR0YWNrU3BlZWRSZWR1Y3Rpb24udmFsdWVcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0YWNrU3BlZWQoKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QXR0YWNrU3BlZWRSZWR1Y3Rpb24oKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0QXR0YWNrU3BlZWQoKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLnVuaXQoKS5hYmlsaXR5KCkuZ2V0QXR0YWNrU3BlZWQoKTsgXG4gICAgICAgIGlmICh2YWwgPCAtODApIHtcbiAgICAgICAgICAgIHJldHVybiAtODA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsID4gNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gNTAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWwudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmF0dGFja1RpbWUgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuYmF0KCkgLyAoMSArIHNlbGYuaWFzKCkgLyAxMDApKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuYXR0YWNrc1BlclNlY29uZCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoKDEgKyBzZWxmLmlhcygpIC8gMTAwKSAvIHNlbGYuYmF0KCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5ldmFzaW9uID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNlbGYuZW5lbXkoKS5pbnZlbnRvcnkuaXNTaGVlcGVkKCkgfHwgc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5pc1NoZWVwZWQoKSkgcmV0dXJuIDA7XG4gICAgICAgIHZhciBlID0gc2VsZi5hYmlsaXR5KCkuc2V0RXZhc2lvbigpO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIChlICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICgoMS0oc2VsZi5pbnZlbnRvcnkuZ2V0RXZhc2lvbigpICogc2VsZi5hYmlsaXR5KCkuZ2V0RXZhc2lvbigpICogc2VsZi5hYmlsaXR5KCkuZ2V0RXZhc2lvbkJhY2t0cmFjaygpICogc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0RXZhc2lvbigpKSkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLmVocFBoeXNpY2FsID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGV2YXNpb24gPSBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmlzU2hlZXBlZCgpIHx8IHNlbGYuZGVidWZmcy5pdGVtQnVmZnMuaXNTaGVlcGVkKCkgPyAxIDogc2VsZi5pbnZlbnRvcnkuZ2V0RXZhc2lvbigpICogc2VsZi5hYmlsaXR5KCkuZ2V0RXZhc2lvbigpICogc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0RXZhc2lvbigpO1xuICAgICAgICBpZiAoc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgZWhwID0gc2VsZi5oZWFsdGgoKSAqICgxICsgLjA2ICogc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZWhwID0gc2VsZi5oZWFsdGgoKSAqICgxIC0gLjA2ICogc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSkgLyAoMSAtIC4xMiAqIHNlbGYudG90YWxBcm1vclBoeXNpY2FsKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVocCAvPSAoMSAtICgxIC0gKGV2YXNpb24gKiBzZWxmLmFiaWxpdHkoKS5nZXRFdmFzaW9uQmFja3RyYWNrKCkpKSk7XG4gICAgICAgIGVocCAvPSAoMSAtIHBhcnNlRmxvYXQoc2VsZi5lbmVteSgpLm1pc3NDaGFuY2UoKSkgLyAxMDApO1xuICAgICAgICBlaHAgKj0gKHNlbGYuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zKCkuc29tZShmdW5jdGlvbiAoaXRlbSkge3JldHVybiBpdGVtLml0ZW0gPT0gJ21hc2tfb2ZfbWFkbmVzcyc7fSkgPyAoMSAvIDEuMykgOiAxKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5hYmlsaXR5KCkuZ2V0RGFtYWdlUmVkdWN0aW9uKCkpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmJ1ZmZzLmdldERhbWFnZVJlZHVjdGlvbigpKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXREYW1hZ2VBbXBsaWZpY2F0aW9uKCkpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmRlYnVmZnMuZ2V0RGFtYWdlQW1wbGlmaWNhdGlvbigpKTtcbiAgICAgICAgcmV0dXJuIGVocC50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuZWhwTWFnaWNhbCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlaHAgPSBzZWxmLmhlYWx0aCgpIC8gc2VsZi50b3RhbE1hZ2ljUmVzaXN0YW5jZVByb2R1Y3QoKTtcbiAgICAgICAgZWhwICo9IChzZWxmLmludmVudG9yeS5hY3RpdmVJdGVtcygpLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtyZXR1cm4gaXRlbS5pdGVtID09ICdtYXNrX29mX21hZG5lc3MnO30pID8gKDEgLyAxLjMpIDogMSk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuYWJpbGl0eSgpLmdldERhbWFnZVJlZHVjdGlvbigpKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5idWZmcy5nZXREYW1hZ2VSZWR1Y3Rpb24oKSk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuYWJpbGl0eSgpLmdldEV2YXNpb25CYWNrdHJhY2soKSk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0RGFtYWdlQW1wbGlmaWNhdGlvbigpKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5kZWJ1ZmZzLmdldERhbWFnZUFtcGxpZmljYXRpb24oKSk7XG4gICAgICAgIHJldHVybiBlaHAudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmJhc2ggPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0YWNrdHlwZSA9IHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlO1xuICAgICAgICByZXR1cm4gKCgxIC0gKHNlbGYuaW52ZW50b3J5LmdldEJhc2goYXR0YWNrdHlwZSkgKiBzZWxmLmFiaWxpdHkoKS5nZXRCYXNoKCkpKSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmNyaXRDaGFuY2UgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKCgxIC0gKHNlbGYuaW52ZW50b3J5LmdldENyaXRDaGFuY2UoKSAqIHNlbGYuYWJpbGl0eSgpLmdldENyaXRDaGFuY2UoKSkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuXG4gICAgbXkucHJvdG90eXBlLkhlcm9EYW1hZ2VNaXhpbihzZWxmKTtcbiAgICBcbiAgICAvKnNlbGYuY3JpdERhbWFnZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5jcml0SW5mbygpO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsqL1xuICAgIHNlbGYubWlzc0NoYW5jZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtaXNzRGVidWZmID0gW3NlbGYuZW5lbXkoKS5pbnZlbnRvcnkuZ2V0TWlzc0NoYW5jZSwgc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRNaXNzQ2hhbmNlXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5leGNsdWRlTGlzdCk7XG4gICAgICAgICAgICBvYmoudmFsdWUgKj0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt2YWx1ZToxLCBleGNsdWRlTGlzdDpbXX0pO1xuICAgICAgICByZXR1cm4gKCgxIC0gKHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0TWlzc0NoYW5jZSgpICogc2VsZi5kZWJ1ZmZzLmdldE1pc3NDaGFuY2UoKSAqIG1pc3NEZWJ1ZmYudmFsdWUpKSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsYXR0YWNrcmFuZ2UgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0YWNrdHlwZSA9IHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlO1xuICAgICAgICByZXR1cm4gc2VsZi5oZXJvRGF0YSgpLmF0dGFja3JhbmdlICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0YWNrUmFuZ2UoKSArIHNlbGYuaW52ZW50b3J5LmdldEF0dGFja1JhbmdlKGF0dGFja3R5cGUpLnZhbHVlO1xuICAgIH0pO1xuICAgIHNlbGYudmlzaW9ucmFuZ2VkYXkgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS52aXNpb25kYXl0aW1lcmFuZ2UpICogKDEgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldFZpc2lvblJhbmdlUGN0UmVkdWN0aW9uKCkgKyBzZWxmLmRlYnVmZnMuZ2V0VmlzaW9uUmFuZ2VQY3RSZWR1Y3Rpb24oKSk7XG4gICAgfSk7XG4gICAgc2VsZi52aXNpb25yYW5nZW5pZ2h0ID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkudmlzaW9ubmlnaHR0aW1lcmFuZ2UgKyBzZWxmLmludmVudG9yeS5nZXRWaXNpb25SYW5nZU5pZ2h0KCkgKyBzZWxmLmFiaWxpdHkoKS5nZXRWaXNpb25SYW5nZU5pZ2h0KCkpICogKDEgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldFZpc2lvblJhbmdlUGN0UmVkdWN0aW9uKCkgKyBzZWxmLmRlYnVmZnMuZ2V0VmlzaW9uUmFuZ2VQY3RSZWR1Y3Rpb24oKSk7XG4gICAgfSk7XG4gICAgc2VsZi5saWZlc3RlYWwgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWwgPSBzZWxmLmludmVudG9yeS5nZXRMaWZlc3RlYWwoKSArIHNlbGYuYWJpbGl0eSgpLmdldExpZmVzdGVhbCgpICsgc2VsZi5idWZmcy5nZXRMaWZlc3RlYWwoKTtcbiAgICAgICAgaWYgKHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlID09ICdET1RBX1VOSVRfQ0FQX01FTEVFX0FUVEFDSycpIHtcbiAgICAgICAgICAgIHZhciBsaWZlc3RlYWxBdXJhID0gW3NlbGYuaW52ZW50b3J5LmdldExpZmVzdGVhbEF1cmEsIHNlbGYuYnVmZnMuaXRlbUJ1ZmZzLmdldExpZmVzdGVhbEF1cmFdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZm4pIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5leGNsdWRlTGlzdCk7XG4gICAgICAgICAgICAgICAgb2JqLnZhbHVlICs9IG1lbW8udmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH0sIHt2YWx1ZTogMCwgZXhjbHVkZUxpc3Q6IFtdfSk7XG4gICAgICAgICAgICB0b3RhbCArPSBsaWZlc3RlYWxBdXJhLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodG90YWwpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5hZGRJbGx1c2lvbiA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICBzZWxmLmlsbHVzaW9ucy5wdXNoKGtvLm9ic2VydmFibGUobmV3IG15LnByb3RvdHlwZS5JbGx1c2lvblZpZXdNb2RlbCgwLCBzZWxmLCBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsKCkpKSk7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmRpZmZQcm9wZXJ0aWVzID0gbXkucHJvdG90eXBlLmRpZmZQcm9wZXJ0aWVzO1xuICAgIHNlbGYuZGlmZiA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmRpZmZQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGk7XG4gICAgICAgIHNlbGYuZGlmZltzZWxmLmRpZmZQcm9wZXJ0aWVzW2luZGV4XV0gPSBzZWxmLmdldERpZmZGdW5jdGlvbihzZWxmLmRpZmZQcm9wZXJ0aWVzW2luZGV4XSk7XG4gICAgfVxufTtcblxubXkucHJvdG90eXBlLkhlcm9Nb2RlbC5wcm90b3R5cGUuZ2V0RGlmZkZ1bmN0aW9uID0gZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByb3AgPT0gJ2Jhc2VEYW1hZ2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gW3NlbGZbcHJvcF0oKVswXSAtIHNlbGYuaGVyb0NvbXBhcmUoKVtwcm9wXSgpWzBdLCBzZWxmW3Byb3BdKClbMV0gLSBzZWxmLmhlcm9Db21wYXJlKClbcHJvcF0oKVsxXV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZltwcm9wXSgpIC0gc2VsZi5oZXJvQ29tcGFyZSgpW3Byb3BdKCk7XG4gICAgICAgIH1cbiAgICB9LCB0aGlzLCB7IGRlZmVyRXZhbHVhdGlvbjogdHJ1ZSB9KTtcbn1cblxubXkucHJvdG90eXBlLkhlcm9Nb2RlbC5wcm90b3R5cGUuZ2V0QWJpbGl0eUxldmVsTWF4ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5hYmlsaXR5dHlwZSgpID09PSAnRE9UQV9BQklMSVRZX1RZUEVfQVRUUklCVVRFUycpIHtcbiAgICAgICAgcmV0dXJuIDEwO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLm5hbWUoKSA9PT0gJ2ludm9rZXJfcXVhcycgfHwgZGF0YS5uYW1lKCkgPT09ICdpbnZva2VyX3dleCcgfHwgZGF0YS5uYW1lKCkgPT09ICdpbnZva2VyX2V4b3J0Jykge1xuICAgICAgICByZXR1cm4gNztcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YS5uYW1lKCkgPT09ICdpbnZva2VyX2ludm9rZScpIHtcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEubmFtZSgpID09PSAnZWFydGhfc3Bpcml0X3N0b25lX2NhbGxlcicgfHwgZGF0YS5uYW1lKCkgPT09ICdvZ3JlX21hZ2lfdW5yZWZpbmVkX2ZpcmVibGFzdCcpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEuYWJpbGl0eXR5cGUoKSA9PT0gJ0RPVEFfQUJJTElUWV9UWVBFX1VMVElNQVRFJyB8fCBkYXRhLm5hbWUoKSA9PT0gJ2tlZXBlcl9vZl90aGVfbGlnaHRfcmVjYWxsJyB8fFxuICAgICAgICAgICAgIGRhdGEubmFtZSgpID09PSAna2VlcGVyX29mX3RoZV9saWdodF9ibGluZGluZ19saWdodCcgfHwgZGF0YS5uYW1lKCkgPT09ICdlbWJlcl9zcGlyaXRfYWN0aXZhdGVfZmlyZV9yZW1uYW50JyB8fFxuICAgICAgICAgICAgIGRhdGEubmFtZSgpID09PSAnbG9uZV9kcnVpZF90cnVlX2Zvcm1fYmF0dGxlX2NyeScpIHtcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEubmFtZSgpID09PSAncHVja19ldGhlcmVhbF9qYXVudCcgIHx8IGRhdGEubmFtZSgpID09PSAnc2hhZG93X2RlbW9uX3NoYWRvd19wb2lzb25fcmVsZWFzZScgfHxcbiAgICAgICAgICAgICBkYXRhLm5hbWUoKSA9PT0gJ3RlbXBsYXJfYXNzYXNzaW5fdHJhcCcgfHwgZGF0YS5uYW1lKCkgPT09ICdzcGVjdHJlX3JlYWxpdHknKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLm5hbWUoKSA9PT0gJ2ludm9rZXJfY29sZF9zbmFwJyAgfHwgZGF0YS5uYW1lKCkgPT09ICdpbnZva2VyX2dob3N0X3dhbGsnIHx8IGRhdGEubmFtZSgpID09PSAnaW52b2tlcl90b3JuYWRvJyB8fCBcbiAgICAgICAgICAgICBkYXRhLm5hbWUoKSA9PT0gJ2ludm9rZXJfZW1wJyB8fCBkYXRhLm5hbWUoKSA9PT0gJ2ludm9rZXJfYWxhY3JpdHknIHx8IGRhdGEubmFtZSgpID09PSAnaW52b2tlcl9jaGFvc19tZXRlb3InIHx8IFxuICAgICAgICAgICAgIGRhdGEubmFtZSgpID09PSAnaW52b2tlcl9zdW5fc3RyaWtlJyB8fCBkYXRhLm5hbWUoKSA9PT0gJ2ludm9rZXJfZm9yZ2Vfc3Bpcml0JyB8fCBkYXRhLm5hbWUoKSA9PT0gJ2ludm9rZXJfaWNlX3dhbGwnIHx8IFxuICAgICAgICAgICAgIGRhdGEubmFtZSgpID09PSAnaW52b2tlcl9kZWFmZW5pbmdfYmxhc3QnKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLm5hbWUoKSA9PT0gJ3RlY2hpZXNfbWluZWZpZWxkX3NpZ24nIHx8IGRhdGEubmFtZSgpID09PSAndGVjaGllc19mb2N1c2VkX2RldG9uYXRlJykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGtvID0gcmVxdWlyZSgnLi9oZXJvY2FsY19rbm9ja291dCcpO1xuXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuQ2xvbmVPcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgZGlzcGxheW5hbWUsIGxldmVscywgaW1hZ2UsIGxldmVsKSB7XG4gICAgdGhpcy5oZXJvTmFtZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKGxldmVscyA+IDApID8gbmFtZSArIChsZXZlbCgpIDw9IGxldmVscyA/IGxldmVsKCkgOiAxKSA6IG5hbWU7XG4gICAgfSk7XG4gICAgdGhpcy5oZXJvRGlzcGxheU5hbWUgPSBkaXNwbGF5bmFtZTtcbiAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgdGhpcy5sZXZlbHMgPSBsZXZlbHM7XG59O1xuXG5teS5wcm90b3R5cGUuQ2xvbmVWaWV3TW9kZWwgPSBmdW5jdGlvbiAoaCxwKSB7XG4gICAgdmFyIHNlbGYgPSBuZXcgbXkucHJvdG90eXBlLkhlcm9Nb2RlbChoKTtcbiAgICBzZWxmLnBhcmVudCA9IHA7XG4gICAgLypzZWxmLnNlbGVjdGVkSGVybyhteS5wcm90b3R5cGUuZmluZFdoZXJlKHNlbGYuYXZhaWxhYmxlSGVyb2VzKCksIHtoZXJvTmFtZTogJ21lZXBvJ30pKTtcbiAgICBzZWxmLmhlcm8gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGtvLndyYXAuZnJvbUpTKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19tZWVwbyddKTtcbiAgICB9KTsqL1xuICAgIHJldHVybiBzZWxmO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5EYW1hZ2VUeXBlQ29sb3IgPSB7XG4gICAgJ3BoeXNpY2FsJzogJyM5NzlhYTInLFxuICAgICdwdXJlJzogJ2dvbGRlbnJvZCcsXG4gICAgJ21hZ2ljJzogJyM0MjhiY2EnLFxuICAgICdkZWZhdWx0JzogJyM5NzlhYTInXG59XG5cbm15LnByb3RvdHlwZS5IZXJvRGFtYWdlTWl4aW4gPSBmdW5jdGlvbiAoc2VsZikge1xuICAgIHNlbGYuY3JpdEluZm8gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3JpdFNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRDcml0U291cmNlKCk7XG4gICAgICAgIG15LnByb3RvdHlwZS5leHRlbmQoY3JpdFNvdXJjZXMsIHNlbGYuYWJpbGl0eSgpLmdldENyaXRTb3VyY2UoKSk7XG4gICAgICAgIG15LnByb3RvdHlwZS5leHRlbmQoY3JpdFNvdXJjZXMsIHNlbGYuYnVmZnMuZ2V0Q3JpdFNvdXJjZSgpKTtcbiAgICAgICAgdmFyIGNyaXRTb3VyY2VzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjcml0U291cmNlcykge1xuICAgICAgICAgICAgdmFyIGVsID0gY3JpdFNvdXJjZXNbcHJvcF07XG4gICAgICAgICAgICBlbC5uYW1lID0gcHJvcFxuICAgICAgICAgICAgY3JpdFNvdXJjZXNBcnJheS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlNdWx0aXBsaWVyKGEsYikge1xuICAgICAgICAgICAgaWYgKGEubXVsdGlwbGllciA8IGIubXVsdGlwbGllcilcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLm11bHRpcGxpZXIgPiBiLm11bHRpcGxpZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBjcml0U291cmNlc0FycmF5LnNvcnQoY29tcGFyZUJ5TXVsdGlwbGllcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIHZhciBjcml0VG90YWwgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNyaXRTb3VyY2VzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDxjcml0U291cmNlc0FycmF5W2pdLmNvdW50OyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgKj0gKDEgLSBjcml0U291cmNlc0FycmF5W2pdLmNoYW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRvdGFsMiA9IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNyaXRTb3VyY2VzQXJyYXlbaV0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgIHRvdGFsMiAqPSAoMSAtIGNyaXRTb3VyY2VzQXJyYXlbaV0uY2hhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvdGFsICo9ICgxIC0gdG90YWwyKTtcbiAgICAgICAgICAgIGNyaXRUb3RhbCArPSB0b3RhbDtcbiAgICAgICAgICAgIGlmIChjcml0U291cmNlc0FycmF5W2ldLmNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOmNyaXRTb3VyY2VzQXJyYXlbaV0uZGlzcGxheW5hbWUgKyAnIHgnICsgY3JpdFNvdXJjZXNBcnJheVtpXS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzpjcml0U291cmNlc0FycmF5W2ldLm11bHRpcGxpZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb3VudCc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ2hhbmNlJzp0b3RhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAnbmFtZSc6Y3JpdFNvdXJjZXNBcnJheVtpXS5kaXNwbGF5bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzpjcml0U291cmNlc0FycmF5W2ldLm11bHRpcGxpZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb3VudCc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ2hhbmNlJzp0b3RhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHJlc3VsdCwgdG90YWw6IGNyaXRUb3RhbCB9O1xuICAgIH0pO1xuXG4gICAgc2VsZi5jbGVhdmVJbmZvID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsZWF2ZVNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRDbGVhdmVTb3VyY2UoKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmV4dGVuZChjbGVhdmVTb3VyY2VzLCBzZWxmLmFiaWxpdHkoKS5nZXRDbGVhdmVTb3VyY2UoKSk7XG4gICAgICAgIG15LnByb3RvdHlwZS5leHRlbmQoY2xlYXZlU291cmNlcywgc2VsZi5idWZmcy5nZXRDbGVhdmVTb3VyY2UoKSk7XG4gICAgICAgIHZhciBjbGVhdmVTb3VyY2VzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjbGVhdmVTb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBjbGVhdmVTb3VyY2VzW3Byb3BdO1xuICAgICAgICAgICAgZWwubmFtZSA9IHByb3BcbiAgICAgICAgICAgIGNsZWF2ZVNvdXJjZXNBcnJheS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlSYWRpdXMoYSxiKSB7XG4gICAgICAgICAgICBpZiAoYS5yYWRpdXMgPCBiLnJhZGl1cylcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLnJhZGl1cyA+IGIucmFkaXVzKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXZlU291cmNlc0FycmF5LnNvcnQoY29tcGFyZUJ5UmFkaXVzKTtcbiAgICAgICAgdmFyIGNsZWF2ZVNvdXJjZXNCeVJhZGl1cyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsZWF2ZVNvdXJjZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDxjbGVhdmVTb3VyY2VzQXJyYXkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xlYXZlU291cmNlc0FycmF5W2pdLnJhZGl1cyA+PSBjbGVhdmVTb3VyY2VzQXJyYXlbaV0ucmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IGNsZWF2ZVNvdXJjZXNBcnJheVtqXS5tYWduaXR1ZGUgKiBjbGVhdmVTb3VyY2VzQXJyYXlbal0uY291bnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYXZlU291cmNlc0J5UmFkaXVzW2NsZWF2ZVNvdXJjZXNBcnJheVtpXS5yYWRpdXNdID0gdG90YWw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGNsZWF2ZVNvdXJjZXNCeVJhZGl1cykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICdyYWRpdXMnOnByb3AsXG4gICAgICAgICAgICAgICAgJ21hZ25pdHVkZSc6Y2xlYXZlU291cmNlc0J5UmFkaXVzW3Byb3BdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuYmFzaEluZm8gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0YWNrdHlwZSA9IHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlO1xuICAgICAgICB2YXIgYmFzaFNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRCYXNoU291cmNlKGF0dGFja3R5cGUpO1xuICAgICAgICBteS5wcm90b3R5cGUuZXh0ZW5kKGJhc2hTb3VyY2VzLCBzZWxmLmFiaWxpdHkoKS5nZXRCYXNoU291cmNlKCkpO1xuICAgICAgICB2YXIgYmFzaFNvdXJjZXNBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGJhc2hTb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBiYXNoU291cmNlc1twcm9wXTtcbiAgICAgICAgICAgIGVsLm5hbWUgPSBwcm9wXG4gICAgICAgICAgICBiYXNoU291cmNlc0FycmF5LnB1c2goZWwpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVCeUR1cmF0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChhLmR1cmF0aW9uIDwgYi5kdXJhdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLmR1cmF0aW9uID4gYi5kdXJhdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vYmFzaFNvdXJjZXNBcnJheS5zb3J0KGNvbXBhcmVCeUR1cmF0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIGJhc2hUb3RhbCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwO2kgPCBiYXNoU291cmNlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdG90YWwgPSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGJhc2hTb3VyY2VzQXJyYXlbal0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCAqPSAoMSAtIGJhc2hTb3VyY2VzQXJyYXlbal0uY2hhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG90YWwyID0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYmFzaFNvdXJjZXNBcnJheVtpXS5jb3VudDsgaysrKSB7XG4gICAgICAgICAgICAgICAgdG90YWwyICo9ICgxIC0gYmFzaFNvdXJjZXNBcnJheVtpXS5jaGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWwgKj0gKDEgLSB0b3RhbDIpO1xuICAgICAgICAgICAgYmFzaFRvdGFsICs9IHRvdGFsO1xuICAgICAgICAgICAgaWYgKGJhc2hTb3VyY2VzQXJyYXlbaV0ubmFtZSA9PT0gJ3NwaXJpdF9icmVha2VyX2dyZWF0ZXJfYmFzaCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IGJhc2hTb3VyY2VzQXJyYXlbaV0uZGFtYWdlICogc2VsZi50b3RhbE1vdmVtZW50U3BlZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYmFzaFNvdXJjZXNBcnJheVtpXS5kYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmFzaFNvdXJjZXNBcnJheVtpXS5jb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICduYW1lJzpiYXNoU291cmNlc0FycmF5W2ldLmRpc3BsYXluYW1lLCAvLyArICcgeCcgKyBiYXNoU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzpiYXNoU291cmNlc0FycmF5W2ldLmNoYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6ZCxcbiAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzpiYXNoU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6YmFzaFNvdXJjZXNBcnJheVtpXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAndG90YWxDaGFuY2UnOnRvdGFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICduYW1lJzpiYXNoU291cmNlc0FycmF5W2ldLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzpiYXNoU291cmNlc0FycmF5W2ldLmNoYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6ZCxcbiAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzpiYXNoU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6YmFzaFNvdXJjZXNBcnJheVtpXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAndG90YWxDaGFuY2UnOnRvdGFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzb3VyY2VzOiByZXN1bHQsIHRvdGFsOiBiYXNoVG90YWwgfTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLm9yYlByb2NJbmZvID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGF0dGFja3R5cGUgPSBzZWxmLmhlcm9EYXRhKCkuYXR0YWNrdHlwZTtcbiAgICAgICAgdmFyIGRhbWFnZVNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRPcmJQcm9jU291cmNlKCk7XG4gICAgICAgIHZhciBkYW1hZ2VTb3VyY2VzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkYW1hZ2VTb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBkYW1hZ2VTb3VyY2VzW3Byb3BdO1xuICAgICAgICAgICAgZWwubmFtZSA9IHByb3BcbiAgICAgICAgICAgIGRhbWFnZVNvdXJjZXNBcnJheS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlEYW1hZ2UoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEucHJpb3JpdHkgPiBiLnByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS5wcmlvcml0eSA8IGIucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS5kYW1hZ2UgPCBiLmRhbWFnZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLmRhbWFnZSA+IGIuZGFtYWdlKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZGFtYWdlU291cmNlc0FycmF5LnNvcnQoY29tcGFyZUJ5RGFtYWdlKTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIGRhbWFnZVRvdGFsID0gMDtcbiAgICAgICAgZm9yICh2YXIgaT0wIDsgaSA8IGRhbWFnZVNvdXJjZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkYW1hZ2VTb3VyY2VzQXJyYXlbal0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCAqPSAoMSAtIGRhbWFnZVNvdXJjZXNBcnJheVtqXS5jaGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0b3RhbDIgPSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgIHRvdGFsMiAqPSAoMSAtIGRhbWFnZVNvdXJjZXNBcnJheVtpXS5jaGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWwgKj0gKDEgLSB0b3RhbDIpO1xuICAgICAgICAgICAgZGFtYWdlVG90YWwgKz0gdG90YWw7XG4gICAgICAgICAgICBpZiAoZGFtYWdlU291cmNlc0FycmF5W2ldLmNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5kaXNwbGF5bmFtZSArICcgeCcgKyBkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uY291bnQsXG4gICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5kYW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgICdjb3VudCc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICd0b3RhbENoYW5jZSc6dG90YWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5kaXNwbGF5bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmNoYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmRhbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzpkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uY291bnQsXG4gICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzpkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uZGFtYWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ2hhbmNlJzp0b3RhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHJlc3VsdCwgdG90YWw6IGRhbWFnZVRvdGFsIH07XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRSZWR1Y2VkRGFtYWdlID0gZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdwaHlzaWNhbCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUgKiAoMSAtICgwLjA2ICogc2VsZi5lbmVteSgpLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAvICgxICsgMC4wNiAqIE1hdGguYWJzKHNlbGYuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWwoKSkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWFnaWMnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlICogKDEgLSBzZWxmLmVuZW15KCkudG90YWxNYWdpY1Jlc2lzdGFuY2UoKSAvIDEwMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3B1cmUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21wb3NpdGUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlICogKDEgLSAoMC4wNiAqIHNlbGYuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWwoKSkgLyAoMSArIDAuMDYgKiBNYXRoLmFicyhzZWxmLmVuZW15KCkudG90YWxBcm1vclBoeXNpY2FsKCkpKSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICo9ICgxIC0gc2VsZi5lbmVteSgpLnRvdGFsTWFnaWNSZXNpc3RhbmNlKCkgLyAxMDApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICo9IHNlbGYuYWJpbGl0eSgpLmdldERhbWFnZUFtcGxpZmljYXRpb24oKSAqIHNlbGYuZGVidWZmcy5nZXREYW1hZ2VBbXBsaWZpY2F0aW9uKCk7XG4gICAgICAgIHJlc3VsdCAqPSBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldERhbWFnZVJlZHVjdGlvbigpICogc2VsZi5lbmVteSgpLmJ1ZmZzLmdldERhbWFnZVJlZHVjdGlvbigpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcbiAgICBzZWxmLmRhbWFnZVRvdGFsSW5mbyA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBib251c0RhbWFnZUFycmF5ID0gW1xuICAgICAgICAgICAgc2VsZi5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2UoKS5zb3VyY2VzLFxuICAgICAgICAgICAgc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZSgpLnNvdXJjZXNcbiAgICAgICAgXSxcbiAgICAgICAgYm9udXNEYW1hZ2VQY3RBcnJheSA9IFtcbiAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnNvdXJjZXMsXG4gICAgICAgICAgICBzZWxmLmJ1ZmZzLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnNvdXJjZXNcbiAgICAgICAgXSxcbiAgICAgICAgaXRlbUJvbnVzRGFtYWdlID0gc2VsZi5pbnZlbnRvcnkuZ2V0Qm9udXNEYW1hZ2UoKS5zb3VyY2VzLFxuICAgICAgICBpdGVtQm9udXNEYW1hZ2VQY3QgPSBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRCb251c0RhbWFnZVBlcmNlbnQoc2VsZi5pbnZlbnRvcnkuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50KCkpLnNvdXJjZXMsXG4gICAgICAgIGNyaXRTb3VyY2VzID0gc2VsZi5jcml0SW5mbygpLFxuICAgICAgICBhYmlsaXR5T3JiU291cmNlcyA9IHNlbGYuYWJpbGl0eSgpLmdldE9yYlNvdXJjZSgpLFxuICAgICAgICBpdGVtT3JiU291cmNlcyA9IHNlbGYuaW52ZW50b3J5LmdldE9yYlNvdXJjZSgpLFxuICAgICAgICBpdGVtUHJvY09yYlNvdXJjZXMgPSBzZWxmLm9yYlByb2NJbmZvKCksXG4gICAgICAgIGJhc2hTb3VyY2VzID0gc2VsZi5iYXNoSW5mbygpLFxuICAgICAgICBcbiAgICAgICAgYXR0YWNrU291cmNlcyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgYXR0YWNrU291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6ICdCYXNlIEF0dGFjaycsXG4gICAgICAgICAgICBjb29sZG93bjogMVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIHdlYXZlcl9nZW1pbmF0ZV9hdHRhY2tcbiAgICAgICAgaWYgKHNlbGYuaGVyb0lkKCkgPT09ICd3ZWF2ZXInKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpLmZpbmQoZnVuY3Rpb24gKGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eS5uYW1lKCkgPT09ICd3ZWF2ZXJfZ2VtaW5hdGVfYXR0YWNrJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoYS5sZXZlbCgpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2QgPSBhLmNvb2xkb3duKClbYS5sZXZlbCgpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGF0dGFja1NvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBhLmRpc3BsYXluYW1lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29sZG93bjogKDEvY2QpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gZWNob19zYWJyZVxuICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaW52ZW50b3J5Lml0ZW1zKCkuZmluZChmdW5jdGlvbiAobykgeyByZXR1cm4gby5pdGVtID09PSBcImVjaG9fc2FicmVcIiAmJiBvLmVuYWJsZWQoKTsgfSk7XG4gICAgICAgIGlmIChpdGVtICYmIHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlID09PSAnRE9UQV9VTklUX0NBUF9NRUxFRV9BVFRBQ0snKSB7XG4gICAgICAgICAgICB2YXIgaXRlbV9lY2hvX3NhYnJlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtX2VjaG9fc2FicmUnXTtcbiAgICAgICAgICAgIGF0dGFja1NvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogaXRlbV9lY2hvX3NhYnJlLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgIGNvb2xkb3duOiAoMS9pdGVtX2VjaG9fc2FicmUuY29vbGRvd24pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhdHRhY2tzID0gYXR0YWNrU291cmNlcy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHZhciBiYXNlRGFtYWdlID0gKHNlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5iYXNlRGFtYWdlKClbMV0pIC8gMixcbiAgICAgICAgICAgIHRvdGFsRGFtYWdlID0gMCxcbiAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgPSAwLFxuICAgICAgICAgICAgdG90YWxDcml0ID0gMCxcbiAgICAgICAgICAgIGdlbWluYXRlQXR0YWNrID0geyBkYW1hZ2U6IDAsIGRhbWFnZVJlZHVjZWQ6IDAsIGNvb2xkb3duOiA2LCBhY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICBlY2hvU2FicmVBdHRhY2sgPSB7IGRhbWFnZTogMCwgZGFtYWdlUmVkdWNlZDogMCwgY29vbGRvd246IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV9lY2hvX3NhYnJlJ10uY29vbGRvd25bMF0sIGFjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIGRhbWFnZSA9IHtcbiAgICAgICAgICAgICAgICBwdXJlOiAwLFxuICAgICAgICAgICAgICAgIHBoeXNpY2FsOiAwLFxuICAgICAgICAgICAgICAgIG1hZ2ljOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgICBjcml0cyA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBiYXNlIGRhbWFnZVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdCYXNlIERhbWFnZScsXG4gICAgICAgICAgICAgICAgZGFtYWdlOiBiYXNlRGFtYWdlLFxuICAgICAgICAgICAgICAgIGRhbWFnZVR5cGU6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGJhc2VEYW1hZ2UsICdwaHlzaWNhbCcpLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG90YWxEYW1hZ2UgKz0gYmFzZURhbWFnZTtcbiAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gYmFzZURhbWFnZTtcbiAgICAgICAgICAgIGRhbWFnZS5waHlzaWNhbCArPSBiYXNlRGFtYWdlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBib251cyBkYW1hZ2UgZnJvbSBpdGVtc1xuICAgICAgICAgICAgZm9yIChpIGluIGl0ZW1Cb251c0RhbWFnZSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gaXRlbUJvbnVzRGFtYWdlW2ldLmRhbWFnZSppdGVtQm9udXNEYW1hZ2VbaV0uY291bnQgKiBzZWxmLmFiaWxpdHkoKS5nZXRTZWxmQmFzZURhbWFnZVJlZHVjdGlvblBjdCgpICogc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1Cb251c0RhbWFnZVtpXS5kaXNwbGF5bmFtZSArIChpdGVtQm9udXNEYW1hZ2VbaV0uY291bnQgPiAxID8gJyB4JyArIGl0ZW1Cb251c0RhbWFnZVtpXS5jb3VudCA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlOiBpdGVtQm9udXNEYW1hZ2VbaV0uZGFtYWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGl0ZW1Cb251c0RhbWFnZVtpXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgdG90YWxDcml0YWJsZURhbWFnZSArPSBkO1xuICAgICAgICAgICAgICAgIGRhbWFnZVtpdGVtQm9udXNEYW1hZ2VbaV0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYm9udXMgZGFtYWdlIHBlcmNlbnQgZnJvbSBpdGVtc1xuICAgICAgICAgICAgZm9yIChpIGluIGl0ZW1Cb251c0RhbWFnZVBjdCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYmFzZURhbWFnZSAqIGl0ZW1Cb251c0RhbWFnZVBjdFtpXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtQm9udXNEYW1hZ2VQY3RbaV0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogZCxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogaXRlbUJvbnVzRGFtYWdlUGN0W2ldLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCBpdGVtQm9udXNEYW1hZ2VQY3RbaV0uZGFtYWdlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0b3RhbERhbWFnZSArPSBkO1xuICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICBkYW1hZ2VbaXRlbUJvbnVzRGFtYWdlUGN0W2ldLmRhbWFnZVR5cGVdICs9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJvbnVzIGRhbWFnZSBmcm9tIGFiaWxpdGllcyBhbmQgYnVmZnNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9udXNEYW1hZ2VBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAoaiBpbiBib251c0RhbWFnZUFycmF5W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gYm9udXNEYW1hZ2VBcnJheVtpXVtqXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJvbnVzRGFtYWdlQXJyYXlbaV1bal0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlOiBib251c0RhbWFnZUFycmF5W2ldW2pdLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VSZWR1Y2VkOiBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZCwgYm9udXNEYW1hZ2VBcnJheVtpXVtqXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlW2JvbnVzRGFtYWdlQXJyYXlbaV1bal0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJvbnVzIGRhbWFnZSBwZXJjZW50IGZyb20gYWJpbGl0aWVzIGFuZCBidWZmc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib251c0RhbWFnZVBjdEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqIGluIGJvbnVzRGFtYWdlUGN0QXJyYXlbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBiYXNlRGFtYWdlICogYm9udXNEYW1hZ2VQY3RBcnJheVtpXVtqXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJvbnVzRGFtYWdlUGN0QXJyYXlbaV1bal0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlOiBib251c0RhbWFnZVBjdEFycmF5W2ldW2pdLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VSZWR1Y2VkOiBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZCwgYm9udXNEYW1hZ2VQY3RBcnJheVtpXVtqXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlW2JvbnVzRGFtYWdlUGN0QXJyYXlbaV1bal0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkcm93X3Jhbmdlcl90cnVlc2hvdFxuICAgICAgICAgICAgaWYgKHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlID09PSAnRE9UQV9VTklUX0NBUF9SQU5HRURfQVRUQUNLJykge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAnZHJvd19yYW5nZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gc2VsZi5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhKCkuc291cmNlcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZVByZWNpc2lvbkF1cmEoKS5zb3VyY2VzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc1tpbmRleF0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAnZHJvd19yYW5nZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHNbaW5kZXhdLmRhbWFnZSAqIHNlbGYudG90YWxBZ2koKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gc1tpbmRleF0uZGFtYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNbaW5kZXhdLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCAncGh5c2ljYWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlLnBoeXNpY2FsICs9IGQ7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJpa2lfYmFja3N0YWJcbiAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAncmlraScpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlQmFja3N0YWIoKS5zb3VyY2VzO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2VCYWNrc3RhYigpLnNvdXJjZXM7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzW2luZGV4XSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5oZXJvSWQoKSA9PT0gJ3Jpa2knKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gc1tpbmRleF0uZGFtYWdlICogc2VsZi50b3RhbEFnaSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBzW2luZGV4XS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogc1tpbmRleF0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogZCxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsICdwaHlzaWNhbCcpLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG90YWxEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAvL3RvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICBkYW1hZ2UucGh5c2ljYWwgKz0gZDsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYXNoIGRhbWFnZVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYXNoU291cmNlcy5zb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBiYXNoU291cmNlcy5zb3VyY2VzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkID0gYmFzaFNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgdmFyIGNkID0gc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCk7XG4gICAgICAgICAgICAgICAgaWYgKG8uY29vbGRvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2QgPSBNYXRoLm1heCgxL28uY29vbGRvd24sIGNkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiYXNoU291cmNlcy5zb3VyY2VzW2ldLmNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYmFzaFNvdXJjZXMuc291cmNlc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogYmFzaFNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uZGFtYWdlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkcHM6IGQgKiBjZCAqIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uY2hhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHBzUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uZGFtYWdlVHlwZSkgKiBjZCAqIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uY2hhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlW2Jhc2hTb3VyY2VzLnNvdXJjZXNbaV0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gJS1iYXNlZCBvcmJzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2UgKiAoMSAtIE1hdGgucG93KDEgLSBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5jaGFuY2UsIGl0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzW2ldLmNvdW50KSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVR5cGU6IGl0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzW2ldLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgZGFtYWdlW2l0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzW2ldLmRhbWFnZVR5cGVdICs9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFiaWxpdHkgb3Jic1xuICAgICAgICAgICAgZm9yICh2YXIgb3JiIGluIGFiaWxpdHlPcmJTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBhYmlsaXR5T3JiU291cmNlc1tvcmJdLmRhbWFnZSAqICgxIC0gaXRlbVByb2NPcmJTb3VyY2VzLnRvdGFsKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGFiaWxpdHlPcmJTb3VyY2VzW29yYl0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogZCxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogYWJpbGl0eU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VSZWR1Y2VkOiBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZCwgYWJpbGl0eU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgZGFtYWdlW2FiaWxpdHlPcmJTb3VyY2VzW29yYl0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gaXRlbSBvcmJzXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoYWJpbGl0eU9yYlNvdXJjZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG9yYiBpbiBpdGVtT3JiU291cmNlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGl0ZW1PcmJTb3VyY2VzW29yYl0uZGFtYWdlICogKDEgLSBpdGVtUHJvY09yYlNvdXJjZXMudG90YWwpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtT3JiU291cmNlc1tvcmJdLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogaXRlbU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGl0ZW1PcmJTb3VyY2VzW29yYl0uZGFtYWdlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0b3RhbERhbWFnZSArPSBkO1xuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VbaXRlbU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlXSArPSBkO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gY3JpdCBkYW1hZ2VcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3JpdFNvdXJjZXMuc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gdG90YWxDcml0YWJsZURhbWFnZSAqIChjcml0U291cmNlcy5zb3VyY2VzW2ldLm11bHRpcGxpZXIgLSAxKTsvLyAqIGNyaXRTb3VyY2VzLnNvdXJjZXNbaV0udG90YWxDaGFuY2U7XG4gICAgICAgICAgICAgICAgY3JpdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGNyaXRTb3VyY2VzLnNvdXJjZXNbaV0ubmFtZSArICcsICcgKyBjcml0U291cmNlcy5zb3VyY2VzW2ldLm11bHRpcGxpZXIgKyAneCwgJyArIChjcml0U291cmNlcy5zb3VyY2VzW2ldLnRvdGFsQ2hhbmNlICogMTAwKS50b0ZpeGVkKDEpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVR5cGU6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCAncGh5c2ljYWwnKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmNlOiBjcml0U291cmNlcy5zb3VyY2VzW2ldLnRvdGFsQ2hhbmNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG90YWxDcml0ICs9IGQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0b3RhbFJlZHVjZWQgPSBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZGFtYWdlLnB1cmUsICdwdXJlJykgXG4gICAgICAgICAgICAgICAgICAgICsgc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGRhbWFnZS5waHlzaWNhbCwgJ3BoeXNpY2FsJylcbiAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZGFtYWdlLm1hZ2ljLCAnbWFnaWMnKSxcbiAgICAgICAgICAgICAgICB0b3RhbENyaXRSZWR1Y2VkID0gc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKHRvdGFsQ3JpdCwgJ3BoeXNpY2FsJyksXG4gICAgICAgICAgICAgICAgZHBzID0ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiB0b3RhbERhbWFnZSAqIHNlbGYuYXR0YWNrc1BlclNlY29uZCgpLFxuICAgICAgICAgICAgICAgICAgICBjcml0OiB0b3RhbENyaXQgKiBzZWxmLmF0dGFja3NQZXJTZWNvbmQoKSxcbiAgICAgICAgICAgICAgICAgICAgZ2VtaW5hdGVBdHRhY2s6IGdlbWluYXRlQXR0YWNrLmFjdGl2ZSA/IGdlbWluYXRlQXR0YWNrLmRhbWFnZSAvIGdlbWluYXRlQXR0YWNrLmNvb2xkb3duIDogMCxcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogdG90YWxSZWR1Y2VkICogc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjcml0OiB0b3RhbENyaXRSZWR1Y2VkICogc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW1pbmF0ZUF0dGFjazogZ2VtaW5hdGVBdHRhY2suYWN0aXZlID8gc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGdlbWluYXRlQXR0YWNrLmRhbWFnZSwgJ3BoeXNpY2FsJykgLyBnZW1pbmF0ZUF0dGFjay5jb29sZG93biA6IDAsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjcml0cy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvLmRwcykge1xuICAgICAgICAgICAgICAgICAgICBvLmRwcyA9IG8uZGFtYWdlICogKG8uY29vbGRvd24gfHwgc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCkpICogby5jaGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghby5kcHNSZWR1Y2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uZHBzUmVkdWNlZCA9IG8uZGFtYWdlUmVkdWNlZCAqIChvLmNvb2xkb3duIHx8IHNlbGYuYXR0YWNrc1BlclNlY29uZCgpKSAqIG8uY2hhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8uZHBzKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uZHBzID0gby5kYW1hZ2UgKiAoby5jb29sZG93biB8fCBzZWxmLmF0dGFja3NQZXJTZWNvbmQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghby5kcHNSZWR1Y2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uZHBzUmVkdWNlZCA9IG8uZGFtYWdlUmVkdWNlZCAqIChvLmNvb2xkb3duIHx8IHNlbGYuYXR0YWNrc1BlclNlY29uZCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHRvdGFsQ3JpdENoYW5jZSA9IGNyaXRzLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uY2hhbmNlIH0sIDApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHQxQ3JpdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNyaXRzLmZpbmQoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8uZW5hYmxlZCgpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IGMuZGFtYWdlIDogMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHQyQ3JpdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNyaXRzLmZpbmQoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8uZW5hYmxlZCgpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IGMuZGFtYWdlUmVkdWNlZCA6IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB0M0NyaXQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyaXRzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uZHBzIH0sIDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdDRDcml0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcml0cy5maWx0ZXIoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8uZW5hYmxlZCgpOyB9KS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIG8pIHsgcmV0dXJuIG1lbW8gKyBvLmRwc1JlZHVjZWQgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0MSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uZGFtYWdlIH0sIDApICsgdDFDcml0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB0MiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uZGFtYWdlUmVkdWNlZCB9LCAwKSArIHQyQ3JpdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdDMgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLmVuYWJsZWQoKTsgfSkucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgby5kcHMgfSwgMCkgKyB0M0NyaXQoKSkgKiBhLmNvb2xkb3duO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdDQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLmVuYWJsZWQoKTsgfSkucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgby5kcHNSZWR1Y2VkIH0sIDApICsgdDRDcml0KCkpICogYS5jb29sZG93bjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdG90YWxDcml0Um93ID0gW3QxQ3JpdCwgdDJDcml0LCB0M0NyaXQsIHQ0Q3JpdF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0b3RhbFJvdyA9IFt0MSwgdDIsIHQzLCB0NF07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogYS5uYW1lICsgJyBTdWJ0b3RhbCcsXG4gICAgICAgICAgICAgICAgY29vbGRvd246IGEuY29vbGRvd24sXG4gICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBrby5vYnNlcnZhYmxlKHRydWUpLFxuICAgICAgICAgICAgICAgIHRvdGFsQ3JpdENoYW5jZTogdG90YWxDcml0Q2hhbmNlLFxuICAgICAgICAgICAgICAgIHRvdGFsQ3JpdFJvdzogdG90YWxDcml0Um93LFxuICAgICAgICAgICAgICAgIHRvdGFsUm93OiB0b3RhbFJvdyxcbiAgICAgICAgICAgICAgICBzb3VyY2VzOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgc291cmNlc0NyaXQ6IGNyaXRzLFxuICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbERhbWFnZSxcbiAgICAgICAgICAgICAgICB0b3RhbENyaXQ6IHRvdGFsQ3JpdCxcbiAgICAgICAgICAgICAgICB0b3RhbEdlbWluYXRlQXR0YWNrOiB0b3RhbERhbWFnZSArIGdlbWluYXRlQXR0YWNrLmRhbWFnZSxcbiAgICAgICAgICAgICAgICB0b3RhbEdlbWluYXRlQXR0YWNrUmVkdWNlZDogdG90YWxSZWR1Y2VkICsgZ2VtaW5hdGVBdHRhY2suZGFtYWdlUmVkdWNlZCxcbiAgICAgICAgICAgICAgICBnZW1pbmF0ZUF0dGFjazogZ2VtaW5hdGVBdHRhY2ssXG4gICAgICAgICAgICAgICAgdG90YWxDcml0UmVkdWNlZDogdG90YWxDcml0UmVkdWNlZCxcbiAgICAgICAgICAgICAgICB0b3RhbFJlZHVjZWQ6IHRvdGFsUmVkdWNlZCxcbiAgICAgICAgICAgICAgICBzdW1Ub3RhbDogdG90YWxEYW1hZ2UgKyB0b3RhbENyaXQsXG4gICAgICAgICAgICAgICAgc3VtVG90YWxSZWR1Y2VkOiB0b3RhbFJlZHVjZWQgKyB0b3RhbENyaXRSZWR1Y2VkLFxuICAgICAgICAgICAgICAgIGRwczoge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBkcHMuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgY3JpdDogZHBzLmJhc2UgKyBkcHMuY3JpdCxcbiAgICAgICAgICAgICAgICAgICAgZ2VtaW5hdGVBdHRhY2s6IGRwcy5iYXNlICsgZHBzLmdlbWluYXRlQXR0YWNrLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogZHBzLmJhc2UgKyBkcHMuY3JpdCArIGRwcy5nZW1pbmF0ZUF0dGFjayxcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogZHBzLnJlZHVjZWQuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyaXQ6IGRwcy5yZWR1Y2VkLmJhc2UgKyBkcHMucmVkdWNlZC5jcml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VtaW5hdGVBdHRhY2s6IGRwcy5yZWR1Y2VkLmJhc2UgKyBkcHMucmVkdWNlZC5nZW1pbmF0ZUF0dGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBkcHMucmVkdWNlZC5iYXNlICsgZHBzLnJlZHVjZWQuY3JpdCArIGRwcy5yZWR1Y2VkLmdlbWluYXRlQXR0YWNrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0MSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbMF0oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0MiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbMV0oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0MyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbMl0oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0NCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbM10oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dGFja3M6IGF0dGFja3MsXG4gICAgICAgICAgICB0b3RhbFJvdzogW3QxLCB0MiwgdDMsIHQ0XVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXREYW1hZ2VUeXBlQ29sb3IgPSBmdW5jdGlvbiAoZGFtYWdlVHlwZSkge1xuICAgICAgICByZXR1cm4gbXkucHJvdG90eXBlLkRhbWFnZVR5cGVDb2xvcltkYW1hZ2VUeXBlXSB8fCBteS5wcm90b3R5cGUuRGFtYWdlVHlwZUNvbG9yWydkZWZhdWx0J107XG4gICAgfVxuICAgIFxufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5zdGFja2FibGVJdGVtcyA9IFsnY2xhcml0eScsJ2ZsYXNrJywnZHVzdCcsJ3dhcmRfb2JzZXJ2ZXInLCd3YXJkX3NlbnRyeScsJ3RhbmdvJywndHBzY3JvbGwnLCdzbW9rZV9vZl9kZWNlaXQnXSxcbm15LnByb3RvdHlwZS5sZXZlbGl0ZW1zID0gWyduZWNyb25vbWljb24nLCdkYWdvbicsJ2RpZmZ1c2FsX2JsYWRlJywndHJhdmVsX2Jvb3RzJ10sXG5teS5wcm90b3R5cGUudmFsaWRJdGVtcyA9IFtcImFieXNzYWxfYmxhZGVcIixcInVsdGltYXRlX3NjZXB0ZXJcIixcImNvdXJpZXJcIixcImFyY2FuZV9ib290c1wiLFwiYXJtbGV0XCIsXCJhc3NhdWx0XCIsXCJib290c19vZl9lbHZlc1wiLFwiYmZ1cnlcIixcImJlbHRfb2Zfc3RyZW5ndGhcIixcImJsYWNrX2tpbmdfYmFyXCIsXCJibGFkZV9tYWlsXCIsXCJibGFkZV9vZl9hbGFjcml0eVwiLFwiYmxhZGVzX29mX2F0dGFja1wiLFwiYmxpbmtcIixcImJsb29kc3RvbmVcIixcImJvb3RzXCIsXCJ0cmF2ZWxfYm9vdHNcIixcImJvdHRsZVwiLFwiYnJhY2VyXCIsXCJicm9hZHN3b3JkXCIsXCJidWNrbGVyXCIsXCJidXR0ZXJmbHlcIixcImNoYWlubWFpbFwiLFwiY2lyY2xldFwiLFwiY2xhcml0eVwiLFwiY2xheW1vcmVcIixcImNsb2FrXCIsXCJsZXNzZXJfY3JpdFwiLFwiZ3JlYXRlcl9jcml0XCIsXCJkYWdvblwiLFwiZGVtb25fZWRnZVwiLFwiZGVzb2xhdG9yXCIsXCJkaWZmdXNhbF9ibGFkZVwiLFwicmFwaWVyXCIsXCJhbmNpZW50X2phbmdnb1wiLFwiZHVzdFwiLFwiZWFnbGVcIixcImVuZXJneV9ib29zdGVyXCIsXCJldGhlcmVhbF9ibGFkZVwiLFwiY3ljbG9uZVwiLFwic2thZGlcIixcImZseWluZ19jb3VyaWVyXCIsXCJmb3JjZV9zdGFmZlwiLFwiZ2F1bnRsZXRzXCIsXCJnZW1cIixcImdob3N0XCIsXCJnbG92ZXNcIixcImhhbmRfb2ZfbWlkYXNcIixcImhlYWRkcmVzc1wiLFwiZmxhc2tcIixcImhlYXJ0XCIsXCJoZWF2ZW5zX2hhbGJlcmRcIixcImhlbG1fb2ZfaXJvbl93aWxsXCIsXCJoZWxtX29mX3RoZV9kb21pbmF0b3JcIixcImhvb2Rfb2ZfZGVmaWFuY2VcIixcImh5cGVyc3RvbmVcIixcImJyYW5jaGVzXCIsXCJqYXZlbGluXCIsXCJzcGhlcmVcIixcIm1hZWxzdHJvbVwiLFwibWFnaWNfc3RpY2tcIixcIm1hZ2ljX3dhbmRcIixcIm1hbnRhXCIsXCJtYW50bGVcIixcIm1hc2tfb2ZfbWFkbmVzc1wiLFwibWVkYWxsaW9uX29mX2NvdXJhZ2VcIixcIm1la2Fuc21cIixcIm1pdGhyaWxfaGFtbWVyXCIsXCJtam9sbG5pclwiLFwibW9ua2V5X2tpbmdfYmFyXCIsXCJsaWZlc3RlYWxcIixcIm15c3RpY19zdGFmZlwiLFwibmVjcm9ub21pY29uXCIsXCJudWxsX3RhbGlzbWFuXCIsXCJvYmxpdmlvbl9zdGFmZlwiLFwid2FyZF9vYnNlcnZlclwiLFwib2dyZV9heGVcIixcIm9yYl9vZl92ZW5vbVwiLFwib3JjaGlkXCIsXCJwZXJzXCIsXCJwaGFzZV9ib290c1wiLFwicGlwZVwiLFwicGxhdGVtYWlsXCIsXCJwb2ludF9ib29zdGVyXCIsXCJwb29yX21hbnNfc2hpZWxkXCIsXCJwb3dlcl90cmVhZHNcIixcInF1YXJ0ZXJzdGFmZlwiLFwicXVlbGxpbmdfYmxhZGVcIixcInJhZGlhbmNlXCIsXCJyZWF2ZXJcIixcInJlZnJlc2hlclwiLFwicmluZ19vZl9hcXVpbGFcIixcInJpbmdfb2ZfYmFzaWxpdXNcIixcInJpbmdfb2ZfaGVhbHRoXCIsXCJyaW5nX29mX3Byb3RlY3Rpb25cIixcInJpbmdfb2ZfcmVnZW5cIixcInJvYmVcIixcInJvZF9vZl9hdG9zXCIsXCJyZWxpY1wiLFwic29iaV9tYXNrXCIsXCJzYW5nZVwiLFwic2FuZ2VfYW5kX3lhc2hhXCIsXCJzYXRhbmljXCIsXCJzaGVlcHN0aWNrXCIsXCJ3YXJkX3NlbnRyeVwiLFwic2hhZG93X2FtdWxldFwiLFwiaW52aXNfc3dvcmRcIixcInNoaXZhc19ndWFyZFwiLFwiYmFzaGVyXCIsXCJzbGlwcGVyc1wiLFwic21va2Vfb2ZfZGVjZWl0XCIsXCJzb3VsX2Jvb3N0ZXJcIixcInNvdWxfcmluZ1wiLFwic3RhZmZfb2Zfd2l6YXJkcnlcIixcInN0b3V0X3NoaWVsZFwiLFwidGFsaXNtYW5fb2ZfZXZhc2lvblwiLFwidGFuZ29cIixcInRwc2Nyb2xsXCIsXCJ0cmFucXVpbF9ib290c1wiLFwidWx0aW1hdGVfb3JiXCIsXCJ1cm5fb2Zfc2hhZG93c1wiLFwidmFuZ3VhcmRcIixcInZlaWxfb2ZfZGlzY29yZFwiLFwidml0YWxpdHlfYm9vc3RlclwiLFwidmxhZG1pclwiLFwidm9pZF9zdG9uZVwiLFwid3JhaXRoX2JhbmRcIixcInlhc2hhXCIsXCJjcmltc29uX2d1YXJkXCIsXCJlbmNoYW50ZWRfbWFuZ29cIixcImxvdHVzX29yYlwiLFwiZ2xpbW1lcl9jYXBlXCIsXCJndWFyZGlhbl9ncmVhdmVzXCIsXCJtb29uX3NoYXJkXCIsXCJzaWx2ZXJfZWRnZVwiLFwic29sYXJfY3Jlc3RcIixcIm9jdGFyaW5lX2NvcmVcIixcImFldGhlcl9sZW5zXCIsXCJmYWVyaWVfZmlyZVwiLFwiaXJvbl90YWxvblwiLFwiZHJhZ29uX2xhbmNlXCIsXCJlY2hvX3NhYnJlXCIsXCJpbmZ1c2VkX3JhaW5kcm9wXCIsXCJibGlnaHRfc3RvbmVcIixcIndpbmRfbGFjZVwiLFwidG9tZV9vZl9rbm93bGVkZ2VcIixcImJsb29kdGhvcm5cIixcImh1cnJpY2FuZV9waWtlXCJdLFxubXkucHJvdG90eXBlLml0ZW1zV2l0aEFjdGl2ZSA9IFsnaGVhcnQnLCdzbW9rZV9vZl9kZWNlaXQnLCdkdXN0JywnZ2hvc3QnLCd0cmFucXVpbF9ib290cycsJ3BoYXNlX2Jvb3RzJywncG93ZXJfdHJlYWRzJywnYnVja2xlcicsJ21lZGFsbGlvbl9vZl9jb3VyYWdlJywnYW5jaWVudF9qYW5nZ28nLCdtZWthbnNtJywncGlwZScsJ3ZlaWxfb2ZfZGlzY29yZCcsJ3JvZF9vZl9hdG9zJywnb3JjaGlkJywnc2hlZXBzdGljaycsJ2FybWxldCcsJ2ludmlzX3N3b3JkJywnZXRoZXJlYWxfYmxhZGUnLCdzaGl2YXNfZ3VhcmQnLCdtYW50YScsJ21hc2tfb2ZfbWFkbmVzcycsJ2RpZmZ1c2FsX2JsYWRlJywnbWpvbGxuaXInLCdzYXRhbmljJywncmluZ19vZl9iYXNpbGl1cycsJ3Jpbmdfb2ZfYXF1aWxhJywgJ2J1dHRlcmZseScsICdtb29uX3NoYXJkJywgJ3NpbHZlcl9lZGdlJywnYmxvb2R0aG9ybiddO1xuXG5teS5wcm90b3R5cGUuSXRlbUlucHV0ID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBkZWJ1ZmYpIHtcbiAgICBpZiAobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyB2YWx1ZV0uSXRlbUFsaWFzZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YXIgaXRlbUFsaWFzID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyB2YWx1ZV0uSXRlbUFsaWFzZXMuam9pbignICcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGl0ZW1BbGlhcyA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgdmFsdWVdLkl0ZW1BbGlhc2VzO1xuICAgIH1cbiAgICB0aGlzLnZhbHVlID0ga28ub2JzZXJ2YWJsZSh2YWx1ZSk7XG4gICAgdGhpcy5kZWJ1ZmYgPSBrby5vYnNlcnZhYmxlKGRlYnVmZik7XG4gICAgaWYgKHRoaXMuZGVidWZmKCkpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGtvLm9ic2VydmFibGUodmFsdWUgKyAnfCcgKyBkZWJ1ZmYuaWQpO1xuICAgICAgICB0aGlzLm5hbWUgPSBrby5vYnNlcnZhYmxlKG5hbWUgKyAnICgnICsgZGVidWZmLm5hbWUgKyAnKScpO1xuICAgICAgICB0aGlzLmRpc3BsYXluYW1lID0ga28ub2JzZXJ2YWJsZShuYW1lICsgJyAoJyArIGRlYnVmZi5uYW1lICsgJykgPHNwYW4gc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj4nICsgJzsnICsgaXRlbUFsaWFzICsgJzwvc3Bhbj4nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBrby5vYnNlcnZhYmxlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5uYW1lID0ga28ub2JzZXJ2YWJsZShuYW1lKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5bmFtZSA9IGtvLm9ic2VydmFibGUobmFtZSArICcgPHNwYW4gc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj4nICsgJzsnICsgaXRlbUFsaWFzICsgJzwvc3Bhbj4nKTtcbiAgICB9XG59O1xuXG5teS5wcm90b3R5cGUuQmFzaWNJbnZlbnRvcnlWaWV3TW9kZWwgPSBmdW5jdGlvbiAoaCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLml0ZW1zID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcbiAgICBzZWxmLmFjdGl2ZUl0ZW1zID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcbiAgICBzZWxmLmFkZEl0ZW0gPSBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWRJdGVtKCkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgbmV3X2l0ZW0gPSB7XG4gICAgICAgICAgICAgICAgaXRlbTogZGF0YS5zZWxlY3RlZEl0ZW0oKS5zcGxpdCgnfCcpWzBdLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBrby5vYnNlcnZhYmxlKDApLFxuICAgICAgICAgICAgICAgIHNpemU6IGRhdGEuaXRlbUlucHV0VmFsdWUoKSxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKG5ld19pdGVtLml0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkYWdvbic6XG4gICAgICAgICAgICAgICAgICAgIG5ld19pdGVtLnNpemUgPSBNYXRoLm1pbihuZXdfaXRlbS5zaXplLCA1KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0cmF2ZWxfYm9vdHMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2RpZmZ1c2FsX2JsYWRlJzpcbiAgICAgICAgICAgICAgICAgICAgbmV3X2l0ZW0uc2l6ZSA9IE1hdGgubWluKG5ld19pdGVtLnNpemUsIDIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbic6XG4gICAgICAgICAgICAgICAgICAgIG5ld19pdGVtLnNpemUgPSBNYXRoLm1pbihuZXdfaXRlbS5zaXplLCAzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaXRlbXMucHVzaChuZXdfaXRlbSk7XG4gICAgICAgICAgICBpZiAoZGF0YS5zZWxlY3RlZEl0ZW0oKSA9PT0gJ3Jpbmdfb2ZfYXF1aWxhJyB8fCBkYXRhLnNlbGVjdGVkSXRlbSgpID09PSAncmluZ19vZl9iYXNpbGl1cycgfHwgZGF0YS5zZWxlY3RlZEl0ZW0oKSA9PT0gJ2hlYXJ0Jykge1xuICAgICAgICAgICAgICAgIHNlbGYudG9nZ2xlSXRlbSh1bmRlZmluZWQsIG5ld19pdGVtLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLnRvZ2dsZUl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChteS5wcm90b3R5cGUuaXRlbXNXaXRoQWN0aXZlLmluZGV4T2YoZGF0YS5pdGVtKSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKGRhdGEpIDwgMCkge1xuICAgICAgICAgICAgICAgIHNlbGYuYWN0aXZlSXRlbXMucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuYWN0aXZlSXRlbXMucmVtb3ZlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkYXRhLml0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdwb3dlcl90cmVhZHMnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0ZSgpIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0ZShkYXRhLnN0YXRlKCkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdGUoMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdGUoKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXRlKDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0ZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKTtcbiAgICBzZWxmLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBzZWxmLmFjdGl2ZUl0ZW1zLnJlbW92ZShpdGVtKTtcbiAgICAgICAgc2VsZi5pdGVtcy5yZW1vdmUoaXRlbSk7XG4gICAgfS5iaW5kKHRoaXMpO1xuICAgIHNlbGYudG9nZ2xlTXV0ZUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpdGVtLmVuYWJsZWQoIWl0ZW0uZW5hYmxlZCgpKTtcbiAgICB9LmJpbmQodGhpcyk7ICAgICAgXG4gICAgc2VsZi5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuYWN0aXZlSXRlbXMucmVtb3ZlQWxsKCk7XG4gICAgICAgIHNlbGYuaXRlbXMucmVtb3ZlQWxsKCk7XG4gICAgfS5iaW5kKHRoaXMpO1xufVxubXkucHJvdG90eXBlLkJhc2ljSW52ZW50b3J5Vmlld01vZGVsLnByb3RvdHlwZS5nZXRJdGVtSW1hZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBzdGF0ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YS5zdGF0ZSk7XG4gICAgc3dpdGNoIChkYXRhLml0ZW0pIHtcbiAgICAgICAgY2FzZSAncG93ZXJfdHJlYWRzJzpcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnX3N0ci5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUgPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJ19pbnQucG5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJ19hZ2kucG5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RyYW5xdWlsX2Jvb3RzJzpcbiAgICAgICAgY2FzZSAncmluZ19vZl9iYXNpbGl1cyc6XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJy5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnX2FjdGl2ZS5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYXJtbGV0JzpcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy9tZWRpYS9pbWFnZXMvaXRlbXMvJyArIGRhdGEuaXRlbSArICdfYWN0aXZlLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaW5nX29mX2FxdWlsYSc6XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJ19hY3RpdmUucG5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJy5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGFnb24nOlxuICAgICAgICBjYXNlICdkaWZmdXNhbF9ibGFkZSc6XG4gICAgICAgIGNhc2UgJ3RyYXZlbF9ib290cyc6XG4gICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbic6XG4gICAgICAgICAgICBpZiAoZGF0YS5zaXplID4gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJ18nICsgZGF0YS5zaXplICsgJy5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnLnBuZyc7ICAgICAgICAgICAgXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn07XG5teS5wcm90b3R5cGUuQmFzaWNJbnZlbnRvcnlWaWV3TW9kZWwucHJvdG90eXBlLmdldEl0ZW1TaXplTGFiZWwgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChteS5wcm90b3R5cGUuc3RhY2thYmxlSXRlbXMuaW5kZXhPZihkYXRhLml0ZW0pICE9IC0xKSB7XG4gICAgICAgIHJldHVybiAnPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTBweFwiPlF0eTogPC9zcGFuPicgKyBkYXRhLnNpemU7XG4gICAgfVxuICAgIGVsc2UgaWYgKG15LnByb3RvdHlwZS5sZXZlbGl0ZW1zLmluZGV4T2YoZGF0YS5pdGVtKSAhPSAtMSkge1xuICAgICAgICByZXR1cm4gJzxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjEwcHhcIj5Mdmw6IDwvc3Bhbj4nICsgZGF0YS5zaXplO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLml0ZW0gPT0gJ2Jsb29kc3RvbmUnKSB7XG4gICAgICAgIHJldHVybiAnPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTBweFwiPkNoYXJnZXM6IDwvc3Bhbj4nICsgZGF0YS5zaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn07XG5teS5wcm90b3R5cGUuQmFzaWNJbnZlbnRvcnlWaWV3TW9kZWwucHJvdG90eXBlLmdldEFjdGl2ZUJvcmRlciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc3dpdGNoIChkYXRhLml0ZW0pIHtcbiAgICAgICAgY2FzZSAncG93ZXJfdHJlYWRzJzpcbiAgICAgICAgY2FzZSAndHJhbnF1aWxfYm9vdHMnOlxuICAgICAgICBjYXNlICdyaW5nX29mX2Jhc2lsaXVzJzpcbiAgICAgICAgY2FzZSAncmluZ19vZl9hcXVpbGEnOlxuICAgICAgICBjYXNlICdhcm1sZXQnOlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YS5zdGF0ZSk7ICAgIFxuICAgICAgICBicmVhaztcbiAgICB9XG59XG5teS5wcm90b3R5cGUuQmFzaWNJbnZlbnRvcnlWaWV3TW9kZWwucHJvdG90eXBlLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lLCBsZXZlbCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXR0cmlidXRlc1tpXS5uYW1lID09IGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgIGlmIChsZXZlbCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXR0cmlidXRlc1tpXS52YWx1ZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsZXZlbCA+IGF0dHJpYnV0ZXNbaV0udmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXR0cmlidXRlc1tpXS52YWx1ZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhdHRyaWJ1dGVzW2ldLnZhbHVlW2xldmVsIC0gMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5teS5wcm90b3R5cGUuSW52ZW50b3J5Vmlld01vZGVsID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgc2VsZiA9IG5ldyBteS5wcm90b3R5cGUuQmFzaWNJbnZlbnRvcnlWaWV3TW9kZWwoKTtcbiAgICBzZWxmLmhlcm8gPSBoO1xuICAgIHNlbGYuaGFzSW52ZW50b3J5ID0ga28ub2JzZXJ2YWJsZSh0cnVlKTtcbiAgICBzZWxmLml0ZW1zID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcbiAgICBzZWxmLmFjdGl2ZUl0ZW1zID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcbiAgICBzZWxmLmhhc1NjZXB0ZXIgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09ICd1bHRpbWF0ZV9zY2VwdGVyJyAmJiBzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgdGhpcyk7XG4gICAgc2VsZi5pc0V0aGVyZWFsID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoKGl0ZW0gPT09ICdnaG9zdCcgfHwgaXRlbSA9PT0gJ2V0aGVyZWFsX2JsYWRlJykgJiYgc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSAmJiBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCB0aGlzKTtcbiAgICBzZWxmLmlzU2hlZXBlZCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09ICdzaGVlcHN0aWNrJyAmJiBzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIHRoaXMpO1xuICAgIHNlbGYudG90YWxDb3N0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChteS5wcm90b3R5cGUuc3RhY2thYmxlSXRlbXMuaW5kZXhPZihpdGVtKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIGMgKz0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5pdGVtY29zdCAqIHNlbGYuaXRlbXMoKVtpXS5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobXkucHJvdG90eXBlLmxldmVsaXRlbXMuaW5kZXhPZihpdGVtKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpZmZ1c2FsX2JsYWRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgKz0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5pdGVtY29zdCArIChzZWxmLml0ZW1zKClbaV0uc2l6ZSAtIDEpICogNzAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGFnb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgYyArPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLml0ZW1jb3N0ICsgKHNlbGYuaXRlbXMoKVtpXS5zaXplIC0gMSkgKiAxMjUwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgKz0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5pdGVtY29zdDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYyArPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLml0ZW1jb3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfSwgdGhpcyk7XG4gICAgc2VsZi5hZGRJdGVtQnVmZiA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICBpZiAoc2VsZi5oYXNJbnZlbnRvcnkoKSAmJiBzZWxmLnNlbGVjdGVkSXRlbUJ1ZmYoKSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBuZXdfaXRlbSA9IHtcbiAgICAgICAgICAgICAgICBpdGVtOiBzZWxmLnNlbGVjdGVkSXRlbUJ1ZmYoKSxcbiAgICAgICAgICAgICAgICBzdGF0ZToga28ub2JzZXJ2YWJsZSgwKSxcbiAgICAgICAgICAgICAgICBzaXplOiAxLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaXRlbXMucHVzaChuZXdfaXRlbSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZEl0ZW1CdWZmKCkgPT09ICdyaW5nX29mX2FxdWlsYScgfHwgc2VsZi5zZWxlY3RlZEl0ZW1CdWZmKCkgPT09ICdyaW5nX29mX2Jhc2lsaXVzJykge1xuICAgICAgICAgICAgICAgIHNlbGYudG9nZ2xlSXRlbSh1bmRlZmluZWQsIG5ld19pdGVtLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLmFkZEl0ZW1EZWJ1ZmYgPSBmdW5jdGlvbiAoZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHNlbGYuaGFzSW52ZW50b3J5KCkgJiYgc2VsZi5zZWxlY3RlZEl0ZW1EZWJ1ZmYoKSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBuZXdfaXRlbSA9IHtcbiAgICAgICAgICAgICAgICBpdGVtOiBzZWxmLnNlbGVjdGVkSXRlbURlYnVmZigpLnNwbGl0KCd8JylbMF0sXG4gICAgICAgICAgICAgICAgc3RhdGU6IGtvLm9ic2VydmFibGUoMCksXG4gICAgICAgICAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZEl0ZW1EZWJ1ZmYoKS5zcGxpdCgnfCcpLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgbmV3X2l0ZW0uZGVidWZmID0gc2VsZi5zZWxlY3RlZEl0ZW1EZWJ1ZmYoKS5zcGxpdCgnfCcpWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLml0ZW1zLnB1c2gobmV3X2l0ZW0pO1xuICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWRJdGVtRGVidWZmKCkgPT09ICdyaW5nX29mX2FxdWlsYScgfHwgc2VsZi5zZWxlY3RlZEl0ZW1EZWJ1ZmYoKSA9PT0gJ3Jpbmdfb2ZfYmFzaWxpdXMnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi50b2dnbGVJdGVtKHVuZGVmaW5lZCwgbmV3X2l0ZW0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGV0eXBlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHNlbGYuaXRlbXMoKVtpXS5zaXplO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hbGxfc3RhdHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX3N0YXRzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRldHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhZ2knOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lID09ICdib251c19hZ2lsaXR5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdkaWZmdXNhbF9ibGFkZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlW3NpemUtMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX3N0YXQnICYmIHNlbGYuaXRlbXMoKVtpXS5zdGF0ZSgpID09IDIpIHt0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX2FnaScpIHt0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO307XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lID09ICdib251c19pbnRlbGxlY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ25lY3Jvbm9taWNvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlW3NpemUtMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtID09ICdkaWZmdXNhbF9ibGFkZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlW3NpemUtMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtID09ICdkYWdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlW3NpemUtMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX2ludGVsbGlnZW5jZScpIHt0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX2ludCcpIHt0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX3N0YXQnICYmIHNlbGYuaXRlbXMoKVtpXS5zdGF0ZSgpID09IDEpIHt0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO307XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHInOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lID09ICdib251c19zdHJlbmd0aCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAnbmVjcm9ub21pY29uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbc2l6ZS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfc3RhdCcgJiYgc2VsZi5pdGVtcygpW2ldLnN0YXRlKCkgPT0gMCkge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfc3RyJykge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAndW5ob2x5X2JvbnVzX3N0cmVuZ3RoJyAmJiBpc0FjdGl2ZSkge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0QmFzaCA9IGZ1bmN0aW9uIChhdHRhY2t0eXBlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFzaF9jaGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Jhc2hfY2hhbmNlX21lbGVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2t0eXBlID09ICdET1RBX1VOSVRfQ0FQX01FTEVFX0FUVEFDSycpIHsgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Jhc2hfY2hhbmNlX3JhbmdlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0YWNrdHlwZSA9PSAnRE9UQV9VTklUX0NBUF9SQU5HRURfQVRUQUNLJykgeyB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApOyB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRDcml0Q2hhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjcml0X2NoYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRDcml0U291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVzc2VyX2NyaXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2dyZWF0ZXJfY3JpdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvb2R0aG9ybic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW1dID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnY3JpdF9jaGFuY2UnLCAwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2NyaXRfbXVsdGlwbGllcicsIDApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gJ2Jsb29kdGhvcm4nICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbJ3NvdWxfcmVuZCddID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzWydzb3VsX3JlbmQnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICd0YXJnZXRfY3JpdF9tdWx0aXBsaWVyJywgMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogJ1NvdWwgUmVuZCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlc1snc291bF9yZW5kJ10uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZXM7XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0Q2xlYXZlU291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmZ1cnknOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cyc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2NsZWF2ZV9yYWRpdXMnLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFnbml0dWRlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnY2xlYXZlX2RhbWFnZV9wZXJjZW50JywgMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRCYXNoU291cmNlID0gZnVuY3Rpb24gKGF0dGFja3R5cGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2phdmVsaW4nOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2JvbnVzX2NoYW5jZV9kYW1hZ2UnLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdtYWdpYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnYm9udXNfY2hhbmNlJywgMSkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZSArICcgUGllcmNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9ua2V5X2tpbmdfYmFyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbaXRlbV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtJzogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnYmFzaF9jaGFuY2UnLCAwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnYmFzaF9kYW1hZ2UnLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdiYXNoX3N0dW4nLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ21hZ2ljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiAnTWluaS1CYXNoJyAvL215LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FieXNzYWxfYmxhZGUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Jhc2hlcic6XG4gICAgICAgICAgICAgICAgICAgIGlmICghc291cmNlcy5oYXNPd25Qcm9wZXJ0eSgnYmFzaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzWydiYXNoJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2l0ZW0nOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsIChhdHRhY2t0eXBlID09ICdET1RBX1VOSVRfQ0FQX01FTEVFX0FUVEFDSycpID8nYmFzaF9jaGFuY2VfbWVsZWUnIDogJ2Jhc2hfY2hhbmNlX3JhbmdlZCcsIDApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdib251c19jaGFuY2VfZGFtYWdlJywgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnYmFzaF9kdXJhdGlvbicsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6ICdCYXNoJyAvL215LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0T3JiUHJvY1NvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21hZWxzdHJvbSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbWpvbGxuaXInOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2NoYWluX2NoYW5jZScsIDApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdjaGFpbl9kYW1hZ2UnLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ21hZ2ljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH07XG5cbiAgICBzZWxmLmdldE9yYlNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RpZmZ1c2FsX2JsYWRlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbaXRlbV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdmZWVkYmFja19tYW5hX2J1cm4nLCBzZWxmLml0ZW1zKClbaV0uc2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0SGVhbHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2hlYWx0aCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgc2VsZi5nZXRIZWFsdGhSZWdlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhbHRoX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2hlYWx0aF9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAndHJhbnF1aWxfYm9vdHMnICYmICFpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtICE9ICd0cmFucXVpbF9ib290cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaHBfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hlYWx0aF9yZWdlbl9yYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdoZWFydCcgJiYgaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSAocGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCkgKiBzZWxmLmhlcm8uaGVhbHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBzZWxmLmdldEhlYWx0aFJlZ2VuQXVyYSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoaXRlbSArIGF0dHJpYnV0ZS5uYW1lKSA+IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVyYV9oZWFsdGhfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goaXRlbSArIGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHRvdGFsQXR0cmlidXRlLCBleGNsdWRlTGlzdDogZXhjbHVkZUxpc3R9O1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRNYW5hID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21hbmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0TWFuYVJlZ2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1cmFfbWFuYV9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hbmFfcmVnZW5fYXVyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUZsb2F0KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYW5hX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdpbmZ1c2VkX3JhaW5kcm9wJykgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VGbG9hdChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlOyAgICBcbiAgICB9O1xuICAgIHNlbGYuZ2V0TWFuYVJlZ2VuUGVyY2VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tYW5hX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFuYV9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21hbmFfcmVnZW5fcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtICE9ICdpbmZ1c2VkX3JhaW5kcm9wJykgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VGbG9hdChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlIC8gMTAwOyAgICBcbiAgICB9O1xuICAgIHNlbGYuZ2V0TWFuYVJlZ2VuQmxvb2RzdG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGl0ZW0uaW5kZXhPZignYmxvb2RzdG9uZScpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHNlbGYuaXRlbXMoKVtpXS5zaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0QXJtb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBY3RpdmUgfHwgaXRlbSAhPSAnbWVkYWxsaW9uX29mX2NvdXJhZ2UnKSB7IHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7IH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmhvbHlfYm9udXNfYXJtb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlICYmIGl0ZW0gPT0gJ2FybWxldCcpIHsgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0QXJtb3JBdXJhID0gZnVuY3Rpb24gKGFMaXN0KSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBhdHRyaWJ1dGVMaXN0ID0gYUxpc3QgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDtqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlTGlzdC5maW5kKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhdHRyaWJ1dGUubmFtZSA9PSBhLm5hbWU7IH0pKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYnVja2xlclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hb2VfYXJtb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTGlzdC5wdXNoKHsnbmFtZSc6YXR0cmlidXRlLm5hbWUsICd2YWx1ZSc6IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSl9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc2F1bHRcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVyYV9wb3NpdGl2ZV9hcm1vcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVMaXN0LnB1c2goeyduYW1lJzphdHRyaWJ1dGUubmFtZSwgJ3ZhbHVlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKX0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgLy8gcmluZ19vZl9hcXVpbGEscmluZ19vZl9iYXNpbGl1c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdXJhX2JvbnVzX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUxpc3QucHVzaCh7J25hbWUnOmF0dHJpYnV0ZS5uYW1lLCAndmFsdWUnOiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvLyB2bGFkbWlyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FybW9yX2F1cmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTGlzdC5wdXNoKHsnbmFtZSc6YXR0cmlidXRlLm5hbWUsICd2YWx1ZSc6IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSl9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1la2Fuc21cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhbF9ib251c19hcm1vcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVMaXN0LnB1c2goeyduYW1lJzphdHRyaWJ1dGUubmFtZSwgJ3ZhbHVlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIGJ1Y2tsZXIgaWYgdGhlcmUgaXMgYSBtZWthbnNtXG4gICAgICAgIGlmIChhdHRyaWJ1dGVMaXN0LmZpbmQoZnVuY3Rpb24gKGF0dHJpYnV0ZSkgeyByZXR1cm4gYXR0cmlidXRlLm5hbWUgPT0gJ2hlYWxfYm9udXNfYXJtb3InOyB9KSkge1xuICAgICAgICAgICAgYXR0cmlidXRlTGlzdCA9IGF0dHJpYnV0ZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlLm5hbWUgIT09ICdib251c19hb2VfYXJtb3InO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIHJpbmdfb2ZfYXF1aWxhLHJpbmdfb2ZfYmFzaWxpdXMgaWYgdGhlcmUgaXMgYSB2bGFkbWlyXG4gICAgICAgIGlmIChhdHRyaWJ1dGVMaXN0LmZpbmQoZnVuY3Rpb24gKGF0dHJpYnV0ZSkgeyByZXR1cm4gYXR0cmlidXRlLm5hbWUgPT0gJ2FybW9yX2F1cmEnOyB9KSkge1xuICAgICAgICAgICAgYXR0cmlidXRlTGlzdCA9IGF0dHJpYnV0ZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlLm5hbWUgIT09ICdhdXJhX2JvbnVzX2FybW9yJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0b3RhbEF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUxpc3QucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtZW1vICs9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHRvdGFsQXR0cmlidXRlLCBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVMaXN0fTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0QXJtb3JSZWR1Y3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwLFxuICAgICAgICAgICAgZXhjbHVkZUxpc3QgPSBlIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlTGlzdC5pbmRleE9mKGF0dHJpYnV0ZS5uYW1lKSA+IC0xIHx8IGV4Y2x1ZGVMaXN0LmluZGV4T2YoaXRlbSArICdfJyArIGF0dHJpYnV0ZS5uYW1lKSA+IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXJtb3JfcmVkdWN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGl0ZW0gKyAnXycgKyBhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdXJhX25lZ2F0aXZlX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvcnJ1cHRpb25fYXJtb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBzZWxmLmdldEV2YXNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2V2YXNpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gJ2J1dHRlcmZseScgfHwgIWlzQWN0aXZlKSB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgc2VsZi5nZXRNb3ZlbWVudFNwZWVkRmxhdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgaGFzQm9vdHMgPSBmYWxzZSxcbiAgICAgICAgaGFzRXVscyA9IGZhbHNlLFxuICAgICAgICBoYXNXaW5kTGFjZSA9IGZhbHNlLFxuICAgICAgICBib290SXRlbXMgPSBbJ2Jvb3RzJywncGhhc2VfYm9vdHMnLCdhcmNhbmVfYm9vdHMnLCd0cmF2ZWxfYm9vdHMnLCdwb3dlcl90cmVhZHMnLCd0cmFucXVpbF9ib290cycsJ2d1YXJkaWFuX2dyZWF2ZXMnXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNCb290cyAmJiBib290SXRlbXMuaW5kZXhPZihpdGVtKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gJ3RyYW5xdWlsX2Jvb3RzJyB8fCAoaXRlbSA9PSAndHJhbnF1aWxfYm9vdHMnICYmICFpc0FjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQm9vdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZWxzZSBpZiAoIWhhc0V1bHMgJiYgaXRlbSA9PSAnY3ljbG9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gPT0gJ2N5Y2xvbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFdWxzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Jyb2tlbl9tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0Jvb3RzICYmIGJvb3RJdGVtcy5pbmRleE9mKGl0ZW0pID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAndHJhbnF1aWxfYm9vdHMnICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Jvb3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0Jvb3RzICYmIGJvb3RJdGVtcy5pbmRleE9mKGl0ZW0pID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Jvb3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzV2luZExhY2UgJiYgaXRlbSA9PSAnd2luZF9sYWNlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2luZExhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgc2VsZi5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW10sXG4gICAgICAgICAgICBoYXNZYXNoYSA9IGZhbHNlLFxuICAgICAgICAgICAgaGFzRHJ1bXMgPSBmYWxzZSxcbiAgICAgICAgICAgIGhhc0RydW1zQWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgICBoYXNQaGFzZUFjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgICAgaGFzU2hhZG93QmxhZGVBY3RpdmUgPSBmYWxzZSxcbiAgICAgICAgICAgIGhhc0J1dHRlcmZseUFjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgICAgaGFzTW9NQWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgICB5YXNoYUl0ZW1zID0gWydtYW50YScsJ3lhc2hhJywnc2FuZ2VfYW5kX3lhc2hhJ107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlbWVudF9zcGVlZF9wZXJjZW50X2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzWWFzaGEgJiYgeWFzaGFJdGVtcy5pbmRleE9mKGl0ZW0pID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1lhc2hhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2F1cmFfbW92ZW1lbnRfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzRHJ1bXMgJiYgaXRlbSA9PSAnYW5jaWVudF9qYW5nZ28nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNEcnVtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwaGFzZV9tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUgJiYgIWhhc1BoYXNlQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNQaGFzZUFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudF9zcGVlZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlICYmICFoYXNEcnVtc0FjdGl2ZSAmJiBpdGVtID09ICdhbmNpZW50X2phbmdnbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0RydW1zQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dpbmR3YWxrX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSAmJiAhaGFzU2hhZG93QmxhZGVBY3RpdmUgJiYgKGl0ZW0gPT0gJ2ludmlzX3N3b3JkJyB8fCBpdGVtID09ICdzaWx2ZXJfZWRnZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNTaGFkb3dCbGFkZUFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdiZXJzZXJrX2JvbnVzX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSAmJiAhaGFzTW9NQWN0aXZlICYmIGl0ZW0gPT0gJ21hc2tfb2ZfbWFkbmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc01vTUFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudF9zcGVlZCc6IC8vbWFudGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzWWFzaGEgJiYgaXRlbSA9PSAnbWFudGEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNZYXNoYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtID09ICdzbW9rZV9vZl9kZWNlaXQnICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlICYmICFoYXNCdXR0ZXJmbHlBY3RpdmUgJiYgaXRlbSA9PSAnYnV0dGVyZmx5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQnV0dGVyZmx5QWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHRvdGFsQXR0cmlidXRlLzEwMCwgZXhjbHVkZUxpc3Q6IGV4Y2x1ZGVMaXN0fTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwLFxuICAgICAgICAgICAgZXhjbHVkZUxpc3QgPSBlIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlTGlzdC5pbmRleE9mKGF0dHJpYnV0ZS5uYW1lKSA+IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdkdXN0JyAmJiBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsYXN0X21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdzaGl2YXNfZ3VhcmQnICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sZF9tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAnc2thZGknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21haW1fbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaXRlbXMoKVtpXS5kZWJ1ZmYgJiYgc2VsZi5pdGVtcygpW2ldLmRlYnVmZiA9PSAnbWFpbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUvMTAwLCBleGNsdWRlTGlzdDogZXhjbHVkZUxpc3R9O1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRCb251c0RhbWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOjEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndW5ob2x5X2JvbnVzX2RhbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW0gKyAnX2FjdGl2ZSddID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW0gKyAnX2FjdGl2ZSddID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOjEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lICsgJyBVbmhvbHkgU3RyZW5ndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgdG90YWw6IHRvdGFsQXR0cmlidXRlIH07XG4gICAgfTtcbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlUGVyY2VudCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHMgPSBzIHx8IHtzb3VyY2VzOnt9LHRvdGFsOjB9O1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSBzLnRvdGFsIHx8IDA7XG4gICAgICAgIHZhciBzb3VyY2VzID0gcy5zb3VyY2VzIHx8IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2VfYXVyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvdXJjZXNbaXRlbV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHNvdXJjZXMsIHRvdGFsOiB0b3RhbEF0dHJpYnV0ZSB9O1xuICAgIH07XG4gICAgc2VsZi5nZXRBdHRhY2tTcGVlZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBoYXNQb3dlclRyZWFkcyA9IGZhbHNlLFxuICAgICAgICAgICAgZXhjbHVkZUxpc3QgPSBlIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlTGlzdC5pbmRleE9mKGF0dHJpYnV0ZS5uYW1lKSA+IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdwb3dlcl90cmVhZHMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNQb3dlclRyZWFkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNQb3dlclRyZWFkcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbSA9PSAnbW9vbl9zaGFyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnN1bWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdtb29uX3NoYXJkJyAmJiBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1cmFfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtICE9ICdzaGl2YXNfZ3VhcmQnKSB7IHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7IH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvLyBhbmNpZW50X2phbmdnb1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdXJhX2F0dGFja19zcGVlZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5jaWVudF9qYW5nZ29cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrX3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndW5ob2x5X2JvbnVzX2F0dGFja19zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHsgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JlcnNlcmtfYm9udXNfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkgeyB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pOyB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBzZWxmLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgICAgIGV4Y2x1ZGVMaXN0ID0gZSB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZUxpc3QuaW5kZXhPZihhdHRyaWJ1dGUubmFtZSkgPiAtMSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1cmFfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdzaGl2YXNfZ3VhcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbGRfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdza2FkaScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFpbV9hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaXRlbXMoKVtpXS5kZWJ1ZmYgJiYgc2VsZi5pdGVtcygpW2ldLmRlYnVmZiA9PSAnbWFpbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBzZWxmLmdldExpZmVzdGVhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGlmZXN0ZWFsX3BlcmNlbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ3NhdGFuaWMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FjdGl2ZSkgeyByZXR1cm4gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndW5ob2x5X2xpZmVzdGVhbF9wZXJjZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkgeyByZXR1cm4gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0TGlmZXN0ZWFsQXVyYSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2YW1waXJpY19hdXJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHRvdGFsQXR0cmlidXRlLCBleGNsdWRlTGlzdDogZXhjbHVkZUxpc3R9O1xuICAgIH07XG4gICAgc2VsZi5nZXRNYWdpY1Jlc2lzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbWFnaWNhbF9hcm1vcic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3BlbGxfcmVzaXN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYWdpY19yZXNpc3RhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBzZWxmLmdldE1hZ2ljUmVzaXN0UmVkdWN0aW9uU2VsZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXh0cmFfc3BlbGxfZGFtYWdlX3BlcmNlbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXRoZXJlYWxfZGFtYWdlX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9OyAgIFxuICAgIHNlbGYuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2V0aGVyZWFsX2RhbWFnZV9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmlzRXRoZXJlYWwoKSkgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Jlc2lzdF9kZWJ1ZmYnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTsgICAgICAgIFxuXG4gICAgc2VsZi5nZXRWaXNpb25SYW5nZU5pZ2h0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19uaWdodF92aXNpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gJ21vb25fc2hhcmQnIHx8ICFpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRBdHRhY2tSYW5nZSA9IGZ1bmN0aW9uIChhdHRhY2t0eXBlLCBhTGlzdCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwLFxuICAgICAgICAgICAgYXR0cmlidXRlTGlzdCA9IGFMaXN0IHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7aiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZUxpc3QuZmluZChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYXR0cmlidXRlLm5hbWUgPT0gYS5uYW1lOyB9KSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYWdvbl9sYW5jZVxuICAgICAgICAgICAgICAgICAgICBjYXNlICdiYXNlX2F0dGFja19yYW5nZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0YWNrdHlwZSA9PSAnRE9UQV9VTklUX0NBUF9SQU5HRURfQVRUQUNLJykgYXR0cmlidXRlTGlzdC5wdXNoKHsnbmFtZSc6YXR0cmlidXRlLm5hbWUsICd2YWx1ZSc6IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSl9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0b3RhbEF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUxpc3QucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtZW1vICs9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHRvdGFsQXR0cmlidXRlLCBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVMaXN0fTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0TWlzc0NoYW5jZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDEsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaXNzX2NoYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdibGluZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tzdGFiX3JlZHVjdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pdGVtcygpW2ldLmRlYnVmZiAmJiBzZWxmLml0ZW1zKClbaV0uZGVidWZmID09ICdzaGFkb3dfd2FsaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07ICAgIFxuICAgIHNlbGYuZ2V0Qm9udXNEYW1hZ2VSZWR1Y3Rpb25QY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tzdGFiX3JlZHVjdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pdGVtcygpW2ldLmRlYnVmZiAmJiBzZWxmLml0ZW1zKClbaV0uZGVidWZmID09ICdzaGFkb3dfd2FsaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07ICAgIFxuICAgIFxuICAgIHNlbGYuaXRlbU9wdGlvbnMgPSBrby5vYnNlcnZhYmxlQXJyYXkobXkucHJvdG90eXBlLml0ZW1PcHRpb25zQXJyKTtcbiAgICBcbiAgICBzZWxmLml0ZW1CdWZmT3B0aW9ucyA9IGtvLm9ic2VydmFibGVBcnJheShteS5wcm90b3R5cGUuaXRlbUJ1ZmZPcHRpb25zKTtcbiAgICBzZWxmLnNlbGVjdGVkSXRlbUJ1ZmYgPSBrby5vYnNlcnZhYmxlKCdhc3NhdWx0Jyk7XG5cbiAgICBzZWxmLml0ZW1EZWJ1ZmZPcHRpb25zID0ga28ub2JzZXJ2YWJsZUFycmF5KG15LnByb3RvdHlwZS5pdGVtRGVidWZmT3B0aW9ucyk7XG4gICAgc2VsZi5zZWxlY3RlZEl0ZW1EZWJ1ZmYgPSBrby5vYnNlcnZhYmxlKCdhc3NhdWx0Jyk7XG4gICAgXG4gICAgcmV0dXJuIHNlbGY7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydrbyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsna28nXSA6IG51bGwpO1xuXG5rby5tYXBwaW5nID0gcmVxdWlyZSgnLi4vbGliL2tub2Nrb3V0Lm1hcHBpbmcnKTtcbmtvLndyYXAgPSByZXF1aXJlKCcuLi9saWIva25vY2tvdXQud3JhcCcpO1xuXG5rby5leHRlbmRlcnMubnVtZXJpYyA9IGZ1bmN0aW9uKHRhcmdldCwgcHJlY2lzaW9uKSB7XG4gICAgLy9jcmVhdGUgYSB3cml0ZWFibGUgY29tcHV0ZWQgb2JzZXJ2YWJsZSB0byBpbnRlcmNlcHQgd3JpdGVzIHRvIG91ciBvYnNlcnZhYmxlXG4gICAgdmFyIHJlc3VsdCA9IGtvLmNvbXB1dGVkKHtcbiAgICAgICAgcmVhZDogdGFyZ2V0LCAgLy9hbHdheXMgcmV0dXJuIHRoZSBvcmlnaW5hbCBvYnNlcnZhYmxlcyB2YWx1ZVxuICAgICAgICB3cml0ZTogZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGFyZ2V0KCksXG4gICAgICAgICAgICAgICAgcm91bmRpbmdNdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiksXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVBc051bSA9IGlzTmFOKG5ld1ZhbHVlKSA/IDAgOiBwYXJzZUZsb2F0KCtuZXdWYWx1ZSksXG4gICAgICAgICAgICAgICAgdmFsdWVUb1dyaXRlID0gTWF0aC5yb3VuZChuZXdWYWx1ZUFzTnVtICogcm91bmRpbmdNdWx0aXBsaWVyKSAvIHJvdW5kaW5nTXVsdGlwbGllcjtcbiBcbiAgICAgICAgICAgIC8vb25seSB3cml0ZSBpZiBpdCBjaGFuZ2VkXG4gICAgICAgICAgICBpZiAodmFsdWVUb1dyaXRlICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0KHZhbHVlVG9Xcml0ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vaWYgdGhlIHJvdW5kZWQgdmFsdWUgaXMgdGhlIHNhbWUsIGJ1dCBhIGRpZmZlcmVudCB2YWx1ZSB3YXMgd3JpdHRlbiwgZm9yY2UgYSBub3RpZmljYXRpb24gZm9yIHRoZSBjdXJyZW50IGZpZWxkXG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5ub3RpZnlTdWJzY3JpYmVycyh2YWx1ZVRvV3JpdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pLmV4dGVuZCh7IG5vdGlmeTogJ2Fsd2F5cycgfSk7XG4gXG4gICAgLy9pbml0aWFsaXplIHdpdGggY3VycmVudCB2YWx1ZSB0byBtYWtlIHN1cmUgaXQgaXMgcm91bmRlZCBhcHByb3ByaWF0ZWx5XG4gICAgcmVzdWx0KHRhcmdldCgpKTtcbiBcbiAgICAvL3JldHVybiB0aGUgbmV3IGNvbXB1dGVkIG9ic2VydmFibGVcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrbzsiLCIndXNlIHN0cmljdCc7XG52YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcblxudmFyIGFiaWxpdHlfdmFycyA9IHtcbiAgICAnJGhlYWx0aCc6ICdIZWFsdGgnLFxuICAgICckbWFuYSc6ICdNYW5hJyxcbiAgICAnJGFybW9yJzogJ0FybW9yJyxcbiAgICAnJGRhbWFnZSc6ICdEYW1hZ2UnLFxuICAgICckc3RyJzogJ1N0cmVuZ3RoJyxcbiAgICAnJGludCc6ICdJbnRlbGxpZ2VuY2UnLFxuICAgICckYWdpJzogJ0FnaWxpdHknLFxuICAgICckYWxsJzogJ0FsbCBBdHRyaWJ1dGVzJyxcbiAgICAnJGF0dGFjayc6ICdBdHRhY2sgU3BlZWQnLFxuICAgICckaHBfcmVnZW4nOiAnSFAgUmVnZW5lcmF0aW9uJyxcbiAgICAnJG1hbmFfcmVnZW4nOiAnTWFuYSBSZWdlbmVyYXRpb24nLFxuICAgICckbW92ZV9zcGVlZCc6ICdNb3ZlbWVudCBTcGVlZCcsXG4gICAgJyRldmFzaW9uJzogJ0V2YXNpb24nLFxuICAgICckc3BlbGxfcmVzaXN0JzogJ1NwZWxsIFJlc2lzdGFuY2UnLFxuICAgICckc2VsZWN0ZWRfYXR0cmlidXRlJzogJ1NlbGVjdGVkIEF0dHJpYnV0ZScsXG4gICAgJyRzZWxlY3RlZF9hdHRyaWInOiAnU2VsZWN0ZWQgQXR0cmlidXRlJyxcbiAgICAnJGNhc3RfcmFuZ2UnOiAnQ2FzdCBSYW5nZScsXG4gICAgJyRhdHRhY2tfcmFuZ2UnOiAnQXR0YWNrIFJhbmdlJ1xufVxudmFyIGFiaWxpdHlUb29sdGlwRGF0YSA9IHt9O1xudmFyIGFiaWxpdHlEYW1hZ2VUeXBlcyA9IHtcbiAgICAnREFNQUdFX1RZUEVfTUFHSUNBTCc6ICdNYWdpY2FsJyxcbiAgICAnREFNQUdFX1RZUEVfUFVSRSc6ICdQdXJlJyxcbiAgICAnREFNQUdFX1RZUEVfUEhZU0lDQUwnOiAnUGh5c2ljYWwnLFxuICAgICdEQU1BR0VfVFlQRV9DT01QT1NJVEUnOiAnQ29tcG9zaXRlJyxcbiAgICAnREFNQUdFX1RZUEVfSFBfUkVNT1ZBTCc6ICdIUCBSZW1vdmFsJ1xufVxuXG52YXIgZ2V0VG9vbHRpcEFiaWxpdHlEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGQgPSBpdGVtLmRlc2NyaXB0aW9uO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVtLmF0dHJpYnV0ZXNbaV0ubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IGl0ZW0uYXR0cmlidXRlc1tpXS5uYW1lO1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gaXRlbS5hdHRyaWJ1dGVzW2ldLnZhbHVlWzBdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVtLmF0dHJpYnV0ZXNbaV0udmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSArPSAnIC8gJyArIGl0ZW0uYXR0cmlidXRlc1tpXS52YWx1ZVtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyUnICsgYXR0cmlidXRlTmFtZSArICclJywgJ2dpJyk7XG4gICAgICAgICAgICBkID0gZC5yZXBsYWNlKHJlZ2V4cCwgYXR0cmlidXRlVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCclJScsICdnaScpO1xuICAgIGQgPSBkLnJlcGxhY2UocmVnZXhwLCAnJScpO1xuICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJ1xcbicsICdnaScpO1xuICAgIGQgPSBkLnJlcGxhY2UoL1xcXFxuL2csICc8YnI+Jyk7XG4gICAgcmV0dXJuIGQ7XG59XG5cbnZhciBnZXRUb29sdGlwQWJpbGl0eUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBhID0gJyc7XG4gICAgaWYgKGl0ZW0uZGFtYWdlLmxlbmd0aCA+IDAgJiYgaXRlbS5kYW1hZ2UucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIG51bSl7IHJldHVybiBtZW1vICsgbnVtOyB9LCAwKSA+IDApIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZVRvb2x0aXAgPSAnREFNQUdFOiAnO1xuICAgICAgICB2YXIgYXR0cmlidXRlVmFsdWUgPSBpdGVtLmRhbWFnZVswXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVtLmRhbWFnZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgKz0gJyAvICcgKyBpdGVtLmRhbWFnZVtqXTtcbiAgICAgICAgfVxuICAgICAgICBhID0gYSArIGF0dHJpYnV0ZVRvb2x0aXAgKyAnICcgKyBhdHRyaWJ1dGVWYWx1ZSArICc8YnI+JztcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZW0uYXR0cmlidXRlc1tpXS50b29sdGlwICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVUb29sdGlwID0gaXRlbS5hdHRyaWJ1dGVzW2ldLnRvb2x0aXA7XG4gICAgICAgICAgICBhdHRyaWJ1dGVUb29sdGlwID0gYXR0cmlidXRlVG9vbHRpcC5yZXBsYWNlKC9cXFxcbi9nLCAnJyk7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlVmFsdWUgPSBpdGVtLmF0dHJpYnV0ZXNbaV0udmFsdWVbMF07XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZW0uYXR0cmlidXRlc1tpXS52YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlICs9ICcgLyAnICsgaXRlbS5hdHRyaWJ1dGVzW2ldLnZhbHVlW2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHAgPSBhdHRyaWJ1dGVUb29sdGlwLmluZGV4T2YoJyUnKTtcbiAgICAgICAgICAgIGlmIChwID09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlVmFsdWUudG9TdHJpbmcoKS5pbmRleE9mKCcvJykgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgPSBhdHRyaWJ1dGVWYWx1ZS50b1N0cmluZygpLnRyaW0oKSArICclJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL3ZhciByZWdleHAyID0gbmV3IFJlZ0V4cCgnLycsICdnaScpO1xuICAgICAgICAgICAgICAgICAgICAvL2F0dHJpYnV0ZVZhbHVlID0gYXR0cmlidXRlVmFsdWUucmVwbGFjZShyZWdleHAyLCAnJS8nKSArICclJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlcyA9IGF0dHJpYnV0ZVZhbHVlLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmltbWVkQXR0cmlidXRlVmFsdWVzID0gYXR0cmlidXRlVmFsdWVzLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdi50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSA9IHRyaW1tZWRBdHRyaWJ1dGVWYWx1ZXMuam9pbignJSAvICcpICsgJyUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVUb29sdGlwID0gYXR0cmlidXRlVG9vbHRpcC5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkID0gYXR0cmlidXRlVG9vbHRpcC5pbmRleE9mKCckJyk7XG4gICAgICAgICAgICBhID0gYSArIGF0dHJpYnV0ZVRvb2x0aXAgKyAnICcgKyBhdHRyaWJ1dGVWYWx1ZSArICc8YnI+JztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYS50cmltKCc8YnI+Jyk7XG59XG5cbnZhciBnZXRUb29sdGlwQWJpbGl0eU1hbmFDb3N0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgYyA9ICcnO1xuICAgIGlmIChpdGVtLm1hbmFjb3N0LnJlZHVjZShmdW5jdGlvbihtZW1vLCBudW0peyByZXR1cm4gbWVtbyArIG51bTsgfSwgMCkgPT0gMCkge1xuICAgICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgaWYgKGl0ZW0ubWFuYWNvc3QuZXZlcnkoZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gPT0gaXRlbS5tYW5hY29zdFswXTsgfSkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubWFuYWNvc3RbMF0udG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZW0ubWFuYWNvc3RbaV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgYyA9IGMgKyAnICcgKyBpdGVtLm1hbmFjb3N0W2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuXG52YXIgZ2V0VG9vbHRpcEFiaWxpdHlDb29sZG93biA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGMgPSAnJztcbiAgICBpZiAoaXRlbS5jb29sZG93bi5yZWR1Y2UoZnVuY3Rpb24obWVtbywgbnVtKXsgcmV0dXJuIG1lbW8gKyBudW07IH0sIDApID09IDApIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIGlmIChpdGVtLmNvb2xkb3duLmV2ZXJ5KGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtID09IGl0ZW0uY29vbGRvd25bMF07IH0pKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvb2xkb3duWzBdLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVtLmNvb2xkb3duW2ldICE9IG51bGwpIHtcbiAgICAgICAgICAgIGMgPSBjICsgJyAnICsgaXRlbS5jb29sZG93bltpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYztcbn1cbiAgICBcbnZhciBnZXRBYmlsaXR5VG9vbHRpcERhdGEgPSBmdW5jdGlvbihoZXJvRGF0YSwgdW5pdERhdGEsIGhlcm8sIGVsKSB7XG4gICAgaWYgKGFiaWxpdHlUb29sdGlwRGF0YVtlbF0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBhYmlsaXR5TmFtZSA9IGVsXG4gICAgICAgIHZhciBhYmlsaXR5ID0ge307XG4gICAgICAgIGlmIChoZXJvRGF0YVtoZXJvXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pdERhdGFbaGVyb10uYWJpbGl0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXREYXRhW2hlcm9dLmFiaWxpdGllc1tpXS5uYW1lID09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFiaWxpdHkgPSB1bml0RGF0YVtoZXJvXS5hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZXJvRGF0YVtoZXJvXS5hYmlsaXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVyb0RhdGFbaGVyb10uYWJpbGl0aWVzW2ldLm5hbWUgPT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWJpbGl0eSA9IGhlcm9EYXRhW2hlcm9dLmFiaWxpdGllc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGEgPSAkKCc8ZGl2PicpXG4gICAgICAgIGRhdGEuYXBwZW5kKCQoJzxzcGFuPicpLmh0bWwoYWJpbGl0eS5kaXNwbGF5bmFtZSkuYWRkQ2xhc3MoJ2l0ZW1fZmllbGQgcHVsbC1sZWZ0IGl0ZW1fbmFtZScpKTtcbiAgICAgICAgaWYgKGFiaWxpdHkuYWJpbGl0eXVuaXRkYW1hZ2V0eXBlKSB7XG4gICAgICAgICAgICBkYXRhLmFwcGVuZCgkKCc8c3Bhbj4nKS5odG1sKGFiaWxpdHlEYW1hZ2VUeXBlc1thYmlsaXR5LmFiaWxpdHl1bml0ZGFtYWdldHlwZV0pLmFkZENsYXNzKCdpdGVtX2ZpZWxkIHB1bGwtcmlnaHQgaXRlbV9hYmlsaXR5X2RhbWFnZV90eXBlJykuY3NzKCdtYXJnaW4tcmlnaHQnLCcxMHB4JykpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuYXBwZW5kKCQoJzxocj4nKS5jc3MoJ2NsZWFyJywgJ2JvdGgnKSk7XG4gICAgICAgIGlmIChhYmlsaXR5LmRlc2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRhdGEuYXBwZW5kKCQoJzxkaXY+JykuaHRtbChnZXRUb29sdGlwQWJpbGl0eURlc2NyaXB0aW9uKGFiaWxpdHkpKS5hZGRDbGFzcygnaXRlbV9maWVsZCBpdGVtX2Rlc2NyaXB0aW9uJykpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhdHRyaWJ1dGVkYXRhID0gZ2V0VG9vbHRpcEFiaWxpdHlBdHRyaWJ1dGVzKGFiaWxpdHkpO1xuICAgICAgICBpZiAoYXR0cmlidXRlZGF0YSAhPSAnJykge1xuICAgICAgICAgICAgZGF0YS5hcHBlbmQoJCgnPGRpdj4nKS5odG1sKGF0dHJpYnV0ZWRhdGEpLmFkZENsYXNzKCdpdGVtX2ZpZWxkIGl0ZW1fYXR0cmlidXRlcycpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2QgPSBnZXRUb29sdGlwQWJpbGl0eUNvb2xkb3duKGFiaWxpdHkpO1xuICAgICAgICB2YXIgbWFuYSA9IGdldFRvb2x0aXBBYmlsaXR5TWFuYUNvc3QoYWJpbGl0eSk7XG4gICAgICAgIGlmIChjZCAhPSAnJyB8fCBtYW5hICE9ICcnKSB7XG4gICAgICAgICAgICB2YXIgY2RtYW5hY29zdCA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ2l0ZW1fY2RtYW5hJyk7XG4gICAgICAgICAgICBpZiAobWFuYSAhPSAnJykge1xuICAgICAgICAgICAgICAgIGNkbWFuYWNvc3QuYXBwZW5kKCQoJzxzcGFuPicpLmh0bWwobWFuYS50cmltKCkpLmFkZENsYXNzKCdpdGVtX2ZpZWxkIGl0ZW1fbWFuYWNvc3QnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2QgIT0gJycpIHtcbiAgICAgICAgICAgICAgICBjZG1hbmFjb3N0LmFwcGVuZCgkKCc8c3Bhbj4nKS5odG1sKGNkLnRyaW0oKSkuYWRkQ2xhc3MoJ2l0ZW1fZmllbGQgaXRlbV9jb29sZG93bicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEuYXBwZW5kKGNkbWFuYWNvc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhYmlsaXR5LmxvcmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YS5hcHBlbmQoJCgnPGRpdj4nKS5odG1sKGFiaWxpdHkubG9yZSkuYWRkQ2xhc3MoJ2l0ZW1fZmllbGQgaXRlbV9sb3JlJykpO1xuICAgICAgICB9XG4gICAgICAgIGFiaWxpdHlUb29sdGlwRGF0YVtlbF0gPSBkYXRhLmh0bWwoKTtcbiAgICAgICAgcmV0dXJuIGRhdGEuaHRtbCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFiaWxpdHlUb29sdGlwRGF0YVtlbF07XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFiaWxpdHlUb29sdGlwRGF0YTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcblxudmFyIGl0ZW10b29sdGlwZGF0YSA9IHt9O1xudmFyIGFiaWxpdHlfdmFycyA9IHtcbiAgICAnJGhlYWx0aCc6ICdIZWFsdGgnLFxuICAgICckbWFuYSc6ICdNYW5hJyxcbiAgICAnJGFybW9yJzogJ0FybW9yJyxcbiAgICAnJGRhbWFnZSc6ICdEYW1hZ2UnLFxuICAgICckc3RyJzogJ1N0cmVuZ3RoJyxcbiAgICAnJGludCc6ICdJbnRlbGxpZ2VuY2UnLFxuICAgICckYWdpJzogJ0FnaWxpdHknLFxuICAgICckYWxsJzogJ0FsbCBBdHRyaWJ1dGVzJyxcbiAgICAnJGF0dGFjayc6ICdBdHRhY2sgU3BlZWQnLFxuICAgICckaHBfcmVnZW4nOiAnSFAgUmVnZW5lcmF0aW9uJyxcbiAgICAnJG1hbmFfcmVnZW4nOiAnTWFuYSBSZWdlbmVyYXRpb24nLFxuICAgICckbW92ZV9zcGVlZCc6ICdNb3ZlbWVudCBTcGVlZCcsXG4gICAgJyRldmFzaW9uJzogJ0V2YXNpb24nLFxuICAgICckc3BlbGxfcmVzaXN0JzogJ1NwZWxsIFJlc2lzdGFuY2UnLFxuICAgICckc2VsZWN0ZWRfYXR0cmlidXRlJzogJ1NlbGVjdGVkIEF0dHJpYnV0ZScsXG4gICAgJyRzZWxlY3RlZF9hdHRyaWInOiAnU2VsZWN0ZWQgQXR0cmlidXRlJyxcbiAgICAnJGNhc3RfcmFuZ2UnOiAnQ2FzdCBSYW5nZScsXG4gICAgJyRhdHRhY2tfcmFuZ2UnOiAnQXR0YWNrIFJhbmdlJ1xufVxuXG52YXIgZ2V0VG9vbHRpcEl0ZW1EZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGQgPSBpdGVtLmRlc2NyaXB0aW9uO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVtLmF0dHJpYnV0ZXNbaV0ubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IGl0ZW0uYXR0cmlidXRlc1tpXS5uYW1lO1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gaXRlbS5hdHRyaWJ1dGVzW2ldLnZhbHVlWzBdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVtLmF0dHJpYnV0ZXNbaV0udmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSArPSAnIC8gJyArIGl0ZW0uYXR0cmlidXRlc1tpXS52YWx1ZVtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCclJyArIGF0dHJpYnV0ZU5hbWUgKyAnJScsICdnaScpO1xuICAgICAgICAgICAgZCA9IGQucmVwbGFjZShyZWdleHAsIGF0dHJpYnV0ZVZhbHVlICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyUlJywgJ2dpJyk7XG4gICAgZCA9IGQucmVwbGFjZShyZWdleHAsJyUnKTtcbiAgICByZWdleHAgPSBuZXcgUmVnRXhwKCdcXG4nLCAnZ2knKTtcbiAgICBkID0gZC5yZXBsYWNlKC9cXFxcbi9nLCAnPGJyPicpO1xuICAgIHJldHVybiBkO1xufVxuXG52YXIgZ2V0VG9vbHRpcEl0ZW1BdHRyaWJ1dGVzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgYSA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVtLmF0dHJpYnV0ZXNbaV0udG9vbHRpcCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlVG9vbHRpcCA9IGl0ZW0uYXR0cmlidXRlc1tpXS50b29sdGlwO1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gaXRlbS5hdHRyaWJ1dGVzW2ldLnZhbHVlWzBdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVtLmF0dHJpYnV0ZXNbaV0udmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSArPSAnIC8gJyArIGl0ZW0uYXR0cmlidXRlc1tpXS52YWx1ZVtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwID0gYXR0cmlidXRlVG9vbHRpcC5pbmRleE9mKCclJyk7XG4gICAgICAgICAgICBpZiAocCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgPSBhdHRyaWJ1dGVWYWx1ZSArICclJztcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVUb29sdGlwID0gYXR0cmlidXRlVG9vbHRpcC5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkID0gYXR0cmlidXRlVG9vbHRpcC5pbmRleE9mKCckJyk7XG4gICAgICAgICAgICBpZiAoZCAhPSAtMSkge1xuICAgICAgICAgICAgICAgIGEgPSBhICsgYXR0cmlidXRlVG9vbHRpcC5zbGljZSgwLCBkKSArICcgJyArIGF0dHJpYnV0ZVZhbHVlICsgJyAnICsgYWJpbGl0eV92YXJzW2F0dHJpYnV0ZVRvb2x0aXAuc2xpY2UoZCldICsgJzxicj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYSA9IGEgKyBhdHRyaWJ1dGVUb29sdGlwICsgJyAnICsgYXR0cmlidXRlVmFsdWUgKyAnPGJyPic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGEudHJpbSgnPGJyPicpO1xufVxuXG52YXIgZ2V0VG9vbHRpcEl0ZW1Db29sZG93biA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGMgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0uY29vbGRvd24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGMgKyAnICcgKyBpdGVtLmNvb2xkb3duW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYztcbn1cblxudmFyIGdldFRvb2x0aXBJdGVtTWFuYUNvc3QgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBjID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtLm1hbmFjb3N0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVtLm1hbmFjb3N0W2ldID4gMCkge1xuICAgICAgICAgICAgYyA9IGMgKyAnICcgKyBpdGVtLm1hbmFjb3N0W2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuXG52YXIgZ2V0SXRlbVRvb2x0aXBEYXRhID0gZnVuY3Rpb24oaXRlbURhdGEsIGVsKSB7XG4gICAgaWYgKGl0ZW1EYXRhWydpdGVtXycgKyBlbF0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpdGVtdG9vbHRpcGRhdGFbZWxdID09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZW1EYXRhWydpdGVtXycgKyBlbF07XG4gICAgICAgIHZhciBkYXRhID0gJCgnPGRpdj4nKTtcbiAgICAgICAgZGF0YS5hcHBlbmQoJCgnPHNwYW4+JykuaHRtbChpdGVtLmRpc3BsYXluYW1lKS5hZGRDbGFzcygnaXRlbV9maWVsZCBpdGVtX25hbWUnKSk7XG4gICAgICAgIGRhdGEuYXBwZW5kKCQoJzxzcGFuPicpLmh0bWwoaXRlbS5pdGVtY29zdCkuYWRkQ2xhc3MoJ2l0ZW1fZmllbGQgaXRlbV9jb3N0JykpO1xuICAgICAgICBkYXRhLmFwcGVuZCgkKCc8aHI+JykpO1xuICAgICAgICBpZiAoaXRlbS5kZXNjcmlwdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBkYXRhLmFwcGVuZCgkKCc8ZGl2PicpLmh0bWwoZ2V0VG9vbHRpcEl0ZW1EZXNjcmlwdGlvbihpdGVtKSkuYWRkQ2xhc3MoJ2l0ZW1fZmllbGQgaXRlbV9kZXNjcmlwdGlvbicpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXR0cmlidXRlZGF0YSA9IGdldFRvb2x0aXBJdGVtQXR0cmlidXRlcyhpdGVtKTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZWRhdGEgIT0gJycpIHtcbiAgICAgICAgICAgIGRhdGEuYXBwZW5kKCQoJzxkaXY+JykuaHRtbChhdHRyaWJ1dGVkYXRhKS5hZGRDbGFzcygnaXRlbV9maWVsZCBpdGVtX2F0dHJpYnV0ZXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNkID0gZ2V0VG9vbHRpcEl0ZW1Db29sZG93bihpdGVtKTtcbiAgICAgICAgdmFyIG1hbmEgPSBnZXRUb29sdGlwSXRlbU1hbmFDb3N0KGl0ZW0pO1xuICAgICAgICBpZiAoY2QgIT0gJycgfHwgbWFuYSAhPSAnJykge1xuICAgICAgICAgICAgdmFyIGNkbWFuYWNvc3QgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCdpdGVtX2NkbWFuYScpO1xuICAgICAgICAgICAgaWYgKGNkICE9ICcnKSB7XG4gICAgICAgICAgICAgICAgY2RtYW5hY29zdC5hcHBlbmQoJCgnPHNwYW4+JykuaHRtbChjZCkuYWRkQ2xhc3MoJ2l0ZW1fZmllbGQgaXRlbV9jb29sZG93bicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYW5hICE9ICcnKSB7XG4gICAgICAgICAgICAgICAgY2RtYW5hY29zdC5hcHBlbmQoJCgnPHNwYW4+JykuaHRtbChtYW5hKS5hZGRDbGFzcygnaXRlbV9maWVsZCBpdGVtX21hbmFjb3N0JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5hcHBlbmQoY2RtYW5hY29zdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0ubG9yZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkYXRhLmFwcGVuZCgkKCc8ZGl2PicpLmh0bWwoaXRlbS5sb3JlKS5hZGRDbGFzcygnaXRlbV9maWVsZCBpdGVtX2xvcmUnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXRvb2x0aXBkYXRhW2VsXSA9IGRhdGEuaHRtbCgpO1xuICAgICAgICByZXR1cm4gZGF0YS5odG1sKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaXRlbXRvb2x0aXBkYXRhW2VsXTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlbVRvb2x0aXBEYXRhOyIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5Vbml0T3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGRpc3BsYXluYW1lLCBsZXZlbHMsIGltYWdlLCBsZXZlbCkge1xuICAgIHRoaXMuaGVyb05hbWUgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChsZXZlbHMgPiAwKSA/IG5hbWUgKyAobGV2ZWwoKSA8PSBsZXZlbHMgPyBsZXZlbCgpIDogMSkgOiBuYW1lO1xuICAgIH0pO1xuICAgIHRoaXMuaGVyb0Rpc3BsYXlOYW1lID0gZGlzcGxheW5hbWU7XG4gICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgIHRoaXMubGV2ZWxzID0gbGV2ZWxzO1xufTtcblxubXkucHJvdG90eXBlLlVuaXRWaWV3TW9kZWwgPSBmdW5jdGlvbiAoaCxwKSB7XG4gICAgdmFyIHNlbGYgPSBuZXcgbXkucHJvdG90eXBlLkhlcm9Nb2RlbChoKTtcbiAgICBzZWxmLnBhcmVudCA9IHA7XG4gICAgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCA9IGtvLm9ic2VydmFibGUoMSk7XG4gICAgc2VsZi5hdmFpbGFibGVVbml0cyA9IGtvLm9ic2VydmFibGVBcnJheShbXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbG9uZV9kcnVpZF9iZWFyJywgJ0xvbmUgRHJ1aWQgU3Bpcml0IEJlYXInLDQsJy9tZWRpYS9pbWFnZXMvdW5pdHMvc3Bpcml0X2JlYXIucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfYnJld21hc3Rlcl9lYXJ0aF8nLCdCcmV3bWFzdGVyIEVhcnRoIFdhcnJpb3InLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfYnJld21hc3Rlcl9lYXJ0aC5wbmcnLCBzZWxmLnNlbGVjdGVkVW5pdExldmVsKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5Vbml0T3B0aW9uKCducGNfZG90YV9icmV3bWFzdGVyX2ZpcmVfJywnQnJld21hc3RlciBGaXJlIFdhcnJpb3InLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfYnJld21hc3Rlcl9maXJlLnBuZycsIHNlbGYuc2VsZWN0ZWRVbml0TGV2ZWwpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLlVuaXRPcHRpb24oJ25wY19kb3RhX2JyZXdtYXN0ZXJfc3Rvcm1fJywnQnJld21hc3RlciBTdG9ybSBXYXJyaW9yJywzLCcvbWVkaWEvaW1hZ2VzL3VuaXRzL25wY19kb3RhX2JyZXdtYXN0ZXJfc3Rvcm0ucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8nLCdOZWNyb25vbWljb24gQXJjaGVyJywzLCcvbWVkaWEvaW1hZ2VzL3VuaXRzL25wY19kb3RhX25lY3Jvbm9taWNvbl9hcmNoZXIucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbmVjcm9ub21pY29uX3dhcnJpb3JfJywnTmVjcm9ub21pY29uIFdhcnJpb3InLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfbmVjcm9ub21pY29uX3dhcnJpb3IucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbHljYW5fd29sZicsJ0x5Y2FuIFdvbGYnLDQsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfbHljYW5fd29sZi5wbmcnLCBzZWxmLnNlbGVjdGVkVW5pdExldmVsKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5Vbml0T3B0aW9uKCducGNfZG90YV92aXNhZ2VfZmFtaWxpYXInLCdWaXNhZ2UgRmFtaWxpYXInLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfdmlzYWdlX2ZhbWlsaWFyLnBuZycsIHNlbGYuc2VsZWN0ZWRVbml0TGV2ZWwpXG4gICAgXSk7XG4gICAgc2VsZi5zZWxlY3RlZFVuaXQgPSBrby5vYnNlcnZhYmxlKHNlbGYuYXZhaWxhYmxlVW5pdHMoKVswXSk7XG4gICAgc2VsZi5zZWxlY3RlZFVuaXQuc3Vic2NyaWJlKGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZS5oZXJvTmFtZSgpLmluZGV4T2YoJ25wY19kb3RhX2xvbmVfZHJ1aWRfYmVhcicpICE9IC0xKSB7XG4gICAgICAgICAgICBzZWxmLmludmVudG9yeS5oYXNJbnZlbnRvcnkodHJ1ZSk7XG4gICAgICAgICAgICBzZWxmLmludmVudG9yeS5pdGVtcy5yZW1vdmVBbGwoKTtcbiAgICAgICAgICAgIHNlbGYuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zLnJlbW92ZUFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5pbnZlbnRvcnkuaGFzSW52ZW50b3J5KGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGYuaW52ZW50b3J5Lml0ZW1zLnJlbW92ZUFsbCgpO1xuICAgICAgICAgICAgc2VsZi5pbnZlbnRvcnkuYWN0aXZlSXRlbXMucmVtb3ZlQWxsKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLmhlcm8gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGtvLndyYXAuZnJvbUpTKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldKTtcbiAgICB9KTtcbiAgICBzZWxmLmhlcm9EYXRhID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXTtcbiAgICB9KTtcbiAgICBzZWxmLmdldEFiaWxpdHlMZXZlbE1heCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuYWJpbGl0eXR5cGUoKSA9PSAnRE9UQV9BQklMSVRZX1RZUEVfQVRUUklCVVRFUycpIHtcbiAgICAgICAgICAgIHJldHVybiAxMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhLm5hbWUoKSA9PSAnbmVjcm9ub21pY29uX2FyY2hlcl9tYW5hX2J1cm4nIHx8IGRhdGEubmFtZSgpID09ICduZWNyb25vbWljb25fYXJjaGVyX2FvZSdcbiAgICAgICAgICAgIHx8IGRhdGEubmFtZSgpID09ICduZWNyb25vbWljb25fd2Fycmlvcl9tYW5hX2J1cm4nIHx8IGRhdGEubmFtZSgpID09ICduZWNyb25vbWljb25fd2Fycmlvcl9sYXN0X3dpbGwnKSB7XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhLm5hbWUoKSA9PSAnbmVjcm9ub21pY29uX3dhcnJpb3Jfc2lnaHQnKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLmFiaWxpdHkgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGEgPSBuZXcgbXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbChrby5tYXBwaW5nLmZyb21KUyhteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hYmlsaXRpZXMpKTtcbiAgICAgICAgYS5oYXNTY2VwdGVyID0gc2VsZi5pbnZlbnRvcnkuaGFzU2NlcHRlclxuICAgICAgICBzd2l0Y2ggKHNlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKSkge1xuICAgICAgICAgICAgY2FzZSAnbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8xJzpcbiAgICAgICAgICAgIGNhc2UgJ25wY19kb3RhX25lY3Jvbm9taWNvbl93YXJyaW9yXzEnOlxuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMF0ubGV2ZWwoMSk7XG4gICAgICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVsxXS5sZXZlbCgxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8yJzpcbiAgICAgICAgICAgIGNhc2UgJ25wY19kb3RhX25lY3Jvbm9taWNvbl93YXJyaW9yXzInOlxuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMF0ubGV2ZWwoMik7XG4gICAgICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVsxXS5sZXZlbCgyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8zJzpcbiAgICAgICAgICAgICAgICBhLmFiaWxpdGllcygpWzBdLmxldmVsKDMpO1xuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMV0ubGV2ZWwoMyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25wY19kb3RhX25lY3Jvbm9taWNvbl93YXJyaW9yXzMnOlxuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMF0ubGV2ZWwoMyk7XG4gICAgICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVsxXS5sZXZlbCgzKTtcbiAgICAgICAgICAgICAgICBhLmFiaWxpdGllcygpWzJdLmxldmVsKDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYS5sZXZlbFVwQWJpbGl0eSA9IGZ1bmN0aW9uKGluZGV4LCBkYXRhLCBldmVudCwgaGVybykge1xuICAgICAgICAgICAgc3dpdGNoIChhLmFiaWxpdGllcygpW2luZGV4KCldLm5hbWUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbl9hcmNoZXJfbWFuYV9idXJuJzpcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fYXJjaGVyX2FvZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uX3dhcnJpb3JfbWFuYV9idXJuJzpcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fd2Fycmlvcl9sYXN0X3dpbGwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbl93YXJyaW9yX3NpZ2h0JzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoYS5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpIDwgaGVyby5nZXRBYmlsaXR5TGV2ZWxNYXgoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoYS5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKzEpO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuICAgICAgICBhLmxldmVsRG93bkFiaWxpdHkgPSBmdW5jdGlvbihpbmRleCwgZGF0YSwgZXZlbnQsIGhlcm8pIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHN3aXRjaCAoYS5hYmlsaXRpZXMoKVtpbmRleCgpXS5uYW1lKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fYXJjaGVyX21hbmFfYnVybic6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uX2FyY2hlcl9hb2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbl93YXJyaW9yX21hbmFfYnVybic6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uX3dhcnJpb3JfbGFzdF93aWxsJzpcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fd2Fycmlvcl9zaWdodCc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKT4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKS0xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9KTsgICAgICAgIFxuICAgIHNlbGYucHJpbWFyeUF0dHJpYnV0ZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAvL3ZhciB2ID0gbXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uYXR0cmlidXRlcHJpbWFyeTtcbiAgICAgICAgdmFyIHYgPSAwO1xuICAgICAgICBpZiAodiA9PSAnRE9UQV9BVFRSSUJVVEVfQUdJTElUWScpIHtcbiAgICAgICAgICAgIHJldHVybiAnYWdpJ1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHYgPT0gJ0RPVEFfQVRUUklCVVRFX0lOVEVMTEVDVCcpIHtcbiAgICAgICAgICAgIHJldHVybiAnaW50J1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHYgPT0gJ0RPVEFfQVRUUklCVVRFX1NUUkVOR1RIJykge1xuICAgICAgICAgICAgcmV0dXJuICdzdHInXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHNlbGYudG90YWxBdHRyaWJ1dGUgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgIGlmIChhID09ICdhZ2knKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzZWxmLnRvdGFsQWdpKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhID09ICdpbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzZWxmLnRvdGFsSW50KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhID09ICdzdHInKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzZWxmLnRvdGFsU3RyKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgc2VsZi50b3RhbEFnaSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dHJpYnV0ZWJhc2VhZ2lsaXR5XG4gICAgICAgICAgICAgICAgKyBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hdHRyaWJ1dGVhZ2lsaXR5Z2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0cmlidXRlcygnYWdpJykgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsKCkqMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QWdpbGl0eSgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEludCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dHJpYnV0ZWJhc2VpbnRlbGxpZ2VuY2UgXG4gICAgICAgICAgICAgICAgKyBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hdHRyaWJ1dGVpbnRlbGxpZ2VuY2VnYWluICogKHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSAtIDEpIFxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmludmVudG9yeS5nZXRBdHRyaWJ1dGVzKCdpbnQnKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwoKSoyXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRJbnRlbGxpZ2VuY2UoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxTdHIgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hdHRyaWJ1dGViYXNlc3RyZW5ndGggXG4gICAgICAgICAgICAgICAgKyBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hdHRyaWJ1dGVzdHJlbmd0aGdhaW4gKiAoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMSkgXG4gICAgICAgICAgICAgICAgLy8rIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ3N0cicpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpKjJcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldFN0cmVuZ3RoKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICAvKnNlbGYuaGVhbHRoID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uc3RhdHVzaGVhbHRoICsgc2VsZi50b3RhbFN0cigpKjE5IFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0SGVhbHRoKClcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEhlYWx0aCgpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuaGVhbHRocmVnZW4gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5zdGF0dXNoZWFsdGhyZWdlbiArIHNlbGYudG90YWxTdHIoKSouMDMgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRIZWFsdGhSZWdlbigpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0SGVhbHRoUmVnZW4oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRIZWFsdGhSZWdlbigpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYubWFuYSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLnN0YXR1c21hbmEgKyBzZWxmLnRvdGFsSW50KCkqMTMgKyBzZWxmLmludmVudG9yeS5nZXRNYW5hKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5tYW5hcmVnZW4gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICgobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uc3RhdHVzbWFuYXJlZ2VuIFxuICAgICAgICAgICAgICAgICsgc2VsZi50b3RhbEludCgpKi4wNCBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldE1hbmFSZWdlbigpKSBcbiAgICAgICAgICAgICAgICAqICgxICsgc2VsZi5pbnZlbnRvcnkuZ2V0TWFuYVJlZ2VuUGVyY2VudCgpKSBcbiAgICAgICAgICAgICAgICArIChzZWxmLnNlbGVjdGVkSGVybygpLmhlcm9OYW1lID09ICdjcnlzdGFsX21haWRlbicgPyBzZWxmLmFiaWxpdHkoKS5nZXRNYW5hUmVnZW5BcmNhbmVBdXJhKCkgKiAyIDogc2VsZi5idWZmcy5nZXRNYW5hUmVnZW5BcmNhbmVBdXJhKCkpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRNYW5hUmVnZW5CbG9vZHN0b25lKClcbiAgICAgICAgICAgICAgICAtIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0TWFuYVJlZ2VuUmVkdWN0aW9uKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEFybW9yUGh5c2ljYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFybW9yQmFzZVJlZHVjdGlvbigpICogc2VsZi5kZWJ1ZmZzLmdldEFybW9yQmFzZVJlZHVjdGlvbigpICogKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmFybW9ycGh5c2ljYWwgKyBzZWxmLnRvdGFsQWdpKCkqLjE0KVxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXJtb3IoKSArIHNlbGYuYWJpbGl0eSgpLmdldEFybW9yKCkgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFybW9yUmVkdWN0aW9uKCkgKyBzZWxmLmJ1ZmZzLmdldEFybW9yKCkgKyBzZWxmLmRlYnVmZnMuZ2V0QXJtb3JSZWR1Y3Rpb24oKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbFJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKCgwLjA2ICogc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSkgLyAoMSArIDAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsTW92ZW1lbnRTcGVlZCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc2VsZi5wYXJlbnQuYWJpbGl0eSgpLmlzU2hhcGVTaGlmdEFjdGl2ZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gNTIyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtcyA9IChzZWxmLmFiaWxpdHkoKS5zZXRNb3ZlbWVudFNwZWVkKCkgPiAwID8gc2VsZi5hYmlsaXR5KCkuc2V0TW92ZW1lbnRTcGVlZCgpIDogc2VsZi5idWZmcy5zZXRNb3ZlbWVudFNwZWVkKCkpO1xuICAgICAgICBpZiAobXMgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKChteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5tb3ZlbWVudHNwZWVkICsgc2VsZi5pbnZlbnRvcnkuZ2V0TW92ZW1lbnRTcGVlZEZsYXQoKSsgc2VsZi5hYmlsaXR5KCkuZ2V0TW92ZW1lbnRTcGVlZEZsYXQoKSkgKiBcbiAgICAgICAgICAgICAgICAgICAgKDEgKyBzZWxmLmludmVudG9yeS5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudCgpIFxuICAgICAgICAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24oKSBcbiAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgKSkudG9GaXhlZCgyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHNlbGYudG90YWxUdXJuUmF0ZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLm1vdmVtZW50dHVybnJhdGUgXG4gICAgICAgICAgICAgICAgKiAoMSArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0VHVyblJhdGVSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0VHVyblJhdGVSZWR1Y3Rpb24oKSkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgKi9cbiAgICBzZWxmLmJhc2VEYW1hZ2UgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtNYXRoLmZsb29yKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dGFja2RhbWFnZW1pbiArIHNlbGYudG90YWxBdHRyaWJ1dGUoc2VsZi5wcmltYXJ5QXR0cmlidXRlKCkpICsgc2VsZi5hYmlsaXR5KCkuZ2V0QmFzZURhbWFnZSgpLnRvdGFsKSxcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dGFja2RhbWFnZW1heCArIHNlbGYudG90YWxBdHRyaWJ1dGUoc2VsZi5wcmltYXJ5QXR0cmlidXRlKCkpICsgc2VsZi5hYmlsaXR5KCkuZ2V0QmFzZURhbWFnZSgpLnRvdGFsKV07XG4gICAgfSk7XG4gICAgLypzZWxmLmJvbnVzRGFtYWdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmludmVudG9yeS5nZXRCb251c0RhbWFnZSgpLnRvdGFsXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZSgpLnRvdGFsXG4gICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEJvbnVzRGFtYWdlKCkudG90YWxcbiAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoKHNlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5iYXNlRGFtYWdlKClbMV0pLzIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIChzZWxmLmludmVudG9yeS5nZXRCb251c0RhbWFnZVBlcmNlbnQoKS50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZVBlcmNlbnQoKS50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKyBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgICAoc2VsZi5oZXJvKCkuYXR0YWNrdHlwZSgpID09ICdET1RBX1VOSVRfQ0FQX1JBTkdFRF9BVFRBQ0snIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHNlbGYuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWUgPT0gJ2Ryb3dfcmFuZ2VyJykgPyBzZWxmLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZVByZWNpc2lvbkF1cmEoKS50b3RhbFswXSAqIHNlbGYudG90YWxBZ2koKSA6IHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhKCkudG90YWxbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDApXG4gICAgICAgICAgICAgICAgICApO1xuICAgIH0pOyovXG4gICAgLypzZWxmLmJvbnVzRGFtYWdlUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUmVkdWN0aW9uKCkgKyBzZWxmLmRlYnVmZnMuZ2V0Qm9udXNEYW1hZ2VSZWR1Y3Rpb24oKSk7XG4gICAgfSk7XG4gICAgc2VsZi5kYW1hZ2UgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtzZWxmLmJhc2VEYW1hZ2UoKVswXSArIHNlbGYuYm9udXNEYW1hZ2UoKVswXSxcbiAgICAgICAgICAgICAgICBzZWxmLmJhc2VEYW1hZ2UoKVsxXSArIHNlbGYuYm9udXNEYW1hZ2UoKVsxXV07XG4gICAgfSk7Ki9cbiAgICBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKDEgLSBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5tYWdpY2FscmVzaXN0YW5jZSAvIDEwMCkgXG4gICAgICAgICAgICAgICAgICAgKiAoMSAtIHNlbGYuaW52ZW50b3J5LmdldE1hZ2ljUmVzaXN0KCkgLyAxMDApIFxuICAgICAgICAgICAgICAgICAgICogKDEgLSBzZWxmLmFiaWxpdHkoKS5nZXRNYWdpY1Jlc2lzdCgpIC8gMTAwKSBcbiAgICAgICAgICAgICAgICAgICAqICgxIC0gc2VsZi5idWZmcy5nZXRNYWdpY1Jlc2lzdCgpIC8gMTAwKSBcbiAgICAgICAgICAgICAgICAgICAqIHNlbGYuZW5lbXkoKS5pbnZlbnRvcnkuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICogc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICAgICogc2VsZi5kZWJ1ZmZzLmdldE1hZ2ljUmVzaXN0UmVkdWN0aW9uKCk7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbE1hZ2ljUmVzaXN0YW5jZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKDEgLSBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCgpKTtcbiAgICB9KTtcbiAgICBzZWxmLmJhdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYWJpbGl0eUJBVCA9IHNlbGYuYWJpbGl0eSgpLmdldEJBVCgpO1xuICAgICAgICBpZiAoYWJpbGl0eUJBVCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhYmlsaXR5QkFUO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hdHRhY2tyYXRlO1xuICAgIH0pO1xuICAgIC8qXG4gICAgc2VsZi5pYXMgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbCA9IHBhcnNlRmxvYXQoc2VsZi50b3RhbEFnaSgpKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEF0dGFja1NwZWVkKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZCgpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRBdHRhY2tTcGVlZCgpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uKCk7XG4gICAgICAgIGlmICh2YWwgPCAtODApIHtcbiAgICAgICAgICAgIHJldHVybiAtODA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsID4gNDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gNDAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsKS50b0ZpeGVkKDIpO1xuICAgIH0pOyovXG4gICAgc2VsZi5hdHRhY2tUaW1lID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5iYXQoKSAvICgxICsgc2VsZi5pYXMoKSAvIDEwMCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5hdHRhY2tzUGVyU2Vjb25kID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoMSArIHNlbGYuaWFzKCkgLyAxMDApIC8gc2VsZi5iYXQoKTtcbiAgICB9KTtcbiAgICBzZWxmLmV2YXNpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSBzZWxmLmFiaWxpdHkoKS5zZXRFdmFzaW9uKCk7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gKGUgKiAxMDApLnRvRml4ZWQoMikgKyAnJSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKCgxLShzZWxmLmludmVudG9yeS5nZXRFdmFzaW9uKCkgKiBzZWxmLmFiaWxpdHkoKS5nZXRFdmFzaW9uKCkpKSAqIDEwMCkudG9GaXhlZCgyKSArICclJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHNlbGYuZWhwUGh5c2ljYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICgoc2VsZi5oZWFsdGgoKSAqICgxICsgLjA2ICogc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSkpIC8gKDEtKDEtKHNlbGYuaW52ZW50b3J5LmdldEV2YXNpb24oKSAqIHNlbGYuYWJpbGl0eSgpLmdldEV2YXNpb24oKSkpKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmVocE1hZ2ljYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlYWx0aCgpIC8gc2VsZi50b3RhbE1hZ2ljUmVzaXN0YW5jZVByb2R1Y3QoKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gc2VsZjtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb3JlID0gcmVxdWlyZShcIi4vaGVyb2NhbGNfY29yZVwiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX2ludmVudG9yeVwiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX2FiaWxpdHlkYXRhXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfYWJpbGl0aWVzXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfYnVmZnNcIik7XG5yZXF1aXJlKFwiLi9oZXJvY2FsY19oZXJvXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfaGVyby5pbGx1c2lvblwiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX2hlcm8ubWVlcG9cIik7XG5yZXF1aXJlKFwiLi9oZXJvY2FsY191bml0XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmU7IiwiaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICBBcnJheS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodGhpcyA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gbGlzdFtpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufSIsIi8qIVxuICogQ2hhcnQuanNcbiAqIGh0dHA6Ly9jaGFydGpzLm9yZy9cbiAqIFZlcnNpb246IDEuMC4xXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgTmljayBEb3duaWVcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL25ubmljay9DaGFydC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cbihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PXRoaXMsaT10LkNoYXJ0LGU9ZnVuY3Rpb24odCl7dGhpcy5jYW52YXM9dC5jYW52YXMsdGhpcy5jdHg9dDt0aGlzLndpZHRoPXQuY2FudmFzLndpZHRoLHRoaXMuaGVpZ2h0PXQuY2FudmFzLmhlaWdodDtyZXR1cm4gdGhpcy5hc3BlY3RSYXRpbz10aGlzLndpZHRoL3RoaXMuaGVpZ2h0LHMucmV0aW5hU2NhbGUodGhpcyksdGhpc307ZS5kZWZhdWx0cz17Z2xvYmFsOnthbmltYXRpb246ITAsYW5pbWF0aW9uU3RlcHM6NjAsYW5pbWF0aW9uRWFzaW5nOlwiZWFzZU91dFF1YXJ0XCIsc2hvd1NjYWxlOiEwLHNjYWxlT3ZlcnJpZGU6ITEsc2NhbGVTdGVwczpudWxsLHNjYWxlU3RlcFdpZHRoOm51bGwsc2NhbGVTdGFydFZhbHVlOm51bGwsc2NhbGVMaW5lQ29sb3I6XCJyZ2JhKDAsMCwwLC4xKVwiLHNjYWxlTGluZVdpZHRoOjEsc2NhbGVTaG93TGFiZWxzOiEwLHNjYWxlTGFiZWw6XCI8JT12YWx1ZSU+XCIsc2NhbGVJbnRlZ2Vyc09ubHk6ITAsc2NhbGVCZWdpbkF0WmVybzohMSxzY2FsZUZvbnRGYW1pbHk6XCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLHNjYWxlRm9udFNpemU6MTIsc2NhbGVGb250U3R5bGU6XCJub3JtYWxcIixzY2FsZUZvbnRDb2xvcjpcIiM2NjZcIixyZXNwb25zaXZlOiExLG1haW50YWluQXNwZWN0UmF0aW86ITAsc2hvd1Rvb2x0aXBzOiEwLGN1c3RvbVRvb2x0aXBzOiExLHRvb2x0aXBFdmVudHM6W1wibW91c2Vtb3ZlXCIsXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaG1vdmVcIixcIm1vdXNlb3V0XCJdLHRvb2x0aXBGaWxsQ29sb3I6XCJyZ2JhKDAsMCwwLDAuOClcIix0b29sdGlwRm9udEZhbWlseTpcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsdG9vbHRpcEZvbnRTaXplOjE0LHRvb2x0aXBGb250U3R5bGU6XCJub3JtYWxcIix0b29sdGlwRm9udENvbG9yOlwiI2ZmZlwiLHRvb2x0aXBUaXRsZUZvbnRGYW1pbHk6XCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLHRvb2x0aXBUaXRsZUZvbnRTaXplOjE0LHRvb2x0aXBUaXRsZUZvbnRTdHlsZTpcImJvbGRcIix0b29sdGlwVGl0bGVGb250Q29sb3I6XCIjZmZmXCIsdG9vbHRpcFlQYWRkaW5nOjYsdG9vbHRpcFhQYWRkaW5nOjYsdG9vbHRpcENhcmV0U2l6ZTo4LHRvb2x0aXBDb3JuZXJSYWRpdXM6Nix0b29sdGlwWE9mZnNldDoxMCx0b29sdGlwVGVtcGxhdGU6XCI8JWlmIChsYWJlbCl7JT48JT1sYWJlbCU+OiA8JX0lPjwlPSB2YWx1ZSAlPlwiLG11bHRpVG9vbHRpcFRlbXBsYXRlOlwiPCU9IHZhbHVlICU+XCIsbXVsdGlUb29sdGlwS2V5QmFja2dyb3VuZDpcIiNmZmZcIixvbkFuaW1hdGlvblByb2dyZXNzOmZ1bmN0aW9uKCl7fSxvbkFuaW1hdGlvbkNvbXBsZXRlOmZ1bmN0aW9uKCl7fX19LGUudHlwZXM9e307dmFyIHM9ZS5oZWxwZXJzPXt9LG49cy5lYWNoPWZ1bmN0aW9uKHQsaSxlKXt2YXIgcz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7aWYodClpZih0Lmxlbmd0aD09PSt0Lmxlbmd0aCl7dmFyIG47Zm9yKG49MDtuPHQubGVuZ3RoO24rKylpLmFwcGx5KGUsW3Rbbl0sbl0uY29uY2F0KHMpKX1lbHNlIGZvcih2YXIgbyBpbiB0KWkuYXBwbHkoZSxbdFtvXSxvXS5jb25jYXQocykpfSxvPXMuY2xvbmU9ZnVuY3Rpb24odCl7dmFyIGk9e307cmV0dXJuIG4odCxmdW5jdGlvbihlLHMpe3QuaGFzT3duUHJvcGVydHkocykmJihpW3NdPWUpfSksaX0sYT1zLmV4dGVuZD1mdW5jdGlvbih0KXtyZXR1cm4gbihBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksZnVuY3Rpb24oaSl7bihpLGZ1bmN0aW9uKGUscyl7aS5oYXNPd25Qcm9wZXJ0eShzKSYmKHRbc109ZSl9KX0pLHR9LGg9cy5tZXJnZT1mdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gdC51bnNoaWZ0KHt9KSxhLmFwcGx5KG51bGwsdCl9LGw9cy5pbmRleE9mPWZ1bmN0aW9uKHQsaSl7aWYoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpcmV0dXJuIHQuaW5kZXhPZihpKTtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZih0W2VdPT09aSlyZXR1cm4gZTtyZXR1cm4tMX0scj0ocy53aGVyZT1mdW5jdGlvbih0LGkpe3ZhciBlPVtdO3JldHVybiBzLmVhY2godCxmdW5jdGlvbih0KXtpKHQpJiZlLnB1c2godCl9KSxlfSxzLmZpbmROZXh0V2hlcmU9ZnVuY3Rpb24odCxpLGUpe2V8fChlPS0xKTtmb3IodmFyIHM9ZSsxO3M8dC5sZW5ndGg7cysrKXt2YXIgbj10W3NdO2lmKGkobikpcmV0dXJuIG59fSxzLmZpbmRQcmV2aW91c1doZXJlPWZ1bmN0aW9uKHQsaSxlKXtlfHwoZT10Lmxlbmd0aCk7Zm9yKHZhciBzPWUtMTtzPj0wO3MtLSl7dmFyIG49dFtzXTtpZihpKG4pKXJldHVybiBufX0scy5pbmhlcml0cz1mdW5jdGlvbih0KXt2YXIgaT10aGlzLGU9dCYmdC5oYXNPd25Qcm9wZXJ0eShcImNvbnN0cnVjdG9yXCIpP3QuY29uc3RydWN0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHM9ZnVuY3Rpb24oKXt0aGlzLmNvbnN0cnVjdG9yPWV9O3JldHVybiBzLnByb3RvdHlwZT1pLnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgcyxlLmV4dGVuZD1yLHQmJmEoZS5wcm90b3R5cGUsdCksZS5fX3N1cGVyX189aS5wcm90b3R5cGUsZX0pLGM9cy5ub29wPWZ1bmN0aW9uKCl7fSx1PXMudWlkPWZ1bmN0aW9uKCl7dmFyIHQ9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm5cImNoYXJ0LVwiK3QrK319KCksZD1zLndhcm49ZnVuY3Rpb24odCl7d2luZG93LmNvbnNvbGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHdpbmRvdy5jb25zb2xlLndhcm4mJmNvbnNvbGUud2Fybih0KX0scD1zLmFtZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQsZj1zLmlzTnVtYmVyPWZ1bmN0aW9uKHQpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KHQpKSYmaXNGaW5pdGUodCl9LGc9cy5tYXg9ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsdCl9LG09cy5taW49ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGgubWluLmFwcGx5KE1hdGgsdCl9LHY9KHMuY2FwPWZ1bmN0aW9uKHQsaSxlKXtpZihmKGkpKXtpZih0PmkpcmV0dXJuIGl9ZWxzZSBpZihmKGUpJiZlPnQpcmV0dXJuIGU7cmV0dXJuIHR9LHMuZ2V0RGVjaW1hbFBsYWNlcz1mdW5jdGlvbih0KXtyZXR1cm4gdCUxIT09MCYmZih0KT90LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdLmxlbmd0aDowfSksUz1zLnJhZGlhbnM9ZnVuY3Rpb24odCl7cmV0dXJuIHQqKE1hdGguUEkvMTgwKX0seD0ocy5nZXRBbmdsZUZyb21Qb2ludD1mdW5jdGlvbih0LGkpe3ZhciBlPWkueC10Lngscz1pLnktdC55LG49TWF0aC5zcXJ0KGUqZStzKnMpLG89MipNYXRoLlBJK01hdGguYXRhbjIocyxlKTtyZXR1cm4gMD5lJiYwPnMmJihvKz0yKk1hdGguUEkpLHthbmdsZTpvLGRpc3RhbmNlOm59fSxzLmFsaWFzUGl4ZWw9ZnVuY3Rpb24odCl7cmV0dXJuIHQlMj09PTA/MDouNX0pLHk9KHMuc3BsaW5lQ3VydmU9ZnVuY3Rpb24odCxpLGUscyl7dmFyIG49TWF0aC5zcXJ0KE1hdGgucG93KGkueC10LngsMikrTWF0aC5wb3coaS55LXQueSwyKSksbz1NYXRoLnNxcnQoTWF0aC5wb3coZS54LWkueCwyKStNYXRoLnBvdyhlLnktaS55LDIpKSxhPXMqbi8obitvKSxoPXMqby8obitvKTtyZXR1cm57aW5uZXI6e3g6aS54LWEqKGUueC10LngpLHk6aS55LWEqKGUueS10LnkpfSxvdXRlcjp7eDppLngraCooZS54LXQueCkseTppLnkraCooZS55LXQueSl9fX0scy5jYWxjdWxhdGVPcmRlck9mTWFnbml0dWRlPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmZsb29yKE1hdGgubG9nKHQpL01hdGguTE4xMCl9KSxDPShzLmNhbGN1bGF0ZVNjYWxlUmFuZ2U9ZnVuY3Rpb24odCxpLGUscyxuKXt2YXIgbz0yLGE9TWF0aC5mbG9vcihpLygxLjUqZSkpLGg9bz49YSxsPWcodCkscj1tKHQpO2w9PT1yJiYobCs9LjUscj49LjUmJiFzP3ItPS41OmwrPS41KTtmb3IodmFyIGM9TWF0aC5hYnMobC1yKSx1PXkoYyksZD1NYXRoLmNlaWwobC8oMSpNYXRoLnBvdygxMCx1KSkpKk1hdGgucG93KDEwLHUpLHA9cz8wOk1hdGguZmxvb3Ioci8oMSpNYXRoLnBvdygxMCx1KSkpKk1hdGgucG93KDEwLHUpLGY9ZC1wLHY9TWF0aC5wb3coMTAsdSksUz1NYXRoLnJvdW5kKGYvdik7KFM+YXx8YT4yKlMpJiYhaDspaWYoUz5hKXYqPTIsUz1NYXRoLnJvdW5kKGYvdiksUyUxIT09MCYmKGg9ITApO2Vsc2UgaWYobiYmdT49MCl7aWYodi8yJTEhPT0wKWJyZWFrO3YvPTIsUz1NYXRoLnJvdW5kKGYvdil9ZWxzZSB2Lz0yLFM9TWF0aC5yb3VuZChmL3YpO3JldHVybiBoJiYoUz1vLHY9Zi9TKSx7c3RlcHM6UyxzdGVwVmFsdWU6dixtaW46cCxtYXg6cCtTKnZ9fSxzLnRlbXBsYXRlPWZ1bmN0aW9uKHQsaSl7ZnVuY3Rpb24gZSh0LGkpe3ZhciBlPS9cXFcvLnRlc3QodCk/bmV3IEZ1bmN0aW9uKFwib2JqXCIsXCJ2YXIgcD1bXSxwcmludD1mdW5jdGlvbigpe3AucHVzaC5hcHBseShwLGFyZ3VtZW50cyk7fTt3aXRoKG9iail7cC5wdXNoKCdcIit0LnJlcGxhY2UoL1tcXHJcXHRcXG5dL2csXCIgXCIpLnNwbGl0KFwiPCVcIikuam9pbihcIlx0XCIpLnJlcGxhY2UoLygoXnwlPilbXlxcdF0qKScvZyxcIiQxXFxyXCIpLnJlcGxhY2UoL1xcdD0oLio/KSU+L2csXCInLCQxLCdcIikuc3BsaXQoXCJcdFwiKS5qb2luKFwiJyk7XCIpLnNwbGl0KFwiJT5cIikuam9pbihcInAucHVzaCgnXCIpLnNwbGl0KFwiXFxyXCIpLmpvaW4oXCJcXFxcJ1wiKStcIicpO31yZXR1cm4gcC5qb2luKCcnKTtcIik6c1t0XT1zW3RdO3JldHVybiBpP2UoaSk6ZX1pZih0IGluc3RhbmNlb2YgRnVuY3Rpb24pcmV0dXJuIHQoaSk7dmFyIHM9e307cmV0dXJuIGUodCxpKX0pLHc9KHMuZ2VuZXJhdGVMYWJlbHM9ZnVuY3Rpb24odCxpLGUscyl7dmFyIG89bmV3IEFycmF5KGkpO3JldHVybiBsYWJlbFRlbXBsYXRlU3RyaW5nJiZuKG8sZnVuY3Rpb24oaSxuKXtvW25dPUModCx7dmFsdWU6ZStzKihuKzEpfSl9KSxvfSxzLmVhc2luZ0VmZmVjdHM9e2xpbmVhcjpmdW5jdGlvbih0KXtyZXR1cm4gdH0sZWFzZUluUXVhZDpmdW5jdGlvbih0KXtyZXR1cm4gdCp0fSxlYXNlT3V0UXVhZDpmdW5jdGlvbih0KXtyZXR1cm4tMSp0Kih0LTIpfSxlYXNlSW5PdXRRdWFkOmZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8uNSp0KnQ6LTAuNSooLS10Kih0LTIpLTEpfSxlYXNlSW5DdWJpYzpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KnR9LGVhc2VPdXRDdWJpYzpmdW5jdGlvbih0KXtyZXR1cm4gMSooKHQ9dC8xLTEpKnQqdCsxKX0sZWFzZUluT3V0Q3ViaWM6ZnVuY3Rpb24odCl7cmV0dXJuKHQvPS41KTwxPy41KnQqdCp0Oi41KigodC09MikqdCp0KzIpfSxlYXNlSW5RdWFydDpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KnQqdH0sZWFzZU91dFF1YXJ0OmZ1bmN0aW9uKHQpe3JldHVybi0xKigodD10LzEtMSkqdCp0KnQtMSl9LGVhc2VJbk91dFF1YXJ0OmZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8uNSp0KnQqdCp0Oi0wLjUqKCh0LT0yKSp0KnQqdC0yKX0sZWFzZUluUXVpbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIDEqKHQvPTEpKnQqdCp0KnR9LGVhc2VPdXRRdWludDpmdW5jdGlvbih0KXtyZXR1cm4gMSooKHQ9dC8xLTEpKnQqdCp0KnQrMSl9LGVhc2VJbk91dFF1aW50OmZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8uNSp0KnQqdCp0KnQ6LjUqKCh0LT0yKSp0KnQqdCp0KzIpfSxlYXNlSW5TaW5lOmZ1bmN0aW9uKHQpe3JldHVybi0xKk1hdGguY29zKHQvMSooTWF0aC5QSS8yKSkrMX0sZWFzZU91dFNpbmU6ZnVuY3Rpb24odCl7cmV0dXJuIDEqTWF0aC5zaW4odC8xKihNYXRoLlBJLzIpKX0sZWFzZUluT3V0U2luZTpmdW5jdGlvbih0KXtyZXR1cm4tMC41KihNYXRoLmNvcyhNYXRoLlBJKnQvMSktMSl9LGVhc2VJbkV4cG86ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10PzE6MSpNYXRoLnBvdygyLDEwKih0LzEtMSkpfSxlYXNlT3V0RXhwbzpmdW5jdGlvbih0KXtyZXR1cm4gMT09PXQ/MToxKigtTWF0aC5wb3coMiwtMTAqdC8xKSsxKX0sZWFzZUluT3V0RXhwbzpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDoxPT09dD8xOih0Lz0uNSk8MT8uNSpNYXRoLnBvdygyLDEwKih0LTEpKTouNSooLU1hdGgucG93KDIsLTEwKi0tdCkrMil9LGVhc2VJbkNpcmM6ZnVuY3Rpb24odCl7cmV0dXJuIHQ+PTE/dDotMSooTWF0aC5zcXJ0KDEtKHQvPTEpKnQpLTEpfSxlYXNlT3V0Q2lyYzpmdW5jdGlvbih0KXtyZXR1cm4gMSpNYXRoLnNxcnQoMS0odD10LzEtMSkqdCl9LGVhc2VJbk91dENpcmM6ZnVuY3Rpb24odCl7cmV0dXJuKHQvPS41KTwxPy0wLjUqKE1hdGguc3FydCgxLXQqdCktMSk6LjUqKE1hdGguc3FydCgxLSh0LT0yKSp0KSsxKX0sZWFzZUluRWxhc3RpYzpmdW5jdGlvbih0KXt2YXIgaT0xLjcwMTU4LGU9MCxzPTE7cmV0dXJuIDA9PT10PzA6MT09KHQvPTEpPzE6KGV8fChlPS4zKSxzPE1hdGguYWJzKDEpPyhzPTEsaT1lLzQpOmk9ZS8oMipNYXRoLlBJKSpNYXRoLmFzaW4oMS9zKSwtKHMqTWF0aC5wb3coMiwxMCoodC09MSkpKk1hdGguc2luKDIqKDEqdC1pKSpNYXRoLlBJL2UpKSl9LGVhc2VPdXRFbGFzdGljOmZ1bmN0aW9uKHQpe3ZhciBpPTEuNzAxNTgsZT0wLHM9MTtyZXR1cm4gMD09PXQ/MDoxPT0odC89MSk/MTooZXx8KGU9LjMpLHM8TWF0aC5hYnMoMSk/KHM9MSxpPWUvNCk6aT1lLygyKk1hdGguUEkpKk1hdGguYXNpbigxL3MpLHMqTWF0aC5wb3coMiwtMTAqdCkqTWF0aC5zaW4oMiooMSp0LWkpKk1hdGguUEkvZSkrMSl9LGVhc2VJbk91dEVsYXN0aWM6ZnVuY3Rpb24odCl7dmFyIGk9MS43MDE1OCxlPTAscz0xO3JldHVybiAwPT09dD8wOjI9PSh0Lz0uNSk/MTooZXx8KGU9LjMqMS41KSxzPE1hdGguYWJzKDEpPyhzPTEsaT1lLzQpOmk9ZS8oMipNYXRoLlBJKSpNYXRoLmFzaW4oMS9zKSwxPnQ/LS41KnMqTWF0aC5wb3coMiwxMCoodC09MSkpKk1hdGguc2luKDIqKDEqdC1pKSpNYXRoLlBJL2UpOnMqTWF0aC5wb3coMiwtMTAqKHQtPTEpKSpNYXRoLnNpbigyKigxKnQtaSkqTWF0aC5QSS9lKSouNSsxKX0sZWFzZUluQmFjazpmdW5jdGlvbih0KXt2YXIgaT0xLjcwMTU4O3JldHVybiAxKih0Lz0xKSp0KigoaSsxKSp0LWkpfSxlYXNlT3V0QmFjazpmdW5jdGlvbih0KXt2YXIgaT0xLjcwMTU4O3JldHVybiAxKigodD10LzEtMSkqdCooKGkrMSkqdCtpKSsxKX0sZWFzZUluT3V0QmFjazpmdW5jdGlvbih0KXt2YXIgaT0xLjcwMTU4O3JldHVybih0Lz0uNSk8MT8uNSp0KnQqKCgoaSo9MS41MjUpKzEpKnQtaSk6LjUqKCh0LT0yKSp0KigoKGkqPTEuNTI1KSsxKSp0K2kpKzIpfSxlYXNlSW5Cb3VuY2U6ZnVuY3Rpb24odCl7cmV0dXJuIDEtdy5lYXNlT3V0Qm91bmNlKDEtdCl9LGVhc2VPdXRCb3VuY2U6ZnVuY3Rpb24odCl7cmV0dXJuKHQvPTEpPDEvMi43NT83LjU2MjUqdCp0OjIvMi43NT50PzEqKDcuNTYyNSoodC09MS41LzIuNzUpKnQrLjc1KToyLjUvMi43NT50PzEqKDcuNTYyNSoodC09Mi4yNS8yLjc1KSp0Ky45Mzc1KToxKig3LjU2MjUqKHQtPTIuNjI1LzIuNzUpKnQrLjk4NDM3NSl9LGVhc2VJbk91dEJvdW5jZTpmdW5jdGlvbih0KXtyZXR1cm4uNT50Py41KncuZWFzZUluQm91bmNlKDIqdCk6LjUqdy5lYXNlT3V0Qm91bmNlKDIqdC0xKSsuNX19KSxiPXMucmVxdWVzdEFuaW1GcmFtZT1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbih0KXtyZXR1cm4gd2luZG93LnNldFRpbWVvdXQodCwxZTMvNjApfX0oKSxQPShzLmNhbmNlbEFuaW1GcmFtZT1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24odCl7cmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQodCwxZTMvNjApfX0oKSxzLmFuaW1hdGlvbkxvb3A9ZnVuY3Rpb24odCxpLGUscyxuLG8pe3ZhciBhPTAsaD13W2VdfHx3LmxpbmVhcixsPWZ1bmN0aW9uKCl7YSsrO3ZhciBlPWEvaSxyPWgoZSk7dC5jYWxsKG8scixlLGEpLHMuY2FsbChvLHIsZSksaT5hP28uYW5pbWF0aW9uRnJhbWU9YihsKTpuLmFwcGx5KG8pfTtiKGwpfSxzLmdldFJlbGF0aXZlUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGksZSxzPXQub3JpZ2luYWxFdmVudHx8dCxuPXQuY3VycmVudFRhcmdldHx8dC5zcmNFbGVtZW50LG89bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyZXR1cm4gcy50b3VjaGVzPyhpPXMudG91Y2hlc1swXS5jbGllbnRYLW8ubGVmdCxlPXMudG91Y2hlc1swXS5jbGllbnRZLW8udG9wKTooaT1zLmNsaWVudFgtby5sZWZ0LGU9cy5jbGllbnRZLW8udG9wKSx7eDppLHk6ZX19LHMuYWRkRXZlbnQ9ZnVuY3Rpb24odCxpLGUpe3QuYWRkRXZlbnRMaXN0ZW5lcj90LmFkZEV2ZW50TGlzdGVuZXIoaSxlKTp0LmF0dGFjaEV2ZW50P3QuYXR0YWNoRXZlbnQoXCJvblwiK2ksZSk6dFtcIm9uXCIraV09ZX0pLEw9cy5yZW1vdmVFdmVudD1mdW5jdGlvbih0LGksZSl7dC5yZW1vdmVFdmVudExpc3RlbmVyP3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLGUsITEpOnQuZGV0YWNoRXZlbnQ/dC5kZXRhY2hFdmVudChcIm9uXCIraSxlKTp0W1wib25cIitpXT1jfSxrPShzLmJpbmRFdmVudHM9ZnVuY3Rpb24odCxpLGUpe3QuZXZlbnRzfHwodC5ldmVudHM9e30pLG4oaSxmdW5jdGlvbihpKXt0LmV2ZW50c1tpXT1mdW5jdGlvbigpe2UuYXBwbHkodCxhcmd1bWVudHMpfSxQKHQuY2hhcnQuY2FudmFzLGksdC5ldmVudHNbaV0pfSl9LHMudW5iaW5kRXZlbnRzPWZ1bmN0aW9uKHQsaSl7bihpLGZ1bmN0aW9uKGksZSl7TCh0LmNoYXJ0LmNhbnZhcyxlLGkpfSl9KSxGPXMuZ2V0TWF4aW11bVdpZHRoPWZ1bmN0aW9uKHQpe3ZhciBpPXQucGFyZW50Tm9kZTtyZXR1cm4gaS5jbGllbnRXaWR0aH0sUj1zLmdldE1heGltdW1IZWlnaHQ9ZnVuY3Rpb24odCl7dmFyIGk9dC5wYXJlbnROb2RlO3JldHVybiBpLmNsaWVudEhlaWdodH0sVD0ocy5nZXRNYXhpbXVtU2l6ZT1zLmdldE1heGltdW1XaWR0aCxzLnJldGluYVNjYWxlPWZ1bmN0aW9uKHQpe3ZhciBpPXQuY3R4LGU9dC5jYW52YXMud2lkdGgscz10LmNhbnZhcy5oZWlnaHQ7d2luZG93LmRldmljZVBpeGVsUmF0aW8mJihpLmNhbnZhcy5zdHlsZS53aWR0aD1lK1wicHhcIixpLmNhbnZhcy5zdHlsZS5oZWlnaHQ9cytcInB4XCIsaS5jYW52YXMuaGVpZ2h0PXMqd2luZG93LmRldmljZVBpeGVsUmF0aW8saS5jYW52YXMud2lkdGg9ZSp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxpLnNjYWxlKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSl9KSxBPXMuY2xlYXI9ZnVuY3Rpb24odCl7dC5jdHguY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KX0sTT1zLmZvbnRTdHJpbmc9ZnVuY3Rpb24odCxpLGUpe3JldHVybiBpK1wiIFwiK3QrXCJweCBcIitlfSxXPXMubG9uZ2VzdFRleHQ9ZnVuY3Rpb24odCxpLGUpe3QuZm9udD1pO3ZhciBzPTA7cmV0dXJuIG4oZSxmdW5jdGlvbihpKXt2YXIgZT10Lm1lYXN1cmVUZXh0KGkpLndpZHRoO3M9ZT5zP2U6c30pLHN9LHo9cy5kcmF3Um91bmRlZFJlY3RhbmdsZT1mdW5jdGlvbih0LGksZSxzLG4sbyl7dC5iZWdpblBhdGgoKSx0Lm1vdmVUbyhpK28sZSksdC5saW5lVG8oaStzLW8sZSksdC5xdWFkcmF0aWNDdXJ2ZVRvKGkrcyxlLGkrcyxlK28pLHQubGluZVRvKGkrcyxlK24tbyksdC5xdWFkcmF0aWNDdXJ2ZVRvKGkrcyxlK24saStzLW8sZStuKSx0LmxpbmVUbyhpK28sZStuKSx0LnF1YWRyYXRpY0N1cnZlVG8oaSxlK24saSxlK24tbyksdC5saW5lVG8oaSxlK28pLHQucXVhZHJhdGljQ3VydmVUbyhpLGUsaStvLGUpLHQuY2xvc2VQYXRoKCl9O2UuaW5zdGFuY2VzPXt9LGUuVHlwZT1mdW5jdGlvbih0LGkscyl7dGhpcy5vcHRpb25zPWksdGhpcy5jaGFydD1zLHRoaXMuaWQ9dSgpLGUuaW5zdGFuY2VzW3RoaXMuaWRdPXRoaXMsaS5yZXNwb25zaXZlJiZ0aGlzLnJlc2l6ZSgpLHRoaXMuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsdCl9LGEoZS5UeXBlLnByb3RvdHlwZSx7aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzfSxjbGVhcjpmdW5jdGlvbigpe3JldHVybiBBKHRoaXMuY2hhcnQpLHRoaXN9LHN0b3A6ZnVuY3Rpb24oKXtyZXR1cm4gcy5jYW5jZWxBbmltRnJhbWUuY2FsbCh0LHRoaXMuYW5pbWF0aW9uRnJhbWUpLHRoaXN9LHJlc2l6ZTpmdW5jdGlvbih0KXt0aGlzLnN0b3AoKTt2YXIgaT10aGlzLmNoYXJ0LmNhbnZhcyxlPUYodGhpcy5jaGFydC5jYW52YXMpLHM9dGhpcy5vcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8/ZS90aGlzLmNoYXJ0LmFzcGVjdFJhdGlvOlIodGhpcy5jaGFydC5jYW52YXMpO3JldHVybiBpLndpZHRoPXRoaXMuY2hhcnQud2lkdGg9ZSxpLmhlaWdodD10aGlzLmNoYXJ0LmhlaWdodD1zLFQodGhpcy5jaGFydCksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdC5hcHBseSh0aGlzLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSksdGhpc30scmVmbG93OmMscmVuZGVyOmZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0aGlzLnJlZmxvdygpLHRoaXMub3B0aW9ucy5hbmltYXRpb24mJiF0P3MuYW5pbWF0aW9uTG9vcCh0aGlzLmRyYXcsdGhpcy5vcHRpb25zLmFuaW1hdGlvblN0ZXBzLHRoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmcsdGhpcy5vcHRpb25zLm9uQW5pbWF0aW9uUHJvZ3Jlc3MsdGhpcy5vcHRpb25zLm9uQW5pbWF0aW9uQ29tcGxldGUsdGhpcyk6KHRoaXMuZHJhdygpLHRoaXMub3B0aW9ucy5vbkFuaW1hdGlvbkNvbXBsZXRlLmNhbGwodGhpcykpLHRoaXN9LGdlbmVyYXRlTGVnZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEModGhpcy5vcHRpb25zLmxlZ2VuZFRlbXBsYXRlLHRoaXMpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5jbGVhcigpLGsodGhpcyx0aGlzLmV2ZW50cyk7dmFyIHQ9dGhpcy5jaGFydC5jYW52YXM7dC53aWR0aD10aGlzLmNoYXJ0LndpZHRoLHQuaGVpZ2h0PXRoaXMuY2hhcnQuaGVpZ2h0LHQuc3R5bGUucmVtb3ZlUHJvcGVydHk/KHQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ3aWR0aFwiKSx0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiaGVpZ2h0XCIpKToodC5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJ3aWR0aFwiKSx0LnN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcImhlaWdodFwiKSksZGVsZXRlIGUuaW5zdGFuY2VzW3RoaXMuaWRdfSxzaG93VG9vbHRpcDpmdW5jdGlvbih0LGkpe1widW5kZWZpbmVkXCI9PXR5cGVvZiB0aGlzLmFjdGl2ZUVsZW1lbnRzJiYodGhpcy5hY3RpdmVFbGVtZW50cz1bXSk7dmFyIG89ZnVuY3Rpb24odCl7dmFyIGk9ITE7cmV0dXJuIHQubGVuZ3RoIT09dGhpcy5hY3RpdmVFbGVtZW50cy5sZW5ndGg/aT0hMDoobih0LGZ1bmN0aW9uKHQsZSl7dCE9PXRoaXMuYWN0aXZlRWxlbWVudHNbZV0mJihpPSEwKX0sdGhpcyksaSl9LmNhbGwodGhpcyx0KTtpZihvfHxpKXtpZih0aGlzLmFjdGl2ZUVsZW1lbnRzPXQsdGhpcy5kcmF3KCksdGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzJiZ0aGlzLm9wdGlvbnMuY3VzdG9tVG9vbHRpcHMoITEpLHQubGVuZ3RoPjApaWYodGhpcy5kYXRhc2V0cyYmdGhpcy5kYXRhc2V0cy5sZW5ndGg+MSl7Zm9yKHZhciBhLGgscj10aGlzLmRhdGFzZXRzLmxlbmd0aC0xO3I+PTAmJihhPXRoaXMuZGF0YXNldHNbcl0ucG9pbnRzfHx0aGlzLmRhdGFzZXRzW3JdLmJhcnN8fHRoaXMuZGF0YXNldHNbcl0uc2VnbWVudHMsaD1sKGEsdFswXSksLTE9PT1oKTtyLS0pO3ZhciBjPVtdLHU9W10sZD1mdW5jdGlvbigpe3ZhciB0LGksZSxuLG8sYT1bXSxsPVtdLHI9W107cmV0dXJuIHMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGkpe3Q9aS5wb2ludHN8fGkuYmFyc3x8aS5zZWdtZW50cyx0W2hdJiZ0W2hdLmhhc1ZhbHVlKCkmJmEucHVzaCh0W2hdKX0pLHMuZWFjaChhLGZ1bmN0aW9uKHQpe2wucHVzaCh0LngpLHIucHVzaCh0LnkpLGMucHVzaChzLnRlbXBsYXRlKHRoaXMub3B0aW9ucy5tdWx0aVRvb2x0aXBUZW1wbGF0ZSx0KSksdS5wdXNoKHtmaWxsOnQuX3NhdmVkLmZpbGxDb2xvcnx8dC5maWxsQ29sb3Isc3Ryb2tlOnQuX3NhdmVkLnN0cm9rZUNvbG9yfHx0LnN0cm9rZUNvbG9yfSl9LHRoaXMpLG89bShyKSxlPWcociksbj1tKGwpLGk9ZyhsKSx7eDpuPnRoaXMuY2hhcnQud2lkdGgvMj9uOmkseToobytlKS8yfX0uY2FsbCh0aGlzLGgpO25ldyBlLk11bHRpVG9vbHRpcCh7eDpkLngseTpkLnkseFBhZGRpbmc6dGhpcy5vcHRpb25zLnRvb2x0aXBYUGFkZGluZyx5UGFkZGluZzp0aGlzLm9wdGlvbnMudG9vbHRpcFlQYWRkaW5nLHhPZmZzZXQ6dGhpcy5vcHRpb25zLnRvb2x0aXBYT2Zmc2V0LGZpbGxDb2xvcjp0aGlzLm9wdGlvbnMudG9vbHRpcEZpbGxDb2xvcix0ZXh0Q29sb3I6dGhpcy5vcHRpb25zLnRvb2x0aXBGb250Q29sb3IsZm9udEZhbWlseTp0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRGYW1pbHksZm9udFN0eWxlOnRoaXMub3B0aW9ucy50b29sdGlwRm9udFN0eWxlLGZvbnRTaXplOnRoaXMub3B0aW9ucy50b29sdGlwRm9udFNpemUsdGl0bGVUZXh0Q29sb3I6dGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRDb2xvcix0aXRsZUZvbnRGYW1pbHk6dGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRGYW1pbHksdGl0bGVGb250U3R5bGU6dGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRTdHlsZSx0aXRsZUZvbnRTaXplOnRoaXMub3B0aW9ucy50b29sdGlwVGl0bGVGb250U2l6ZSxjb3JuZXJSYWRpdXM6dGhpcy5vcHRpb25zLnRvb2x0aXBDb3JuZXJSYWRpdXMsbGFiZWxzOmMsbGVnZW5kQ29sb3JzOnUsbGVnZW5kQ29sb3JCYWNrZ3JvdW5kOnRoaXMub3B0aW9ucy5tdWx0aVRvb2x0aXBLZXlCYWNrZ3JvdW5kLHRpdGxlOnRbMF0ubGFiZWwsY2hhcnQ6dGhpcy5jaGFydCxjdHg6dGhpcy5jaGFydC5jdHgsY3VzdG9tOnRoaXMub3B0aW9ucy5jdXN0b21Ub29sdGlwc30pLmRyYXcoKX1lbHNlIG4odCxmdW5jdGlvbih0KXt2YXIgaT10LnRvb2x0aXBQb3NpdGlvbigpO25ldyBlLlRvb2x0aXAoe3g6TWF0aC5yb3VuZChpLngpLHk6TWF0aC5yb3VuZChpLnkpLHhQYWRkaW5nOnRoaXMub3B0aW9ucy50b29sdGlwWFBhZGRpbmcseVBhZGRpbmc6dGhpcy5vcHRpb25zLnRvb2x0aXBZUGFkZGluZyxmaWxsQ29sb3I6dGhpcy5vcHRpb25zLnRvb2x0aXBGaWxsQ29sb3IsdGV4dENvbG9yOnRoaXMub3B0aW9ucy50b29sdGlwRm9udENvbG9yLGZvbnRGYW1pbHk6dGhpcy5vcHRpb25zLnRvb2x0aXBGb250RmFtaWx5LGZvbnRTdHlsZTp0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRTdHlsZSxmb250U2l6ZTp0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRTaXplLGNhcmV0SGVpZ2h0OnRoaXMub3B0aW9ucy50b29sdGlwQ2FyZXRTaXplLGNvcm5lclJhZGl1czp0aGlzLm9wdGlvbnMudG9vbHRpcENvcm5lclJhZGl1cyx0ZXh0OkModGhpcy5vcHRpb25zLnRvb2x0aXBUZW1wbGF0ZSx0KSxjaGFydDp0aGlzLmNoYXJ0LGN1c3RvbTp0aGlzLm9wdGlvbnMuY3VzdG9tVG9vbHRpcHN9KS5kcmF3KCl9LHRoaXMpO3JldHVybiB0aGlzfX0sdG9CYXNlNjRJbWFnZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYXJ0LmNhbnZhcy50b0RhdGFVUkwuYXBwbHkodGhpcy5jaGFydC5jYW52YXMsYXJndW1lbnRzKX19KSxlLlR5cGUuZXh0ZW5kPWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMscz1mdW5jdGlvbigpe3JldHVybiBpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07aWYocy5wcm90b3R5cGU9byhpLnByb3RvdHlwZSksYShzLnByb3RvdHlwZSx0KSxzLmV4dGVuZD1lLlR5cGUuZXh0ZW5kLHQubmFtZXx8aS5wcm90b3R5cGUubmFtZSl7dmFyIG49dC5uYW1lfHxpLnByb3RvdHlwZS5uYW1lLGw9ZS5kZWZhdWx0c1tpLnByb3RvdHlwZS5uYW1lXT9vKGUuZGVmYXVsdHNbaS5wcm90b3R5cGUubmFtZV0pOnt9O2UuZGVmYXVsdHNbbl09YShsLHQuZGVmYXVsdHMpLGUudHlwZXNbbl09cyxlLnByb3RvdHlwZVtuXT1mdW5jdGlvbih0LGkpe3ZhciBvPWgoZS5kZWZhdWx0cy5nbG9iYWwsZS5kZWZhdWx0c1tuXSxpfHx7fSk7cmV0dXJuIG5ldyBzKHQsbyx0aGlzKX19ZWxzZSBkKFwiTmFtZSBub3QgcHJvdmlkZWQgZm9yIHRoaXMgY2hhcnQsIHNvIGl0IGhhc24ndCBiZWVuIHJlZ2lzdGVyZWRcIik7cmV0dXJuIGl9LGUuRWxlbWVudD1mdW5jdGlvbih0KXthKHRoaXMsdCksdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLnNhdmUoKX0sYShlLkVsZW1lbnQucHJvdG90eXBlLHtpbml0aWFsaXplOmZ1bmN0aW9uKCl7fSxyZXN0b3JlOmZ1bmN0aW9uKHQpe3JldHVybiB0P24odCxmdW5jdGlvbih0KXt0aGlzW3RdPXRoaXMuX3NhdmVkW3RdfSx0aGlzKTphKHRoaXMsdGhpcy5fc2F2ZWQpLHRoaXN9LHNhdmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2F2ZWQ9byh0aGlzKSxkZWxldGUgdGhpcy5fc2F2ZWQuX3NhdmVkLHRoaXN9LHVwZGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gbih0LGZ1bmN0aW9uKHQsaSl7dGhpcy5fc2F2ZWRbaV09dGhpc1tpXSx0aGlzW2ldPXR9LHRoaXMpLHRoaXN9LHRyYW5zaXRpb246ZnVuY3Rpb24odCxpKXtyZXR1cm4gbih0LGZ1bmN0aW9uKHQsZSl7dGhpc1tlXT0odC10aGlzLl9zYXZlZFtlXSkqaSt0aGlzLl9zYXZlZFtlXX0sdGhpcyksdGhpc30sdG9vbHRpcFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJue3g6dGhpcy54LHk6dGhpcy55fX0saGFzVmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZih0aGlzLnZhbHVlKX19KSxlLkVsZW1lbnQuZXh0ZW5kPXIsZS5Qb2ludD1lLkVsZW1lbnQuZXh0ZW5kKHtkaXNwbGF5OiEwLGluUmFuZ2U6ZnVuY3Rpb24odCxpKXt2YXIgZT10aGlzLmhpdERldGVjdGlvblJhZGl1cyt0aGlzLnJhZGl1cztyZXR1cm4gTWF0aC5wb3codC10aGlzLngsMikrTWF0aC5wb3coaS10aGlzLnksMik8TWF0aC5wb3coZSwyKX0sZHJhdzpmdW5jdGlvbigpe2lmKHRoaXMuZGlzcGxheSl7dmFyIHQ9dGhpcy5jdHg7dC5iZWdpblBhdGgoKSx0LmFyYyh0aGlzLngsdGhpcy55LHRoaXMucmFkaXVzLDAsMipNYXRoLlBJKSx0LmNsb3NlUGF0aCgpLHQuc3Ryb2tlU3R5bGU9dGhpcy5zdHJva2VDb2xvcix0LmxpbmVXaWR0aD10aGlzLnN0cm9rZVdpZHRoLHQuZmlsbFN0eWxlPXRoaXMuZmlsbENvbG9yLHQuZmlsbCgpLHQuc3Ryb2tlKCl9fX0pLGUuQXJjPWUuRWxlbWVudC5leHRlbmQoe2luUmFuZ2U6ZnVuY3Rpb24odCxpKXt2YXIgZT1zLmdldEFuZ2xlRnJvbVBvaW50KHRoaXMse3g6dCx5Oml9KSxuPWUuYW5nbGU+PXRoaXMuc3RhcnRBbmdsZSYmZS5hbmdsZTw9dGhpcy5lbmRBbmdsZSxvPWUuZGlzdGFuY2U+PXRoaXMuaW5uZXJSYWRpdXMmJmUuZGlzdGFuY2U8PXRoaXMub3V0ZXJSYWRpdXM7cmV0dXJuIG4mJm99LHRvb2x0aXBQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc3RhcnRBbmdsZSsodGhpcy5lbmRBbmdsZS10aGlzLnN0YXJ0QW5nbGUpLzIsaT0odGhpcy5vdXRlclJhZGl1cy10aGlzLmlubmVyUmFkaXVzKS8yK3RoaXMuaW5uZXJSYWRpdXM7cmV0dXJue3g6dGhpcy54K01hdGguY29zKHQpKmkseTp0aGlzLnkrTWF0aC5zaW4odCkqaX19LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5jdHg7aS5iZWdpblBhdGgoKSxpLmFyYyh0aGlzLngsdGhpcy55LHRoaXMub3V0ZXJSYWRpdXMsdGhpcy5zdGFydEFuZ2xlLHRoaXMuZW5kQW5nbGUpLGkuYXJjKHRoaXMueCx0aGlzLnksdGhpcy5pbm5lclJhZGl1cyx0aGlzLmVuZEFuZ2xlLHRoaXMuc3RhcnRBbmdsZSwhMCksaS5jbG9zZVBhdGgoKSxpLnN0cm9rZVN0eWxlPXRoaXMuc3Ryb2tlQ29sb3IsaS5saW5lV2lkdGg9dGhpcy5zdHJva2VXaWR0aCxpLmZpbGxTdHlsZT10aGlzLmZpbGxDb2xvcixpLmZpbGwoKSxpLmxpbmVKb2luPVwiYmV2ZWxcIix0aGlzLnNob3dTdHJva2UmJmkuc3Ryb2tlKCl9fSksZS5SZWN0YW5nbGU9ZS5FbGVtZW50LmV4dGVuZCh7ZHJhdzpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY3R4LGk9dGhpcy53aWR0aC8yLGU9dGhpcy54LWkscz10aGlzLngraSxuPXRoaXMuYmFzZS0odGhpcy5iYXNlLXRoaXMueSksbz10aGlzLnN0cm9rZVdpZHRoLzI7dGhpcy5zaG93U3Ryb2tlJiYoZSs9byxzLT1vLG4rPW8pLHQuYmVnaW5QYXRoKCksdC5maWxsU3R5bGU9dGhpcy5maWxsQ29sb3IsdC5zdHJva2VTdHlsZT10aGlzLnN0cm9rZUNvbG9yLHQubGluZVdpZHRoPXRoaXMuc3Ryb2tlV2lkdGgsdC5tb3ZlVG8oZSx0aGlzLmJhc2UpLHQubGluZVRvKGUsbiksdC5saW5lVG8ocyxuKSx0LmxpbmVUbyhzLHRoaXMuYmFzZSksdC5maWxsKCksdGhpcy5zaG93U3Ryb2tlJiZ0LnN0cm9rZSgpfSxoZWlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iYXNlLXRoaXMueX0saW5SYW5nZTpmdW5jdGlvbih0LGkpe3JldHVybiB0Pj10aGlzLngtdGhpcy53aWR0aC8yJiZ0PD10aGlzLngrdGhpcy53aWR0aC8yJiZpPj10aGlzLnkmJmk8PXRoaXMuYmFzZX19KSxlLlRvb2x0aXA9ZS5FbGVtZW50LmV4dGVuZCh7ZHJhdzpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY2hhcnQuY3R4O3QuZm9udD1NKHRoaXMuZm9udFNpemUsdGhpcy5mb250U3R5bGUsdGhpcy5mb250RmFtaWx5KSx0aGlzLnhBbGlnbj1cImNlbnRlclwiLHRoaXMueUFsaWduPVwiYWJvdmVcIjt2YXIgaT10aGlzLmNhcmV0UGFkZGluZz0yLGU9dC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpLndpZHRoKzIqdGhpcy54UGFkZGluZyxzPXRoaXMuZm9udFNpemUrMip0aGlzLnlQYWRkaW5nLG49cyt0aGlzLmNhcmV0SGVpZ2h0K2k7dGhpcy54K2UvMj50aGlzLmNoYXJ0LndpZHRoP3RoaXMueEFsaWduPVwibGVmdFwiOnRoaXMueC1lLzI8MCYmKHRoaXMueEFsaWduPVwicmlnaHRcIiksdGhpcy55LW48MCYmKHRoaXMueUFsaWduPVwiYmVsb3dcIik7dmFyIG89dGhpcy54LWUvMixhPXRoaXMueS1uO2lmKHQuZmlsbFN0eWxlPXRoaXMuZmlsbENvbG9yLHRoaXMuY3VzdG9tKXRoaXMuY3VzdG9tKHRoaXMpO2Vsc2V7c3dpdGNoKHRoaXMueUFsaWduKXtjYXNlXCJhYm92ZVwiOnQuYmVnaW5QYXRoKCksdC5tb3ZlVG8odGhpcy54LHRoaXMueS1pKSx0LmxpbmVUbyh0aGlzLngrdGhpcy5jYXJldEhlaWdodCx0aGlzLnktKGkrdGhpcy5jYXJldEhlaWdodCkpLHQubGluZVRvKHRoaXMueC10aGlzLmNhcmV0SGVpZ2h0LHRoaXMueS0oaSt0aGlzLmNhcmV0SGVpZ2h0KSksdC5jbG9zZVBhdGgoKSx0LmZpbGwoKTticmVhaztjYXNlXCJiZWxvd1wiOmE9dGhpcy55K2krdGhpcy5jYXJldEhlaWdodCx0LmJlZ2luUGF0aCgpLHQubW92ZVRvKHRoaXMueCx0aGlzLnkraSksdC5saW5lVG8odGhpcy54K3RoaXMuY2FyZXRIZWlnaHQsdGhpcy55K2krdGhpcy5jYXJldEhlaWdodCksdC5saW5lVG8odGhpcy54LXRoaXMuY2FyZXRIZWlnaHQsdGhpcy55K2krdGhpcy5jYXJldEhlaWdodCksdC5jbG9zZVBhdGgoKSx0LmZpbGwoKX1zd2l0Y2godGhpcy54QWxpZ24pe2Nhc2VcImxlZnRcIjpvPXRoaXMueC1lKyh0aGlzLmNvcm5lclJhZGl1cyt0aGlzLmNhcmV0SGVpZ2h0KTticmVhaztjYXNlXCJyaWdodFwiOm89dGhpcy54LSh0aGlzLmNvcm5lclJhZGl1cyt0aGlzLmNhcmV0SGVpZ2h0KX16KHQsbyxhLGUscyx0aGlzLmNvcm5lclJhZGl1cyksdC5maWxsKCksdC5maWxsU3R5bGU9dGhpcy50ZXh0Q29sb3IsdC50ZXh0QWxpZ249XCJjZW50ZXJcIix0LnRleHRCYXNlbGluZT1cIm1pZGRsZVwiLHQuZmlsbFRleHQodGhpcy50ZXh0LG8rZS8yLGErcy8yKX19fSksZS5NdWx0aVRvb2x0aXA9ZS5FbGVtZW50LmV4dGVuZCh7aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3RoaXMuZm9udD1NKHRoaXMuZm9udFNpemUsdGhpcy5mb250U3R5bGUsdGhpcy5mb250RmFtaWx5KSx0aGlzLnRpdGxlRm9udD1NKHRoaXMudGl0bGVGb250U2l6ZSx0aGlzLnRpdGxlRm9udFN0eWxlLHRoaXMudGl0bGVGb250RmFtaWx5KSx0aGlzLmhlaWdodD10aGlzLmxhYmVscy5sZW5ndGgqdGhpcy5mb250U2l6ZSsodGhpcy5sYWJlbHMubGVuZ3RoLTEpKih0aGlzLmZvbnRTaXplLzIpKzIqdGhpcy55UGFkZGluZysxLjUqdGhpcy50aXRsZUZvbnRTaXplLHRoaXMuY3R4LmZvbnQ9dGhpcy50aXRsZUZvbnQ7dmFyIHQ9dGhpcy5jdHgubWVhc3VyZVRleHQodGhpcy50aXRsZSkud2lkdGgsaT1XKHRoaXMuY3R4LHRoaXMuZm9udCx0aGlzLmxhYmVscykrdGhpcy5mb250U2l6ZSszLGU9ZyhbaSx0XSk7dGhpcy53aWR0aD1lKzIqdGhpcy54UGFkZGluZzt2YXIgcz10aGlzLmhlaWdodC8yO3RoaXMueS1zPDA/dGhpcy55PXM6dGhpcy55K3M+dGhpcy5jaGFydC5oZWlnaHQmJih0aGlzLnk9dGhpcy5jaGFydC5oZWlnaHQtcyksdGhpcy54PnRoaXMuY2hhcnQud2lkdGgvMj90aGlzLngtPXRoaXMueE9mZnNldCt0aGlzLndpZHRoOnRoaXMueCs9dGhpcy54T2Zmc2V0fSxnZXRMaW5lSGVpZ2h0OmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMueS10aGlzLmhlaWdodC8yK3RoaXMueVBhZGRpbmcsZT10LTE7cmV0dXJuIDA9PT10P2krdGhpcy50aXRsZUZvbnRTaXplLzI6aSsoMS41KnRoaXMuZm9udFNpemUqZSt0aGlzLmZvbnRTaXplLzIpKzEuNSp0aGlzLnRpdGxlRm9udFNpemV9LGRyYXc6ZnVuY3Rpb24oKXtpZih0aGlzLmN1c3RvbSl0aGlzLmN1c3RvbSh0aGlzKTtlbHNle3oodGhpcy5jdHgsdGhpcy54LHRoaXMueS10aGlzLmhlaWdodC8yLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsdGhpcy5jb3JuZXJSYWRpdXMpO3ZhciB0PXRoaXMuY3R4O3QuZmlsbFN0eWxlPXRoaXMuZmlsbENvbG9yLHQuZmlsbCgpLHQuY2xvc2VQYXRoKCksdC50ZXh0QWxpZ249XCJsZWZ0XCIsdC50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIix0LmZpbGxTdHlsZT10aGlzLnRpdGxlVGV4dENvbG9yLHQuZm9udD10aGlzLnRpdGxlRm9udCx0LmZpbGxUZXh0KHRoaXMudGl0bGUsdGhpcy54K3RoaXMueFBhZGRpbmcsdGhpcy5nZXRMaW5lSGVpZ2h0KDApKSx0LmZvbnQ9dGhpcy5mb250LHMuZWFjaCh0aGlzLmxhYmVscyxmdW5jdGlvbihpLGUpe3QuZmlsbFN0eWxlPXRoaXMudGV4dENvbG9yLHQuZmlsbFRleHQoaSx0aGlzLngrdGhpcy54UGFkZGluZyt0aGlzLmZvbnRTaXplKzMsdGhpcy5nZXRMaW5lSGVpZ2h0KGUrMSkpLHQuZmlsbFN0eWxlPXRoaXMubGVnZW5kQ29sb3JCYWNrZ3JvdW5kLHQuZmlsbFJlY3QodGhpcy54K3RoaXMueFBhZGRpbmcsdGhpcy5nZXRMaW5lSGVpZ2h0KGUrMSktdGhpcy5mb250U2l6ZS8yLHRoaXMuZm9udFNpemUsdGhpcy5mb250U2l6ZSksdC5maWxsU3R5bGU9dGhpcy5sZWdlbmRDb2xvcnNbZV0uZmlsbCx0LmZpbGxSZWN0KHRoaXMueCt0aGlzLnhQYWRkaW5nLHRoaXMuZ2V0TGluZUhlaWdodChlKzEpLXRoaXMuZm9udFNpemUvMix0aGlzLmZvbnRTaXplLHRoaXMuZm9udFNpemUpfSx0aGlzKX19fSksZS5TY2FsZT1lLkVsZW1lbnQuZXh0ZW5kKHtpbml0aWFsaXplOmZ1bmN0aW9uKCl7dGhpcy5maXQoKX0sYnVpbGRZTGFiZWxzOmZ1bmN0aW9uKCl7dGhpcy55TGFiZWxzPVtdO2Zvcih2YXIgdD12KHRoaXMuc3RlcFZhbHVlKSxpPTA7aTw9dGhpcy5zdGVwcztpKyspdGhpcy55TGFiZWxzLnB1c2goQyh0aGlzLnRlbXBsYXRlU3RyaW5nLHt2YWx1ZToodGhpcy5taW4raSp0aGlzLnN0ZXBWYWx1ZSkudG9GaXhlZCh0KX0pKTt0aGlzLnlMYWJlbFdpZHRoPXRoaXMuZGlzcGxheSYmdGhpcy5zaG93TGFiZWxzP1codGhpcy5jdHgsdGhpcy5mb250LHRoaXMueUxhYmVscyk6MH0sYWRkWExhYmVsOmZ1bmN0aW9uKHQpe3RoaXMueExhYmVscy5wdXNoKHQpLHRoaXMudmFsdWVzQ291bnQrKyx0aGlzLmZpdCgpfSxyZW1vdmVYTGFiZWw6ZnVuY3Rpb24oKXt0aGlzLnhMYWJlbHMuc2hpZnQoKSx0aGlzLnZhbHVlc0NvdW50LS0sdGhpcy5maXQoKX0sZml0OmZ1bmN0aW9uKCl7dGhpcy5zdGFydFBvaW50PXRoaXMuZGlzcGxheT90aGlzLmZvbnRTaXplOjAsdGhpcy5lbmRQb2ludD10aGlzLmRpc3BsYXk/dGhpcy5oZWlnaHQtMS41KnRoaXMuZm9udFNpemUtNTp0aGlzLmhlaWdodCx0aGlzLnN0YXJ0UG9pbnQrPXRoaXMucGFkZGluZyx0aGlzLmVuZFBvaW50LT10aGlzLnBhZGRpbmc7dmFyIHQsaT10aGlzLmVuZFBvaW50LXRoaXMuc3RhcnRQb2ludDtmb3IodGhpcy5jYWxjdWxhdGVZUmFuZ2UoaSksdGhpcy5idWlsZFlMYWJlbHMoKSx0aGlzLmNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uKCk7aT50aGlzLmVuZFBvaW50LXRoaXMuc3RhcnRQb2ludDspaT10aGlzLmVuZFBvaW50LXRoaXMuc3RhcnRQb2ludCx0PXRoaXMueUxhYmVsV2lkdGgsdGhpcy5jYWxjdWxhdGVZUmFuZ2UoaSksdGhpcy5idWlsZFlMYWJlbHMoKSx0PHRoaXMueUxhYmVsV2lkdGgmJnRoaXMuY2FsY3VsYXRlWExhYmVsUm90YXRpb24oKX0sY2FsY3VsYXRlWExhYmVsUm90YXRpb246ZnVuY3Rpb24oKXt0aGlzLmN0eC5mb250PXRoaXMuZm9udDt2YXIgdCxpLGU9dGhpcy5jdHgubWVhc3VyZVRleHQodGhpcy54TGFiZWxzWzBdKS53aWR0aCxzPXRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRoaXMueExhYmVsc1t0aGlzLnhMYWJlbHMubGVuZ3RoLTFdKS53aWR0aDtpZih0aGlzLnhTY2FsZVBhZGRpbmdSaWdodD1zLzIrMyx0aGlzLnhTY2FsZVBhZGRpbmdMZWZ0PWUvMj50aGlzLnlMYWJlbFdpZHRoKzEwP2UvMjp0aGlzLnlMYWJlbFdpZHRoKzEwLHRoaXMueExhYmVsUm90YXRpb249MCx0aGlzLmRpc3BsYXkpe3ZhciBuLG89Vyh0aGlzLmN0eCx0aGlzLmZvbnQsdGhpcy54TGFiZWxzKTt0aGlzLnhMYWJlbFdpZHRoPW87Zm9yKHZhciBhPU1hdGguZmxvb3IodGhpcy5jYWxjdWxhdGVYKDEpLXRoaXMuY2FsY3VsYXRlWCgwKSktNjt0aGlzLnhMYWJlbFdpZHRoPmEmJjA9PT10aGlzLnhMYWJlbFJvdGF0aW9ufHx0aGlzLnhMYWJlbFdpZHRoPmEmJnRoaXMueExhYmVsUm90YXRpb248PTkwJiZ0aGlzLnhMYWJlbFJvdGF0aW9uPjA7KW49TWF0aC5jb3MoUyh0aGlzLnhMYWJlbFJvdGF0aW9uKSksdD1uKmUsaT1uKnMsdCt0aGlzLmZvbnRTaXplLzI+dGhpcy55TGFiZWxXaWR0aCs4JiYodGhpcy54U2NhbGVQYWRkaW5nTGVmdD10K3RoaXMuZm9udFNpemUvMiksdGhpcy54U2NhbGVQYWRkaW5nUmlnaHQ9dGhpcy5mb250U2l6ZS8yLHRoaXMueExhYmVsUm90YXRpb24rKyx0aGlzLnhMYWJlbFdpZHRoPW4qbzt0aGlzLnhMYWJlbFJvdGF0aW9uPjAmJih0aGlzLmVuZFBvaW50LT1NYXRoLnNpbihTKHRoaXMueExhYmVsUm90YXRpb24pKSpvKzMpfWVsc2UgdGhpcy54TGFiZWxXaWR0aD0wLHRoaXMueFNjYWxlUGFkZGluZ1JpZ2h0PXRoaXMucGFkZGluZyx0aGlzLnhTY2FsZVBhZGRpbmdMZWZ0PXRoaXMucGFkZGluZ30sY2FsY3VsYXRlWVJhbmdlOmMsZHJhd2luZ0FyZWE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydFBvaW50LXRoaXMuZW5kUG9pbnR9LGNhbGN1bGF0ZVk6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5kcmF3aW5nQXJlYSgpLyh0aGlzLm1pbi10aGlzLm1heCk7cmV0dXJuIHRoaXMuZW5kUG9pbnQtaSoodC10aGlzLm1pbil9LGNhbGN1bGF0ZVg6ZnVuY3Rpb24odCl7dmFyIGk9KHRoaXMueExhYmVsUm90YXRpb24+MCx0aGlzLndpZHRoLSh0aGlzLnhTY2FsZVBhZGRpbmdMZWZ0K3RoaXMueFNjYWxlUGFkZGluZ1JpZ2h0KSksZT1pLyh0aGlzLnZhbHVlc0NvdW50LSh0aGlzLm9mZnNldEdyaWRMaW5lcz8wOjEpKSxzPWUqdCt0aGlzLnhTY2FsZVBhZGRpbmdMZWZ0O3JldHVybiB0aGlzLm9mZnNldEdyaWRMaW5lcyYmKHMrPWUvMiksTWF0aC5yb3VuZChzKX0sdXBkYXRlOmZ1bmN0aW9uKHQpe3MuZXh0ZW5kKHRoaXMsdCksdGhpcy5maXQoKX0sZHJhdzpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY3R4LGk9KHRoaXMuZW5kUG9pbnQtdGhpcy5zdGFydFBvaW50KS90aGlzLnN0ZXBzLGU9TWF0aC5yb3VuZCh0aGlzLnhTY2FsZVBhZGRpbmdMZWZ0KTt0aGlzLmRpc3BsYXkmJih0LmZpbGxTdHlsZT10aGlzLnRleHRDb2xvcix0LmZvbnQ9dGhpcy5mb250LG4odGhpcy55TGFiZWxzLGZ1bmN0aW9uKG4sbyl7dmFyIGE9dGhpcy5lbmRQb2ludC1pKm8saD1NYXRoLnJvdW5kKGEpLGw9dGhpcy5zaG93SG9yaXpvbnRhbExpbmVzO3QudGV4dEFsaWduPVwicmlnaHRcIix0LnRleHRCYXNlbGluZT1cIm1pZGRsZVwiLHRoaXMuc2hvd0xhYmVscyYmdC5maWxsVGV4dChuLGUtMTAsYSksMCE9PW98fGx8fChsPSEwKSxsJiZ0LmJlZ2luUGF0aCgpLG8+MD8odC5saW5lV2lkdGg9dGhpcy5ncmlkTGluZVdpZHRoLHQuc3Ryb2tlU3R5bGU9dGhpcy5ncmlkTGluZUNvbG9yKToodC5saW5lV2lkdGg9dGhpcy5saW5lV2lkdGgsdC5zdHJva2VTdHlsZT10aGlzLmxpbmVDb2xvciksaCs9cy5hbGlhc1BpeGVsKHQubGluZVdpZHRoKSxsJiYodC5tb3ZlVG8oZSxoKSx0LmxpbmVUbyh0aGlzLndpZHRoLGgpLHQuc3Ryb2tlKCksdC5jbG9zZVBhdGgoKSksdC5saW5lV2lkdGg9dGhpcy5saW5lV2lkdGgsdC5zdHJva2VTdHlsZT10aGlzLmxpbmVDb2xvcix0LmJlZ2luUGF0aCgpLHQubW92ZVRvKGUtNSxoKSx0LmxpbmVUbyhlLGgpLHQuc3Ryb2tlKCksdC5jbG9zZVBhdGgoKX0sdGhpcyksbih0aGlzLnhMYWJlbHMsZnVuY3Rpb24oaSxlKXt2YXIgcz10aGlzLmNhbGN1bGF0ZVgoZSkreCh0aGlzLmxpbmVXaWR0aCksbj10aGlzLmNhbGN1bGF0ZVgoZS0odGhpcy5vZmZzZXRHcmlkTGluZXM/LjU6MCkpK3godGhpcy5saW5lV2lkdGgpLG89dGhpcy54TGFiZWxSb3RhdGlvbj4wLGE9dGhpcy5zaG93VmVydGljYWxMaW5lczswIT09ZXx8YXx8KGE9ITApLGEmJnQuYmVnaW5QYXRoKCksZT4wPyh0LmxpbmVXaWR0aD10aGlzLmdyaWRMaW5lV2lkdGgsdC5zdHJva2VTdHlsZT10aGlzLmdyaWRMaW5lQ29sb3IpOih0LmxpbmVXaWR0aD10aGlzLmxpbmVXaWR0aCx0LnN0cm9rZVN0eWxlPXRoaXMubGluZUNvbG9yKSxhJiYodC5tb3ZlVG8obix0aGlzLmVuZFBvaW50KSx0LmxpbmVUbyhuLHRoaXMuc3RhcnRQb2ludC0zKSx0LnN0cm9rZSgpLHQuY2xvc2VQYXRoKCkpLHQubGluZVdpZHRoPXRoaXMubGluZVdpZHRoLHQuc3Ryb2tlU3R5bGU9dGhpcy5saW5lQ29sb3IsdC5iZWdpblBhdGgoKSx0Lm1vdmVUbyhuLHRoaXMuZW5kUG9pbnQpLHQubGluZVRvKG4sdGhpcy5lbmRQb2ludCs1KSx0LnN0cm9rZSgpLHQuY2xvc2VQYXRoKCksdC5zYXZlKCksdC50cmFuc2xhdGUocyxvP3RoaXMuZW5kUG9pbnQrMTI6dGhpcy5lbmRQb2ludCs4KSx0LnJvdGF0ZSgtMSpTKHRoaXMueExhYmVsUm90YXRpb24pKSx0LmZvbnQ9dGhpcy5mb250LHQudGV4dEFsaWduPW8/XCJyaWdodFwiOlwiY2VudGVyXCIsdC50ZXh0QmFzZWxpbmU9bz9cIm1pZGRsZVwiOlwidG9wXCIsdC5maWxsVGV4dChpLDAsMCksdC5yZXN0b3JlKCl9LHRoaXMpKX19KSxlLlJhZGlhbFNjYWxlPWUuRWxlbWVudC5leHRlbmQoe2luaXRpYWxpemU6ZnVuY3Rpb24oKXt0aGlzLnNpemU9bShbdGhpcy5oZWlnaHQsdGhpcy53aWR0aF0pLHRoaXMuZHJhd2luZ0FyZWE9dGhpcy5kaXNwbGF5P3RoaXMuc2l6ZS8yLSh0aGlzLmZvbnRTaXplLzIrdGhpcy5iYWNrZHJvcFBhZGRpbmdZKTp0aGlzLnNpemUvMn0sY2FsY3VsYXRlQ2VudGVyT2Zmc2V0OmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuZHJhd2luZ0FyZWEvKHRoaXMubWF4LXRoaXMubWluKTtyZXR1cm4odC10aGlzLm1pbikqaX0sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5saW5lQXJjP3RoaXMuZHJhd2luZ0FyZWE9dGhpcy5kaXNwbGF5P3RoaXMuc2l6ZS8yLSh0aGlzLmZvbnRTaXplLzIrdGhpcy5iYWNrZHJvcFBhZGRpbmdZKTp0aGlzLnNpemUvMjp0aGlzLnNldFNjYWxlU2l6ZSgpLHRoaXMuYnVpbGRZTGFiZWxzKCl9LGJ1aWxkWUxhYmVsczpmdW5jdGlvbigpe3RoaXMueUxhYmVscz1bXTtmb3IodmFyIHQ9dih0aGlzLnN0ZXBWYWx1ZSksaT0wO2k8PXRoaXMuc3RlcHM7aSsrKXRoaXMueUxhYmVscy5wdXNoKEModGhpcy50ZW1wbGF0ZVN0cmluZyx7dmFsdWU6KHRoaXMubWluK2kqdGhpcy5zdGVwVmFsdWUpLnRvRml4ZWQodCl9KSl9LGdldENpcmN1bWZlcmVuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gMipNYXRoLlBJL3RoaXMudmFsdWVzQ291bnR9LHNldFNjYWxlU2l6ZTpmdW5jdGlvbigpe3ZhciB0LGksZSxzLG4sbyxhLGgsbCxyLGMsdSxkPW0oW3RoaXMuaGVpZ2h0LzItdGhpcy5wb2ludExhYmVsRm9udFNpemUtNSx0aGlzLndpZHRoLzJdKSxwPXRoaXMud2lkdGgsZz0wO2Zvcih0aGlzLmN0eC5mb250PU0odGhpcy5wb2ludExhYmVsRm9udFNpemUsdGhpcy5wb2ludExhYmVsRm9udFN0eWxlLHRoaXMucG9pbnRMYWJlbEZvbnRGYW1pbHkpLGk9MDtpPHRoaXMudmFsdWVzQ291bnQ7aSsrKXQ9dGhpcy5nZXRQb2ludFBvc2l0aW9uKGksZCksZT10aGlzLmN0eC5tZWFzdXJlVGV4dChDKHRoaXMudGVtcGxhdGVTdHJpbmcse3ZhbHVlOnRoaXMubGFiZWxzW2ldfSkpLndpZHRoKzUsMD09PWl8fGk9PT10aGlzLnZhbHVlc0NvdW50LzI/KHM9ZS8yLHQueCtzPnAmJihwPXQueCtzLG49aSksdC54LXM8ZyYmKGc9dC54LXMsYT1pKSk6aTx0aGlzLnZhbHVlc0NvdW50LzI/dC54K2U+cCYmKHA9dC54K2Usbj1pKTppPnRoaXMudmFsdWVzQ291bnQvMiYmdC54LWU8ZyYmKGc9dC54LWUsYT1pKTtsPWcscj1NYXRoLmNlaWwocC10aGlzLndpZHRoKSxvPXRoaXMuZ2V0SW5kZXhBbmdsZShuKSxoPXRoaXMuZ2V0SW5kZXhBbmdsZShhKSxjPXIvTWF0aC5zaW4obytNYXRoLlBJLzIpLHU9bC9NYXRoLnNpbihoK01hdGguUEkvMiksYz1mKGMpP2M6MCx1PWYodSk/dTowLHRoaXMuZHJhd2luZ0FyZWE9ZC0odStjKS8yLHRoaXMuc2V0Q2VudGVyUG9pbnQodSxjKX0sc2V0Q2VudGVyUG9pbnQ6ZnVuY3Rpb24odCxpKXt2YXIgZT10aGlzLndpZHRoLWktdGhpcy5kcmF3aW5nQXJlYSxzPXQrdGhpcy5kcmF3aW5nQXJlYTt0aGlzLnhDZW50ZXI9KHMrZSkvMix0aGlzLnlDZW50ZXI9dGhpcy5oZWlnaHQvMn0sZ2V0SW5kZXhBbmdsZTpmdW5jdGlvbih0KXt2YXIgaT0yKk1hdGguUEkvdGhpcy52YWx1ZXNDb3VudDtyZXR1cm4gdCppLU1hdGguUEkvMn0sZ2V0UG9pbnRQb3NpdGlvbjpmdW5jdGlvbih0LGkpe3ZhciBlPXRoaXMuZ2V0SW5kZXhBbmdsZSh0KTtyZXR1cm57eDpNYXRoLmNvcyhlKSppK3RoaXMueENlbnRlcix5Ok1hdGguc2luKGUpKmkrdGhpcy55Q2VudGVyfX0sZHJhdzpmdW5jdGlvbigpe2lmKHRoaXMuZGlzcGxheSl7dmFyIHQ9dGhpcy5jdHg7aWYobih0aGlzLnlMYWJlbHMsZnVuY3Rpb24oaSxlKXtpZihlPjApe3ZhciBzLG49ZSoodGhpcy5kcmF3aW5nQXJlYS90aGlzLnN0ZXBzKSxvPXRoaXMueUNlbnRlci1uO2lmKHRoaXMubGluZVdpZHRoPjApaWYodC5zdHJva2VTdHlsZT10aGlzLmxpbmVDb2xvcix0LmxpbmVXaWR0aD10aGlzLmxpbmVXaWR0aCx0aGlzLmxpbmVBcmMpdC5iZWdpblBhdGgoKSx0LmFyYyh0aGlzLnhDZW50ZXIsdGhpcy55Q2VudGVyLG4sMCwyKk1hdGguUEkpLHQuY2xvc2VQYXRoKCksdC5zdHJva2UoKTtlbHNle3QuYmVnaW5QYXRoKCk7Zm9yKHZhciBhPTA7YTx0aGlzLnZhbHVlc0NvdW50O2ErKylzPXRoaXMuZ2V0UG9pbnRQb3NpdGlvbihhLHRoaXMuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHRoaXMubWluK2UqdGhpcy5zdGVwVmFsdWUpKSwwPT09YT90Lm1vdmVUbyhzLngscy55KTp0LmxpbmVUbyhzLngscy55KTt0LmNsb3NlUGF0aCgpLHQuc3Ryb2tlKCl9aWYodGhpcy5zaG93TGFiZWxzKXtpZih0LmZvbnQ9TSh0aGlzLmZvbnRTaXplLHRoaXMuZm9udFN0eWxlLHRoaXMuZm9udEZhbWlseSksdGhpcy5zaG93TGFiZWxCYWNrZHJvcCl7dmFyIGg9dC5tZWFzdXJlVGV4dChpKS53aWR0aDt0LmZpbGxTdHlsZT10aGlzLmJhY2tkcm9wQ29sb3IsdC5maWxsUmVjdCh0aGlzLnhDZW50ZXItaC8yLXRoaXMuYmFja2Ryb3BQYWRkaW5nWCxvLXRoaXMuZm9udFNpemUvMi10aGlzLmJhY2tkcm9wUGFkZGluZ1ksaCsyKnRoaXMuYmFja2Ryb3BQYWRkaW5nWCx0aGlzLmZvbnRTaXplKzIqdGhpcy5iYWNrZHJvcFBhZGRpbmdZKX10LnRleHRBbGlnbj1cImNlbnRlclwiLHQudGV4dEJhc2VsaW5lPVwibWlkZGxlXCIsdC5maWxsU3R5bGU9dGhpcy5mb250Q29sb3IsdC5maWxsVGV4dChpLHRoaXMueENlbnRlcixvKX19fSx0aGlzKSwhdGhpcy5saW5lQXJjKXt0LmxpbmVXaWR0aD10aGlzLmFuZ2xlTGluZVdpZHRoLHQuc3Ryb2tlU3R5bGU9dGhpcy5hbmdsZUxpbmVDb2xvcjtmb3IodmFyIGk9dGhpcy52YWx1ZXNDb3VudC0xO2k+PTA7aS0tKXtpZih0aGlzLmFuZ2xlTGluZVdpZHRoPjApe3ZhciBlPXRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLHRoaXMuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHRoaXMubWF4KSk7dC5iZWdpblBhdGgoKSx0Lm1vdmVUbyh0aGlzLnhDZW50ZXIsdGhpcy55Q2VudGVyKSx0LmxpbmVUbyhlLngsZS55KSx0LnN0cm9rZSgpLHQuY2xvc2VQYXRoKCl9dmFyIHM9dGhpcy5nZXRQb2ludFBvc2l0aW9uKGksdGhpcy5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodGhpcy5tYXgpKzUpO3QuZm9udD1NKHRoaXMucG9pbnRMYWJlbEZvbnRTaXplLHRoaXMucG9pbnRMYWJlbEZvbnRTdHlsZSx0aGlzLnBvaW50TGFiZWxGb250RmFtaWx5KSx0LmZpbGxTdHlsZT10aGlzLnBvaW50TGFiZWxGb250Q29sb3I7dmFyIG89dGhpcy5sYWJlbHMubGVuZ3RoLGE9dGhpcy5sYWJlbHMubGVuZ3RoLzIsaD1hLzIsbD1oPml8fGk+by1oLHI9aT09PWh8fGk9PT1vLWg7dC50ZXh0QWxpZ249MD09PWk/XCJjZW50ZXJcIjppPT09YT9cImNlbnRlclwiOmE+aT9cImxlZnRcIjpcInJpZ2h0XCIsdC50ZXh0QmFzZWxpbmU9cj9cIm1pZGRsZVwiOmw/XCJib3R0b21cIjpcInRvcFwiLHQuZmlsbFRleHQodGhpcy5sYWJlbHNbaV0scy54LHMueSl9fX19fSkscy5hZGRFdmVudCh3aW5kb3csXCJyZXNpemVcIixmdW5jdGlvbigpe3ZhciB0O3JldHVybiBmdW5jdGlvbigpe2NsZWFyVGltZW91dCh0KSx0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtuKGUuaW5zdGFuY2VzLGZ1bmN0aW9uKHQpe3Qub3B0aW9ucy5yZXNwb25zaXZlJiZ0LnJlc2l6ZSh0LnJlbmRlciwhMCl9KX0sNTApfX0oKSkscD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gZX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9ZSksdC5DaGFydD1lLGUubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB0LkNoYXJ0PWksZX19KS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9dGhpcyxpPXQuQ2hhcnQsZT1pLmhlbHBlcnMscz17c2NhbGVCZWdpbkF0WmVybzohMCxzY2FsZVNob3dHcmlkTGluZXM6ITAsc2NhbGVHcmlkTGluZUNvbG9yOlwicmdiYSgwLDAsMCwuMDUpXCIsc2NhbGVHcmlkTGluZVdpZHRoOjEsc2NhbGVTaG93SG9yaXpvbnRhbExpbmVzOiEwLHNjYWxlU2hvd1ZlcnRpY2FsTGluZXM6ITAsYmFyU2hvd1N0cm9rZTohMCxiYXJTdHJva2VXaWR0aDoyLGJhclZhbHVlU3BhY2luZzo1LGJhckRhdGFzZXRTcGFjaW5nOjEsbGVnZW5kVGVtcGxhdGU6Jzx1bCBjbGFzcz1cIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFwiPjwlIGZvciAodmFyIGk9MDsgaTxkYXRhc2V0cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOjwlPWRhdGFzZXRzW2ldLmZpbGxDb2xvciU+XCI+PC9zcGFuPjwlaWYoZGF0YXNldHNbaV0ubGFiZWwpeyU+PCU9ZGF0YXNldHNbaV0ubGFiZWwlPjwlfSU+PC9saT48JX0lPjwvdWw+J307aS5UeXBlLmV4dGVuZCh7bmFtZTpcIkJhclwiLGRlZmF1bHRzOnMsaW5pdGlhbGl6ZTpmdW5jdGlvbih0KXt2YXIgcz10aGlzLm9wdGlvbnM7dGhpcy5TY2FsZUNsYXNzPWkuU2NhbGUuZXh0ZW5kKHtvZmZzZXRHcmlkTGluZXM6ITAsY2FsY3VsYXRlQmFyWDpmdW5jdGlvbih0LGksZSl7dmFyIG49dGhpcy5jYWxjdWxhdGVCYXNlV2lkdGgoKSxvPXRoaXMuY2FsY3VsYXRlWChlKS1uLzIsYT10aGlzLmNhbGN1bGF0ZUJhcldpZHRoKHQpO3JldHVybiBvK2EqaStpKnMuYmFyRGF0YXNldFNwYWNpbmcrYS8yfSxjYWxjdWxhdGVCYXNlV2lkdGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYWxjdWxhdGVYKDEpLXRoaXMuY2FsY3VsYXRlWCgwKS0yKnMuYmFyVmFsdWVTcGFjaW5nfSxjYWxjdWxhdGVCYXJXaWR0aDpmdW5jdGlvbih0KXt2YXIgaT10aGlzLmNhbGN1bGF0ZUJhc2VXaWR0aCgpLSh0LTEpKnMuYmFyRGF0YXNldFNwYWNpbmc7cmV0dXJuIGkvdH19KSx0aGlzLmRhdGFzZXRzPVtdLHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMmJmUuYmluZEV2ZW50cyh0aGlzLHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLGZ1bmN0aW9uKHQpe3ZhciBpPVwibW91c2VvdXRcIiE9PXQudHlwZT90aGlzLmdldEJhcnNBdEV2ZW50KHQpOltdO3RoaXMuZWFjaEJhcnMoZnVuY3Rpb24odCl7dC5yZXN0b3JlKFtcImZpbGxDb2xvclwiLFwic3Ryb2tlQ29sb3JcIl0pfSksZS5lYWNoKGksZnVuY3Rpb24odCl7dC5maWxsQ29sb3I9dC5oaWdobGlnaHRGaWxsLHQuc3Ryb2tlQ29sb3I9dC5oaWdobGlnaHRTdHJva2V9KSx0aGlzLnNob3dUb29sdGlwKGkpfSksdGhpcy5CYXJDbGFzcz1pLlJlY3RhbmdsZS5leHRlbmQoe3N0cm9rZVdpZHRoOnRoaXMub3B0aW9ucy5iYXJTdHJva2VXaWR0aCxzaG93U3Ryb2tlOnRoaXMub3B0aW9ucy5iYXJTaG93U3Ryb2tlLGN0eDp0aGlzLmNoYXJ0LmN0eH0pLGUuZWFjaCh0LmRhdGFzZXRzLGZ1bmN0aW9uKGkpe3ZhciBzPXtsYWJlbDppLmxhYmVsfHxudWxsLGZpbGxDb2xvcjppLmZpbGxDb2xvcixzdHJva2VDb2xvcjppLnN0cm9rZUNvbG9yLGJhcnM6W119O3RoaXMuZGF0YXNldHMucHVzaChzKSxlLmVhY2goaS5kYXRhLGZ1bmN0aW9uKGUsbil7cy5iYXJzLnB1c2gobmV3IHRoaXMuQmFyQ2xhc3Moe3ZhbHVlOmUsbGFiZWw6dC5sYWJlbHNbbl0sZGF0YXNldExhYmVsOmkubGFiZWwsc3Ryb2tlQ29sb3I6aS5zdHJva2VDb2xvcixmaWxsQ29sb3I6aS5maWxsQ29sb3IsaGlnaGxpZ2h0RmlsbDppLmhpZ2hsaWdodEZpbGx8fGkuZmlsbENvbG9yLGhpZ2hsaWdodFN0cm9rZTppLmhpZ2hsaWdodFN0cm9rZXx8aS5zdHJva2VDb2xvcn0pKX0sdGhpcyl9LHRoaXMpLHRoaXMuYnVpbGRTY2FsZSh0LmxhYmVscyksdGhpcy5CYXJDbGFzcy5wcm90b3R5cGUuYmFzZT10aGlzLnNjYWxlLmVuZFBvaW50LHRoaXMuZWFjaEJhcnMoZnVuY3Rpb24odCxpLHMpe2UuZXh0ZW5kKHQse3dpZHRoOnRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyV2lkdGgodGhpcy5kYXRhc2V0cy5sZW5ndGgpLHg6dGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJYKHRoaXMuZGF0YXNldHMubGVuZ3RoLHMsaSkseTp0aGlzLnNjYWxlLmVuZFBvaW50fSksdC5zYXZlKCl9LHRoaXMpLHRoaXMucmVuZGVyKCl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuc2NhbGUudXBkYXRlKCksZS5lYWNoKHRoaXMuYWN0aXZlRWxlbWVudHMsZnVuY3Rpb24odCl7dC5yZXN0b3JlKFtcImZpbGxDb2xvclwiLFwic3Ryb2tlQ29sb3JcIl0pfSksdGhpcy5lYWNoQmFycyhmdW5jdGlvbih0KXt0LnNhdmUoKX0pLHRoaXMucmVuZGVyKCl9LGVhY2hCYXJzOmZ1bmN0aW9uKHQpe2UuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGkscyl7ZS5lYWNoKGkuYmFycyx0LHRoaXMscyl9LHRoaXMpfSxnZXRCYXJzQXRFdmVudDpmdW5jdGlvbih0KXtmb3IodmFyIGkscz1bXSxuPWUuZ2V0UmVsYXRpdmVQb3NpdGlvbih0KSxvPWZ1bmN0aW9uKHQpe3MucHVzaCh0LmJhcnNbaV0pfSxhPTA7YTx0aGlzLmRhdGFzZXRzLmxlbmd0aDthKyspZm9yKGk9MDtpPHRoaXMuZGF0YXNldHNbYV0uYmFycy5sZW5ndGg7aSsrKWlmKHRoaXMuZGF0YXNldHNbYV0uYmFyc1tpXS5pblJhbmdlKG4ueCxuLnkpKXJldHVybiBlLmVhY2godGhpcy5kYXRhc2V0cyxvKSxzO3JldHVybiBzfSxidWlsZFNjYWxlOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMscz1mdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiBpLmVhY2hCYXJzKGZ1bmN0aW9uKGkpe3QucHVzaChpLnZhbHVlKX0pLHR9LG49e3RlbXBsYXRlU3RyaW5nOnRoaXMub3B0aW9ucy5zY2FsZUxhYmVsLGhlaWdodDp0aGlzLmNoYXJ0LmhlaWdodCx3aWR0aDp0aGlzLmNoYXJ0LndpZHRoLGN0eDp0aGlzLmNoYXJ0LmN0eCx0ZXh0Q29sb3I6dGhpcy5vcHRpb25zLnNjYWxlRm9udENvbG9yLGZvbnRTaXplOnRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLGZvbnRTdHlsZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsZm9udEZhbWlseTp0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5LHZhbHVlc0NvdW50OnQubGVuZ3RoLGJlZ2luQXRaZXJvOnRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLGludGVnZXJzT25seTp0aGlzLm9wdGlvbnMuc2NhbGVJbnRlZ2Vyc09ubHksY2FsY3VsYXRlWVJhbmdlOmZ1bmN0aW9uKHQpe3ZhciBpPWUuY2FsY3VsYXRlU2NhbGVSYW5nZShzKCksdCx0aGlzLmZvbnRTaXplLHRoaXMuYmVnaW5BdFplcm8sdGhpcy5pbnRlZ2Vyc09ubHkpO2UuZXh0ZW5kKHRoaXMsaSl9LHhMYWJlbHM6dCxmb250OmUuZm9udFN0cmluZyh0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSx0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSksbGluZVdpZHRoOnRoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aCxsaW5lQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLHNob3dIb3Jpem9udGFsTGluZXM6dGhpcy5vcHRpb25zLnNjYWxlU2hvd0hvcml6b250YWxMaW5lcyxzaG93VmVydGljYWxMaW5lczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93VmVydGljYWxMaW5lcyxncmlkTGluZVdpZHRoOnRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXM/dGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVXaWR0aDowLGdyaWRMaW5lQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlU2hvd0dyaWRMaW5lcz90aGlzLm9wdGlvbnMuc2NhbGVHcmlkTGluZUNvbG9yOlwicmdiYSgwLDAsMCwwKVwiLHBhZGRpbmc6dGhpcy5vcHRpb25zLnNob3dTY2FsZT8wOnRoaXMub3B0aW9ucy5iYXJTaG93U3Ryb2tlP3RoaXMub3B0aW9ucy5iYXJTdHJva2VXaWR0aDowLHNob3dMYWJlbHM6dGhpcy5vcHRpb25zLnNjYWxlU2hvd0xhYmVscyxkaXNwbGF5OnRoaXMub3B0aW9ucy5zaG93U2NhbGV9O3RoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlJiZlLmV4dGVuZChuLHtjYWxjdWxhdGVZUmFuZ2U6ZS5ub29wLHN0ZXBzOnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzLHN0ZXBWYWx1ZTp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgsbWluOnRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUsbWF4OnRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUrdGhpcy5vcHRpb25zLnNjYWxlU3RlcHMqdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRofSksdGhpcy5zY2FsZT1uZXcgdGhpcy5TY2FsZUNsYXNzKG4pfSxhZGREYXRhOmZ1bmN0aW9uKHQsaSl7ZS5lYWNoKHQsZnVuY3Rpb24odCxlKXt0aGlzLmRhdGFzZXRzW2VdLmJhcnMucHVzaChuZXcgdGhpcy5CYXJDbGFzcyh7dmFsdWU6dCxsYWJlbDppLHg6dGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJYKHRoaXMuZGF0YXNldHMubGVuZ3RoLGUsdGhpcy5zY2FsZS52YWx1ZXNDb3VudCsxKSx5OnRoaXMuc2NhbGUuZW5kUG9pbnQsd2lkdGg6dGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJXaWR0aCh0aGlzLmRhdGFzZXRzLmxlbmd0aCksYmFzZTp0aGlzLnNjYWxlLmVuZFBvaW50LHN0cm9rZUNvbG9yOnRoaXMuZGF0YXNldHNbZV0uc3Ryb2tlQ29sb3IsZmlsbENvbG9yOnRoaXMuZGF0YXNldHNbZV0uZmlsbENvbG9yfSkpfSx0aGlzKSx0aGlzLnNjYWxlLmFkZFhMYWJlbChpKSx0aGlzLnVwZGF0ZSgpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKCl7dGhpcy5zY2FsZS5yZW1vdmVYTGFiZWwoKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXt0LmJhcnMuc2hpZnQoKX0sdGhpcyksdGhpcy51cGRhdGUoKX0scmVmbG93OmZ1bmN0aW9uKCl7ZS5leHRlbmQodGhpcy5CYXJDbGFzcy5wcm90b3R5cGUse3k6dGhpcy5zY2FsZS5lbmRQb2ludCxiYXNlOnRoaXMuc2NhbGUuZW5kUG9pbnR9KTtcbnZhciB0PWUuZXh0ZW5kKHtoZWlnaHQ6dGhpcy5jaGFydC5oZWlnaHQsd2lkdGg6dGhpcy5jaGFydC53aWR0aH0pO3RoaXMuc2NhbGUudXBkYXRlKHQpfSxkcmF3OmZ1bmN0aW9uKHQpe3ZhciBpPXR8fDE7dGhpcy5jbGVhcigpO3RoaXMuY2hhcnQuY3R4O3RoaXMuc2NhbGUuZHJhdyhpKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0LHMpe2UuZWFjaCh0LmJhcnMsZnVuY3Rpb24odCxlKXt0Lmhhc1ZhbHVlKCkmJih0LmJhc2U9dGhpcy5zY2FsZS5lbmRQb2ludCx0LnRyYW5zaXRpb24oe3g6dGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJYKHRoaXMuZGF0YXNldHMubGVuZ3RoLHMsZSkseTp0aGlzLnNjYWxlLmNhbGN1bGF0ZVkodC52YWx1ZSksd2lkdGg6dGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJXaWR0aCh0aGlzLmRhdGFzZXRzLmxlbmd0aCl9LGkpLmRyYXcoKSl9LHRoaXMpfSx0aGlzKX19KX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PXRoaXMsaT10LkNoYXJ0LGU9aS5oZWxwZXJzLHM9e3NlZ21lbnRTaG93U3Ryb2tlOiEwLHNlZ21lbnRTdHJva2VDb2xvcjpcIiNmZmZcIixzZWdtZW50U3Ryb2tlV2lkdGg6MixwZXJjZW50YWdlSW5uZXJDdXRvdXQ6NTAsYW5pbWF0aW9uU3RlcHM6MTAwLGFuaW1hdGlvbkVhc2luZzpcImVhc2VPdXRCb3VuY2VcIixhbmltYXRlUm90YXRlOiEwLGFuaW1hdGVTY2FsZTohMSxsZWdlbmRUZW1wbGF0ZTonPHVsIGNsYXNzPVwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kXCI+PCUgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKXslPjxsaT48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6PCU9c2VnbWVudHNbaV0uZmlsbENvbG9yJT5cIj48L3NwYW4+PCVpZihzZWdtZW50c1tpXS5sYWJlbCl7JT48JT1zZWdtZW50c1tpXS5sYWJlbCU+PCV9JT48L2xpPjwlfSU+PC91bD4nfTtpLlR5cGUuZXh0ZW5kKHtuYW1lOlwiRG91Z2hudXRcIixkZWZhdWx0czpzLGluaXRpYWxpemU6ZnVuY3Rpb24odCl7dGhpcy5zZWdtZW50cz1bXSx0aGlzLm91dGVyUmFkaXVzPShlLm1pbihbdGhpcy5jaGFydC53aWR0aCx0aGlzLmNoYXJ0LmhlaWdodF0pLXRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlV2lkdGgvMikvMix0aGlzLlNlZ21lbnRBcmM9aS5BcmMuZXh0ZW5kKHtjdHg6dGhpcy5jaGFydC5jdHgseDp0aGlzLmNoYXJ0LndpZHRoLzIseTp0aGlzLmNoYXJ0LmhlaWdodC8yfSksdGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyYmZS5iaW5kRXZlbnRzKHRoaXMsdGhpcy5vcHRpb25zLnRvb2x0aXBFdmVudHMsZnVuY3Rpb24odCl7dmFyIGk9XCJtb3VzZW91dFwiIT09dC50eXBlP3RoaXMuZ2V0U2VnbWVudHNBdEV2ZW50KHQpOltdO2UuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQpe3QucmVzdG9yZShbXCJmaWxsQ29sb3JcIl0pfSksZS5lYWNoKGksZnVuY3Rpb24odCl7dC5maWxsQ29sb3I9dC5oaWdobGlnaHRDb2xvcn0pLHRoaXMuc2hvd1Rvb2x0aXAoaSl9KSx0aGlzLmNhbGN1bGF0ZVRvdGFsKHQpLGUuZWFjaCh0LGZ1bmN0aW9uKHQsaSl7dGhpcy5hZGREYXRhKHQsaSwhMCl9LHRoaXMpLHRoaXMucmVuZGVyKCl9LGdldFNlZ21lbnRzQXRFdmVudDpmdW5jdGlvbih0KXt2YXIgaT1bXSxzPWUuZ2V0UmVsYXRpdmVQb3NpdGlvbih0KTtyZXR1cm4gZS5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24odCl7dC5pblJhbmdlKHMueCxzLnkpJiZpLnB1c2godCl9LHRoaXMpLGl9LGFkZERhdGE6ZnVuY3Rpb24odCxpLGUpe3ZhciBzPWl8fHRoaXMuc2VnbWVudHMubGVuZ3RoO3RoaXMuc2VnbWVudHMuc3BsaWNlKHMsMCxuZXcgdGhpcy5TZWdtZW50QXJjKHt2YWx1ZTp0LnZhbHVlLG91dGVyUmFkaXVzOnRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGU/MDp0aGlzLm91dGVyUmFkaXVzLGlubmVyUmFkaXVzOnRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGU/MDp0aGlzLm91dGVyUmFkaXVzLzEwMCp0aGlzLm9wdGlvbnMucGVyY2VudGFnZUlubmVyQ3V0b3V0LGZpbGxDb2xvcjp0LmNvbG9yLGhpZ2hsaWdodENvbG9yOnQuaGlnaGxpZ2h0fHx0LmNvbG9yLHNob3dTdHJva2U6dGhpcy5vcHRpb25zLnNlZ21lbnRTaG93U3Ryb2tlLHN0cm9rZVdpZHRoOnRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlV2lkdGgsc3Ryb2tlQ29sb3I6dGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VDb2xvcixzdGFydEFuZ2xlOjEuNSpNYXRoLlBJLGNpcmN1bWZlcmVuY2U6dGhpcy5vcHRpb25zLmFuaW1hdGVSb3RhdGU/MDp0aGlzLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UodC52YWx1ZSksbGFiZWw6dC5sYWJlbH0pKSxlfHwodGhpcy5yZWZsb3coKSx0aGlzLnVwZGF0ZSgpKX0sY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZTpmdW5jdGlvbih0KXtyZXR1cm4gMipNYXRoLlBJKih0L3RoaXMudG90YWwpfSxjYWxjdWxhdGVUb3RhbDpmdW5jdGlvbih0KXt0aGlzLnRvdGFsPTAsZS5lYWNoKHQsZnVuY3Rpb24odCl7dGhpcy50b3RhbCs9dC52YWx1ZX0sdGhpcyl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuY2FsY3VsYXRlVG90YWwodGhpcy5zZWdtZW50cyksZS5lYWNoKHRoaXMuYWN0aXZlRWxlbWVudHMsZnVuY3Rpb24odCl7dC5yZXN0b3JlKFtcImZpbGxDb2xvclwiXSl9KSxlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LnNhdmUoKX0pLHRoaXMucmVuZGVyKCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24odCl7dmFyIGk9ZS5pc051bWJlcih0KT90OnRoaXMuc2VnbWVudHMubGVuZ3RoLTE7dGhpcy5zZWdtZW50cy5zcGxpY2UoaSwxKSx0aGlzLnJlZmxvdygpLHRoaXMudXBkYXRlKCl9LHJlZmxvdzpmdW5jdGlvbigpe2UuZXh0ZW5kKHRoaXMuU2VnbWVudEFyYy5wcm90b3R5cGUse3g6dGhpcy5jaGFydC53aWR0aC8yLHk6dGhpcy5jaGFydC5oZWlnaHQvMn0pLHRoaXMub3V0ZXJSYWRpdXM9KGUubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSktdGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aC8yKS8yLGUuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQpe3QudXBkYXRlKHtvdXRlclJhZGl1czp0aGlzLm91dGVyUmFkaXVzLGlubmVyUmFkaXVzOnRoaXMub3V0ZXJSYWRpdXMvMTAwKnRoaXMub3B0aW9ucy5wZXJjZW50YWdlSW5uZXJDdXRvdXR9KX0sdGhpcyl9LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dD90OjE7dGhpcy5jbGVhcigpLGUuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQsZSl7dC50cmFuc2l0aW9uKHtjaXJjdW1mZXJlbmNlOnRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh0LnZhbHVlKSxvdXRlclJhZGl1czp0aGlzLm91dGVyUmFkaXVzLGlubmVyUmFkaXVzOnRoaXMub3V0ZXJSYWRpdXMvMTAwKnRoaXMub3B0aW9ucy5wZXJjZW50YWdlSW5uZXJDdXRvdXR9LGkpLHQuZW5kQW5nbGU9dC5zdGFydEFuZ2xlK3QuY2lyY3VtZmVyZW5jZSx0LmRyYXcoKSwwPT09ZSYmKHQuc3RhcnRBbmdsZT0xLjUqTWF0aC5QSSksZTx0aGlzLnNlZ21lbnRzLmxlbmd0aC0xJiYodGhpcy5zZWdtZW50c1tlKzFdLnN0YXJ0QW5nbGU9dC5lbmRBbmdsZSl9LHRoaXMpfX0pLGkudHlwZXMuRG91Z2hudXQuZXh0ZW5kKHtuYW1lOlwiUGllXCIsZGVmYXVsdHM6ZS5tZXJnZShzLHtwZXJjZW50YWdlSW5uZXJDdXRvdXQ6MH0pfSl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD10aGlzLGk9dC5DaGFydCxlPWkuaGVscGVycyxzPXtzY2FsZVNob3dHcmlkTGluZXM6ITAsc2NhbGVHcmlkTGluZUNvbG9yOlwicmdiYSgwLDAsMCwuMDUpXCIsc2NhbGVHcmlkTGluZVdpZHRoOjEsc2NhbGVTaG93SG9yaXpvbnRhbExpbmVzOiEwLHNjYWxlU2hvd1ZlcnRpY2FsTGluZXM6ITAsYmV6aWVyQ3VydmU6ITAsYmV6aWVyQ3VydmVUZW5zaW9uOi40LHBvaW50RG90OiEwLHBvaW50RG90UmFkaXVzOjQscG9pbnREb3RTdHJva2VXaWR0aDoxLHBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzOjIwLGRhdGFzZXRTdHJva2U6ITAsZGF0YXNldFN0cm9rZVdpZHRoOjIsZGF0YXNldEZpbGw6ITAsbGVnZW5kVGVtcGxhdGU6Jzx1bCBjbGFzcz1cIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFwiPjwlIGZvciAodmFyIGk9MDsgaTxkYXRhc2V0cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOjwlPWRhdGFzZXRzW2ldLnN0cm9rZUNvbG9yJT5cIj48L3NwYW4+PCVpZihkYXRhc2V0c1tpXS5sYWJlbCl7JT48JT1kYXRhc2V0c1tpXS5sYWJlbCU+PCV9JT48L2xpPjwlfSU+PC91bD4nfTtpLlR5cGUuZXh0ZW5kKHtuYW1lOlwiTGluZVwiLGRlZmF1bHRzOnMsaW5pdGlhbGl6ZTpmdW5jdGlvbih0KXt0aGlzLlBvaW50Q2xhc3M9aS5Qb2ludC5leHRlbmQoe3N0cm9rZVdpZHRoOnRoaXMub3B0aW9ucy5wb2ludERvdFN0cm9rZVdpZHRoLHJhZGl1czp0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMsZGlzcGxheTp0aGlzLm9wdGlvbnMucG9pbnREb3QsaGl0RGV0ZWN0aW9uUmFkaXVzOnRoaXMub3B0aW9ucy5wb2ludEhpdERldGVjdGlvblJhZGl1cyxjdHg6dGhpcy5jaGFydC5jdHgsaW5SYW5nZTpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5wb3codC10aGlzLngsMik8TWF0aC5wb3codGhpcy5yYWRpdXMrdGhpcy5oaXREZXRlY3Rpb25SYWRpdXMsMil9fSksdGhpcy5kYXRhc2V0cz1bXSx0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXBzJiZlLmJpbmRFdmVudHModGhpcyx0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cyxmdW5jdGlvbih0KXt2YXIgaT1cIm1vdXNlb3V0XCIhPT10LnR5cGU/dGhpcy5nZXRQb2ludHNBdEV2ZW50KHQpOltdO3RoaXMuZWFjaFBvaW50cyhmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSxlLmVhY2goaSxmdW5jdGlvbih0KXt0LmZpbGxDb2xvcj10LmhpZ2hsaWdodEZpbGwsdC5zdHJva2VDb2xvcj10LmhpZ2hsaWdodFN0cm9rZX0pLHRoaXMuc2hvd1Rvb2x0aXAoaSl9KSxlLmVhY2godC5kYXRhc2V0cyxmdW5jdGlvbihpKXt2YXIgcz17bGFiZWw6aS5sYWJlbHx8bnVsbCxmaWxsQ29sb3I6aS5maWxsQ29sb3Isc3Ryb2tlQ29sb3I6aS5zdHJva2VDb2xvcixwb2ludENvbG9yOmkucG9pbnRDb2xvcixwb2ludFN0cm9rZUNvbG9yOmkucG9pbnRTdHJva2VDb2xvcixwb2ludHM6W119O3RoaXMuZGF0YXNldHMucHVzaChzKSxlLmVhY2goaS5kYXRhLGZ1bmN0aW9uKGUsbil7cy5wb2ludHMucHVzaChuZXcgdGhpcy5Qb2ludENsYXNzKHt2YWx1ZTplLGxhYmVsOnQubGFiZWxzW25dLGRhdGFzZXRMYWJlbDppLmxhYmVsLHN0cm9rZUNvbG9yOmkucG9pbnRTdHJva2VDb2xvcixmaWxsQ29sb3I6aS5wb2ludENvbG9yLGhpZ2hsaWdodEZpbGw6aS5wb2ludEhpZ2hsaWdodEZpbGx8fGkucG9pbnRDb2xvcixoaWdobGlnaHRTdHJva2U6aS5wb2ludEhpZ2hsaWdodFN0cm9rZXx8aS5wb2ludFN0cm9rZUNvbG9yfSkpfSx0aGlzKSx0aGlzLmJ1aWxkU2NhbGUodC5sYWJlbHMpLHRoaXMuZWFjaFBvaW50cyhmdW5jdGlvbih0LGkpe2UuZXh0ZW5kKHQse3g6dGhpcy5zY2FsZS5jYWxjdWxhdGVYKGkpLHk6dGhpcy5zY2FsZS5lbmRQb2ludH0pLHQuc2F2ZSgpfSx0aGlzKX0sdGhpcyksdGhpcy5yZW5kZXIoKX0sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5zY2FsZS51cGRhdGUoKSxlLmVhY2godGhpcy5hY3RpdmVFbGVtZW50cyxmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSx0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24odCl7dC5zYXZlKCl9KSx0aGlzLnJlbmRlcigpfSxlYWNoUG9pbnRzOmZ1bmN0aW9uKHQpe2UuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGkpe2UuZWFjaChpLnBvaW50cyx0LHRoaXMpfSx0aGlzKX0sZ2V0UG9pbnRzQXRFdmVudDpmdW5jdGlvbih0KXt2YXIgaT1bXSxzPWUuZ2V0UmVsYXRpdmVQb3NpdGlvbih0KTtyZXR1cm4gZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24odCl7ZS5lYWNoKHQucG9pbnRzLGZ1bmN0aW9uKHQpe3QuaW5SYW5nZShzLngscy55KSYmaS5wdXNoKHQpfSl9LHRoaXMpLGl9LGJ1aWxkU2NhbGU6ZnVuY3Rpb24odCl7dmFyIHM9dGhpcyxuPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHMuZWFjaFBvaW50cyhmdW5jdGlvbihpKXt0LnB1c2goaS52YWx1ZSl9KSx0fSxvPXt0ZW1wbGF0ZVN0cmluZzp0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxoZWlnaHQ6dGhpcy5jaGFydC5oZWlnaHQsd2lkdGg6dGhpcy5jaGFydC53aWR0aCxjdHg6dGhpcy5jaGFydC5jdHgsdGV4dENvbG9yOnRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixmb250U2l6ZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxmb250U3R5bGU6dGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLGZvbnRGYW1pbHk6dGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSx2YWx1ZXNDb3VudDp0Lmxlbmd0aCxiZWdpbkF0WmVybzp0aGlzLm9wdGlvbnMuc2NhbGVCZWdpbkF0WmVybyxpbnRlZ2Vyc09ubHk6dGhpcy5vcHRpb25zLnNjYWxlSW50ZWdlcnNPbmx5LGNhbGN1bGF0ZVlSYW5nZTpmdW5jdGlvbih0KXt2YXIgaT1lLmNhbGN1bGF0ZVNjYWxlUmFuZ2UobigpLHQsdGhpcy5mb250U2l6ZSx0aGlzLmJlZ2luQXRaZXJvLHRoaXMuaW50ZWdlcnNPbmx5KTtlLmV4dGVuZCh0aGlzLGkpfSx4TGFiZWxzOnQsZm9udDplLmZvbnRTdHJpbmcodGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLHRoaXMub3B0aW9ucy5zY2FsZUZvbnRGYW1pbHkpLGxpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVMaW5lV2lkdGgsbGluZUNvbG9yOnRoaXMub3B0aW9ucy5zY2FsZUxpbmVDb2xvcixzaG93SG9yaXpvbnRhbExpbmVzOnRoaXMub3B0aW9ucy5zY2FsZVNob3dIb3Jpem9udGFsTGluZXMsc2hvd1ZlcnRpY2FsTGluZXM6dGhpcy5vcHRpb25zLnNjYWxlU2hvd1ZlcnRpY2FsTGluZXMsZ3JpZExpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVTaG93R3JpZExpbmVzP3RoaXMub3B0aW9ucy5zY2FsZUdyaWRMaW5lV2lkdGg6MCxncmlkTGluZUNvbG9yOnRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXM/dGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVDb2xvcjpcInJnYmEoMCwwLDAsMClcIixwYWRkaW5nOnRoaXMub3B0aW9ucy5zaG93U2NhbGU/MDp0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMrdGhpcy5vcHRpb25zLnBvaW50RG90U3Ryb2tlV2lkdGgsc2hvd0xhYmVsczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLGRpc3BsYXk6dGhpcy5vcHRpb25zLnNob3dTY2FsZX07dGhpcy5vcHRpb25zLnNjYWxlT3ZlcnJpZGUmJmUuZXh0ZW5kKG8se2NhbGN1bGF0ZVlSYW5nZTplLm5vb3Asc3RlcHM6dGhpcy5vcHRpb25zLnNjYWxlU3RlcHMsc3RlcFZhbHVlOnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aCxtaW46dGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxtYXg6dGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSt0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGh9KSx0aGlzLnNjYWxlPW5ldyBpLlNjYWxlKG8pfSxhZGREYXRhOmZ1bmN0aW9uKHQsaSl7ZS5lYWNoKHQsZnVuY3Rpb24odCxlKXt0aGlzLmRhdGFzZXRzW2VdLnBvaW50cy5wdXNoKG5ldyB0aGlzLlBvaW50Q2xhc3Moe3ZhbHVlOnQsbGFiZWw6aSx4OnRoaXMuc2NhbGUuY2FsY3VsYXRlWCh0aGlzLnNjYWxlLnZhbHVlc0NvdW50KzEpLHk6dGhpcy5zY2FsZS5lbmRQb2ludCxzdHJva2VDb2xvcjp0aGlzLmRhdGFzZXRzW2VdLnBvaW50U3Ryb2tlQ29sb3IsZmlsbENvbG9yOnRoaXMuZGF0YXNldHNbZV0ucG9pbnRDb2xvcn0pKX0sdGhpcyksdGhpcy5zY2FsZS5hZGRYTGFiZWwoaSksdGhpcy51cGRhdGUoKX0scmVtb3ZlRGF0YTpmdW5jdGlvbigpe3RoaXMuc2NhbGUucmVtb3ZlWExhYmVsKCksZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24odCl7dC5wb2ludHMuc2hpZnQoKX0sdGhpcyksdGhpcy51cGRhdGUoKX0scmVmbG93OmZ1bmN0aW9uKCl7dmFyIHQ9ZS5leHRlbmQoe2hlaWdodDp0aGlzLmNoYXJ0LmhlaWdodCx3aWR0aDp0aGlzLmNoYXJ0LndpZHRofSk7dGhpcy5zY2FsZS51cGRhdGUodCl9LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dHx8MTt0aGlzLmNsZWFyKCk7dmFyIHM9dGhpcy5jaGFydC5jdHgsbj1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXQudmFsdWV9LG89ZnVuY3Rpb24odCxpLHMpe3JldHVybiBlLmZpbmROZXh0V2hlcmUoaSxuLHMpfHx0fSxhPWZ1bmN0aW9uKHQsaSxzKXtyZXR1cm4gZS5maW5kUHJldmlvdXNXaGVyZShpLG4scyl8fHR9O3RoaXMuc2NhbGUuZHJhdyhpKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXt2YXIgaD1lLndoZXJlKHQucG9pbnRzLG4pO2UuZWFjaCh0LnBvaW50cyxmdW5jdGlvbih0LGUpe3QuaGFzVmFsdWUoKSYmdC50cmFuc2l0aW9uKHt5OnRoaXMuc2NhbGUuY2FsY3VsYXRlWSh0LnZhbHVlKSx4OnRoaXMuc2NhbGUuY2FsY3VsYXRlWChlKX0saSl9LHRoaXMpLHRoaXMub3B0aW9ucy5iZXppZXJDdXJ2ZSYmZS5lYWNoKGgsZnVuY3Rpb24odCxpKXt2YXIgcz1pPjAmJmk8aC5sZW5ndGgtMT90aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmVUZW5zaW9uOjA7dC5jb250cm9sUG9pbnRzPWUuc3BsaW5lQ3VydmUoYSh0LGgsaSksdCxvKHQsaCxpKSxzKSx0LmNvbnRyb2xQb2ludHMub3V0ZXIueT50aGlzLnNjYWxlLmVuZFBvaW50P3QuY29udHJvbFBvaW50cy5vdXRlci55PXRoaXMuc2NhbGUuZW5kUG9pbnQ6dC5jb250cm9sUG9pbnRzLm91dGVyLnk8dGhpcy5zY2FsZS5zdGFydFBvaW50JiYodC5jb250cm9sUG9pbnRzLm91dGVyLnk9dGhpcy5zY2FsZS5zdGFydFBvaW50KSx0LmNvbnRyb2xQb2ludHMuaW5uZXIueT50aGlzLnNjYWxlLmVuZFBvaW50P3QuY29udHJvbFBvaW50cy5pbm5lci55PXRoaXMuc2NhbGUuZW5kUG9pbnQ6dC5jb250cm9sUG9pbnRzLmlubmVyLnk8dGhpcy5zY2FsZS5zdGFydFBvaW50JiYodC5jb250cm9sUG9pbnRzLmlubmVyLnk9dGhpcy5zY2FsZS5zdGFydFBvaW50KX0sdGhpcykscy5saW5lV2lkdGg9dGhpcy5vcHRpb25zLmRhdGFzZXRTdHJva2VXaWR0aCxzLnN0cm9rZVN0eWxlPXQuc3Ryb2tlQ29sb3Iscy5iZWdpblBhdGgoKSxlLmVhY2goaCxmdW5jdGlvbih0LGkpe2lmKDA9PT1pKXMubW92ZVRvKHQueCx0LnkpO2Vsc2UgaWYodGhpcy5vcHRpb25zLmJlemllckN1cnZlKXt2YXIgZT1hKHQsaCxpKTtzLmJlemllckN1cnZlVG8oZS5jb250cm9sUG9pbnRzLm91dGVyLngsZS5jb250cm9sUG9pbnRzLm91dGVyLnksdC5jb250cm9sUG9pbnRzLmlubmVyLngsdC5jb250cm9sUG9pbnRzLmlubmVyLnksdC54LHQueSl9ZWxzZSBzLmxpbmVUbyh0LngsdC55KX0sdGhpcykscy5zdHJva2UoKSx0aGlzLm9wdGlvbnMuZGF0YXNldEZpbGwmJmgubGVuZ3RoPjAmJihzLmxpbmVUbyhoW2gubGVuZ3RoLTFdLngsdGhpcy5zY2FsZS5lbmRQb2ludCkscy5saW5lVG8oaFswXS54LHRoaXMuc2NhbGUuZW5kUG9pbnQpLHMuZmlsbFN0eWxlPXQuZmlsbENvbG9yLHMuY2xvc2VQYXRoKCkscy5maWxsKCkpLGUuZWFjaChoLGZ1bmN0aW9uKHQpe3QuZHJhdygpfSl9LHRoaXMpfX0pfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9dGhpcyxpPXQuQ2hhcnQsZT1pLmhlbHBlcnMscz17c2NhbGVTaG93TGFiZWxCYWNrZHJvcDohMCxzY2FsZUJhY2tkcm9wQ29sb3I6XCJyZ2JhKDI1NSwyNTUsMjU1LDAuNzUpXCIsc2NhbGVCZWdpbkF0WmVybzohMCxzY2FsZUJhY2tkcm9wUGFkZGluZ1k6MixzY2FsZUJhY2tkcm9wUGFkZGluZ1g6MixzY2FsZVNob3dMaW5lOiEwLHNlZ21lbnRTaG93U3Ryb2tlOiEwLHNlZ21lbnRTdHJva2VDb2xvcjpcIiNmZmZcIixzZWdtZW50U3Ryb2tlV2lkdGg6MixhbmltYXRpb25TdGVwczoxMDAsYW5pbWF0aW9uRWFzaW5nOlwiZWFzZU91dEJvdW5jZVwiLGFuaW1hdGVSb3RhdGU6ITAsYW5pbWF0ZVNjYWxlOiExLGxlZ2VuZFRlbXBsYXRlOic8dWwgY2xhc3M9XCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwvc3Bhbj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvbGk+PCV9JT48L3VsPid9O2kuVHlwZS5leHRlbmQoe25hbWU6XCJQb2xhckFyZWFcIixkZWZhdWx0czpzLGluaXRpYWxpemU6ZnVuY3Rpb24odCl7dGhpcy5zZWdtZW50cz1bXSx0aGlzLlNlZ21lbnRBcmM9aS5BcmMuZXh0ZW5kKHtzaG93U3Ryb2tlOnRoaXMub3B0aW9ucy5zZWdtZW50U2hvd1N0cm9rZSxzdHJva2VXaWR0aDp0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZVdpZHRoLHN0cm9rZUNvbG9yOnRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlQ29sb3IsY3R4OnRoaXMuY2hhcnQuY3R4LGlubmVyUmFkaXVzOjAseDp0aGlzLmNoYXJ0LndpZHRoLzIseTp0aGlzLmNoYXJ0LmhlaWdodC8yfSksdGhpcy5zY2FsZT1uZXcgaS5SYWRpYWxTY2FsZSh7ZGlzcGxheTp0aGlzLm9wdGlvbnMuc2hvd1NjYWxlLGZvbnRTdHlsZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsZm9udFNpemU6dGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsZm9udEZhbWlseTp0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5LGZvbnRDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3Isc2hvd0xhYmVsczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLHNob3dMYWJlbEJhY2tkcm9wOnRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbEJhY2tkcm9wLGJhY2tkcm9wQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BDb2xvcixiYWNrZHJvcFBhZGRpbmdZOnRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1ksYmFja2Ryb3BQYWRkaW5nWDp0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcFBhZGRpbmdYLGxpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGluZT90aGlzLm9wdGlvbnMuc2NhbGVMaW5lV2lkdGg6MCxsaW5lQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLGxpbmVBcmM6ITAsd2lkdGg6dGhpcy5jaGFydC53aWR0aCxoZWlnaHQ6dGhpcy5jaGFydC5oZWlnaHQseENlbnRlcjp0aGlzLmNoYXJ0LndpZHRoLzIseUNlbnRlcjp0aGlzLmNoYXJ0LmhlaWdodC8yLGN0eDp0aGlzLmNoYXJ0LmN0eCx0ZW1wbGF0ZVN0cmluZzp0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCx2YWx1ZXNDb3VudDp0Lmxlbmd0aH0pLHRoaXMudXBkYXRlU2NhbGVSYW5nZSh0KSx0aGlzLnNjYWxlLnVwZGF0ZSgpLGUuZWFjaCh0LGZ1bmN0aW9uKHQsaSl7dGhpcy5hZGREYXRhKHQsaSwhMCl9LHRoaXMpLHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMmJmUuYmluZEV2ZW50cyh0aGlzLHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLGZ1bmN0aW9uKHQpe3ZhciBpPVwibW91c2VvdXRcIiE9PXQudHlwZT90aGlzLmdldFNlZ21lbnRzQXRFdmVudCh0KTpbXTtlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCJdKX0pLGUuZWFjaChpLGZ1bmN0aW9uKHQpe3QuZmlsbENvbG9yPXQuaGlnaGxpZ2h0Q29sb3J9KSx0aGlzLnNob3dUb29sdGlwKGkpfSksdGhpcy5yZW5kZXIoKX0sZ2V0U2VnbWVudHNBdEV2ZW50OmZ1bmN0aW9uKHQpe3ZhciBpPVtdLHM9ZS5nZXRSZWxhdGl2ZVBvc2l0aW9uKHQpO3JldHVybiBlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LmluUmFuZ2Uocy54LHMueSkmJmkucHVzaCh0KX0sdGhpcyksaX0sYWRkRGF0YTpmdW5jdGlvbih0LGksZSl7dmFyIHM9aXx8dGhpcy5zZWdtZW50cy5sZW5ndGg7dGhpcy5zZWdtZW50cy5zcGxpY2UocywwLG5ldyB0aGlzLlNlZ21lbnRBcmMoe2ZpbGxDb2xvcjp0LmNvbG9yLGhpZ2hsaWdodENvbG9yOnQuaGlnaGxpZ2h0fHx0LmNvbG9yLGxhYmVsOnQubGFiZWwsdmFsdWU6dC52YWx1ZSxvdXRlclJhZGl1czp0aGlzLm9wdGlvbnMuYW5pbWF0ZVNjYWxlPzA6dGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodC52YWx1ZSksY2lyY3VtZmVyZW5jZTp0aGlzLm9wdGlvbnMuYW5pbWF0ZVJvdGF0ZT8wOnRoaXMuc2NhbGUuZ2V0Q2lyY3VtZmVyZW5jZSgpLHN0YXJ0QW5nbGU6MS41Kk1hdGguUEl9KSksZXx8KHRoaXMucmVmbG93KCksdGhpcy51cGRhdGUoKSl9LHJlbW92ZURhdGE6ZnVuY3Rpb24odCl7dmFyIGk9ZS5pc051bWJlcih0KT90OnRoaXMuc2VnbWVudHMubGVuZ3RoLTE7dGhpcy5zZWdtZW50cy5zcGxpY2UoaSwxKSx0aGlzLnJlZmxvdygpLHRoaXMudXBkYXRlKCl9LGNhbGN1bGF0ZVRvdGFsOmZ1bmN0aW9uKHQpe3RoaXMudG90YWw9MCxlLmVhY2godCxmdW5jdGlvbih0KXt0aGlzLnRvdGFsKz10LnZhbHVlfSx0aGlzKSx0aGlzLnNjYWxlLnZhbHVlc0NvdW50PXRoaXMuc2VnbWVudHMubGVuZ3RofSx1cGRhdGVTY2FsZVJhbmdlOmZ1bmN0aW9uKHQpe3ZhciBpPVtdO2UuZWFjaCh0LGZ1bmN0aW9uKHQpe2kucHVzaCh0LnZhbHVlKX0pO3ZhciBzPXRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlP3tzdGVwczp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyxzdGVwVmFsdWU6dGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLG1pbjp0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlLG1heDp0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlK3RoaXMub3B0aW9ucy5zY2FsZVN0ZXBzKnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aH06ZS5jYWxjdWxhdGVTY2FsZVJhbmdlKGksZS5taW4oW3RoaXMuY2hhcnQud2lkdGgsdGhpcy5jaGFydC5oZWlnaHRdKS8yLHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLHRoaXMub3B0aW9ucy5zY2FsZUludGVnZXJzT25seSk7ZS5leHRlbmQodGhpcy5zY2FsZSxzLHtzaXplOmUubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSkseENlbnRlcjp0aGlzLmNoYXJ0LndpZHRoLzIseUNlbnRlcjp0aGlzLmNoYXJ0LmhlaWdodC8yfSl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuY2FsY3VsYXRlVG90YWwodGhpcy5zZWdtZW50cyksZS5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24odCl7dC5zYXZlKCl9KSx0aGlzLnJlbmRlcigpfSxyZWZsb3c6ZnVuY3Rpb24oKXtlLmV4dGVuZCh0aGlzLlNlZ21lbnRBcmMucHJvdG90eXBlLHt4OnRoaXMuY2hhcnQud2lkdGgvMix5OnRoaXMuY2hhcnQuaGVpZ2h0LzJ9KSx0aGlzLnVwZGF0ZVNjYWxlUmFuZ2UodGhpcy5zZWdtZW50cyksdGhpcy5zY2FsZS51cGRhdGUoKSxlLmV4dGVuZCh0aGlzLnNjYWxlLHt4Q2VudGVyOnRoaXMuY2hhcnQud2lkdGgvMix5Q2VudGVyOnRoaXMuY2hhcnQuaGVpZ2h0LzJ9KSxlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LnVwZGF0ZSh7b3V0ZXJSYWRpdXM6dGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodC52YWx1ZSl9KX0sdGhpcyl9LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dHx8MTt0aGlzLmNsZWFyKCksZS5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24odCxlKXt0LnRyYW5zaXRpb24oe2NpcmN1bWZlcmVuY2U6dGhpcy5zY2FsZS5nZXRDaXJjdW1mZXJlbmNlKCksb3V0ZXJSYWRpdXM6dGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodC52YWx1ZSl9LGkpLHQuZW5kQW5nbGU9dC5zdGFydEFuZ2xlK3QuY2lyY3VtZmVyZW5jZSwwPT09ZSYmKHQuc3RhcnRBbmdsZT0xLjUqTWF0aC5QSSksZTx0aGlzLnNlZ21lbnRzLmxlbmd0aC0xJiYodGhpcy5zZWdtZW50c1tlKzFdLnN0YXJ0QW5nbGU9dC5lbmRBbmdsZSksdC5kcmF3KCl9LHRoaXMpLHRoaXMuc2NhbGUuZHJhdygpfX0pfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9dGhpcyxpPXQuQ2hhcnQsZT1pLmhlbHBlcnM7aS5UeXBlLmV4dGVuZCh7bmFtZTpcIlJhZGFyXCIsZGVmYXVsdHM6e3NjYWxlU2hvd0xpbmU6ITAsYW5nbGVTaG93TGluZU91dDohMCxzY2FsZVNob3dMYWJlbHM6ITEsc2NhbGVCZWdpbkF0WmVybzohMCxhbmdsZUxpbmVDb2xvcjpcInJnYmEoMCwwLDAsLjEpXCIsYW5nbGVMaW5lV2lkdGg6MSxwb2ludExhYmVsRm9udEZhbWlseTpcIidBcmlhbCdcIixwb2ludExhYmVsRm9udFN0eWxlOlwibm9ybWFsXCIscG9pbnRMYWJlbEZvbnRTaXplOjEwLHBvaW50TGFiZWxGb250Q29sb3I6XCIjNjY2XCIscG9pbnREb3Q6ITAscG9pbnREb3RSYWRpdXM6Myxwb2ludERvdFN0cm9rZVdpZHRoOjEscG9pbnRIaXREZXRlY3Rpb25SYWRpdXM6MjAsZGF0YXNldFN0cm9rZTohMCxkYXRhc2V0U3Ryb2tlV2lkdGg6MixkYXRhc2V0RmlsbDohMCxsZWdlbmRUZW1wbGF0ZTonPHVsIGNsYXNzPVwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kXCI+PCUgZm9yICh2YXIgaT0wOyBpPGRhdGFzZXRzLmxlbmd0aDsgaSsrKXslPjxsaT48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6PCU9ZGF0YXNldHNbaV0uc3Ryb2tlQ29sb3IlPlwiPjwvc3Bhbj48JWlmKGRhdGFzZXRzW2ldLmxhYmVsKXslPjwlPWRhdGFzZXRzW2ldLmxhYmVsJT48JX0lPjwvbGk+PCV9JT48L3VsPid9LGluaXRpYWxpemU6ZnVuY3Rpb24odCl7dGhpcy5Qb2ludENsYXNzPWkuUG9pbnQuZXh0ZW5kKHtzdHJva2VXaWR0aDp0aGlzLm9wdGlvbnMucG9pbnREb3RTdHJva2VXaWR0aCxyYWRpdXM6dGhpcy5vcHRpb25zLnBvaW50RG90UmFkaXVzLGRpc3BsYXk6dGhpcy5vcHRpb25zLnBvaW50RG90LGhpdERldGVjdGlvblJhZGl1czp0aGlzLm9wdGlvbnMucG9pbnRIaXREZXRlY3Rpb25SYWRpdXMsY3R4OnRoaXMuY2hhcnQuY3R4fSksdGhpcy5kYXRhc2V0cz1bXSx0aGlzLmJ1aWxkU2NhbGUodCksdGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyYmZS5iaW5kRXZlbnRzKHRoaXMsdGhpcy5vcHRpb25zLnRvb2x0aXBFdmVudHMsZnVuY3Rpb24odCl7dmFyIGk9XCJtb3VzZW91dFwiIT09dC50eXBlP3RoaXMuZ2V0UG9pbnRzQXRFdmVudCh0KTpbXTt0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24odCl7dC5yZXN0b3JlKFtcImZpbGxDb2xvclwiLFwic3Ryb2tlQ29sb3JcIl0pfSksZS5lYWNoKGksZnVuY3Rpb24odCl7dC5maWxsQ29sb3I9dC5oaWdobGlnaHRGaWxsLHQuc3Ryb2tlQ29sb3I9dC5oaWdobGlnaHRTdHJva2V9KSx0aGlzLnNob3dUb29sdGlwKGkpfSksZS5lYWNoKHQuZGF0YXNldHMsZnVuY3Rpb24oaSl7dmFyIHM9e2xhYmVsOmkubGFiZWx8fG51bGwsZmlsbENvbG9yOmkuZmlsbENvbG9yLHN0cm9rZUNvbG9yOmkuc3Ryb2tlQ29sb3IscG9pbnRDb2xvcjppLnBvaW50Q29sb3IscG9pbnRTdHJva2VDb2xvcjppLnBvaW50U3Ryb2tlQ29sb3IscG9pbnRzOltdfTt0aGlzLmRhdGFzZXRzLnB1c2gocyksZS5lYWNoKGkuZGF0YSxmdW5jdGlvbihlLG4pe3ZhciBvO3RoaXMuc2NhbGUuYW5pbWF0aW9ufHwobz10aGlzLnNjYWxlLmdldFBvaW50UG9zaXRpb24obix0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldChlKSkpLHMucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7dmFsdWU6ZSxsYWJlbDp0LmxhYmVsc1tuXSxkYXRhc2V0TGFiZWw6aS5sYWJlbCx4OnRoaXMub3B0aW9ucy5hbmltYXRpb24/dGhpcy5zY2FsZS54Q2VudGVyOm8ueCx5OnRoaXMub3B0aW9ucy5hbmltYXRpb24/dGhpcy5zY2FsZS55Q2VudGVyOm8ueSxzdHJva2VDb2xvcjppLnBvaW50U3Ryb2tlQ29sb3IsZmlsbENvbG9yOmkucG9pbnRDb2xvcixoaWdobGlnaHRGaWxsOmkucG9pbnRIaWdobGlnaHRGaWxsfHxpLnBvaW50Q29sb3IsaGlnaGxpZ2h0U3Ryb2tlOmkucG9pbnRIaWdobGlnaHRTdHJva2V8fGkucG9pbnRTdHJva2VDb2xvcn0pKX0sdGhpcyl9LHRoaXMpLHRoaXMucmVuZGVyKCl9LGVhY2hQb2ludHM6ZnVuY3Rpb24odCl7ZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24oaSl7ZS5lYWNoKGkucG9pbnRzLHQsdGhpcyl9LHRoaXMpfSxnZXRQb2ludHNBdEV2ZW50OmZ1bmN0aW9uKHQpe3ZhciBpPWUuZ2V0UmVsYXRpdmVQb3NpdGlvbih0KSxzPWUuZ2V0QW5nbGVGcm9tUG9pbnQoe3g6dGhpcy5zY2FsZS54Q2VudGVyLHk6dGhpcy5zY2FsZS55Q2VudGVyfSxpKSxuPTIqTWF0aC5QSS90aGlzLnNjYWxlLnZhbHVlc0NvdW50LG89TWF0aC5yb3VuZCgocy5hbmdsZS0xLjUqTWF0aC5QSSkvbiksYT1bXTtyZXR1cm4obz49dGhpcy5zY2FsZS52YWx1ZXNDb3VudHx8MD5vKSYmKG89MCkscy5kaXN0YW5jZTw9dGhpcy5zY2FsZS5kcmF3aW5nQXJlYSYmZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24odCl7YS5wdXNoKHQucG9pbnRzW29dKX0pLGF9LGJ1aWxkU2NhbGU6ZnVuY3Rpb24odCl7dGhpcy5zY2FsZT1uZXcgaS5SYWRpYWxTY2FsZSh7ZGlzcGxheTp0aGlzLm9wdGlvbnMuc2hvd1NjYWxlLGZvbnRTdHlsZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsZm9udFNpemU6dGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsZm9udEZhbWlseTp0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5LGZvbnRDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3Isc2hvd0xhYmVsczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLHNob3dMYWJlbEJhY2tkcm9wOnRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbEJhY2tkcm9wLGJhY2tkcm9wQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BDb2xvcixiYWNrZHJvcFBhZGRpbmdZOnRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1ksYmFja2Ryb3BQYWRkaW5nWDp0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcFBhZGRpbmdYLGxpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGluZT90aGlzLm9wdGlvbnMuc2NhbGVMaW5lV2lkdGg6MCxsaW5lQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLGFuZ2xlTGluZUNvbG9yOnRoaXMub3B0aW9ucy5hbmdsZUxpbmVDb2xvcixhbmdsZUxpbmVXaWR0aDp0aGlzLm9wdGlvbnMuYW5nbGVTaG93TGluZU91dD90aGlzLm9wdGlvbnMuYW5nbGVMaW5lV2lkdGg6MCxwb2ludExhYmVsRm9udENvbG9yOnRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udENvbG9yLHBvaW50TGFiZWxGb250U2l6ZTp0aGlzLm9wdGlvbnMucG9pbnRMYWJlbEZvbnRTaXplLHBvaW50TGFiZWxGb250RmFtaWx5OnRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udEZhbWlseSxwb2ludExhYmVsRm9udFN0eWxlOnRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udFN0eWxlLGhlaWdodDp0aGlzLmNoYXJ0LmhlaWdodCx3aWR0aDp0aGlzLmNoYXJ0LndpZHRoLHhDZW50ZXI6dGhpcy5jaGFydC53aWR0aC8yLHlDZW50ZXI6dGhpcy5jaGFydC5oZWlnaHQvMixjdHg6dGhpcy5jaGFydC5jdHgsdGVtcGxhdGVTdHJpbmc6dGhpcy5vcHRpb25zLnNjYWxlTGFiZWwsbGFiZWxzOnQubGFiZWxzLHZhbHVlc0NvdW50OnQuZGF0YXNldHNbMF0uZGF0YS5sZW5ndGh9KSx0aGlzLnNjYWxlLnNldFNjYWxlU2l6ZSgpLHRoaXMudXBkYXRlU2NhbGVSYW5nZSh0LmRhdGFzZXRzKSx0aGlzLnNjYWxlLmJ1aWxkWUxhYmVscygpfSx1cGRhdGVTY2FsZVJhbmdlOmZ1bmN0aW9uKHQpe3ZhciBpPWZ1bmN0aW9uKCl7dmFyIGk9W107cmV0dXJuIGUuZWFjaCh0LGZ1bmN0aW9uKHQpe3QuZGF0YT9pPWkuY29uY2F0KHQuZGF0YSk6ZS5lYWNoKHQucG9pbnRzLGZ1bmN0aW9uKHQpe2kucHVzaCh0LnZhbHVlKX0pfSksaX0oKSxzPXRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlP3tzdGVwczp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyxzdGVwVmFsdWU6dGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLG1pbjp0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlLG1heDp0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlK3RoaXMub3B0aW9ucy5zY2FsZVN0ZXBzKnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aH06ZS5jYWxjdWxhdGVTY2FsZVJhbmdlKGksZS5taW4oW3RoaXMuY2hhcnQud2lkdGgsdGhpcy5jaGFydC5oZWlnaHRdKS8yLHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLHRoaXMub3B0aW9ucy5zY2FsZUludGVnZXJzT25seSk7ZS5leHRlbmQodGhpcy5zY2FsZSxzKX0sYWRkRGF0YTpmdW5jdGlvbih0LGkpe3RoaXMuc2NhbGUudmFsdWVzQ291bnQrKyxlLmVhY2godCxmdW5jdGlvbih0LGUpe3ZhciBzPXRoaXMuc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbih0aGlzLnNjYWxlLnZhbHVlc0NvdW50LHRoaXMuc2NhbGUuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHQpKTt0aGlzLmRhdGFzZXRzW2VdLnBvaW50cy5wdXNoKG5ldyB0aGlzLlBvaW50Q2xhc3Moe3ZhbHVlOnQsbGFiZWw6aSx4OnMueCx5OnMueSxzdHJva2VDb2xvcjp0aGlzLmRhdGFzZXRzW2VdLnBvaW50U3Ryb2tlQ29sb3IsZmlsbENvbG9yOnRoaXMuZGF0YXNldHNbZV0ucG9pbnRDb2xvcn0pKX0sdGhpcyksdGhpcy5zY2FsZS5sYWJlbHMucHVzaChpKSx0aGlzLnJlZmxvdygpLHRoaXMudXBkYXRlKCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oKXt0aGlzLnNjYWxlLnZhbHVlc0NvdW50LS0sdGhpcy5zY2FsZS5sYWJlbHMuc2hpZnQoKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXt0LnBvaW50cy5zaGlmdCgpfSx0aGlzKSx0aGlzLnJlZmxvdygpLHRoaXMudXBkYXRlKCl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuZWFjaFBvaW50cyhmdW5jdGlvbih0KXt0LnNhdmUoKX0pLHRoaXMucmVmbG93KCksdGhpcy5yZW5kZXIoKX0scmVmbG93OmZ1bmN0aW9uKCl7ZS5leHRlbmQodGhpcy5zY2FsZSx7d2lkdGg6dGhpcy5jaGFydC53aWR0aCxoZWlnaHQ6dGhpcy5jaGFydC5oZWlnaHQsc2l6ZTplLm1pbihbdGhpcy5jaGFydC53aWR0aCx0aGlzLmNoYXJ0LmhlaWdodF0pLHhDZW50ZXI6dGhpcy5jaGFydC53aWR0aC8yLHlDZW50ZXI6dGhpcy5jaGFydC5oZWlnaHQvMn0pLHRoaXMudXBkYXRlU2NhbGVSYW5nZSh0aGlzLmRhdGFzZXRzKSx0aGlzLnNjYWxlLnNldFNjYWxlU2l6ZSgpLHRoaXMuc2NhbGUuYnVpbGRZTGFiZWxzKCl9LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dHx8MSxzPXRoaXMuY2hhcnQuY3R4O3RoaXMuY2xlYXIoKSx0aGlzLnNjYWxlLmRyYXcoKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXtlLmVhY2godC5wb2ludHMsZnVuY3Rpb24odCxlKXt0Lmhhc1ZhbHVlKCkmJnQudHJhbnNpdGlvbih0aGlzLnNjYWxlLmdldFBvaW50UG9zaXRpb24oZSx0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0LnZhbHVlKSksaSl9LHRoaXMpLHMubGluZVdpZHRoPXRoaXMub3B0aW9ucy5kYXRhc2V0U3Ryb2tlV2lkdGgscy5zdHJva2VTdHlsZT10LnN0cm9rZUNvbG9yLHMuYmVnaW5QYXRoKCksZS5lYWNoKHQucG9pbnRzLGZ1bmN0aW9uKHQsaSl7MD09PWk/cy5tb3ZlVG8odC54LHQueSk6cy5saW5lVG8odC54LHQueSl9LHRoaXMpLHMuY2xvc2VQYXRoKCkscy5zdHJva2UoKSxzLmZpbGxTdHlsZT10LmZpbGxDb2xvcixzLmZpbGwoKSxlLmVhY2godC5wb2ludHMsZnVuY3Rpb24odCl7dC5oYXNWYWx1ZSgpJiZ0LmRyYXcoKX0pfSx0aGlzKX19KX0uY2FsbCh0aGlzKTsiLCJ2YXIgQ2hhcnQgPSByZXF1aXJlKCcuL0NoYXJ0Lm1pbicpO1xuQ2hhcnQudHlwZXMuTGluZS5leHRlbmQoe1xuICAgIC8vIFBhc3NpbmcgaW4gYSBuYW1lIHJlZ2lzdGVycyB0aGlzIGNoYXJ0IGluIHRoZSBDaGFydCBuYW1lc3BhY2UgaW4gdGhlIHNhbWUgd2F5XG4gICAgbmFtZTogXCJTY2F0dGVyXCIsXG4gICAgZHJhdyA6IGZ1bmN0aW9uKGVhc2Upe1xuICAgICAgICAgICAgdmFyIGVhc2luZ0RlY2ltYWwgPSBlYXNlIHx8IDE7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgIHZhciBjdHggPSB0aGlzLmNoYXJ0LmN0eDtcblxuICAgICAgICAgICAgLy8gU29tZSBoZWxwZXIgbWV0aG9kcyBmb3IgZ2V0dGluZyB0aGUgbmV4dC9wcmV2IHBvaW50c1xuICAgICAgICAgICAgdmFyIGhhc1ZhbHVlID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWUgIT09IG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFBvaW50ID0gZnVuY3Rpb24ocG9pbnQsIGNvbGxlY3Rpb24sIGluZGV4KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hhcnQuaGVscGVycy5maW5kTmV4dFdoZXJlKGNvbGxlY3Rpb24sIGhhc1ZhbHVlLCBpbmRleCkgfHwgcG9pbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmlvdXNQb2ludCA9IGZ1bmN0aW9uKHBvaW50LCBjb2xsZWN0aW9uLCBpbmRleCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENoYXJ0LmhlbHBlcnMuZmluZFByZXZpb3VzV2hlcmUoY29sbGVjdGlvbiwgaGFzVmFsdWUsIGluZGV4KSB8fCBwb2ludDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuc2NhbGUuZHJhdyhlYXNpbmdEZWNpbWFsKTtcblxuXG4gICAgICAgICAgICBDaGFydC5oZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0KXtcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnRzV2l0aFZhbHVlcyA9IENoYXJ0LmhlbHBlcnMud2hlcmUoZGF0YXNldC5wb2ludHMsIGhhc1ZhbHVlKTtcblxuICAgICAgICAgICAgICAgIC8vVHJhbnNpdGlvbiBlYWNoIHBvaW50IGZpcnN0IHNvIHRoYXQgdGhlIGxpbmUgYW5kIHBvaW50IGRyYXdpbmcgaXNuJ3Qgb3V0IG9mIHN5bmNcbiAgICAgICAgICAgICAgICAvL1dlIGNhbiB1c2UgdGhpcyBleHRyYSBsb29wIHRvIGNhbGN1bGF0ZSB0aGUgY29udHJvbCBwb2ludHMgb2YgdGhpcyBkYXRhc2V0IGFsc28gaW4gdGhpcyBsb29wXG5cbiAgICAgICAgICAgICAgICBDaGFydC5oZWxwZXJzLmVhY2goZGF0YXNldC5wb2ludHMsIGZ1bmN0aW9uKHBvaW50LCBpbmRleCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludC5oYXNWYWx1ZSgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50LnRyYW5zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZVkocG9pbnQudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZVgoaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBlYXNpbmdEZWNpbWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sdGhpcyk7XG5cblxuICAgICAgICAgICAgICAgIC8vIENvbnRyb2wgcG9pbnRzIG5lZWQgdG8gYmUgY2FsY3VsYXRlZCBpbiBhIHNlcGVyYXRlIGxvb3AsIGJlY2F1c2Ugd2UgbmVlZCB0byBrbm93IHRoZSBjdXJyZW50IHgveSBvZiB0aGUgcG9pbnRcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdvdWxkIGNhdXNlIGlzc3VlcyB3aGVuIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiwgYmVjYXVzZSB0aGUgeSBvZiB0aGUgbmV4dCBwb2ludCB3b3VsZCBiZSAwLCBzbyBiZXppZXJzIHdvdWxkIGJlIHNrZXdlZFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmUpe1xuICAgICAgICAgICAgICAgICAgICBDaGFydC5oZWxwZXJzLmVhY2gocG9pbnRzV2l0aFZhbHVlcywgZnVuY3Rpb24ocG9pbnQsIGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW5zaW9uID0gKGluZGV4ID4gMCAmJiBpbmRleCA8IHBvaW50c1dpdGhWYWx1ZXMubGVuZ3RoIC0gMSkgPyB0aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmVUZW5zaW9uIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50LmNvbnRyb2xQb2ludHMgPSBDaGFydC5oZWxwZXJzLnNwbGluZUN1cnZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQocG9pbnQsIHBvaW50c1dpdGhWYWx1ZXMsIGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UG9pbnQocG9pbnQsIHBvaW50c1dpdGhWYWx1ZXMsIGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBiZXppZXIgZ29pbmcgb3V0c2lkZSBvZiB0aGUgYm91bmRzIG9mIHRoZSBncmFwaFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYXAgcHV0ZXIgYmV6aWVyIGhhbmRsZXMgdG8gdGhlIHVwcGVyL2xvd2VyIHNjYWxlIGJvdW5kc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50LmNvbnRyb2xQb2ludHMub3V0ZXIueSA+IHRoaXMuc2NhbGUuZW5kUG9pbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50LmNvbnRyb2xQb2ludHMub3V0ZXIueSA9IHRoaXMuc2NhbGUuZW5kUG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwb2ludC5jb250cm9sUG9pbnRzLm91dGVyLnkgPCB0aGlzLnNjYWxlLnN0YXJ0UG9pbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50LmNvbnRyb2xQb2ludHMub3V0ZXIueSA9IHRoaXMuc2NhbGUuc3RhcnRQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FwIGlubmVyIGJlemllciBoYW5kbGVzIHRvIHRoZSB1cHBlci9sb3dlciBzY2FsZSBib3VuZHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb2ludC5jb250cm9sUG9pbnRzLmlubmVyLnkgPiB0aGlzLnNjYWxlLmVuZFBvaW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludC5jb250cm9sUG9pbnRzLmlubmVyLnkgPSB0aGlzLnNjYWxlLmVuZFBvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocG9pbnQuY29udHJvbFBvaW50cy5pbm5lci55IDwgdGhpcy5zY2FsZS5zdGFydFBvaW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludC5jb250cm9sUG9pbnRzLmlubmVyLnkgPSB0aGlzLnNjYWxlLnN0YXJ0UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhc2V0RmlsbCAmJiBwb2ludHNXaXRoVmFsdWVzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICAvL1JvdW5kIG9mZiB0aGUgbGluZSBieSBnb2luZyB0byB0aGUgYmFzZSBvZiB0aGUgY2hhcnQsIGJhY2sgdG8gdGhlIHN0YXJ0LCB0aGVuIGZpbGwuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8ocG9pbnRzV2l0aFZhbHVlc1twb2ludHNXaXRoVmFsdWVzLmxlbmd0aCAtIDFdLngsIHRoaXMuc2NhbGUuZW5kUG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBvaW50c1dpdGhWYWx1ZXNbMF0ueCwgdGhpcy5zY2FsZS5lbmRQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBkYXRhc2V0LmZpbGxDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vTm93IGRyYXcgdGhlIHBvaW50cyBvdmVyIHRoZSBsaW5lXG4gICAgICAgICAgICAgICAgLy9BIGxpdHRsZSBpbmVmZmljaWVudCBkb3VibGUgbG9vcGluZywgYnV0IGJldHRlciB0aGFuIHRoZSBsaW5lXG4gICAgICAgICAgICAgICAgLy9sYWdnaW5nIGJlaGluZCB0aGUgcG9pbnQgcG9zaXRpb25zXG4gICAgICAgICAgICAgICAgQ2hhcnQuaGVscGVycy5lYWNoKHBvaW50c1dpdGhWYWx1ZXMsZnVuY3Rpb24ocG9pbnQpe1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LHRoaXMpO1xuICAgICAgICB9XG59KTsiLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0Ly8gTW9kdWxlIHN5c3RlbXMgbWFnaWMgZGFuY2UuXG5cblx0aWYgKHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTIG9yIE5vZGU6IGhhcmQtY29kZWQgZGVwZW5kZW5jeSBvbiBcImtub2Nrb3V0XCJcblx0XHRmYWN0b3J5KCh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydrbyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsna28nXSA6IG51bGwpLCBleHBvcnRzKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lW1wiYW1kXCJdKSB7XG5cdFx0Ly8gQU1EIGFub255bW91cyBtb2R1bGUgd2l0aCBoYXJkLWNvZGVkIGRlcGVuZGVuY3kgb24gXCJrbm9ja291dFwiXG5cdFx0ZGVmaW5lKFtcImtub2Nrb3V0XCIsIFwiZXhwb3J0c1wiXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gPHNjcmlwdD4gdGFnOiB1c2UgdGhlIGdsb2JhbCBga29gIG9iamVjdCwgYXR0YWNoaW5nIGEgYG1hcHBpbmdgIHByb3BlcnR5XG5cdFx0ZmFjdG9yeShrbywga28ubWFwcGluZyA9IHt9KTtcblx0fVxufShmdW5jdGlvbiAoa28sIGV4cG9ydHMpIHtcblx0dmFyIERFQlVHPXRydWU7XG5cdHZhciBtYXBwaW5nUHJvcGVydHkgPSBcIl9fa29fbWFwcGluZ19fXCI7XG5cdHZhciByZWFsS29EZXBlbmRlbnRPYnNlcnZhYmxlID0ga28uZGVwZW5kZW50T2JzZXJ2YWJsZTtcblx0dmFyIG1hcHBpbmdOZXN0aW5nID0gMDtcblx0dmFyIGRlcGVuZGVudE9ic2VydmFibGVzO1xuXHR2YXIgdmlzaXRlZE9iamVjdHM7XG5cdHZhciByZWNvZ25pemVkUm9vdFByb3BlcnRpZXMgPSBbXCJjcmVhdGVcIiwgXCJ1cGRhdGVcIiwgXCJrZXlcIiwgXCJhcnJheUNoYW5nZWRcIl07XG5cdHZhciBlbXB0eVJldHVybiA9IHt9O1xuXG5cdHZhciBfZGVmYXVsdE9wdGlvbnMgPSB7XG5cdFx0aW5jbHVkZTogW1wiX2Rlc3Ryb3lcIl0sXG5cdFx0aWdub3JlOiBbXSxcblx0XHRjb3B5OiBbXSxcblx0XHRvYnNlcnZlOiBbXVxuXHR9O1xuXHR2YXIgZGVmYXVsdE9wdGlvbnMgPSBfZGVmYXVsdE9wdGlvbnM7XG5cblx0Ly8gQXV0aG9yOiBLZW5ueVRNIEAgU3RhY2tPdmVyZmxvd1xuXHRmdW5jdGlvbiB1bmlvbkFycmF5cyAoeCwgeSkge1xuXHRcdHZhciBvYmogPSB7fTtcblx0XHRmb3IgKHZhciBpID0geC5sZW5ndGggLSAxOyBpID49IDA7IC0tIGkpIG9ialt4W2ldXSA9IHhbaV07XG5cdFx0Zm9yICh2YXIgaSA9IHkubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLSBpKSBvYmpbeVtpXV0gPSB5W2ldO1xuXHRcdHZhciByZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGsgaW4gb2JqKSB7XG5cdFx0XHRyZXMucHVzaChvYmpba10pO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gcmVzO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kT2JqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcblx0XHR2YXIgZGVzdFR5cGU7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG5cdFx0XHRpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkgJiYgc291cmNlW2tleV0pIHtcblx0XHRcdFx0ZGVzdFR5cGUgPSBleHBvcnRzLmdldFR5cGUoZGVzdGluYXRpb25ba2V5XSk7XG5cdFx0XHRcdGlmIChrZXkgJiYgZGVzdGluYXRpb25ba2V5XSAmJiBkZXN0VHlwZSAhPT0gXCJhcnJheVwiICYmIGRlc3RUeXBlICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0ZXh0ZW5kT2JqZWN0KGRlc3RpbmF0aW9uW2tleV0sIHNvdXJjZVtrZXldKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgYm90aEFycmF5cyA9IGV4cG9ydHMuZ2V0VHlwZShkZXN0aW5hdGlvbltrZXldKSA9PT0gXCJhcnJheVwiICYmIGV4cG9ydHMuZ2V0VHlwZShzb3VyY2Vba2V5XSkgPT09IFwiYXJyYXlcIjtcblx0XHRcdFx0XHRpZiAoYm90aEFycmF5cykge1xuXHRcdFx0XHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IHVuaW9uQXJyYXlzKGRlc3RpbmF0aW9uW2tleV0sIHNvdXJjZVtrZXldKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IHNvdXJjZVtrZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIG1lcmdlKG9iajEsIG9iajIpIHtcblx0XHR2YXIgbWVyZ2VkID0ge307XG5cdFx0ZXh0ZW5kT2JqZWN0KG1lcmdlZCwgb2JqMSk7XG5cdFx0ZXh0ZW5kT2JqZWN0KG1lcmdlZCwgb2JqMik7XG5cblx0XHRyZXR1cm4gbWVyZ2VkO1xuXHR9XG5cblx0ZXhwb3J0cy5pc01hcHBlZCA9IGZ1bmN0aW9uICh2aWV3TW9kZWwpIHtcblx0XHR2YXIgdW53cmFwcGVkID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2aWV3TW9kZWwpO1xuXHRcdHJldHVybiB1bndyYXBwZWQgJiYgdW53cmFwcGVkW21hcHBpbmdQcm9wZXJ0eV07XG5cdH1cblxuXHRleHBvcnRzLmZyb21KUyA9IGZ1bmN0aW9uIChqc09iamVjdCAvKiwgaW5wdXRPcHRpb25zLCB0YXJnZXQqLyApIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJXaGVuIGNhbGxpbmcga28uZnJvbUpTLCBwYXNzIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gY29udmVydC5cIik7XG5cblx0XHR0cnkge1xuXHRcdFx0aWYgKCFtYXBwaW5nTmVzdGluZysrKSB7XG5cdFx0XHRcdGRlcGVuZGVudE9ic2VydmFibGVzID0gW107XG5cdFx0XHRcdHZpc2l0ZWRPYmplY3RzID0gbmV3IG9iamVjdExvb2t1cCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgb3B0aW9ucztcblx0XHRcdHZhciB0YXJnZXQ7XG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcblx0XHRcdFx0aWYgKGFyZ3VtZW50c1sxXVttYXBwaW5nUHJvcGVydHldKSB7XG5cdFx0XHRcdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbMV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09IDMpIHtcblx0XHRcdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1sxXTtcblx0XHRcdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzJdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGFyZ2V0KSB7XG5cdFx0XHRcdG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCB0YXJnZXRbbWFwcGluZ1Byb3BlcnR5XSk7XG5cdFx0XHR9XG5cdFx0XHRvcHRpb25zID0gZmlsbE9wdGlvbnMob3B0aW9ucyk7XG5cblx0XHRcdHZhciByZXN1bHQgPSB1cGRhdGVWaWV3TW9kZWwodGFyZ2V0LCBqc09iamVjdCwgb3B0aW9ucyk7XG5cdFx0XHRpZiAodGFyZ2V0KSB7XG5cdFx0XHRcdHJlc3VsdCA9IHRhcmdldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW55IGRlcGVuZGVudCBvYnNlcnZhYmxlcyB0aGF0IHdlcmUgcHJveGllZC5cblx0XHRcdC8vIERvIHRoaXMgYWZ0ZXIgdGhlIG1vZGVsJ3Mgb2JzZXJ2YWJsZXMgaGF2ZSBiZWVuIGNyZWF0ZWRcblx0XHRcdGlmICghLS1tYXBwaW5nTmVzdGluZykge1xuXHRcdFx0XHR3aGlsZSAoZGVwZW5kZW50T2JzZXJ2YWJsZXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIERPID0gZGVwZW5kZW50T2JzZXJ2YWJsZXMucG9wKCk7XG5cdFx0XHRcdFx0aWYgKERPKSB7XG5cdFx0XHRcdFx0XHRETygpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBNb3ZlIHRoaXMgbWFnaWMgcHJvcGVydHkgdG8gdGhlIHVuZGVybHlpbmcgZGVwZW5kZW50IG9ic2VydmFibGVcblx0XHRcdFx0XHRcdERPLl9fRE9bXCJ0aHJvdHRsZUV2YWx1YXRpb25cIl0gPSBET1tcInRocm90dGxlRXZhbHVhdGlvblwiXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBhbnkgbmV3IG1hcHBpbmcgb3B0aW9ucyBpbiB0aGUgdmlldyBtb2RlbCwgc28gdGhhdCB1cGRhdGVGcm9tSlMgY2FuIHVzZSB0aGVtIGxhdGVyLlxuXHRcdFx0cmVzdWx0W21hcHBpbmdQcm9wZXJ0eV0gPSBtZXJnZShyZXN1bHRbbWFwcGluZ1Byb3BlcnR5XSwgb3B0aW9ucyk7XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRtYXBwaW5nTmVzdGluZyA9IDA7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0fTtcblxuXHRleHBvcnRzLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb25TdHJpbmcgLyosIG9wdGlvbnMsIHRhcmdldCovICkge1xuXHRcdHZhciBwYXJzZWQgPSBrby51dGlscy5wYXJzZUpzb24oanNvblN0cmluZyk7XG5cdFx0YXJndW1lbnRzWzBdID0gcGFyc2VkO1xuXHRcdHJldHVybiBleHBvcnRzLmZyb21KUy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9O1xuXG5cdGV4cG9ydHMudXBkYXRlRnJvbUpTID0gZnVuY3Rpb24gKHZpZXdNb2RlbCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImtvLm1hcHBpbmcudXBkYXRlRnJvbUpTLCB1c2Uga28ubWFwcGluZy5mcm9tSlMgaW5zdGVhZC4gUGxlYXNlIG5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgcGFyYW1ldGVycyBpcyBkaWZmZXJlbnQhXCIpO1xuXHR9O1xuXG5cdGV4cG9ydHMudXBkYXRlRnJvbUpTT04gPSBmdW5jdGlvbiAodmlld01vZGVsKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwia28ubWFwcGluZy51cGRhdGVGcm9tSlNPTiwgdXNlIGtvLm1hcHBpbmcuZnJvbUpTT04gaW5zdGVhZC4gUGxlYXNlIG5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgcGFyYW1ldGVycyBpcyBkaWZmZXJlbnQhXCIpO1xuXHR9O1xuXG5cdGV4cG9ydHMudG9KUyA9IGZ1bmN0aW9uIChyb290T2JqZWN0LCBvcHRpb25zKSB7XG5cdFx0aWYgKCFkZWZhdWx0T3B0aW9ucykgZXhwb3J0cy5yZXNldERlZmF1bHRPcHRpb25zKCk7XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJXaGVuIGNhbGxpbmcga28ubWFwcGluZy50b0pTLCBwYXNzIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gY29udmVydC5cIik7XG5cdFx0aWYgKGV4cG9ydHMuZ2V0VHlwZShkZWZhdWx0T3B0aW9ucy5pZ25vcmUpICE9PSBcImFycmF5XCIpIHRocm93IG5ldyBFcnJvcihcImtvLm1hcHBpbmcuZGVmYXVsdE9wdGlvbnMoKS5pZ25vcmUgc2hvdWxkIGJlIGFuIGFycmF5LlwiKTtcblx0XHRpZiAoZXhwb3J0cy5nZXRUeXBlKGRlZmF1bHRPcHRpb25zLmluY2x1ZGUpICE9PSBcImFycmF5XCIpIHRocm93IG5ldyBFcnJvcihcImtvLm1hcHBpbmcuZGVmYXVsdE9wdGlvbnMoKS5pbmNsdWRlIHNob3VsZCBiZSBhbiBhcnJheS5cIik7XG5cdFx0aWYgKGV4cG9ydHMuZ2V0VHlwZShkZWZhdWx0T3B0aW9ucy5jb3B5KSAhPT0gXCJhcnJheVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJrby5tYXBwaW5nLmRlZmF1bHRPcHRpb25zKCkuY29weSBzaG91bGQgYmUgYW4gYXJyYXkuXCIpO1xuXG5cdFx0Ly8gTWVyZ2UgaW4gdGhlIG9wdGlvbnMgdXNlZCBpbiBmcm9tSlNcblx0XHRvcHRpb25zID0gZmlsbE9wdGlvbnMob3B0aW9ucywgcm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldKTtcblxuXHRcdC8vIFdlIGp1c3QgdW53cmFwIGV2ZXJ5dGhpbmcgYXQgZXZlcnkgbGV2ZWwgaW4gdGhlIG9iamVjdCBncmFwaFxuXHRcdHJldHVybiBleHBvcnRzLnZpc2l0TW9kZWwocm9vdE9iamVjdCwgZnVuY3Rpb24gKHgpIHtcblx0XHRcdHJldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHgpXG5cdFx0fSwgb3B0aW9ucyk7XG5cdH07XG5cblx0ZXhwb3J0cy50b0pTT04gPSBmdW5jdGlvbiAocm9vdE9iamVjdCwgb3B0aW9ucykge1xuXHRcdHZhciBwbGFpbkphdmFTY3JpcHRPYmplY3QgPSBleHBvcnRzLnRvSlMocm9vdE9iamVjdCwgb3B0aW9ucyk7XG5cdFx0cmV0dXJuIGtvLnV0aWxzLnN0cmluZ2lmeUpzb24ocGxhaW5KYXZhU2NyaXB0T2JqZWN0KTtcblx0fTtcblxuXHRleHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuXHRcdFx0ZGVmYXVsdE9wdGlvbnMgPSBhcmd1bWVudHNbMF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBkZWZhdWx0T3B0aW9ucztcblx0XHR9XG5cdH07XG5cblx0ZXhwb3J0cy5yZXNldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuXHRcdGRlZmF1bHRPcHRpb25zID0ge1xuXHRcdFx0aW5jbHVkZTogX2RlZmF1bHRPcHRpb25zLmluY2x1ZGUuc2xpY2UoMCksXG5cdFx0XHRpZ25vcmU6IF9kZWZhdWx0T3B0aW9ucy5pZ25vcmUuc2xpY2UoMCksXG5cdFx0XHRjb3B5OiBfZGVmYXVsdE9wdGlvbnMuY29weS5zbGljZSgwKVxuXHRcdH07XG5cdH07XG5cblx0ZXhwb3J0cy5nZXRUeXBlID0gZnVuY3Rpb24oeCkge1xuXHRcdGlmICgoeCkgJiYgKHR5cGVvZiAoeCkgPT09IFwib2JqZWN0XCIpKSB7XG5cdFx0XHRpZiAoeC5jb25zdHJ1Y3RvciA9PT0gRGF0ZSkgcmV0dXJuIFwiZGF0ZVwiO1xuXHRcdFx0aWYgKHguY29uc3RydWN0b3IgPT09IEFycmF5KSByZXR1cm4gXCJhcnJheVwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdHlwZW9mIHg7XG5cdH1cblxuXHRmdW5jdGlvbiBmaWxsT3B0aW9ucyhyYXdPcHRpb25zLCBvdGhlck9wdGlvbnMpIHtcblx0XHR2YXIgb3B0aW9ucyA9IG1lcmdlKHt9LCByYXdPcHRpb25zKTtcblxuXHRcdC8vIE1vdmUgcmVjb2duaXplZCByb290LWxldmVsIHByb3BlcnRpZXMgaW50byBhIHJvb3QgbmFtZXNwYWNlXG5cdFx0Zm9yICh2YXIgaSA9IHJlY29nbml6ZWRSb290UHJvcGVydGllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0dmFyIHByb3BlcnR5ID0gcmVjb2duaXplZFJvb3RQcm9wZXJ0aWVzW2ldO1xuXHRcdFx0XG5cdFx0XHQvLyBDYXJyeSBvbiwgdW5sZXNzIHRoaXMgcHJvcGVydHkgaXMgcHJlc2VudFxuXHRcdFx0aWYgKCFvcHRpb25zW3Byb3BlcnR5XSkgY29udGludWU7XG5cdFx0XHRcblx0XHRcdC8vIE1vdmUgdGhlIHByb3BlcnR5IGludG8gdGhlIHJvb3QgbmFtZXNwYWNlXG5cdFx0XHRpZiAoIShvcHRpb25zW1wiXCJdIGluc3RhbmNlb2YgT2JqZWN0KSkgb3B0aW9uc1tcIlwiXSA9IHt9O1xuXHRcdFx0b3B0aW9uc1tcIlwiXVtwcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcblx0XHRcdGRlbGV0ZSBvcHRpb25zW3Byb3BlcnR5XTtcblx0XHR9XG5cblx0XHRpZiAob3RoZXJPcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zLmlnbm9yZSA9IG1lcmdlQXJyYXlzKG90aGVyT3B0aW9ucy5pZ25vcmUsIG9wdGlvbnMuaWdub3JlKTtcblx0XHRcdG9wdGlvbnMuaW5jbHVkZSA9IG1lcmdlQXJyYXlzKG90aGVyT3B0aW9ucy5pbmNsdWRlLCBvcHRpb25zLmluY2x1ZGUpO1xuXHRcdFx0b3B0aW9ucy5jb3B5ID0gbWVyZ2VBcnJheXMob3RoZXJPcHRpb25zLmNvcHksIG9wdGlvbnMuY29weSk7XG5cdFx0XHRvcHRpb25zLm9ic2VydmUgPSBtZXJnZUFycmF5cyhvdGhlck9wdGlvbnMub2JzZXJ2ZSwgb3B0aW9ucy5vYnNlcnZlKTtcblx0XHR9XG5cdFx0b3B0aW9ucy5pZ25vcmUgPSBtZXJnZUFycmF5cyhvcHRpb25zLmlnbm9yZSwgZGVmYXVsdE9wdGlvbnMuaWdub3JlKTtcblx0XHRvcHRpb25zLmluY2x1ZGUgPSBtZXJnZUFycmF5cyhvcHRpb25zLmluY2x1ZGUsIGRlZmF1bHRPcHRpb25zLmluY2x1ZGUpO1xuXHRcdG9wdGlvbnMuY29weSA9IG1lcmdlQXJyYXlzKG9wdGlvbnMuY29weSwgZGVmYXVsdE9wdGlvbnMuY29weSk7XG5cdFx0b3B0aW9ucy5vYnNlcnZlID0gbWVyZ2VBcnJheXMob3B0aW9ucy5vYnNlcnZlLCBkZWZhdWx0T3B0aW9ucy5vYnNlcnZlKTtcblxuXHRcdG9wdGlvbnMubWFwcGVkUHJvcGVydGllcyA9IG9wdGlvbnMubWFwcGVkUHJvcGVydGllcyB8fCB7fTtcblx0XHRvcHRpb25zLmNvcGllZFByb3BlcnRpZXMgPSBvcHRpb25zLmNvcGllZFByb3BlcnRpZXMgfHwge307XG5cdFx0cmV0dXJuIG9wdGlvbnM7XG5cdH1cblxuXHRmdW5jdGlvbiBtZXJnZUFycmF5cyhhLCBiKSB7XG5cdFx0aWYgKGV4cG9ydHMuZ2V0VHlwZShhKSAhPT0gXCJhcnJheVwiKSB7XG5cdFx0XHRpZiAoZXhwb3J0cy5nZXRUeXBlKGEpID09PSBcInVuZGVmaW5lZFwiKSBhID0gW107XG5cdFx0XHRlbHNlIGEgPSBbYV07XG5cdFx0fVxuXHRcdGlmIChleHBvcnRzLmdldFR5cGUoYikgIT09IFwiYXJyYXlcIikge1xuXHRcdFx0aWYgKGV4cG9ydHMuZ2V0VHlwZShiKSA9PT0gXCJ1bmRlZmluZWRcIikgYiA9IFtdO1xuXHRcdFx0ZWxzZSBiID0gW2JdO1xuXHRcdH1cblxuXHRcdHJldHVybiBrby51dGlscy5hcnJheUdldERpc3RpbmN0VmFsdWVzKGEuY29uY2F0KGIpKTtcblx0fVxuXG5cdC8vIFdoZW4gdXNpbmcgYSAnY3JlYXRlJyBjYWxsYmFjaywgd2UgcHJveHkgdGhlIGRlcGVuZGVudCBvYnNlcnZhYmxlIHNvIHRoYXQgaXQgZG9lc24ndCBpbW1lZGlhdGVseSBldmFsdWF0ZSBvbiBjcmVhdGlvbi5cblx0Ly8gVGhlIHJlYXNvbiBpcyB0aGF0IHRoZSBkZXBlbmRlbnQgb2JzZXJ2YWJsZXMgaW4gdGhlIHVzZXItc3BlY2lmaWVkIGNhbGxiYWNrIG1heSBjb250YWluIHJlZmVyZW5jZXMgdG8gcHJvcGVydGllcyB0aGF0IGhhdmUgbm90IGJlZW4gbWFwcGVkIHlldC5cblx0ZnVuY3Rpb24gd2l0aFByb3h5RGVwZW5kZW50T2JzZXJ2YWJsZShkZXBlbmRlbnRPYnNlcnZhYmxlcywgY2FsbGJhY2spIHtcblx0XHR2YXIgbG9jYWxETyA9IGtvLmRlcGVuZGVudE9ic2VydmFibGU7XG5cdFx0a28uZGVwZW5kZW50T2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChyZWFkLCBvd25lciwgb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHRcdGlmIChyZWFkICYmIHR5cGVvZiByZWFkID09IFwib2JqZWN0XCIpIHsgLy8gbWlycm9ycyBjb25kaXRpb24gaW4ga25vY2tvdXQgaW1wbGVtZW50YXRpb24gb2YgRE8nc1xuXHRcdFx0XHRvcHRpb25zID0gcmVhZDtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlYWxEZWZlckV2YWx1YXRpb24gPSBvcHRpb25zLmRlZmVyRXZhbHVhdGlvbjtcblxuXHRcdFx0dmFyIGlzUmVtb3ZlZCA9IGZhbHNlO1xuXG5cdFx0XHQvLyBXZSB3cmFwIHRoZSBvcmlnaW5hbCBkZXBlbmRlbnQgb2JzZXJ2YWJsZSBzbyB0aGF0IHdlIGNhbiByZW1vdmUgaXQgZnJvbSB0aGUgJ2RlcGVuZGVudE9ic2VydmFibGVzJyBsaXN0IHdlIG5lZWQgdG8gZXZhbHVhdGUgYWZ0ZXIgbWFwcGluZyBoYXNcblx0XHRcdC8vIGNvbXBsZXRlZCBpZiB0aGUgdXNlciBhbHJlYWR5IGV2YWx1YXRlZCB0aGUgRE8gdGhlbXNlbHZlcyBpbiB0aGUgbWVhbnRpbWUuXG5cdFx0XHR2YXIgd3JhcCA9IGZ1bmN0aW9uIChETykge1xuXHRcdFx0XHQvLyBUZW1wb3JhcmlseSByZXZlcnQga28uZGVwZW5kZW50T2JzZXJ2YWJsZSwgc2luY2UgaXQgaXMgdXNlZCBpbiBrby5pc1dyaXRlYWJsZU9ic2VydmFibGVcblx0XHRcdFx0dmFyIHRtcCA9IGtvLmRlcGVuZGVudE9ic2VydmFibGU7XG5cdFx0XHRcdGtvLmRlcGVuZGVudE9ic2VydmFibGUgPSByZWFsS29EZXBlbmRlbnRPYnNlcnZhYmxlO1xuXHRcdFx0XHR2YXIgaXNXcml0ZWFibGUgPSBrby5pc1dyaXRlYWJsZU9ic2VydmFibGUoRE8pO1xuXHRcdFx0XHRrby5kZXBlbmRlbnRPYnNlcnZhYmxlID0gdG1wO1xuXG5cdFx0XHRcdHZhciB3cmFwcGVkID0gcmVhbEtvRGVwZW5kZW50T2JzZXJ2YWJsZSh7XG5cdFx0XHRcdFx0cmVhZDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0aWYgKCFpc1JlbW92ZWQpIHtcblx0XHRcdFx0XHRcdFx0a28udXRpbHMuYXJyYXlSZW1vdmVJdGVtKGRlcGVuZGVudE9ic2VydmFibGVzLCBETyk7XG5cdFx0XHRcdFx0XHRcdGlzUmVtb3ZlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gRE8uYXBwbHkoRE8sIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR3cml0ZTogaXNXcml0ZWFibGUgJiYgZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIERPKHZhbCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRkZWZlckV2YWx1YXRpb246IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlmIChERUJVRykgd3JhcHBlZC5fd3JhcHBlciA9IHRydWU7XG5cdFx0XHRcdHdyYXBwZWQuX19ETyA9IERPO1xuXHRcdFx0XHRyZXR1cm4gd3JhcHBlZDtcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdG9wdGlvbnMuZGVmZXJFdmFsdWF0aW9uID0gdHJ1ZTsgLy8gd2lsbCBlaXRoZXIgc2V0IGZvciBqdXN0IG9wdGlvbnMsIG9yIGJvdGggcmVhZC9vcHRpb25zLlxuXHRcdFx0dmFyIHJlYWxEZXBlbmRlbnRPYnNlcnZhYmxlID0gbmV3IHJlYWxLb0RlcGVuZGVudE9ic2VydmFibGUocmVhZCwgb3duZXIsIG9wdGlvbnMpO1xuXG5cdFx0XHRpZiAoIXJlYWxEZWZlckV2YWx1YXRpb24pIHtcblx0XHRcdFx0cmVhbERlcGVuZGVudE9ic2VydmFibGUgPSB3cmFwKHJlYWxEZXBlbmRlbnRPYnNlcnZhYmxlKTtcblx0XHRcdFx0ZGVwZW5kZW50T2JzZXJ2YWJsZXMucHVzaChyZWFsRGVwZW5kZW50T2JzZXJ2YWJsZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZWFsRGVwZW5kZW50T2JzZXJ2YWJsZTtcblx0XHR9XG5cdFx0a28uZGVwZW5kZW50T2JzZXJ2YWJsZS5mbiA9IHJlYWxLb0RlcGVuZGVudE9ic2VydmFibGUuZm47XG5cdFx0a28uY29tcHV0ZWQgPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlO1xuXHRcdHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuXHRcdGtvLmRlcGVuZGVudE9ic2VydmFibGUgPSBsb2NhbERPO1xuXHRcdGtvLmNvbXB1dGVkID0ga28uZGVwZW5kZW50T2JzZXJ2YWJsZTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmlld01vZGVsKG1hcHBlZFJvb3RPYmplY3QsIHJvb3RPYmplY3QsIG9wdGlvbnMsIHBhcmVudE5hbWUsIHBhcmVudCwgcGFyZW50UHJvcGVydHlOYW1lLCBtYXBwZWRQYXJlbnQpIHtcblx0XHR2YXIgaXNBcnJheSA9IGV4cG9ydHMuZ2V0VHlwZShrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHJvb3RPYmplY3QpKSA9PT0gXCJhcnJheVwiO1xuXG5cdFx0cGFyZW50UHJvcGVydHlOYW1lID0gcGFyZW50UHJvcGVydHlOYW1lIHx8IFwiXCI7XG5cblx0XHQvLyBJZiB0aGlzIG9iamVjdCB3YXMgYWxyZWFkeSBtYXBwZWQgcHJldmlvdXNseSwgdGFrZSB0aGUgb3B0aW9ucyBmcm9tIHRoZXJlIGFuZCBtZXJnZSB0aGVtIHdpdGggb3VyIGV4aXN0aW5nIG9uZXMuXG5cdFx0aWYgKGV4cG9ydHMuaXNNYXBwZWQobWFwcGVkUm9vdE9iamVjdCkpIHtcblx0XHRcdHZhciBwcmV2aW91c01hcHBpbmcgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1hcHBlZFJvb3RPYmplY3QpW21hcHBpbmdQcm9wZXJ0eV07XG5cdFx0XHRvcHRpb25zID0gbWVyZ2UocHJldmlvdXNNYXBwaW5nLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHR2YXIgY2FsbGJhY2tQYXJhbXMgPSB7XG5cdFx0XHRkYXRhOiByb290T2JqZWN0LFxuXHRcdFx0cGFyZW50OiBtYXBwZWRQYXJlbnQgfHwgcGFyZW50XG5cdFx0fTtcblxuXHRcdHZhciBoYXNDcmVhdGVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBvcHRpb25zW3BhcmVudE5hbWVdICYmIG9wdGlvbnNbcGFyZW50TmFtZV0uY3JlYXRlIGluc3RhbmNlb2YgRnVuY3Rpb247XG5cdFx0fTtcblxuXHRcdHZhciBjcmVhdGVDYWxsYmFjayA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRyZXR1cm4gd2l0aFByb3h5RGVwZW5kZW50T2JzZXJ2YWJsZShkZXBlbmRlbnRPYnNlcnZhYmxlcywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocGFyZW50KSBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdGlvbnNbcGFyZW50TmFtZV0uY3JlYXRlKHtcblx0XHRcdFx0XHRcdGRhdGE6IGRhdGEgfHwgY2FsbGJhY2tQYXJhbXMuZGF0YSxcblx0XHRcdFx0XHRcdHBhcmVudDogY2FsbGJhY2tQYXJhbXMucGFyZW50LFxuXHRcdFx0XHRcdFx0c2tpcDogZW1wdHlSZXR1cm5cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gb3B0aW9uc1twYXJlbnROYW1lXS5jcmVhdGUoe1xuXHRcdFx0XHRcdFx0ZGF0YTogZGF0YSB8fCBjYWxsYmFja1BhcmFtcy5kYXRhLFxuXHRcdFx0XHRcdFx0cGFyZW50OiBjYWxsYmFja1BhcmFtcy5wYXJlbnRcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVx0XHRcdFx0XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0dmFyIGhhc1VwZGF0ZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnNbcGFyZW50TmFtZV0gJiYgb3B0aW9uc1twYXJlbnROYW1lXS51cGRhdGUgaW5zdGFuY2VvZiBGdW5jdGlvbjtcblx0XHR9O1xuXG5cdFx0dmFyIHVwZGF0ZUNhbGxiYWNrID0gZnVuY3Rpb24gKG9iaiwgZGF0YSkge1xuXHRcdFx0dmFyIHBhcmFtcyA9IHtcblx0XHRcdFx0ZGF0YTogZGF0YSB8fCBjYWxsYmFja1BhcmFtcy5kYXRhLFxuXHRcdFx0XHRwYXJlbnQ6IGNhbGxiYWNrUGFyYW1zLnBhcmVudCxcblx0XHRcdFx0dGFyZ2V0OiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9iailcblx0XHRcdH07XG5cblx0XHRcdGlmIChrby5pc1dyaXRlYWJsZU9ic2VydmFibGUob2JqKSkge1xuXHRcdFx0XHRwYXJhbXMub2JzZXJ2YWJsZSA9IG9iajtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9wdGlvbnNbcGFyZW50TmFtZV0udXBkYXRlKHBhcmFtcyk7XG5cdFx0fVxuXG5cdFx0dmFyIGFscmVhZHlNYXBwZWQgPSB2aXNpdGVkT2JqZWN0cy5nZXQocm9vdE9iamVjdCk7XG5cdFx0aWYgKGFscmVhZHlNYXBwZWQpIHtcblx0XHRcdHJldHVybiBhbHJlYWR5TWFwcGVkO1xuXHRcdH1cblxuXHRcdHBhcmVudE5hbWUgPSBwYXJlbnROYW1lIHx8IFwiXCI7XG5cblx0XHRpZiAoIWlzQXJyYXkpIHtcblx0XHRcdC8vIEZvciBhdG9taWMgdHlwZXMsIGRvIGEgZGlyZWN0IHVwZGF0ZSBvbiB0aGUgb2JzZXJ2YWJsZVxuXHRcdFx0aWYgKCFjYW5IYXZlUHJvcGVydGllcyhyb290T2JqZWN0KSkge1xuXHRcdFx0XHRzd2l0Y2ggKGV4cG9ydHMuZ2V0VHlwZShyb290T2JqZWN0KSkge1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0aWYgKGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShyb290T2JqZWN0KSkge1xuXHRcdFx0XHRcdFx0XHRyb290T2JqZWN0KHVwZGF0ZUNhbGxiYWNrKHJvb3RPYmplY3QpKTtcblx0XHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IHJvb3RPYmplY3Q7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0ID0gdXBkYXRlQ2FsbGJhY2socm9vdE9iamVjdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QgPSByb290T2JqZWN0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRpZiAoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG1hcHBlZFJvb3RPYmplY3QpKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWVUb1dyaXRlID0gdXBkYXRlQ2FsbGJhY2sobWFwcGVkUm9vdE9iamVjdCk7XG5cdFx0XHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QodmFsdWVUb1dyaXRlKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlVG9Xcml0ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZVRvV3JpdGUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHJvb3RPYmplY3QpO1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0KHZhbHVlVG9Xcml0ZSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVRvV3JpdGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhciBoYXNDcmVhdGVPclVwZGF0ZUNhbGxiYWNrID0gaGFzQ3JlYXRlQ2FsbGJhY2soKSB8fCBoYXNVcGRhdGVDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAoaGFzQ3JlYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0ID0gY3JlYXRlQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QgPSBrby5vYnNlcnZhYmxlKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocm9vdE9iamVjdCkpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0KHVwZGF0ZUNhbGxiYWNrKG1hcHBlZFJvb3RPYmplY3QpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYgKGhhc0NyZWF0ZU9yVXBkYXRlQ2FsbGJhY2spIHJldHVybiBtYXBwZWRSb290T2JqZWN0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShtYXBwZWRSb290T2JqZWN0KTtcblx0XHRcdFx0aWYgKCFtYXBwZWRSb290T2JqZWN0KSB7XG5cdFx0XHRcdFx0aWYgKGhhc0NyZWF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdHZhciByZXN1bHQgPSBjcmVhdGVDYWxsYmFjaygpO1xuXG5cdFx0XHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQgPSB1cGRhdGVDYWxsYmFjayhyZXN1bHQpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlQ2FsbGJhY2socmVzdWx0KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChoYXNVcGRhdGVDYWxsYmFjaygpKSB7XG5cdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IHVwZGF0ZUNhbGxiYWNrKG1hcHBlZFJvb3RPYmplY3QpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmlzaXRlZE9iamVjdHMuc2F2ZShyb290T2JqZWN0LCBtYXBwZWRSb290T2JqZWN0KTtcblx0XHRcdFx0aWYgKGhhc1VwZGF0ZUNhbGxiYWNrKCkpIHJldHVybiBtYXBwZWRSb290T2JqZWN0O1xuXG5cdFx0XHRcdC8vIEZvciBub24tYXRvbWljIHR5cGVzLCB2aXNpdCBhbGwgcHJvcGVydGllcyBhbmQgdXBkYXRlIHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsIGZ1bmN0aW9uIChpbmRleGVyKSB7XG5cdFx0XHRcdFx0dmFyIGZ1bGxQcm9wZXJ0eU5hbWUgPSBwYXJlbnRQcm9wZXJ0eU5hbWUubGVuZ3RoID8gcGFyZW50UHJvcGVydHlOYW1lICsgXCIuXCIgKyBpbmRleGVyIDogaW5kZXhlcjtcblxuXHRcdFx0XHRcdGlmIChrby51dGlscy5hcnJheUluZGV4T2Yob3B0aW9ucy5pZ25vcmUsIGZ1bGxQcm9wZXJ0eU5hbWUpICE9IC0xKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGtvLnV0aWxzLmFycmF5SW5kZXhPZihvcHRpb25zLmNvcHksIGZ1bGxQcm9wZXJ0eU5hbWUpICE9IC0xKSB7XG5cdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdID0gcm9vdE9iamVjdFtpbmRleGVyXTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZih0eXBlb2Ygcm9vdE9iamVjdFtpbmRleGVyXSAhPSBcIm9iamVjdFwiICYmIHR5cGVvZiByb290T2JqZWN0W2luZGV4ZXJdICE9IFwiYXJyYXlcIiAmJiBvcHRpb25zLm9ic2VydmUubGVuZ3RoID4gMCAmJiBrby51dGlscy5hcnJheUluZGV4T2Yob3B0aW9ucy5vYnNlcnZlLCBmdWxsUHJvcGVydHlOYW1lKSA9PSAtMSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdID0gcm9vdE9iamVjdFtpbmRleGVyXTtcblx0XHRcdFx0XHRcdG9wdGlvbnMuY29waWVkUHJvcGVydGllc1tmdWxsUHJvcGVydHlOYW1lXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEluIGNhc2Ugd2UgYXJlIGFkZGluZyBhbiBhbHJlYWR5IG1hcHBlZCBwcm9wZXJ0eSwgZmlsbCBpdCB3aXRoIHRoZSBwcmV2aW91c2x5IG1hcHBlZCBwcm9wZXJ0eSB2YWx1ZSB0byBwcmV2ZW50IHJlY3Vyc2lvbi5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGlzIGEgcHJvcGVydHkgdGhhdCB3YXMgZ2VuZXJhdGVkIGJ5IGZyb21KUywgd2Ugc2hvdWxkIHVzZSB0aGUgb3B0aW9ucyBzcGVjaWZpZWQgdGhlcmVcblx0XHRcdFx0XHR2YXIgcHJldk1hcHBlZFByb3BlcnR5ID0gdmlzaXRlZE9iamVjdHMuZ2V0KHJvb3RPYmplY3RbaW5kZXhlcl0pO1xuXHRcdFx0XHRcdHZhciByZXR2YWwgPSB1cGRhdGVWaWV3TW9kZWwobWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSwgcm9vdE9iamVjdFtpbmRleGVyXSwgb3B0aW9ucywgaW5kZXhlciwgbWFwcGVkUm9vdE9iamVjdCwgZnVsbFByb3BlcnR5TmFtZSwgbWFwcGVkUm9vdE9iamVjdCk7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gcHJldk1hcHBlZFByb3BlcnR5IHx8IHJldHZhbDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihvcHRpb25zLm9ic2VydmUubGVuZ3RoID4gMCAmJiBrby51dGlscy5hcnJheUluZGV4T2Yob3B0aW9ucy5vYnNlcnZlLCBmdWxsUHJvcGVydHlOYW1lKSA9PSAtMSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdID0gdmFsdWUoKTtcblx0XHRcdFx0XHRcdG9wdGlvbnMuY29waWVkUHJvcGVydGllc1tmdWxsUHJvcGVydHlOYW1lXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmIChrby5pc1dyaXRlYWJsZU9ic2VydmFibGUobWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSkpIHtcblx0XHRcdFx0XHRcdHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRpZiAobWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSgpICE9PSB2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdKHZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFsdWUgPSBtYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdID09PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWUpO1xuXHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG9wdGlvbnMubWFwcGVkUHJvcGVydGllc1tmdWxsUHJvcGVydHlOYW1lXSA9IHRydWU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7IC8vbWFwcGVkUm9vdE9iamVjdCBpcyBhbiBhcnJheVxuXHRcdFx0dmFyIGNoYW5nZXMgPSBbXTtcblxuXHRcdFx0dmFyIGhhc0tleUNhbGxiYWNrID0gZmFsc2U7XG5cdFx0XHR2YXIga2V5Q2FsbGJhY2sgPSBmdW5jdGlvbiAoeCkge1xuXHRcdFx0XHRyZXR1cm4geDtcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zW3BhcmVudE5hbWVdICYmIG9wdGlvbnNbcGFyZW50TmFtZV0ua2V5KSB7XG5cdFx0XHRcdGtleUNhbGxiYWNrID0gb3B0aW9uc1twYXJlbnROYW1lXS5rZXk7XG5cdFx0XHRcdGhhc0tleUNhbGxiYWNrID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFrby5pc09ic2VydmFibGUobWFwcGVkUm9vdE9iamVjdCkpIHtcblx0XHRcdFx0Ly8gV2hlbiBjcmVhdGluZyB0aGUgbmV3IG9ic2VydmFibGUgYXJyYXksIGFsc28gYWRkIGEgYnVuY2ggb2YgdXRpbGl0eSBmdW5jdGlvbnMgdGhhdCB0YWtlIHRoZSAna2V5JyBvZiB0aGUgYXJyYXkgaXRlbXMgaW50byBhY2NvdW50LlxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0ID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcblxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0Lm1hcHBlZFJlbW92ZSA9IGZ1bmN0aW9uICh2YWx1ZU9yUHJlZGljYXRlKSB7XG5cdFx0XHRcdFx0dmFyIHByZWRpY2F0ZSA9IHR5cGVvZiB2YWx1ZU9yUHJlZGljYXRlID09IFwiZnVuY3Rpb25cIiA/IHZhbHVlT3JQcmVkaWNhdGUgOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBrZXlDYWxsYmFjayh2YWx1ZU9yUHJlZGljYXRlKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cmV0dXJuIG1hcHBlZFJvb3RPYmplY3QucmVtb3ZlKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJlZGljYXRlKGtleUNhbGxiYWNrKGl0ZW0pKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QubWFwcGVkUmVtb3ZlQWxsID0gZnVuY3Rpb24gKGFycmF5T2ZWYWx1ZXMpIHtcblx0XHRcdFx0XHR2YXIgYXJyYXlPZktleXMgPSBmaWx0ZXJBcnJheUJ5S2V5KGFycmF5T2ZWYWx1ZXMsIGtleUNhbGxiYWNrKTtcblx0XHRcdFx0XHRyZXR1cm4gbWFwcGVkUm9vdE9iamVjdC5yZW1vdmUoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBrby51dGlscy5hcnJheUluZGV4T2YoYXJyYXlPZktleXMsIGtleUNhbGxiYWNrKGl0ZW0pKSAhPSAtMTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QubWFwcGVkRGVzdHJveSA9IGZ1bmN0aW9uICh2YWx1ZU9yUHJlZGljYXRlKSB7XG5cdFx0XHRcdFx0dmFyIHByZWRpY2F0ZSA9IHR5cGVvZiB2YWx1ZU9yUHJlZGljYXRlID09IFwiZnVuY3Rpb25cIiA/IHZhbHVlT3JQcmVkaWNhdGUgOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBrZXlDYWxsYmFjayh2YWx1ZU9yUHJlZGljYXRlKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cmV0dXJuIG1hcHBlZFJvb3RPYmplY3QuZGVzdHJveShmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByZWRpY2F0ZShrZXlDYWxsYmFjayhpdGVtKSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0Lm1hcHBlZERlc3Ryb3lBbGwgPSBmdW5jdGlvbiAoYXJyYXlPZlZhbHVlcykge1xuXHRcdFx0XHRcdHZhciBhcnJheU9mS2V5cyA9IGZpbHRlckFycmF5QnlLZXkoYXJyYXlPZlZhbHVlcywga2V5Q2FsbGJhY2spO1xuXHRcdFx0XHRcdHJldHVybiBtYXBwZWRSb290T2JqZWN0LmRlc3Ryb3koZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBrby51dGlscy5hcnJheUluZGV4T2YoYXJyYXlPZktleXMsIGtleUNhbGxiYWNrKGl0ZW0pKSAhPSAtMTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QubWFwcGVkSW5kZXhPZiA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0dmFyIGtleXMgPSBmaWx0ZXJBcnJheUJ5S2V5KG1hcHBlZFJvb3RPYmplY3QoKSwga2V5Q2FsbGJhY2spO1xuXHRcdFx0XHRcdHZhciBrZXkgPSBrZXlDYWxsYmFjayhpdGVtKTtcblx0XHRcdFx0XHRyZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGtleXMsIGtleSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0Lm1hcHBlZEdldCA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hcHBlZFJvb3RPYmplY3QoKVttYXBwZWRSb290T2JqZWN0Lm1hcHBlZEluZGV4T2YoaXRlbSldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdC5tYXBwZWRDcmVhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRpZiAobWFwcGVkUm9vdE9iamVjdC5tYXBwZWRJbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlRoZXJlIGFscmVhZHkgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGtleSB0aGF0IHlvdSBzcGVjaWZpZWQuXCIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBpdGVtID0gaGFzQ3JlYXRlQ2FsbGJhY2soKSA/IGNyZWF0ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmIChoYXNVcGRhdGVDYWxsYmFjaygpKSB7XG5cdFx0XHRcdFx0XHR2YXIgbmV3VmFsdWUgPSB1cGRhdGVDYWxsYmFjayhpdGVtLCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHRpZiAoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKGl0ZW0pKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0obmV3VmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0aXRlbSA9IG5ld1ZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0LnB1c2goaXRlbSk7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIGN1cnJlbnRBcnJheUtleXMgPSBmaWx0ZXJBcnJheUJ5S2V5KGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobWFwcGVkUm9vdE9iamVjdCksIGtleUNhbGxiYWNrKS5zb3J0KCk7XG5cdFx0XHR2YXIgbmV3QXJyYXlLZXlzID0gZmlsdGVyQXJyYXlCeUtleShyb290T2JqZWN0LCBrZXlDYWxsYmFjayk7XG5cdFx0XHRpZiAoaGFzS2V5Q2FsbGJhY2spIG5ld0FycmF5S2V5cy5zb3J0KCk7XG5cdFx0XHR2YXIgZWRpdFNjcmlwdCA9IGtvLnV0aWxzLmNvbXBhcmVBcnJheXMoY3VycmVudEFycmF5S2V5cywgbmV3QXJyYXlLZXlzKTtcblxuXHRcdFx0dmFyIGlnbm9yZUluZGV4T2YgPSB7fTtcblx0XHRcdFxuXHRcdFx0dmFyIGksIGo7XG5cblx0XHRcdHZhciB1bndyYXBwZWRSb290T2JqZWN0ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KTtcblx0XHRcdHZhciBpdGVtc0J5S2V5ID0ge307XG5cdFx0XHR2YXIgb3B0aW1pemVkS2V5cyA9IHRydWU7XG5cdFx0XHRmb3IgKGkgPSAwLCBqID0gdW53cmFwcGVkUm9vdE9iamVjdC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcblx0XHRcdFx0dmFyIGtleSA9IGtleUNhbGxiYWNrKHVud3JhcHBlZFJvb3RPYmplY3RbaV0pO1xuXHRcdFx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5IGluc3RhbmNlb2YgT2JqZWN0KSB7XG5cdFx0XHRcdFx0b3B0aW1pemVkS2V5cyA9IGZhbHNlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zQnlLZXlba2V5XSA9IHVud3JhcHBlZFJvb3RPYmplY3RbaV07XG5cdFx0XHR9XG5cblx0XHRcdHZhciBuZXdDb250ZW50cyA9IFtdO1xuXHRcdFx0dmFyIHBhc3NlZE92ZXIgPSAwO1xuXHRcdFx0Zm9yIChpID0gMCwgaiA9IGVkaXRTY3JpcHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG5cdFx0XHRcdHZhciBrZXkgPSBlZGl0U2NyaXB0W2ldO1xuXHRcdFx0XHR2YXIgbWFwcGVkSXRlbTtcblx0XHRcdFx0dmFyIGZ1bGxQcm9wZXJ0eU5hbWUgPSBwYXJlbnRQcm9wZXJ0eU5hbWUgKyBcIltcIiArIGkgKyBcIl1cIjtcblx0XHRcdFx0c3dpdGNoIChrZXkuc3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJhZGRlZFwiOlxuXHRcdFx0XHRcdHZhciBpdGVtID0gb3B0aW1pemVkS2V5cyA/IGl0ZW1zQnlLZXlba2V5LnZhbHVlXSA6IGdldEl0ZW1CeUtleShrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHJvb3RPYmplY3QpLCBrZXkudmFsdWUsIGtleUNhbGxiYWNrKTtcblx0XHRcdFx0XHRtYXBwZWRJdGVtID0gdXBkYXRlVmlld01vZGVsKHVuZGVmaW5lZCwgaXRlbSwgb3B0aW9ucywgcGFyZW50TmFtZSwgbWFwcGVkUm9vdE9iamVjdCwgZnVsbFByb3BlcnR5TmFtZSwgcGFyZW50KTtcblx0XHRcdFx0XHRpZighaGFzQ3JlYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0bWFwcGVkSXRlbSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobWFwcGVkSXRlbSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGluZGV4ID0gaWdub3JhYmxlSW5kZXhPZihrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHJvb3RPYmplY3QpLCBpdGVtLCBpZ25vcmVJbmRleE9mKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAobWFwcGVkSXRlbSA9PT0gZW1wdHlSZXR1cm4pIHtcblx0XHRcdFx0XHRcdHBhc3NlZE92ZXIrKztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bmV3Q29udGVudHNbaW5kZXggLSBwYXNzZWRPdmVyXSA9IG1hcHBlZEl0ZW07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWdub3JlSW5kZXhPZltpbmRleF0gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmV0YWluZWRcIjpcblx0XHRcdFx0XHR2YXIgaXRlbSA9IG9wdGltaXplZEtleXMgPyBpdGVtc0J5S2V5W2tleS52YWx1ZV0gOiBnZXRJdGVtQnlLZXkoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KSwga2V5LnZhbHVlLCBrZXlDYWxsYmFjayk7XG5cdFx0XHRcdFx0bWFwcGVkSXRlbSA9IGdldEl0ZW1CeUtleShtYXBwZWRSb290T2JqZWN0LCBrZXkudmFsdWUsIGtleUNhbGxiYWNrKTtcblx0XHRcdFx0XHR1cGRhdGVWaWV3TW9kZWwobWFwcGVkSXRlbSwgaXRlbSwgb3B0aW9ucywgcGFyZW50TmFtZSwgbWFwcGVkUm9vdE9iamVjdCwgZnVsbFByb3BlcnR5TmFtZSwgcGFyZW50KTtcblxuXHRcdFx0XHRcdHZhciBpbmRleCA9IGlnbm9yYWJsZUluZGV4T2Yoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KSwgaXRlbSwgaWdub3JlSW5kZXhPZik7XG5cdFx0XHRcdFx0bmV3Q29udGVudHNbaW5kZXhdID0gbWFwcGVkSXRlbTtcblx0XHRcdFx0XHRpZ25vcmVJbmRleE9mW2luZGV4XSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWxldGVkXCI6XG5cdFx0XHRcdFx0bWFwcGVkSXRlbSA9IGdldEl0ZW1CeUtleShtYXBwZWRSb290T2JqZWN0LCBrZXkudmFsdWUsIGtleUNhbGxiYWNrKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNoYW5nZXMucHVzaCh7XG5cdFx0XHRcdFx0ZXZlbnQ6IGtleS5zdGF0dXMsXG5cdFx0XHRcdFx0aXRlbTogbWFwcGVkSXRlbVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0bWFwcGVkUm9vdE9iamVjdChuZXdDb250ZW50cyk7XG5cblx0XHRcdGlmIChvcHRpb25zW3BhcmVudE5hbWVdICYmIG9wdGlvbnNbcGFyZW50TmFtZV0uYXJyYXlDaGFuZ2VkKSB7XG5cdFx0XHRcdGtvLnV0aWxzLmFycmF5Rm9yRWFjaChjaGFuZ2VzLCBmdW5jdGlvbiAoY2hhbmdlKSB7XG5cdFx0XHRcdFx0b3B0aW9uc1twYXJlbnROYW1lXS5hcnJheUNoYW5nZWQoY2hhbmdlLmV2ZW50LCBjaGFuZ2UuaXRlbSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXBwZWRSb290T2JqZWN0O1xuXHR9XG5cblx0ZnVuY3Rpb24gaWdub3JhYmxlSW5kZXhPZihhcnJheSwgaXRlbSwgaWdub3JlSW5kaWNlcykge1xuXHRcdGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG5cdFx0XHRpZiAoaWdub3JlSW5kaWNlc1tpXSA9PT0gdHJ1ZSkgY29udGludWU7XG5cdFx0XHRpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIG1hcEtleShpdGVtLCBjYWxsYmFjaykge1xuXHRcdHZhciBtYXBwZWRJdGVtO1xuXHRcdGlmIChjYWxsYmFjaykgbWFwcGVkSXRlbSA9IGNhbGxiYWNrKGl0ZW0pO1xuXHRcdGlmIChleHBvcnRzLmdldFR5cGUobWFwcGVkSXRlbSkgPT09IFwidW5kZWZpbmVkXCIpIG1hcHBlZEl0ZW0gPSBpdGVtO1xuXG5cdFx0cmV0dXJuIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobWFwcGVkSXRlbSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJdGVtQnlLZXkoYXJyYXksIGtleSwgY2FsbGJhY2spIHtcblx0XHRhcnJheSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYXJyYXkpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGFycmF5W2ldO1xuXHRcdFx0aWYgKG1hcEtleShpdGVtLCBjYWxsYmFjaykgPT09IGtleSkgcmV0dXJuIGl0ZW07XG5cdFx0fVxuXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIGtvLnVwZGF0ZSosIHRoZSBrZXkgJ1wiICsga2V5ICsgXCInIHdhcyBub3QgZm91bmQhXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZmlsdGVyQXJyYXlCeUtleShhcnJheSwgY2FsbGJhY2spIHtcblx0XHRyZXR1cm4ga28udXRpbHMuYXJyYXlNYXAoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhcnJheSksIGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRpZiAoY2FsbGJhY2spIHtcblx0XHRcdFx0cmV0dXJuIG1hcEtleShpdGVtLCBjYWxsYmFjayk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gaXRlbTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsIHZpc2l0b3JDYWxsYmFjaykge1xuXHRcdGlmIChleHBvcnRzLmdldFR5cGUocm9vdE9iamVjdCkgPT09IFwiYXJyYXlcIikge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByb290T2JqZWN0Lmxlbmd0aDsgaSsrKVxuXHRcdFx0dmlzaXRvckNhbGxiYWNrKGkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gcm9vdE9iamVjdClcblx0XHRcdHZpc2l0b3JDYWxsYmFjayhwcm9wZXJ0eU5hbWUpO1xuXHRcdH1cblx0fTtcblxuXHRmdW5jdGlvbiBjYW5IYXZlUHJvcGVydGllcyhvYmplY3QpIHtcblx0XHR2YXIgdHlwZSA9IGV4cG9ydHMuZ2V0VHlwZShvYmplY3QpO1xuXHRcdHJldHVybiAoKHR5cGUgPT09IFwib2JqZWN0XCIpIHx8ICh0eXBlID09PSBcImFycmF5XCIpKSAmJiAob2JqZWN0ICE9PSBudWxsKTtcblx0fVxuXG5cdC8vIEJhc2VkIG9uIHRoZSBwYXJlbnROYW1lLCB0aGlzIGNyZWF0ZXMgYSBmdWxseSBjbGFzc2lmaWVkIG5hbWUgb2YgYSBwcm9wZXJ0eVxuXG5cdGZ1bmN0aW9uIGdldFByb3BlcnR5TmFtZShwYXJlbnROYW1lLCBwYXJlbnQsIGluZGV4ZXIpIHtcblx0XHR2YXIgcHJvcGVydHlOYW1lID0gcGFyZW50TmFtZSB8fCBcIlwiO1xuXHRcdGlmIChleHBvcnRzLmdldFR5cGUocGFyZW50KSA9PT0gXCJhcnJheVwiKSB7XG5cdFx0XHRpZiAocGFyZW50TmFtZSkge1xuXHRcdFx0XHRwcm9wZXJ0eU5hbWUgKz0gXCJbXCIgKyBpbmRleGVyICsgXCJdXCI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChwYXJlbnROYW1lKSB7XG5cdFx0XHRcdHByb3BlcnR5TmFtZSArPSBcIi5cIjtcblx0XHRcdH1cblx0XHRcdHByb3BlcnR5TmFtZSArPSBpbmRleGVyO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvcGVydHlOYW1lO1xuXHR9XG5cblx0ZXhwb3J0cy52aXNpdE1vZGVsID0gZnVuY3Rpb24gKHJvb3RPYmplY3QsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0b3B0aW9ucy52aXNpdGVkT2JqZWN0cyA9IG9wdGlvbnMudmlzaXRlZE9iamVjdHMgfHwgbmV3IG9iamVjdExvb2t1cCgpO1xuXG5cdFx0dmFyIG1hcHBlZFJvb3RPYmplY3Q7XG5cdFx0dmFyIHVud3JhcHBlZFJvb3RPYmplY3QgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHJvb3RPYmplY3QpO1xuXG5cdFx0aWYgKCFjYW5IYXZlUHJvcGVydGllcyh1bndyYXBwZWRSb290T2JqZWN0KSkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrKHJvb3RPYmplY3QsIG9wdGlvbnMucGFyZW50TmFtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9wdGlvbnMgPSBmaWxsT3B0aW9ucyhvcHRpb25zLCB1bndyYXBwZWRSb290T2JqZWN0W21hcHBpbmdQcm9wZXJ0eV0pO1xuXG5cdFx0XHQvLyBPbmx5IGRvIGEgY2FsbGJhY2ssIGJ1dCBpZ25vcmUgdGhlIHJlc3VsdHNcblx0XHRcdGNhbGxiYWNrKHJvb3RPYmplY3QsIG9wdGlvbnMucGFyZW50TmFtZSk7XG5cdFx0XHRtYXBwZWRSb290T2JqZWN0ID0gZXhwb3J0cy5nZXRUeXBlKHVud3JhcHBlZFJvb3RPYmplY3QpID09PSBcImFycmF5XCIgPyBbXSA6IHt9O1xuXHRcdH1cblxuXHRcdG9wdGlvbnMudmlzaXRlZE9iamVjdHMuc2F2ZShyb290T2JqZWN0LCBtYXBwZWRSb290T2JqZWN0KTtcblxuXHRcdHZhciBwYXJlbnROYW1lID0gb3B0aW9ucy5wYXJlbnROYW1lO1xuXHRcdHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHVud3JhcHBlZFJvb3RPYmplY3QsIGZ1bmN0aW9uIChpbmRleGVyKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5pZ25vcmUgJiYga28udXRpbHMuYXJyYXlJbmRleE9mKG9wdGlvbnMuaWdub3JlLCBpbmRleGVyKSAhPSAtMSkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgcHJvcGVydHlWYWx1ZSA9IHVud3JhcHBlZFJvb3RPYmplY3RbaW5kZXhlcl07XG5cdFx0XHRvcHRpb25zLnBhcmVudE5hbWUgPSBnZXRQcm9wZXJ0eU5hbWUocGFyZW50TmFtZSwgdW53cmFwcGVkUm9vdE9iamVjdCwgaW5kZXhlcik7XG5cblx0XHRcdC8vIElmIHdlIGRvbid0IHdhbnQgdG8gZXhwbGljaXRseSBjb3B5IHRoZSB1bm1hcHBlZCBwcm9wZXJ0eS4uLlxuXHRcdFx0aWYgKGtvLnV0aWxzLmFycmF5SW5kZXhPZihvcHRpb25zLmNvcHksIGluZGV4ZXIpID09PSAtMSkge1xuXHRcdFx0XHQvLyAuLi5maW5kIG91dCBpZiBpdCdzIGEgcHJvcGVydHkgd2Ugd2FudCB0byBleHBsaWNpdGx5IGluY2x1ZGVcblx0XHRcdFx0aWYgKGtvLnV0aWxzLmFycmF5SW5kZXhPZihvcHRpb25zLmluY2x1ZGUsIGluZGV4ZXIpID09PSAtMSkge1xuXHRcdFx0XHRcdC8vIFRoZSBtYXBwZWQgcHJvcGVydGllcyBvYmplY3QgY29udGFpbnMgYWxsIHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBwYXJ0IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QuXG5cdFx0XHRcdFx0Ly8gSWYgYSBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCwgYW5kIGl0IGlzIG5vdCBiZWNhdXNlIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXkgKGUuZy4gXCJteVByb3BbM11cIiksIHRoZW4gaXQgc2hvdWxkIG5vdCBiZSB1bm1hcHBlZC5cblx0XHRcdFx0ICAgIGlmICh1bndyYXBwZWRSb290T2JqZWN0W21hcHBpbmdQcm9wZXJ0eV1cblx0XHRcdFx0ICAgICAgICAmJiB1bndyYXBwZWRSb290T2JqZWN0W21hcHBpbmdQcm9wZXJ0eV0ubWFwcGVkUHJvcGVydGllcyAmJiAhdW53cmFwcGVkUm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldLm1hcHBlZFByb3BlcnRpZXNbaW5kZXhlcl1cblx0XHRcdFx0ICAgICAgICAmJiB1bndyYXBwZWRSb290T2JqZWN0W21hcHBpbmdQcm9wZXJ0eV0uY29waWVkUHJvcGVydGllcyAmJiAhdW53cmFwcGVkUm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldLmNvcGllZFByb3BlcnRpZXNbaW5kZXhlcl1cblx0XHRcdFx0ICAgICAgICAmJiAhKGV4cG9ydHMuZ2V0VHlwZSh1bndyYXBwZWRSb290T2JqZWN0KSA9PT0gXCJhcnJheVwiKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgb3V0cHV0UHJvcGVydHk7XG5cdFx0XHRzd2l0Y2ggKGV4cG9ydHMuZ2V0VHlwZShrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHByb3BlcnR5VmFsdWUpKSkge1xuXHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0Y2FzZSBcImFycmF5XCI6XG5cdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdHZhciBwcmV2aW91c2x5TWFwcGVkVmFsdWUgPSBvcHRpb25zLnZpc2l0ZWRPYmplY3RzLmdldChwcm9wZXJ0eVZhbHVlKTtcblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSA9IChleHBvcnRzLmdldFR5cGUocHJldmlvdXNseU1hcHBlZFZhbHVlKSAhPT0gXCJ1bmRlZmluZWRcIikgPyBwcmV2aW91c2x5TWFwcGVkVmFsdWUgOiBleHBvcnRzLnZpc2l0TW9kZWwocHJvcGVydHlWYWx1ZSwgY2FsbGJhY2ssIG9wdGlvbnMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdG1hcHBlZFJvb3RPYmplY3RbaW5kZXhlcl0gPSBjYWxsYmFjayhwcm9wZXJ0eVZhbHVlLCBvcHRpb25zLnBhcmVudE5hbWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG1hcHBlZFJvb3RPYmplY3Q7XG5cdH1cblxuXHRmdW5jdGlvbiBzaW1wbGVPYmplY3RMb29rdXAoKSB7XG5cdFx0dmFyIGtleXMgPSBbXTtcblx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0dGhpcy5zYXZlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdHZhciBleGlzdGluZ0luZGV4ID0ga28udXRpbHMuYXJyYXlJbmRleE9mKGtleXMsIGtleSk7XG5cdFx0XHRpZiAoZXhpc3RpbmdJbmRleCA+PSAwKSB2YWx1ZXNbZXhpc3RpbmdJbmRleF0gPSB2YWx1ZTtcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRrZXlzLnB1c2goa2V5KTtcblx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0dGhpcy5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHR2YXIgZXhpc3RpbmdJbmRleCA9IGtvLnV0aWxzLmFycmF5SW5kZXhPZihrZXlzLCBrZXkpO1xuXHRcdFx0dmFyIHZhbHVlID0gKGV4aXN0aW5nSW5kZXggPj0gMCkgPyB2YWx1ZXNbZXhpc3RpbmdJbmRleF0gOiB1bmRlZmluZWQ7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIG9iamVjdExvb2t1cCgpIHtcblx0XHR2YXIgYnVja2V0cyA9IHt9O1xuXHRcdFxuXHRcdHZhciBmaW5kQnVja2V0ID0gZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHR2YXIgYnVja2V0S2V5O1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YnVja2V0S2V5ID0ga2V5Oy8vSlNPTi5zdHJpbmdpZnkoa2V5KTtcblx0XHRcdH1cblx0XHRcdGNhdGNoIChlKSB7XG5cdFx0XHRcdGJ1Y2tldEtleSA9IFwiJCQkXCI7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBidWNrZXQgPSBidWNrZXRzW2J1Y2tldEtleV07XG5cdFx0XHRpZiAoYnVja2V0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0YnVja2V0ID0gbmV3IHNpbXBsZU9iamVjdExvb2t1cCgpO1xuXHRcdFx0XHRidWNrZXRzW2J1Y2tldEtleV0gPSBidWNrZXQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYnVja2V0O1xuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5zYXZlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGZpbmRCdWNrZXQoa2V5KS5zYXZlKGtleSwgdmFsdWUpO1xuXHRcdH07XG5cdFx0dGhpcy5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gZmluZEJ1Y2tldChrZXkpLmdldChrZXkpO1xuXHRcdH07XG5cdH07XG59KSk7IiwiLy8gS25vY2tvdXQgRmFzdCBNYXBwaW5nIHYwLjFcbi8vIExpY2Vuc2U6IE1JVCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHQvLyBNb2R1bGUgc3lzdGVtcyBtYWdpYyBkYW5jZS5cblxuXHRpZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlMgb3IgTm9kZTogaGFyZC1jb2RlZCBkZXBlbmRlbmN5IG9uIFwia25vY2tvdXRcIlxuXHRcdGZhY3RvcnkoKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2tvJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydrbyddIDogbnVsbCksIGV4cG9ydHMpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmVbXCJhbWRcIl0pIHtcblx0XHQvLyBBTUQgYW5vbnltb3VzIG1vZHVsZSB3aXRoIGhhcmQtY29kZWQgZGVwZW5kZW5jeSBvbiBcImtub2Nrb3V0XCJcblx0XHRkZWZpbmUoW1wia25vY2tvdXRcIiwgXCJleHBvcnRzXCJdLCBmYWN0b3J5KTtcblx0fSBlbHNlIHtcblx0XHQvLyA8c2NyaXB0PiB0YWc6IHVzZSB0aGUgZ2xvYmFsIGBrb2Agb2JqZWN0LCBhdHRhY2hpbmcgYSBgd3JhcGAgcHJvcGVydHlcblx0XHRmYWN0b3J5KGtvLCBrby53cmFwID0ge30pO1xuXHR9XG59KGZ1bmN0aW9uIChrbywgZXhwb3J0cykge1xuICAgIFxuICAgIC8vIHRoaXMgZnVuY3Rpb24gbWltaWNzIGtvLm1hcHBpbmdcbiAgICBleHBvcnRzLmZyb21KUyA9IGZ1bmN0aW9uKGpzT2JqZWN0LCBjb21wdXRlZEZ1bmN0aW9ucylcbiAgICB7XG4gICAgICAgIHJlc2V0KCk7XG5cdHJldHVybiB3cmFwKGpzT2JqZWN0LCBjb21wdXRlZEZ1bmN0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBmdW5jdGlvbiB1bndyYXBzIHRoZSBvdXRlciBmb3IgYXNzaWduaW5nIHRoZSByZXN1bHQgdG8gYW4gb2JzZXJ2YWJsZVxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvaXNzdWVzLzUxN1xuICAgIGV4cG9ydHMudXBkYXRlRnJvbUpTID0gZnVuY3Rpb24ob2JzZXJ2YWJsZSwganNPYmplY3QsIGNvbXB1dGVkRnVuY3Rpb25zKVxuICAgIHtcbiAgICAgICAgcmVzZXQoKTtcblx0cmV0dXJuIG9ic2VydmFibGUoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh3cmFwKGpzT2JqZWN0LCBjb21wdXRlZEZ1bmN0aW9ucykpKTtcbiAgICB9XG5cbiAgICBleHBvcnRzLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb25TdHJpbmcsIGNvbXB1dGVkRnVuY3Rpb25zKSB7XG5cdHZhciBwYXJzZWQgPSBrby51dGlscy5wYXJzZUpzb24oanNvblN0cmluZyk7XG5cdGFyZ3VtZW50c1swXSA9IHBhcnNlZDtcblx0cmV0dXJuIGV4cG9ydHMuZnJvbUpTLmFwcGx5KHRoaXMsIGNvbXB1dGVkRnVuY3Rpb25zKTtcbiAgICB9O1xuICAgIFxuICAgIGV4cG9ydHMudG9KUyA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG5cdHJldHVybiB1bndyYXAob2JzZXJ2YWJsZSk7XG4gICAgfVxuXG4gICAgZXhwb3J0cy50b0pTT04gPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuXHR2YXIgcGxhaW5KYXZhU2NyaXB0T2JqZWN0ID0gZXhwb3J0cy50b0pTKG9ic2VydmFibGUpO1xuXHRyZXR1cm4ga28udXRpbHMuc3RyaW5naWZ5SnNvbihwbGFpbkphdmFTY3JpcHRPYmplY3QpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0eXBlT2YodmFsdWUpIHtcblx0dmFyIHMgPSB0eXBlb2YgdmFsdWU7XG5cdGlmIChzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmNvbnN0cnVjdG9yID09IERhdGUpXG4gICAgICAgICAgICAgICAgICAgIHMgPSAnZGF0ZSc7XG5cdFx0ZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PSAnW29iamVjdCBBcnJheV0nKVxuICAgICAgICAgICAgICAgICAgICBzID0gJ2FycmF5JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0cyA9ICdudWxsJztcbiAgICAgICAgICAgIH1cblx0fVxuXHRyZXR1cm4gcztcbiAgICB9XG5cbiAgICAvLyB1bndyYXBwaW5nXG4gICAgZnVuY3Rpb24gdW53cmFwT2JqZWN0KG8pXG4gICAge1xuXHR2YXIgdCA9IHt9O1xuXG5cdGZvciAodmFyIGsgaW4gbylcblx0e1xuXHQgICAgdmFyIHYgPSBvW2tdO1xuXG5cdCAgICBpZiAoa28uaXNDb21wdXRlZCh2KSlcblx0XHRjb250aW51ZTtcblxuXHQgICAgdFtrXSA9IHVud3JhcCh2KTtcblx0fVxuXG5cdHJldHVybiB0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVud3JhcEFycmF5KGEpXG4gICAge1xuXHR2YXIgciA9IFtdO1xuXG5cdGlmICghYSB8fCBhLmxlbmd0aCA9PSAwKVxuXHQgICAgcmV0dXJuIHI7XG5cdFxuXHRmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKVxuXHQgICAgci5wdXNoKHVud3JhcChhW2ldKSk7XG5cblx0cmV0dXJuIHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW53cmFwKHYpXG4gICAge1xuXHR2YXIgaXNPYnNlcnZhYmxlID0ga28uaXNPYnNlcnZhYmxlKHYpO1xuXG5cdGlmIChpc09ic2VydmFibGUpXG5cdHtcblx0ICAgIHZhciB2YWwgPSB2KCk7XG5cblx0ICAgIHJldHVybiB1bndyYXAodmFsKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0ICAgIGlmICh0eXBlT2YodikgPT0gXCJhcnJheVwiKVxuXHQgICAge1xuXHRcdHJldHVybiB1bndyYXBBcnJheSh2KTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKHR5cGVPZih2KSA9PSBcIm9iamVjdFwiKVxuXHQgICAge1xuXHRcdHJldHVybiB1bndyYXBPYmplY3Qodik7XG5cdCAgICB9XG5cdCAgICBlbHNlXG5cdCAgICB7XG5cdFx0cmV0dXJuIHY7XG5cdCAgICB9XG5cdH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldCgpXG4gICAge1xuICAgICAgICBwYXJlbnRzID0gW3tvYmo6IG51bGwsIHdyYXBwZWQ6IG51bGwsIGx2bDogXCJcIn1dO1xuICAgIH0gICAgXG4gICAgXG4gICAgLy8gd3JhcHBpbmdcblxuICAgIGZ1bmN0aW9uIHdyYXBPYmplY3QobywgY29tcHV0ZWRGdW5jdGlvbnMpXG4gICAge1xuICAgICAgICAvLyBjaGVjayBmb3IgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHBhcmVudHNbaV0ub2JqID09PSBvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudHNbaV0ud3JhcHBlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cdHZhciB0ID0ge307XG5cblx0Zm9yICh2YXIgayBpbiBvKVxuXHR7XG5cdCAgICB2YXIgdiA9IG9ba107XG5cbiAgICAgICAgICAgIHBhcmVudHMucHVzaCh7b2JqOiBvLCB3cmFwcGVkOiB0LCBsdmw6IGN1cnJlbnRMdmwoKSArIFwiL1wiICsga30pO1xuXG5cdCAgICB0W2tdID0gd3JhcCh2LCBjb21wdXRlZEZ1bmN0aW9ucyk7XG5cbiAgICAgICAgICAgIHBhcmVudHMucG9wKCk7XG5cdH1cblxuXHRpZiAoY29tcHV0ZWRGdW5jdGlvbnMgJiYgY29tcHV0ZWRGdW5jdGlvbnNbY3VycmVudEx2bCgpXSlcblx0ICAgIHQgPSBjb21wdXRlZEZ1bmN0aW9uc1tjdXJyZW50THZsKCldKHQpO1xuXG4gICAgICAgIGlmIChoYXNFUzVQbHVnaW4oKSlcbiAgICAgICAgICAgIGtvLnRyYWNrKHQpO1xuXG5cdHJldHVybiB0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBBcnJheShhLCBjb21wdXRlZEZ1bmN0aW9ucylcbiAgICB7XG5cdHZhciByID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG5cblx0aWYgKCFhIHx8IGEubGVuZ3RoID09IDApXG5cdCAgICByZXR1cm4gcjtcblxuXHRmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKVxuXHQgICAgci5wdXNoKHdyYXAoYVtpXSwgY29tcHV0ZWRGdW5jdGlvbnMpKTtcblxuXHRyZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyBhIHN0YWNrLCB1c2VkIGZvciB0d28gcHVycG9zZXM6XG4gICAgLy8gIC0gY2lyY3VsYXIgcmVmZXJlbmNlIGNoZWNraW5nXG4gICAgLy8gIC0gY29tcHV0ZWQgZnVuY3Rpb25zXG4gICAgdmFyIHBhcmVudHM7XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50THZsKClcbiAgICB7XG5cdHJldHVybiBwYXJlbnRzW3BhcmVudHMubGVuZ3RoLTFdLmx2bDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwKHYsIGNvbXB1dGVkRnVuY3Rpb25zKVxuICAgIHtcblx0aWYgKHR5cGVPZih2KSA9PSBcImFycmF5XCIpXG5cdHtcblx0ICAgIHJldHVybiB3cmFwQXJyYXkodiwgY29tcHV0ZWRGdW5jdGlvbnMpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVPZih2KSA9PSBcIm9iamVjdFwiKVxuXHR7XG5cdCAgICByZXR1cm4gd3JhcE9iamVjdCh2LCBjb21wdXRlZEZ1bmN0aW9ucyk7XG5cdH1cblx0ZWxzZVxuXHR7XG4gICAgICAgICAgICBpZiAoIWhhc0VTNVBsdWdpbigpICYmIHR5cGVvZiB2ICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAge1xuXHQgICAgICAgIHZhciB0ID0ga28ub2JzZXJ2YWJsZSgpO1xuXHQgICAgICAgIHQodik7XG5cdCAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcblx0fVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0VTNVBsdWdpbigpXG4gICAge1xuICAgICAgICByZXR1cm4ga28udHJhY2sgIT0gbnVsbDtcbiAgICB9XG59KSk7IiwidmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XG52YXIgSEVST0NBTENVTEFUT1IgPSByZXF1aXJlKCcuL2FwcC9tYWluJyk7XG5oYyA9IG5ldyBIRVJPQ0FMQ1VMQVRPUigpO1xudmFyIGxhc3RVcGRhdGUgPSBcIiNERVZfQlVJTERcIjtcbiQoJyNsYXN0LXVwZGF0ZScpLnRleHQobGFzdFVwZGF0ZSk7XG5oYy5pbml0KFwiL21lZGlhL2pzL2hlcm9kYXRhLmpzb25cIixcIi9tZWRpYS9qcy9pdGVtZGF0YS5qc29uXCIsXCIvbWVkaWEvanMvdW5pdGRhdGEuanNvblwiLCBoYy5ydW4pOyJdfQ==
