(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.HeroCalc = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.AbilityModel = function (a, h) {
    var self = this;
    self.hero = h;
    self.abilityData = my.prototype.abilityData;
    self.hasScepter = ko.observable(false);
    self.isShapeShiftActive = ko.observable(false);
    self.abilities = a;
    self._abilities = self.abilities();
    for (var i = 0; i < self.abilities().length; i++) {
        self._abilities[i].level = ko.observable(0);
        self._abilities[i].isActive = ko.observable(false);
        self._abilities[i].isDetail = ko.observable(false);
        self._abilities[i].baseDamage = ko.observable(0);
        self._abilities[i].baseDamageReductionPct = ko.observable(0);
        self._abilities[i].baseDamageMultiplier = ko.observable(0);
        self._abilities[i].bash = ko.observable(0);
        self._abilities[i].bashBonusDamage = ko.observable(0);
        self._abilities[i].bonusDamage = ko.observable(0);
        self._abilities[i].bonusDamageOrb = ko.observable(0);
        self._abilities[i].bonusDamagePct = ko.observable(0);
        self._abilities[i].bonusDamagePrecisionAura = ko.observable(0);
        self._abilities[i].bonusDamageReduction = ko.observable(0);
        self._abilities[i].bonusHealth = ko.observable(0);
        self._abilities[i].bonusStrength = ko.observable(0);
        self._abilities[i].bonusStrength2 = ko.observable(0);
        self._abilities[i].bonusAgility = ko.observable(0);
        self._abilities[i].bonusAgility2 = ko.observable(0);
        self._abilities[i].bonusInt = ko.observable(0);
        self._abilities[i].bonusAllStatsReduction = ko.observable(0);
        self._abilities[i].damageAmplification = ko.observable(0);
        self._abilities[i].damageReduction = ko.observable(0);
        self._abilities[i].evasion = ko.observable(0);
        self._abilities[i].magicResist = ko.observable(0);
        self._abilities[i].manaregen = ko.observable(0);
        self._abilities[i].manaregenreduction = ko.observable(0);
        self._abilities[i].missChance = ko.observable(0);
        self._abilities[i].movementSpeedFlat = ko.observable(0);
        self._abilities[i].movementSpeedPct = ko.observable(0);
        self._abilities[i].movementSpeedPctReduction = ko.observable(0);
        self._abilities[i].turnRateReduction = ko.observable(0);
        self._abilities[i].attackrange = ko.observable(0);
        self._abilities[i].attackspeed = ko.observable(0);
        self._abilities[i].attackspeedreduction = ko.observable(0);
        self._abilities[i].armor = ko.observable(0);
        self._abilities[i].armorReduction = ko.observable(0);
        self._abilities[i].healthregen = ko.observable(0);
        self._abilities[i].lifesteal = ko.observable(0);
        self._abilities[i].visionnight = ko.observable(0);
        self._abilities[i].visionday = ko.observable(0);
    }
    self.abilityControlData = {};
    self.abilitySettingsData = function (data, parent, index) {
        if (self.abilityControlData[data] == undefined) {
            return self.processAbility(data, parent, index, self.abilityData[data]);
        }
        else {
            return self.abilityControlData[data];
        }
    }
    
    self.processAbility = function (data, parent, index, args) {
        var result = {};
        result.data = [];
        var v;
        var v_list = [];
        for (var i=0; i < args.length; i++) {
            switch (args[i].controlType) {
                case 'input':
                    v = ko.observable(0).extend({ numeric: 2 });
                    v.controlValueType = args[i].controlValueType;
                    v_list.push(v);
                    result.data.push({ labelName: args[i].label.toUpperCase() + ':', controlVal: v, controlType: args[i].controlType, display: args[i].display });
                break;
                case 'checkbox':
                    v = ko.observable(false);
                    v.controlValueType = args[i].controlValueType;
                    v_list.push(v);
                    result.data.push({ labelName: args[i].label.toUpperCase() + '?', controlVal: v, controlType: args[i].controlType, display: args[i].display });
                break;
                case 'radio':
                    v = ko.observable(args[i].controlOptions[0].value);
                    v.controlValueType = args[i].controlValueType;
                    v_list.push(v);
                    result.data.push({ labelName: args[i].label.toUpperCase() + '?', controlVal: v, controlType: args[i].controlType, display: args[i].display, controlOptions: args[i].controlOptions });
                break;
                case 'method':
                case 'text':
                    // single input abilities
                    if (args[i].controls == undefined) {
                        if (args[i].noLevel) {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    var _ability = self.abilities().find(function(b) {
                                        return b.name == data;
                                    });
                                    return self.getAbilityAttributeValue(_ability.attributes, attributeName, 0);
                                })};
                            };
                        }
                        else {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    var _ability = self.abilities().find(function(b) {
                                        return b.name == data;
                                    });
                                    return self.getAbilityAttributeValue(_ability.attributes, attributeName, _ability.level());
                                })};
                            };
                        }
                        var g = attributeValue(args[i].attributeName)
                        var r = self.getComputedFunction(v, g.fn, args[i].fn, parent, index, self, args[i].returnProperty, undefined, data);
                        if (args[i].ignoreTooltip) {
                            var tooltip = args[i].label || args[i].attributeName;
                        }
                        else {
                            var tooltip = self.getAbilityAttributeTooltip(self.abilities()[index].attributes, args[i].attributeName) || args[i].label || args[i].attributeName;
                        }
                        result.data.push({ labelName: tooltip.toUpperCase(), controlVal: r, controlType: args[i].controlType, display: args[i].display, clean: g.fn });
                    }
                    // multi input abilities
                    else {
                        if (args[i].noLevel) {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    return self.getAbilityAttributeValue(self.abilities()[index].attributes, attributeName, 0);
                                })};
                            };
                        }
                        else {
                            var attributeValue = function (attributeName) {
                                return {fn: ko.computed(function () {
                                    return self.getAbilityAttributeValue(self.abilities()[index].attributes, attributeName, self.abilities()[index].level());
                                })};
                            };
                        }
                        var g = attributeValue(args[i].attributeName)
                        var r = self.getComputedFunction(v_list, g.fn, args[i].fn, parent, index, self, args[i].returnProperty, args[i].controls, data);
                        if (args[i].ignoreTooltip) {
                            var tooltip = args[i].label || args[i].attributeName;
                        }
                        else {
                            var tooltip = self.getAbilityAttributeTooltip(self.abilities()[index].attributes, args[i].attributeName) || args[i].label || args[i].attributeName;
                        }
                        result.data.push({ labelName: tooltip.toUpperCase(), controlVal: r, controlType: args[i].controlType, display: args[i].display, clean: g.fn });
                    }
                    
                    if (args[i].controlType == 'method') {
                        v_list.push(r);
                    }
                break;
            }
        }
        self.abilityControlData[data] = result;
        return result;
    }

    self.getComputedFunction = function (v, attributeValue, fn, parent, index, abilityModel, returnProperty, controls, abilityName) {
        var _ability = abilityModel.abilities().find(function(b) {
            return b.name == abilityName;
        });
        return ko.pureComputed(function () {                
            var inputValue;
            if (controls == undefined) {
                if (v == undefined) {
                    inputValue = v;
                }
                else if (typeof v() == 'boolean') {
                    inputValue = v();
                }
                else if (v.controlValueType == undefined) {
                    inputValue = parseFloat(v());
                }
                else if (v.controlValueType == 'string') {
                    inputValue = v();
                }
                else {
                    inputValue = parseFloat(v());
                }
            }
            else {
                var v_list = [];
                for (var i=0;i<controls.length;i++) {
                    switch (typeof v[controls[i]]()) {
                        case 'boolean':
                        case 'object':
                            v_list.push(v[controls[i]]());
                        break;
                        default:
                            v_list.push(parseFloat(v[controls[i]]()));
                        break;
                    }
                }
                inputValue = v_list;
            }
            
            var returnVal = fn.call(this, inputValue, attributeValue(), parent, index, abilityModel, _ability);
            if (returnProperty != undefined) {
                _ability[returnProperty](returnVal);
            }
            return returnVal;
        }, this);
    }
    
    self.getAbilityLevelByAbilityName = function (abilityName) {
        for (var i = 0; i < self.abilities().length; i++) {
            if (self._abilities[i].name == abilityName) {
                return self._abilities[i].level();
            }
        }
        return -1;
    }

    self.getAbilityByName = function (abilityName) {
        for (var i = 0; i < self.abilities().length; i++) {
            if (self._abilities[i].name == abilityName) {
                return self._abilities[i];
            }
        }
        return undefined;
    }

    self.getAbilityPropertyValue = function (ability, property) {
        return parseFloat(ability[property]()[ability.level()-1]);
    }
    
    self.getAttributeBonusLevel = function () {
        for (var i = 0; i < self.abilities().length; i++) {
            if (self._abilities[i].name == 'attribute_bonus') {
                return self._abilities[i].level();
            }
        }
        return 0;        
    }
    
    self.getAllStatsReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {                    
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        /*switch(attribute.name) {
                            // invoker_quas
                            case 'bonus_strength':
                                totalAttribute += parseInt(attribute.value[ability.level()-1]);
                            break;
                        }*/
                    }
                }
                else if (ability.bonusAllStatsReduction != undefined) {
                    // slark_essence_shift
                    totalAttribute+=ability.bonusAllStatsReduction();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getStrengthReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {                    
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        /*switch(attribute.name) {
                            // invoker_quas
                            case 'bonus_strength':
                                totalAttribute += parseInt(attribute.value[ability.level()-1]);
                            break;
                        }*/
                    }
                }
                else if (ability.bonusStrength != undefined && ability.name == 'undying_decay') {
                    // undying_decay
                    totalAttribute-=ability.bonusStrength();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getStrength = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0) {
                if (!(ability.name in self.abilityData)) {
                    if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                        for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                            var attribute = self._abilities[i].attributes[j];
                            /*switch(attribute.name) {
                                // invoker_quas
                                case 'bonus_strength':
                                    totalAttribute += parseInt(attribute.value[ability.level()-1]);
                                break;
                            }*/
                        }
                    }
                }
                else {
                    if (ability.bonusStrength != undefined) {
                        if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1) || ability.name == 'invoker_quas') {
                            // pudge_flesh_heap,invoker_quas,morphling_morph_str,morphling_morph_agi,undying_decay
                            totalAttribute+=ability.bonusStrength();
                        }
                    }
                    if (ability.bonusStrength2 != undefined) {
                        if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                            // morphling_morph_str
                            totalAttribute+=ability.bonusStrength2();
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAgility = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0) {
                if (!(ability.name in self.abilityData)) {
                    if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                        for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                            var attribute = self._abilities[i].attributes[j];
                            switch(attribute.name) {
                                // drow_ranger_marksmanship
                                case 'marksmanship_agility_bonus':
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                break;
                            }
                        }
                    }
                }
                else {
                    if (ability.bonusAgility != undefined) {
                        if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1) || ability.name == 'invoker_wex') {
                            // invoker_wex,morphling_morph_agi,morphling_morph_str
                            totalAttribute+=ability.bonusAgility();
                        }
                    }
                    if (ability.bonusAgility2 != undefined) {
                        if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                            // invoker_wex,morphling_morph_agi,morphling_morph_str
                            totalAttribute+=ability.bonusAgility2();
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.getIntelligence = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0) {
                if (!(ability.name in self.abilityData)) {
                    if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                        for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                            var attribute = self._abilities[i].attributes[j];
                            switch(attribute.name) {
                                // invoker_exort
                            /*    case 'bonus_intelligence':
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                break;*/
                            }
                        }
                    }
                }
                else if (ability.bonusInt != undefined) {
                    if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1) || ability.name == 'invoker_exort') {
                        // invoker_exort
                        totalAttribute+=ability.bonusInt();
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getArmor = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // axe_berserkers_call,dragon_knight_dragon_blood,troll_warlord_berserkers_rage,lycan_shapeshift,enraged_wildkin_toughness_aura
                            case 'bonus_armor':
                                if (ability.name != 'templar_assassin_meld') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // sven_warcry
                            case 'warcry_armor':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                            // lich_frost_armor,ogre_magi_frost_armor
                            case 'armor_bonus':
                                if (ability.name == 'lich_frost_armor' || ability.name == 'ogre_magi_frost_armor') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                        }
                    }
                }
                else if (ability.armor != undefined) {
                    // shredder_reactive_armor,visage_gravekeepers_cloak
                    totalAttribute+=ability.armor();
                }
            }
        }
        return totalAttribute;
    });

    self.getArmorBaseReduction = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                //if (!(ability.name in self.abilityData)) {
                    switch(ability.name) {
                        //elder_titan_natural_order
                        case 'elder_titan_natural_order':
                            totalAttribute *= (1-self.getAbilityAttributeValue(self._abilities[i].attributes, 'armor_reduction_pct', ability.level())/100);
                        break;
                    }
                //}
            }
        }
        return totalAttribute;
    });
    
    self.getArmorReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    switch(ability.name) {
                        //templar_assassin_meld
                        case 'templar_assassin_meld':
                            totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, 'bonus_armor', ability.level());
                        break;
                        // tidehunter_gush
                        case 'tidehunter_gush':
                            totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, 'armor_bonus', ability.level());
                        break;
                        // naga_siren_rip_tide
                        case 'naga_siren_rip_tide':
                        // slardar_amplify_damage
                        case 'slardar_amplify_damage':
                        // vengefulspirit_wave_of_terror
                        case 'vengefulspirit_wave_of_terror':
                            totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, 'armor_reduction', ability.level());
                        break;
                        // nevermore_dark_lord
                        case 'nevermore_dark_lord':
                            totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, 'presence_armor_reduction', ability.level());
                        break;
                    }
                }
                else if (ability.armorReduction != undefined) {
                    // alchemist_acid_spray
                    totalAttribute+=ability.armorReduction();
                }
            }
        }
        return totalAttribute;
    });

    self.getHealth = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // lone_druid_true_form,lycan_shapeshift,troll_warlord_berserkers_rage
                            case 'bonus_hp':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                            // lone_druid_synergy
                            case 'true_form_hp_bonus':
                                if (self.isTrueFormActive()) {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                        }
                    }
                }
                else if (ability.bonusHealth != undefined) {
                    // clinkz_death_pact
                    totalAttribute+=ability.bonusHealth();
                }
            }
        }
        return totalAttribute;
    });
    
    self.isTrueFormActive = function () {
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.isActive() && ability.name == 'lone_druid_true_form') {
                return true;
            }
        }
        return false;
    }

    self.getHealthRegen = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // alchemist_chemical_rage, dragon_knight_dragon_blood
                            case 'bonus_health_regen':
                            // broodmother_spin_web
                            case 'heath_regen':
                            // omniknight_guardian_angel,treant_living_armor,satyr_hellcaller_unholy_aura
                            case 'health_regen':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                            // legion_commander_press_the_attack
                            case 'hp_regen':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
                else if (ability.healthregen != undefined) {
                    // shredder_reactive_armor,invoker_quas,necrolyte_sadist
                    totalAttribute+=ability.healthregen();
                }
            }
        }
        return totalAttribute;
    });

    self.getMana = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                //if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // obsidian_destroyer_essence_aura
                            case 'bonus_mana':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                //}
            }
        }
        return totalAttribute;
    });
    
    self.getManaRegen = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // alchemist_chemical_rage
                            case 'bonus_mana_regen':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
                else if (ability.manaregen != undefined) {
                    // necrolyte_sadist
                    totalAttribute+=ability.manaregen();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getManaRegenArcaneAura = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                //if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // crystal_maiden_brilliance_aura
                            case 'mana_regen':
                                if (ability.name == 'crystal_maiden_brilliance_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                        }
                    }
                //}
            }
        }
        return totalAttribute;
    });

    self.getManaRegenReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                /*if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        //switch(attribute.name) {
                        //    // 
                        //    case '':
                        //        totalAttribute += parseInt(attribute.value[ability.level()-1]);
                        //    break;
                        //}
                    }
                }
                else*/ if (ability.manaregenreduction != undefined) {
                    // pugna_nether_ward
                    totalAttribute+=ability.manaregenreduction();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAttackRange = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0) {
                if (!(ability.name in self.abilityData)) {
                    if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                        for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                            var attribute = self._abilities[i].attributes[j];
                            switch(attribute.name) {
                                // winter_wyvern_arctic_burn
                                case 'attack_range_bonus':
                                // templar_assassin_psi_blades,sniper_take_aim
                                case 'bonus_attack_range':
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                break;
                                // terrorblade_metamorphosis,troll_warlord_berserkers_rage
                                case 'bonus_range':
                                    if (ability.name == 'terrorblade_metamorphosis') {
                                        totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                    }
                                    if (ability.name == 'troll_warlord_berserkers_rage') {
                                        totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                    }
                                break;
                                // tiny_grow
                                case 'bonus_range_scepter':
                                    if (ability.name == 'tiny_grow' && self.hasScepter()) {
                                        totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                    }
                                break;
                                // enchantress_impetus
                                case 'bonus_attack_range_scepter':
                                    if (ability.name == 'enchantress_impetus' && self.hasScepter()) {
                                        totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                    }
                                break;
                            }
                        }
                        // lone_druid_true_form
                        if (ability.name == 'lone_druid_true_form') {
                            totalAttribute -= 422;
                        }
                    }
                    else if (ability.name == 'enchantress_impetus' && self.hasScepter()) {
                        for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                            var attribute = self._abilities[i].attributes[j];
                            switch(attribute.name) {
                              case 'bonus_attack_range_scepter':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                              break;
                            }
                        }
                    }
                }
                else if (ability.attackrange != undefined) {
                    if (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1)) {
                        // dragon_knight_elder_dragon_form
                        totalAttribute+=ability.attackrange();
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAttackSpeed = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // abaddon_frostmourne,troll_warlord_battle_trance
                            case 'attack_speed':
                            // visage_grave_chill
                            case 'attackspeed_bonus':
                            // mirana_leap
                            case 'leap_speedbonus_as':
                            // life_stealer
                            case 'attack_speed_bonus':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                            // clinkz_strafe,ursa_overpower
                            case 'attack_speed_bonus_pct':
                                if (ability.name == 'clinkz_strafe' || ability.name == 'ursa_overpower') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // axe_culling_blade,necronomicon_archer_aoe
                            case 'speed_bonus':
                                if (ability.name == 'axe_culling_blade' || ability.name == 'necronomicon_archer_aoe') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // ancient_apparition_chilling_touch
                            case 'attack_speed_pct':
                                if (ability.name == 'ancient_apparition_chilling_touch') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // beastmaster_inner_beast,lycan_feral_impulse,lone_druid_rabid,tiny_grow,phantom_assassin_phantom_strike,windrunner_focusfire,ogre_magi_bloodlust,centaur_khan_endurance_aura
                            case 'bonus_attack_speed':
                                if (ability.name == 'beastmaster_inner_beast' 
                                 || ability.name == 'lycan_feral_impulse' 
                                 || ability.name == 'lone_druid_rabid' 
                                 || ability.name == 'tiny_grow' 
                                 || ability.name == 'phantom_assassin_phantom_strike' 
                                 || ability.name == 'windrunner_focusfire' 
                                 || ability.name == 'ogre_magi_bloodlust'
                                 || ability.name == 'centaur_khan_endurance_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                        }
                    }
                }
                else if (ability.attackspeed != undefined) {
                    // troll_warlord_fervor,wisp_overcharge,lina_fiery_soul,invoker_alacrity,invoker_wex,huskar_berserkers_blood
                    totalAttribute+=ability.attackspeed();
                }
            }
        }
        return totalAttribute;
    });

    self.getAttackSpeedReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // night_stalker_void,crystal_maiden_crystal_nova,ghost_frost_attack,ogre_magi_frost_armor,polar_furbolg_ursa_warrior_thunder_clap
                            case 'attackspeed_slow':
                            // lich_frost_armor,lich_frost_nova,enchantress_untouchable
                            case 'slow_attack_speed':
                            // beastmaster_primal_roar
                            case 'slow_attack_speed_pct':
                            // storm_spirit_overload
                            case 'overload_attack_slow':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                            // omniknight_degen_aura
                            case 'speed_bonus':
                                if (ability.name == 'omniknight_degen_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // tusk_frozen_sigil,crystal_maiden_freezing_field
                            case 'attack_slow':
                                if (ability.name == 'crystal_maiden_freezing_field' && !self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                                else if (ability.name == 'tusk_frozen_sigil') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            case 'attack_slow_scepter':
                                if (ability.name == 'crystal_maiden_freezing_field' && self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // faceless_void_time_walk
                            case 'attack_speed_pct':
                                if (ability.name == 'faceless_void_time_walk') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // bounty_hunter_jinada
                            case 'bonus_attackspeed':
                                if (ability.name == 'bounty_hunter_jinada') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // brewmaster_thunder_clap
                            case 'attack_speed_slow':
                                if (ability.name == 'brewmaster_thunder_clap') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // medusa_stone_gaze
                            case 'slow':
                                if (ability.name == 'medusa_stone_gaze') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // visage_grave_chill
                            case 'attackspeed_bonus':
                                totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                            // abaddon_frostmourne
                            case 'attack_slow_tooltip':
                                if (ability.name == 'abaddon_frostmourne') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                        }
                    }
                    if (ability.name == 'enraged_wildkin_tornado') {
                        totalAttribute -= 15;
                    }
                }
                else if (ability.attackspeedreduction != undefined) {
                    // viper_viper_strike,viper_corrosive_skin,jakiro_liquid_fire,lich_chain_frost,sandking_epicenter,earth_spirit_rolling_boulder
                    totalAttribute+=ability.attackspeedreduction();
                }
            }
        }
        return totalAttribute;
    });
    self.getBash = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // slardar_bash
                            case 'chance':
                            // sniper_headshot
                            case 'proc_chance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                        }
                    }
                }
                else if (ability.bash != undefined) {
                    // spirit_breaker_greater_bash,faceless_void_time_lock
                    totalAttribute *= (1 - ability.bash()/100);
                }
            }
        }
        return totalAttribute;
    });    
    self.getBaseDamage = ko.computed(function () {
        var totalAttribute = 0;
        var totalMultiplier = 1;
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // tiny_grow,terrorblade_metamorphosis
                            case 'bonus_damage':
                                if (ability.name == 'tiny_grow' || ability.name == 'terrorblade_metamorphosis') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                        }
                    }
                }
                else {
                    if (ability.baseDamageMultiplier != undefined) {
                        // earthshaker_enchant_totem
                        totalMultiplier += ability.baseDamageMultiplier()/100;
                        /*totalAttribute += ability.baseDamage();
                        sources[ability.name] = {
                            'damage': ability.baseDamage(),
                            'damageType': 'physical',
                            'displayname': ability.displayname
                        }*/
                    }
                    if (ability.baseDamage != undefined) {
                        // clinkz_death_pact
                        totalAttribute += ability.baseDamage();
                        sources[ability.name] = {
                            'damage': ability.baseDamage(),
                            'damageType': 'physical',
                            'displayname': ability.displayname
                        }
                    }
                }
            }
        }
        return { sources: sources, total: totalAttribute, multiplier: totalMultiplier };
    });
    
    self.getSelfBaseDamageReductionPct = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // medusa_split_shot
                            case 'damage_modifier':
                                totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                            // windrunner_focusfire
                            case 'focusfire_damage_reduction':
                                if (!self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                            case 'focusfire_damage_reduction_scepter':
                                if (self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getBaseDamageReductionPct = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // vengefulspirit_command_aura
                            case 'bonus_damage_pct':
                                if (ability.name == 'vengefulspirit_command_aura') {
                                    totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                        }
                    }
                }
                else if (ability.baseDamageReductionPct != undefined) {
                    // nevermore_requiem
                    totalAttribute *= (1 + ability.baseDamageReductionPct()/100);
                }
            }
        }
        return totalAttribute;
    });
    
    self.getBAT = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // troll_warlord_berserkers_rage,alchemist_chemical_rage,lone_druid_true_form,lycan_shapeshift
                            case 'base_attack_time':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    self.getBonusDamage = ko.computed(function () {
        var totalAttribute = 0;
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // broodmother_insatiable_hunger,luna_lunar_blessing,templar_assassin_refraction,templar_assassin_meld,troll_warlord_berserkers_rage,lone_druid_true_form_battle_cry
                            case 'bonus_damage':
                                if (ability.name == 'broodmother_insatiable_hunger' || ability.name == 'luna_lunar_blessing'
                                 || ability.name == 'templar_assassin_refraction' || ability.name == 'templar_assassin_meld'
                                 || ability.name == 'troll_warlord_berserkers_rage' || ability.name == 'lone_druid_true_form_battle_cry') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                            // lycan_howl
                            case 'hero_bonus_damage':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                sources[ability.name] = {
                                    'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level()),
                                    'damageType': 'physical',
                                    'displayname': ability.displayname
                                }
                            break;
                        }
                    }
                    if (ability.name == 'storm_spirit_overload') {
                        totalAttribute += self.getAbilityPropertyValue(ability, 'damage');
                        sources[ability.name] = {
                            'damage': self.getAbilityPropertyValue(ability, 'damage'),
                            'damageType': 'magic',
                            'displayname': ability.displayname
                        }                        
                    }
                }
                else if (ability.bonusDamage != undefined && ability.bonusDamage() != 0) {
                    // nevermore_necromastery,ursa_fury_swipes,ursa_enrage,invoker_alacrity,invoker_exort,elder_titan_ancestral_spirit,spectre_desolate,razor_static_link
                    totalAttribute+=ability.bonusDamage();
                    sources[ability.name] = {
                        'damage': ability.bonusDamage(),
                        'damageType': ability.name == 'spectre_desolate' ? 'pure' : 'physical',
                        'displayname': ability.displayname
                    }
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    });

    self.getBonusDamagePercent = ko.computed(function () {
        var totalAttribute = 0;
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // bloodseeker_bloodrage
                            case 'damage_increase_pct':
                                if (ability.name == 'bloodseeker_bloodrage') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                            // magnataur_empower,vengefulspirit_command_aura,alpha_wolf_command_aura
                            case 'bonus_damage_pct':
                                if (ability.name == 'magnataur_empower' || ability.name == 'vengefulspirit_command_aura' || ability.name == 'alpha_wolf_command_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                            // sven_gods_strength
                            case 'gods_strength_damage':
                                if (ability.name == 'sven_gods_strength' && self.hero != undefined && self.hero.heroId() == 'sven') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                            case 'gods_strength_damage_scepter':
                                if (ability.name == 'sven_gods_strength' && self.hero == undefined) {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                        }
                    }
                }
                /*else if (ability.bonusDamagePct != undefined && ability.bonusDamagePct() != 0) {
                    // bloodseeker_bloodrage
                    // totalAttribute+=ability.bonusDamagePct()/100;
                    // sources[ability.name] = {
                        // 'damage': ability.bonusDamagePct()/100,
                        // 'damageType': 'physical',
                        // 'displayname': ability.displayname
                    // }
                }*/
            }
        }
        return { sources: sources, total: totalAttribute };
    });

    self.getBonusDamageBackstab = ko.computed(function () {
        var totalAttribute1 = 0;
        var totalAttribute2 = 0;
        var sources = [];
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.name == 'riki_backstab') {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // riki_backstab
                            case 'damage_multiplier':
                                totalAttribute1 += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                sources.push({
                                    'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level()),
                                    'damageType': 'physical',
                                    'displayname': ability.displayname
                                });
                            break;
                        }
                    }/*
                    if (ability.bonusDamageBackstab != undefined) {
                        console.log('bonusDamageBackstab');
                        // damage_multiplier
                        totalAttribute2+=ability.bonusDamageBackstab();
                        sources.push({
                            'damage': ability.bonusDamageBackstab(),
                            'damageType': 'physical',
                            'displayname': ability.displayname
                        });
                    }
                    */
                }
            }
        }
        return { sources: sources, total: [totalAttribute1,totalAttribute2] };
    });
    
    self.getBonusDamagePrecisionAura = ko.computed(function () {
        var totalAttribute1 = 0;
        var totalAttribute2 = 0;
        var sources = [];
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.name == 'drow_ranger_trueshot') {
                if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // drow_ranger_trueshot
                            case 'trueshot_ranged_damage':
                                totalAttribute1 += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                sources.push({
                                    'damage': self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100,
                                    'damageType': 'physical',
                                    'displayname': ability.displayname
                                });
                            break;
                        }
                    }
                    if (ability.bonusDamagePrecisionAura != undefined) {
                        // drow_ranger_trueshot
                        totalAttribute2+=ability.bonusDamagePrecisionAura();
                        sources.push({
                            'damage': ability.bonusDamagePrecisionAura(),
                            'damageType': 'physical',
                            'displayname': ability.displayname
                        });
                    }
                }
            }
        }
        return { sources: sources, total: [totalAttribute1,totalAttribute2] };
    });
    
    self.getBonusDamageReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // bane_enfeeble
                            case 'enfeeble_attack_reduction':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
                else if (ability.bonusDamageReduction != undefined) {
                    // rubick_fade_bolt,razor_static_link
                    totalAttribute+=ability.bonusDamageReduction();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getBonusDamageReductionPct = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // medusa_split_shot
                            case 'damage_modifier':
                                totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                            // windrunner_focusfire
                            case 'focusfire_damage_reduction':
                                if (!self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                            case 'focusfire_damage_reduction_scepter':
                                if (self.hasScepter()) {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.getDamageAmplification = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                /*if (!(ability.name in self.abilityData)) {
                    if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                        for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                            var attribute = self._abilities[i].attributes[j];
                            switch(attribute.name) {
                                // bane_enfeeble
                                case 'enfeeble_attack_reduction':
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                break;
                            }
                        }
                    }
                }
                else*/ if (ability.damageAmplification != undefined) {
                        // undying_flesh_golem
                        totalAttribute *= (1 + ability.damageAmplification()/100);
                }
            }
        }
        return totalAttribute;
    });
    
    self.getDamageReduction = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // bloodseeker_bloodrage
                            case 'damage_increase_pct':
                                if (ability.name == 'bloodseeker_bloodrage') {
                                    totalAttribute *= (1 + self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                        }
                    }
                    // kunkka_ghostship
                    if (ability.name == 'kunkka_ghostship') {
                        totalAttribute *= (1 - 50/100);
                    }
                }
                else if (ability.damageReduction != undefined) {
                    // wisp_overcharge,bristleback_bristleback,spectre_dispersion,medusa_mana_shield,ursa_enrage
                    totalAttribute *= (1 + ability.damageReduction()/100);
                }
            }
        }
        return totalAttribute;
    });

    self.getCritSource = ko.computed(function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    switch(ability.name) {
                        // phantom_assassin_coup_de_grace,brewmaster_drunken_brawler,chaos_knight_chaos_strike,lycan_shapeshift,skeleton_king_mortal_strike,juggernaut_blade_dance,alpha_wolf_critical_strike,giant_wolf_critical_strike
                        case 'phantom_assassin_coup_de_grace':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'chance': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_bonus', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        case 'brewmaster_drunken_brawler':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'chance': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_multiplier', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        case 'chaos_knight_chaos_strike':
                        case 'lycan_shapeshift':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'chance': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_multiplier', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        case 'skeleton_king_mortal_strike':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'chance': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_mult', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        case 'juggernaut_blade_dance':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'chance': self.getAbilityAttributeValue(self._abilities[i].attributes, 'blade_dance_crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self._abilities[i].attributes, 'blade_dance_crit_mult', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        case 'alpha_wolf_critical_strike':
                        case 'giant_wolf_critical_strike':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'chance': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_chance', ability.level())/100,
                                    'multiplier': self.getAbilityAttributeValue(self._abilities[i].attributes, 'crit_mult', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                    }
                }
            }
        }
        return sources;
    });    

    self.getCleaveSource = ko.computed(function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    switch(ability.name) {
                        // magnataur_empower
                        case 'magnataur_empower':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'radius': self.getAbilityAttributeValue(self._abilities[i].attributes, 'cleave_radius', ability.level()),
                                    'magnitude': self.getAbilityAttributeValue(self._abilities[i].attributes, 'cleave_damage_pct', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        // sven_great_cleave
                        case 'sven_great_cleave':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'radius': self.getAbilityAttributeValue(self._abilities[i].attributes, 'great_cleave_radius', ability.level()),
                                    'magnitude': self.getAbilityAttributeValue(self._abilities[i].attributes, 'great_cleave_damage', ability.level())/100,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        // kunkka_tidebringer
                        case 'kunkka_tidebringer':
                            if (sources[ability.name] == undefined) {
                                sources[ability.name] = {
                                    'radius': self.getAbilityAttributeValue(self._abilities[i].attributes, 'radius', ability.level()),
                                    'magnitude': 1,
                                    'count': 1,
                                    'displayname': ability.displayname
                                }
                            }
                            else {
                                sources[ability.name].count += 1;
                            }
                        break;
                        // tiny_grow
                        case 'tiny_grow':
                            if (self.hasScepter()) {
                                if (sources[ability.name] == undefined) {
                                    sources[ability.name] = {
                                        'radius': self.getAbilityAttributeValue(self._abilities[i].attributes, 'bonus_cleave_radius_scepter', ability.level()),
                                        'magnitude': self.getAbilityAttributeValue(self._abilities[i].attributes, 'bonus_cleave_damage_scepter', ability.level())/100,
                                        'count': 1,
                                        'displayname': ability.displayname
                                    }
                                }
                                else {
                                    sources[ability.name].count += 1;
                                }
                            }
                        break;
                    }
                }
            }
        }
        return sources;
    });    
    
    self.getCritChance = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // phantom_assassin_coup_de_grace,brewmaster_drunken_brawler,chaos_knight_chaos_strike,lycan_shapeshift,skeleton_king_mortal_strike
                            case 'crit_chance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });            
    
    self.getEvasion = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // phantom_assassin_blur
                            case 'bonus_evasion':
                            // brewmaster_drunken_brawler
                            case 'dodge_chance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getEvasionBacktrack = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // faceless_void_backtrack
                            case 'dodge_chance_pct':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMissChance = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // broodmother_incapacitating_bite,brewmaster_drunken_haze
                            case 'miss_chance':
                            // riki_smoke_screen,keeper_of_the_light_blinding_light,tinker_laser
                            case 'miss_rate':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                        }
                    }
                }
                else if (ability.missChance != undefined) {
                    // night_stalker_crippling_fear
                    totalAttribute*=(1-ability.missChance()/100);
                }
            }
        }
        return totalAttribute;
    });
    
    self.getLifesteal = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // skeleton_king_vampiric_aura
                            case 'vampiric_aura':
                            // broodmother_insatiable_hunger
                            case 'lifesteal_pct':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
                else if (ability.lifesteal != undefined) {
                    // life_stealer_open_wounds
                    totalAttribute+=ability.lifesteal();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMagicResist = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // antimage_spell_shield
                            case 'spell_shield_resistance':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                            // phantom_lancer_phantom_edge
                            case 'magic_resistance_pct':
                                if (ability.name == 'phantom_lancer_phantom_edge') {
                                    totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                            // rubick_null_field
                            case 'magic_damage_reduction_pct':
                                if (ability.name == 'rubick_null_field') {
                                    totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                                }
                            break;
                        }
                    }
                }
                else if (ability.magicResist != undefined) {
                    // huskar_berserkers_blood,viper_corrosive_skin,visage_gravekeepers_cloak
                    totalAttribute *= (1 - ability.magicResist()/100);
                }
            }
        }
        return totalAttribute;
    });

    self.getMagicResistReduction = ko.computed(function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // ancient_apparition_ice_vortex
                            case 'spell_resist_pct':
                            // pugna_decrepify
                            case 'bonus_spell_damage_pct':
                            // skywrath_mage_ancient_seal
                            case 'resist_debuff':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                            // elder_titan_natural_order
                            case 'magic_resistance_pct':
                                totalAttribute *= (1 - self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100);
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMovementSpeedFlat = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // alchemist_chemical_rage
                            case 'bonus_movespeed':
                                if (ability.name == 'alchemist_chemical_rage') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // tiny_grow
                            case 'bonus_movement_speed':
                                if (ability.name == 'tiny_grow') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }
                            break;
                            // troll_warlord_berserkers_rage
                            case 'bonus_move_speed':
                                if (ability.name == 'troll_warlord_berserkers_rage') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                                }                                
                            break;
                            // lone_druid_true_form
                            case 'speed_loss':
                                totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
                else if (ability.movementSpeedFlat != undefined) {
                // dragon_knight_elder_dragon_form
                    totalAttribute+=ability.movementSpeedFlat();
                }
            }
        }
        return totalAttribute;
    });
    
    self.getMovementSpeedPercent = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // abaddon_frostmourne 
                            case 'move_speed_pct':
                            // bounty_hunter_track 
                            case 'bonus_move_speed_pct':
                            // mirana_leap 
                            case 'leap_speedbonus':
                            // sven_warcry 
                            case 'warcry_movespeed':
                            // clinkz_wind_walk
                            case 'move_speed_bonus_pct':
                            // windrunner_windrun
                            case 'movespeed_bonus_pct':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                            break;
                            // broodmother_spin_web,spectre_spectral_dagger
                            case 'bonus_movespeed':
                                if (ability.name == 'broodmother_spin_web' || ability.name == 'spectre_spectral_dagger') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // axe_culling_blade,necronomicon_archer_aoe
                            case 'speed_bonus':
                                if (ability.name == 'axe_culling_blade' || ability.name == 'necronomicon_archer_aoe') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // nyx_assassin_vendetta 
                            case 'movement_speed':
                                if (ability.name == 'nyx_assassin_vendetta') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // spirit_breaker_empowering_haste
                            case 'bonus_movespeed_pct':
                                if (ability.name == 'spirit_breaker_empowering_haste') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // ogre_magi_bloodlust,death_prophet_witchcraft,kobold_taskmaster_speed_aura
                            case 'bonus_movement_speed':
                                if (ability.name == 'ogre_magi_bloodlust' || ability.name == 'death_prophet_witchcraft' || ability.name == 'kobold_taskmaster_speed_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // razor_unstable_current,phantom_lancer_doppelwalk
                            case 'movement_speed_pct':
                                if (ability.name == 'razor_unstable_current' || ability.name == 'phantom_lancer_doppelwalk') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // treant_natures_guise,lone_druid_rabid
                            case 'bonus_move_speed':
                                if (ability.name == 'treant_natures_guise' || ability.name == 'lone_druid_rabid') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // wisp_tether
                            case 'movespeed':
                                if (ability.name == 'wisp_tether') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // kunkka_ghostship,visage_grave_chill
                            case 'movespeed_bonus':
                                if (ability.name == 'kunkka_ghostship' || ability.name == 'visage_grave_chill') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }                                
                            break;
                        }
                    }
                }
                else if (ability.movementSpeedPct != undefined) {
                // axe_battle_hunger,bristleback_warpath,spirit_breaker_greater_bash,lina_fiery_soul,invoker_ghost_walk,invoker_wex,elder_titan_ancestral_spirit
                    totalAttribute+=ability.movementSpeedPct()/100;
                }
            }
        }
        return totalAttribute;
    });

    self.getMovementSpeedPercentReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // crystal_maiden_freezing_field
                            case 'movespeed_slow':
                                if (ability.name == 'crystal_maiden_freezing_field' && !self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            case 'movespeed_slow_scepter':
                                if (ability.name == 'crystal_maiden_freezing_field' && self.hasScepter()) {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // elder_titan_earth_splitter,magnataur_skewer,abaddon_frostmourne 
                            case 'slow_pct':
                                totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                            break;
                            // night_stalker_void,crystal_maiden_crystal_nova,ghost_frost_attack,ogre_magi_frost_armor,polar_furbolg_ursa_warrior_thunder_clap
                            case 'movespeed_slow':
                                if (ability.name != 'crystal_maiden_freezing_field') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // lich_frost_armor,lich_frost_nova,enchantress_enchant
                            case 'slow_movement_speed':
                            // beastmaster_primal_roar
                            case 'slow_movement_speed_pct':
                            // drow_ranger_frost_arrows
                            case 'frost_arrows_movement_speed':
                            // skeleton_king_hellfire_blast
                            case 'blast_slow':
                            // slardar_slithereen_crush
                            case 'crush_extra_slow':
                            // storm_spirit_overload:
                            case 'overload_move_slow':
                            // windrunner_windrun
                            case 'enemy_movespeed_bonus_pct':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                            break;
                            // phantom_assassin_stifling_dagger,tusk_frozen_sigil
                            case 'move_slow':
                                if (ability.name == 'phantom_assassin_stifling_dagger') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                                else if (ability.name == 'tusk_frozen_sigil') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // invoker_ice_wall,medusa_stone_gaze,wisp_tether
                            case 'slow':
                                if (ability.name == 'medusa_stone_gaze') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                                else {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // broodmother_incapacitating_bite,bounty_hunter_jinada,spectre_spectral_dagger,winter_wyvern_arctic_burn
                            case 'bonus_movespeed':
                                if (ability.name == 'broodmother_incapacitating_bite' || ability.name == 'bounty_hunter_jinada' || ability.name == 'winter_wyvern_arctic_burn' || ability.name == 'winter_wyvern_splinter_blast') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                                else if (ability.name == 'spectre_spectral_dagger') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // omniknight_degen_aura
                            case 'speed_bonus':
                                if (ability.name == 'omniknight_degen_aura') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // tidehunter_gush
                            case 'movement_speed':
                                if (ability.name == 'tidehunter_gush') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // pugna_decrepify,chen_penitence
                            case 'bonus_movement_speed':
                                if (ability.name == 'pugna_decrepify' || ability.name == 'chen_penitence') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // ancient_apparition_ice_vortex,phantom_lancer_spirit_lance,skywrath_mage_concussive_shot,faceless_void_time_walk
                            case 'movement_speed_pct':
                                if (ability.name == 'ancient_apparition_ice_vortex' || ability.name == 'phantom_lancer_spirit_lance' || ability.name == 'faceless_void_time_walk') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                                else if (ability.name == 'skywrath_mage_concussive_shot') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // razor_unstable_current
                            case 'slow_amount':
                                if (ability.name == 'razor_unstable_current') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // brewmaster_drunken_haze,brewmaster_thunder_clap,treant_leech_seed
                            case 'movement_slow':
                                if (ability.name == 'brewmaster_drunken_haze' || ability.name == 'brewmaster_thunder_clap') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                                else if (ability.name == 'ursa_earthshock' || ability.name == 'treant_leech_seed') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // skeleton_king_reincarnation
                            case 'movespeed':
                                if (ability.name == 'skeleton_king_reincarnation') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                            // kunkka_torrent,visage_grave_chill
                            case 'movespeed_bonus':
                                if (ability.name == 'kunkka_torrent') {
                                    totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                                else if (ability.name == 'visage_grave_chill') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                        }
                    }
                    if (ability.name == 'satyr_trickster_purge') {
                        totalAttribute -= 80/100;
                    }
                    else if (ability.name == 'enraged_wildkin_tornado') {
                        totalAttribute -= 15/100;
                    }
                }
                else if (ability.movementSpeedPctReduction != undefined) {
                    // axe_battle_hunger,batrider_sticky_napalm,shredder_chakram,meepo_geostrike,life_stealer_open_wounds,
                    // venomancer_poison_sting,viper_viper_strike,viper_corrosive_skin,viper_poison_attack,venomancer_venomous_gale,treant_leech_seed
                    // lich_chain_frost,sniper_shrapnel,centaur_stampede,huskar_life_break,jakiro_dual_breath,meepo_geostrike,sandking_epicenter
                    // earth_spirit_rolling_boulder,invoker_ghost_walk,invoker_ice_wall,elder_titan_earth_splitter
                    // undying_flesh_golem,templar_assassin_psionic_trap,nevermore_requiem,queenofpain_shadow_strike
                    totalAttribute+=ability.movementSpeedPctReduction()/100;
                }
            }
        }
        return totalAttribute;
    });

    self.getTurnRateReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // medusa_stone_gaze
                            case 'slow':
                                if (ability.name == 'medusa_stone_gaze') {
                                    totalAttribute -= self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                                }
                            break;
                        }
                    }
                }
                else if (ability.turnRateReduction != undefined) {
                    // batrider_sticky_napalm
                    totalAttribute+=ability.turnRateReduction()/100;
                }
            }
        }
        return totalAttribute;
    });
    
    self.getVisionRangeNight = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // winter_wyvern_arctic_burn
                            case 'night_vision_bonus':
                            // lycan_shapeshift,luna_lunar_blessing
                            case 'bonus_night_vision':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level());
                            break;
                        }
                    }
                }
                else if (ability.visionnight != undefined) {
                    // 
                    totalAttribute+=ability.visionnight();
                }
            }
        }
        return totalAttribute;
    });

    self.getVisionRangePctReduction = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // night_stalker_darkness
                            case 'blind_percentage':
                                totalAttribute += self.getAbilityAttributeValue(self._abilities[i].attributes, attribute.name, ability.level())/100;
                            break;
                        }
                    }
                }
            }
        }
        return totalAttribute;
    });

    self.setEvasion = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (ability.name == 'windrunner_windrun') {
                    return 1;
                }
            }
        }
        return totalAttribute;
    });
    
    self.setMovementSpeed = ko.computed(function () {
        var MAX_MOVESPEED = 522;
        var MIN_MOVESPEED = 100;
        var totalAttribute = 0;
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (ability.name == 'spirit_breaker_charge_of_darkness') {
                    return self.getAbilityAttributeValue(ability.attributes, 'movement_speed', ability.level());
                }
                if (ability.name == 'dark_seer_surge') {
                    return MAX_MOVESPEED;
                }
                if (ability.name == 'centaur_stampede') {
                    return MAX_MOVESPEED;
                }
                if (ability.name == 'lycan_shapeshift') {
                    return MAX_MOVESPEED;
                }
                if (ability.name == 'lion_voodoo' || ability.name == 'shadow_shaman_voodoo') {
                    return MIN_MOVESPEED;
                }
            }
        }
        return totalAttribute;
    });

    self.getBashSource = function (attacktype) {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // sniper_headshot
                            case 'proc_chance':
                                if (sources[ability.name] == undefined && ability.name == 'sniper_headshot') {
                                    sources[ability.name] = {
                                        'chance': self.getAbilityAttributeValue(ability.attributes, attribute.name, ability.level())/100,
                                        'damage': self.getAbilityPropertyValue(ability, 'damage'),
                                        'count': 1,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                            // slardar_bash
                            case 'chance':
                                if (sources[ability.name] == undefined && ability.name == 'slardar_bash') {
                                    sources[ability.name] = {
                                        'chance': self.getAbilityAttributeValue(ability.attributes, attribute.name, ability.level())/100,
                                        'damage': self.getAbilityAttributeValue(ability.attributes, 'bonus_damage', ability.level()),
                                        'count': 1,
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                        }
                    }
                }
                else if (ability.bashBonusDamage != undefined) {
                    // faceless_void_time_lock
                    if (sources[ability.name] == undefined && ability.name == 'faceless_void_time_lock') {
                        sources[ability.name] = {
                            'chance': ability.bash()/100,
                            'damage': ability.bashBonusDamage(),
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': ability.displayname
                        }
                    }
                    // spirit_breaker_greater_bash
                    if (sources[ability.name] == undefined && ability.name == 'spirit_breaker_greater_bash') {
                        sources[ability.name] = {
                            'chance': ability.bash()/100,
                            'damage': ability.bashBonusDamage()/100,
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': ability.displayname
                        }
                    }
                }
            }
        }

        return sources;
    };
    
    self.getOrbSource = function () {
        var sources = {};
        for (var i = 0; i < self.abilities().length; i++) {
            var ability = self._abilities[i];
            if (ability.level() > 0 && (ability.isActive() || (ability.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') != -1))) {
                if (!(ability.name in self.abilityData)) {
                    for (var j = 0; j < self._abilities[i].attributes.length; j++) {
                        var attribute = self._abilities[i].attributes[j];
                        switch(attribute.name) {
                            // antimage_mana_break
                            case 'mana_per_hit':
                                if (sources[ability.name] == undefined && ability.name == 'antimage_mana_break') {
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(ability.attributes, attribute.name, ability.level()) 
                                                * self.getAbilityAttributeValue(ability.attributes, 'damage_per_burn', ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                            // clinkz_searing_arrows
                            case 'damage_bonus':
                                if (sources[ability.name] == undefined && ability.name == 'clinkz_searing_arrows') {
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(ability.attributes, attribute.name, ability.level()),
                                        'damageType': 'physical',
                                        'displayname': ability.displayname
                                    }
                                }
                            // silencer_glaives_of_wisdom
                            case 'intellect_damage_pct':
                                if (sources[ability.name] == undefined && ability.name == 'silencer_glaives_of_wisdom') {
                                    sources[ability.name] = {
                                        'damage': self.getAbilityAttributeValue(ability.attributes, attribute.name, ability.level())/100 * self.hero.totalInt(),
                                        'damageType': 'pure',
                                        'displayname': ability.displayname
                                    }
                                }
                            break;
                        }
                    }
                }
                else if (ability.bonusDamageOrb != undefined) {
                    // obsidian_destroyer_arcane_orb
                    if (sources[ability.name] == undefined && ability.name == 'obsidian_destroyer_arcane_orb') {
                        sources[ability.name] = {
                            'damage': ability.bonusDamageOrb(),
                            'damageType': 'pure',
                            'displayname': ability.displayname
                        }
                    }
                }
            }
        }
        
        return sources;
    };
    
    self.toggleAbility = function (index, data, event) {
        if (self.abilities()[index()].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') < 0) {
            if (self.abilities()[index()].isActive()) {
                self.abilities()[index()].isActive(false);
            }
            else {
                self.abilities()[index()].isActive(true);
            }
            
            if (self.abilities()[index()].name == 'lycan_shapeshift') {
                self.isShapeShiftActive(self.abilities()[index()].isActive());
            }
        }
    }.bind(this);

    self.toggleAbilityDetail = function (index, data, event) {
        if (self.abilities()[index()].isDetail()) {
            self.abilities()[index()].isDetail(false);
        }
        else {
            self.abilities()[index()].isDetail(true);
        }
    }.bind(this);
    
    self.getAbility = function (abilityName) {
        return self.abilities().find(function(b) {
            return b.name == abilityName;
        });
    }
}

my.prototype.AbilityModel.prototype.levelUpAbility = function (index, data, event, hero) {
    var self = this;
    if (self.abilities()[index()].level() < hero.getAbilityLevelMax(data) && hero.availableSkillPoints() > 0 ) {
        switch(self.abilities()[index()].abilitytype) {
            case 'DOTA_ABILITY_TYPE_ULTIMATE':
                if (hero.heroId() == 'invoker') {
                    if (
                        (self.abilities()[index()].level() == 0) && (parseInt(hero.selectedHeroLevel()) >= 2) ||
                        (self.abilities()[index()].level() == 1) && (parseInt(hero.selectedHeroLevel()) >= 7) ||
                        (self.abilities()[index()].level() == 2) && (parseInt(hero.selectedHeroLevel()) >= 11) ||
                        (self.abilities()[index()].level() == 3) && (parseInt(hero.selectedHeroLevel()) >= 17)
                    ) {
                        self.abilities()[index()].level(self.abilities()[index()].level()+1);
                        hero.skillPointHistory.push(index());
                    }
                }
                else if (hero.heroId() == 'meepo') {
                    if (self.abilities()[index()].level() * 7 + 3 <= parseInt(hero.selectedHeroLevel())) {
                        self.abilities()[index()].level(self.abilities()[index()].level()+1);
                        hero.skillPointHistory.push(index());
                    }
                }
                else {
                    if ((self.abilities()[index()].level()+1) * 5 + 1 <= parseInt(hero.selectedHeroLevel())) {
                        self.abilities()[index()].level(self.abilities()[index()].level()+1);
                        hero.skillPointHistory.push(index());
                    }
                }
            break;
            default:
                if (self.abilities()[index()].level() * 2 + 1 <= parseInt(hero.selectedHeroLevel())) {
                    self.abilities()[index()].level(self.abilities()[index()].level()+1);
                    hero.skillPointHistory.push(index());
                }
            break;
        }
        switch (self.abilities()[index()].name) {
            case 'beastmaster_call_of_the_wild':
            case 'chen_test_of_faith':
            case 'morphling_morph_agi':
            case 'shadow_demon_shadow_poison':
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
            break;
            case 'morphling_morph_str':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
            case 'keeper_of_the_light_spirit_form':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() - 2].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze1':
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
                self.abilities()[index() + 2].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze2':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() + 1].level(self.abilities()[index()].level());
            break;
            case 'nevermore_shadowraze3':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
                self.abilities()[index() - 2].level(self.abilities()[index()].level());
            break;
            case 'ember_spirit_fire_remnant':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
            case 'lone_druid_true_form':
                self.abilities()[index() - 1].level(self.abilities()[index()].level());
            break;
        }
    }
};
my.prototype.AbilityModel.prototype.levelDownAbility = function (index, data, event, hero) {
    var i = ko.utils.unwrapObservable(index);
    var self = this;
    if (self.abilities()[i].level() > 0) {
        self.abilities()[i].level(self.abilities()[i].level() - 1);
        hero.skillPointHistory.splice(hero.skillPointHistory().lastIndexOf(i), 1);
        switch (self.abilities()[i].name) {
            case 'beastmaster_call_of_the_wild':
            case 'chen_test_of_faith':
            case 'morphling_morph_agi':
            case 'shadow_demon_shadow_poison':
                self.abilities()[i + 1].level(self.abilities()[i].level());
            break;
            case 'morphling_morph_str':
                self.abilities()[i - 1].level(self.abilities()[i].level());
            break;
            case 'keeper_of_the_light_spirit_form':
                self.abilities()[i - 1].level(self.abilities()[i].level());
                self.abilities()[i - 2].level(self.abilities()[i].level());
            break;
            case 'nevermore_shadowraze1':
                self.abilities()[i + 1].level(self.abilities()[i].level());
                self.abilities()[i + 2].level(self.abilities()[i].level());
            break;
            case 'nevermore_shadowraze2':
                self.abilities()[i - 1].level(self.abilities()[i].level());
                self.abilities()[i + 1].level(self.abilities()[i].level());
            break;
            case 'nevermore_shadowraze3':
                self.abilities()[i - 1].level(self.abilities()[i].level());
                self.abilities()[i - 2].level(self.abilities()[i].level());
            break;
            case 'ember_spirit_fire_remnant':
                self.abilities()[i - 1].level(self.abilities()[i].level());
            break;
            case 'lone_druid_true_form':
                self.abilities()[i - 1].level(self.abilities()[i].level());
            break;
        }
    }
};
my.prototype.AbilityModel.prototype.getAbilityAttributeValue = function (attributes, attributeName, level) {
    for (var i=0; i < attributes.length; i++) {
        if (attributes[i].name == attributeName) {
            if (level == 0) {
                return parseFloat(attributes[i].value[0]);
            }
            else if (level > attributes[i].value.length) {
                return parseFloat(attributes[i].value[0]);
            }
            else {
                return parseFloat(attributes[i].value[level-1]);
            }
        }
    }
}
my.prototype.AbilityModel.prototype.getAbilityAttributeTooltip = function (attributes, attributeName) {
    for (var i=0; i<attributes.length; i++) {
        if (attributes[i].name == attributeName) {
            if (attributes[i].hasOwnProperty('tooltip')) {
                var d = attributes[i].tooltip.replace(/\\n/g, '');
                return d;
            }
            else {
                return '';
            }
        }
    }
    return '';
}
},{"./herocalc_core":4,"./herocalc_knockout":10}],2:[function(require,module,exports){
'use strict';
    
var my = require("./herocalc_core");

my.prototype.abilityData = {
    'alchemist_acid_spray': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'armor_reduction',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'armorReduction'
        }
    ],
    'alchemist_unstable_concoction': [
        {
            label: 'Brew Time',
            controlType: 'input'
        },
        {
            attributeName: 'max_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/5;
            }
        },
        {
            attributeName: 'max_stun',
            label: 'Total Stun',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/5;
            }
        }
    ],
    'ancient_apparition_cold_feet': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'stun_duration',
            label: 'Total Stun',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        }
    ],
    'ancient_apparition_ice_blast': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'dot_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')+v*a;
            }
        }
    ],
    'antimage_mana_void': [
        {
            label: 'Enemy Missing Mana',
            controlType: 'input'
        },
        {
            attributeName: 'mana_void_damage_per_mana',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'axe_battle_hunger': [
        {
            label: 'Battle Hungered Enemies',
            controlType: 'input'
        },
        {
            attributeName: 'speed_bonus',
            label: 'Movement Speed Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'slow',
            label: 'Movement Speed Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'bane_nightmare': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'bane_fiends_grip': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Mana',
            controlType: 'input'
        },
        {
            attributeName: 'fiend_grip_damage',
            label: 'Total Damage',
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    return v[0]*abilityModel.getAbilityAttributeValue(ability.attributes, 'fiend_grip_damage_scepter',ability.level());
                }
                else {
                    return v[0]*a;
                }
            }
        },
        {
            attributeName: 'fiend_grip_mana_drain',
            label: 'Total Mana Drain',
            controlType: 'text',
            controls: [0,1],
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    return v[0]*v[1]*abilityModel.getAbilityAttributeValue(ability.attributes, 'fiend_grip_mana_drain_scepter',ability.level())/100;
                }
                else {
                    return v[0]*v[1]*a/100;
                }
            }
        }
    ],
    'batrider_sticky_napalm': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Bonus Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        },
        {
            attributeName: 'movement_speed_pct',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'turn_rate_pct',
            label: 'Enemy Turn Rate Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'turnRateReduction'
        }
    ],
    'batrider_firefly': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'bloodseeker_rupture': [
        {
            label: 'Enemy Distance Traveled',
            controlType: 'input'
        },
        {
            attributeName: 'movement_damage_pct',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage') + v*a/100;
            }
        }
    ],
    'bristleback_viscous_nasal_goo': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'armor_per_stack',
            label: 'Enemy Armor Reduction',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'armorReduction'
        },
        {
            attributeName: 'move_slow_per_stack',
            label: '%SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -(abilityModel.getAbilityAttributeValue(ability.attributes, 'base_move_slow',0)+v*a);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'bristleback_quill_spray': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'quill_stack_damage',
            label: 'DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var total = abilityModel.getAbilityAttributeValue(ability.attributes, 'quill_base_damage',ability.level())+v*a,
                damage_cap = abilityModel.getAbilityAttributeValue(ability.attributes, 'max_damage',0);
                if (total > damage_cap) {
                    total = damage_cap;
                }
                return total;
            }
        }
    ],
    'bristleback_bristleback': [
        {
            label: 'Damage From',
            controlType: 'radio',
            controlValueType: 'string',
            controlOptions: [
                {text: 'Back', value: 'back'},
                {text: 'Side', value: 'side'}
            ]
        },
        {
            attributeName: 'back_damage_reduction',
            label: '%DAMAGE REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var ability = abilityModel.abilities().find(function(b) {
                    return b.name == 'bristleback_bristleback';
                });
                if (v == 'back') {
                    var total = abilityModel.getAbilityAttributeValue(ability.attributes, 'back_damage_reduction', ability.level());
                }
                else {
                    var total = abilityModel.getAbilityAttributeValue(ability.attributes, 'side_damage_reduction', ability.level());
                }
                return -total;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'bristleback_warpath': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_stack',
            label: 'BONUS DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v < 1) {
                    return 0;
                }
                else {
                    return abilityModel.getAbilityAttributeValue(ability.attributes, 'base_damage',ability.level())+(v-1)*a;
                }
            }
        },
        {
            attributeName: 'move_speed_per_stack',
            label: '%MOVEMENT:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v < 1) {
                    return 0;
                }
                else {
                    return abilityModel.getAbilityAttributeValue(ability.attributes, 'base_move_speed',ability.level())+(v-1)*a;
                }
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'centaur_return': [
        {
            label: 'Strength',
            controlType: 'input'
        },
        {
            attributeName: 'strength_pct',
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'return_damage',ability.level()) + v*a/100;
            }
        }
    ],
    'centaur_stampede': [
        {
            label: 'Strength',
            controlType: 'input'
        },
        {
            attributeName: 'strength_damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'clinkz_death_pact': [
        {
            label: 'Consumed Unit HP',
            controlType: 'input'
        },
        {
            attributeName: 'damage_gain_pct',
            label: 'BASE DAMAGE GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'baseDamage'
        },
        {
            attributeName: 'health_gain_pct',
            label: 'HEALTH GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusHealth'
        }
    ],
    'crystal_maiden_frostbite': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'dark_seer_ion_shell': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'dazzle_shadow_wave': [
        {
            label: 'Targets',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'dazzle_weave': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'armor_per_second',
            label: 'ARMOR',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'armor'
        },
        {
            attributeName: 'armor_per_second',
            label: 'ARMOR REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'armorReduction'
        }
    ],
    'death_prophet_exorcism': [
        {
            label: 'Damage Dealt',
            controlType: 'input'
        },
        {
            attributeName: 'heal_percent',
            label: 'Total Armor',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        }
    ],
    'disruptor_static_storm': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damagevalue = 0.25 * (130 + 40 * ability.level()) * (1/20),
                mult = (v*4)*((v*4)+1)/2;
                return damagevalue * mult;
            }
        }
    ],
    'doom_bringer_scorched_earth': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'damage_per_second',
            label: 'HP REGEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'healthregen'
        }
    ],
    'doom_bringer_doom': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    return v*abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_scepter',ability.level());
                }
                else {
                    return v*a;
                }
            }
        }
    ],
    'dragon_knight_elder_dragon_form': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_attack_range',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackrange'
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedFlat'
        }
    ],
    'drow_ranger_trueshot': [
        {
            label: 'Drow\'s Agility',
            controlType: 'input',
            display: 'buff'
        },
        {
            attributeName: 'trueshot_ranged_damage',
            label: 'DAMAGE BONUS:',
            ignoreTooltip: true,
            controlType: 'text',
            display: 'buff',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusDamagePrecisionAura'
        }
    ],
    'earth_spirit_rolling_boulder': [
        {
            label: 'Using Stone',
            controlType: 'checkbox'
        },
        {
            attributeName: 'move_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return -a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'earthshaker_enchant_totem': [
        {
            label: 'Activated',
            controlType: 'checkbox'
        },
        {
            attributeName: 'totem_damage_percentage',
            label: 'DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'baseDamageMultiplier'
        }
    ],
    'earthshaker_echo_slam': [
        {
            label: 'Enemies in Range',
            controlType: 'input'
        },
        {
            attributeName: 'echo_slam_echo_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'elder_titan_ancestral_spirit': [
        {
            label: 'HEROES PASSED THROUGH',
            controlType: 'input'
        },
        {
            label: 'CREEPS PASSED THROUGH',
            controlType: 'input'
        },
        {
            attributeName: 'damage_creeps',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_heroes',ability.level()) + v[1]*a;
            },
            returnProperty: 'bonusDamage'
        },
        {
            attributeName: 'move_pct_creeps',
            label: '%BONUS SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*abilityModel.getAbilityAttributeValue(ability.attributes, 'move_pct_heroes',ability.level()) + v[1]*a;
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'elder_titan_earth_splitter': [
        {
            label: 'Enemy Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'damage_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        },
        {
            attributeName: 'slow_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'enchantress_natures_attendants': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'heal',
            label: 'HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'wisp_count',ability.level())*v*a;
            }
        }
    ],
    'enigma_malefice': [
        {
            label: 'Hits',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'stun_duration',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'enigma_midnight_pulse': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'damage_percent',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        }
    ],
    'enigma_black_hole': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'far_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'near_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'faceless_void_time_lock': [
        {
            label: 'In Chronosphere',
            controlType: 'checkbox'
        },
        {
            attributeName: 'bonus_damage',
            label: '%MOVESPEED AS DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a*2;
                }
                else {
                    return a;
                }
            },
            returnProperty: 'bashBonusDamage'
        },
        {
            attributeName: 'duration',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        },
        {
            attributeName: 'chance_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bash'
        }
    ],
    'gyrocopter_rocket_barrage': [
        {
            label: 'Rockets',
            controlType: 'input'
        },
        {
            attributeName: 'rockets_per_second',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
/*        'gyrocopter_homing_missile': [
        {
            label: 'Distance Traveled',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'gyrocopter_flak_cannon': [
        {
            label: 'Attacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],*/
    'huskar_burning_spear': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'health_cost',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'huskar_berserkers_blood': [
        {
            label: '%HP',
            controlType: 'input'
        },
        {
            attributeName: 'hp_threshold_max',
            label: 'Health at given %HP:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return parent.health()*v/100;
            }
        },
        {
            attributeName: 'hp_threshold_max',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            }
        },
        {
            attributeName: 'maximum_resistance',
            label: 'MAGIC RESISTANCE BONUS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var v = Math.min(v, 100);
                v = Math.max(v, 10);
                var hp_threshold_max = abilityModel.getAbilityAttributeValue(ability.attributes, 'hp_threshold_max',0);
                var d = 100 - hp_threshold_max;
                var c = (v - hp_threshold_max) / d;
                c = 1 - c;
                return c*a;
            },
            returnProperty: 'magicResist'
        },
        {
            attributeName: 'maximum_attack_speed',
            label: 'ATTACK SPEED BONUS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var v = Math.min(v, 100);
                v = Math.max(v, 10);
                var hp_threshold_max = abilityModel.getAbilityAttributeValue(ability.attributes, 'hp_threshold_max',0);
                var d = 100 - hp_threshold_max;
                var c = (v - hp_threshold_max) / d;
                c = 1 - c;
                return c*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'huskar_life_break': [
        {
            label: 'Enemy Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'health_damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            label: 'Huskar Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'health_cost_percent',
            label: 'DAMAGE TAKEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'movespeed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'invoker_quas': [
        {
            label: 'Instances',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_strength',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'health_regen_per_instance',
            label: 'HP REGEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'healthregen'
        }
    ],
    'invoker_wex': [
        {
            label: 'Instances',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_agility',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'move_speed_per_instance',
            label: '%MOVE SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'attack_speed_per_instance',
            label: '%ATTACK SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'invoker_exort': [
        {
            label: 'Instances',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_intelligence',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusInt'
        },
        {
            attributeName: 'bonus_damage_per_instance',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'invoker_ghost_walk': [
        {
            label: 'Quas Level',
            controlType: 'input'
        },
        {
            attributeName: 'enemy_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'enemy_slow',v);
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            label: 'Wex Level',
            controlType: 'input',
            display: 'ability'
        },
        {
            attributeName: 'self_slow',
            label: 'Total Damage',
            controlType: 'text',
            display: 'ability',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'self_slow',v);
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'invoker_alacrity': [
        {
            label: 'Wex Level',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'bonus_attack_speed',v);
            },
            returnProperty: 'attackspeed'
        },
        {
            label: 'Exort Level',
            controlType: 'input',
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'bonus_damage',v);
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'invoker_ice_wall': [
        {
            label: 'Quas Level',
            controlType: 'input'
        },
        {
            attributeName: 'slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'slow',v);
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            label: 'Exort Level',
            controlType: 'input',
            display: 'ability'
        },
        {
            label: 'Duration',
            controlType: 'input',
            display: 'ability'
        },
        {
            attributeName: 'damage_per_second',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            display: 'ability',
            controls: [1,2],
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v[0] == 0) {
                    return 0;
                }
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_per_second',v[0])*v[1];
            }
        }
    ],
    'jakiro_dual_breath': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*2 + 
                abilityModel.getAbilityAttributeValue(ability.attributes, 'burn_damage',ability.level())*v;
            }
        },
        {
            attributeName: 'slow_movement_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'slow_attack_speed_pct',
            label: '%ATTACK SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'jakiro_liquid_fire': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_attack_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'jakiro_macropyre': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'juggernaut_blade_fury': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'juggernaut_healing_ward': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'healing_ward_heal_amount',
            label: 'HEAL OVER TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        }
    ],
    'juggernaut_omni_slash': [
        {
            label: 'Jumps',
            controlType: 'input'
        },
        {
            label: 'MIN DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'omni_slash_damage',1)*v;
            }
        },
        {
            label: 'MAX DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'omni_slash_damage',2)*v;
            }
        }
    ],
    'keeper_of_the_light_illuminate': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'keeper_of_the_light_mana_leak': [
        {
            label: 'Distance Moved',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Mana',
            controlType: 'input'
        },
        {
            attributeName: 'mana_leak_pct',
            label: 'MANA LEAKED:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]/100*v[1]*a/100;
            }
        }
    ],
    'legion_commander_duel': [
        {
            label: 'Duel Wins',
            controlType: 'input'
        },
        {
            attributeName: 'reward_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'leshrac_pulse_nova': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_cost_per_second',
            label: 'MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'lich_chain_frost': [
        {
            label: 'Bounce Hits',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'slow_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'life_stealer_feast': [
        {
            label: 'Enemy Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'hp_leech_percent',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'life_stealer_open_wounds': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'heal_percent',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'lifesteal'
        },
        {
            attributeName: 'slow_steps',
            label: '%SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'slow_steps',v+1);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'lina_fiery_soul': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'fiery_soul_move_speed_bonus',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'fiery_soul_attack_speed_bonus',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'lion_mana_drain': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'mana_per_second',
            label: 'MANA DRAINED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'luna_moon_glaive': [
        {
            label: 'Damage',
            controlType: 'input'
        },
        {
            attributeName: 'damage_reduction_percent',
            label: 'BOUNCE DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var result = [];
                for (var i = 1; i < 6; i++) {
                    result.push((v*Math.pow(a/100,i)).toFixed(2))
                }
                return result.join('<br>');
            }
        }
    ],
    'luna_eclipse': [
        {
            label: 'Beam Count',
            controlType: 'input'
        },
        {
            attributeName: 'beams',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var lucentBeamAbility = abilityModel.abilities().find(function(b) {
                    return b.name == 'luna_lucent_beam';
                });
                if (lucentBeamAbility.level() == 0) return 0;
                var damage = abilityModel.getAbilityPropertyValue(lucentBeamAbility, 'damage');
                return v*damage;
            }
        }
    ],
    'medusa_mystic_snake': [
        {
            label: 'Jump Count',
            controlType: 'input'
        },
        {
            attributeName: 'snake_damage',
            label: 'Damage Per Jump:',
            ignoreTooltip: true,
            controlType: 'method',
            display: 'none',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var snake_jumps = abilityModel.getAbilityAttributeValue(ability.attributes, 'snake_jumps',ability.level());
                var snake_scale = abilityModel.getAbilityAttributeValue(ability.attributes, 'snake_scale',0);
                var damage = [];
                for (var i = 0; i < snake_jumps; i++) {
                    damage.push(a + a * i * snake_scale/100);
                }
                return damage;
            }
        },
        {
            attributeName: 'snake_damage',
            label: 'Damage Per Jump:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[1].join(' / ');
            }
        },
        {
            attributeName: 'snake_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[1].slice(0, v[0]).reduce(function (memo, o) { return memo + o }, 0);
            }
        },
        {
            attributeName: 'snake_damage',
            label: 'Max Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[1].reduce(function (memo, o) { return memo + o }, 0);
            }
        }
    ],
    'medusa_mana_shield': [
        {
            label: 'Damage',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_mana',
            label: 'MANA USED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return (v/a).toFixed(2);
            }
        },
        {
            attributeName: 'absorption_tooltip',
            label: '%DAMAGE REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'meepo_poof': [
        {
            label: 'Meepo Count',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'meepo_geostrike': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            attributeName: 'slow',
            label: '%SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'slow',ability.level())*v;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'mirana_arrow': [
        {
            label: 'Arrow Travel Distance',
            controlType: 'input'
        },
        {
            attributeName: 'arrow_max_stun',
            label: 'STUN DURATION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var arrow_min_stun = abilityModel.getAbilityAttributeValue(ability.attributes, 'arrow_min_stun',0);
                var arrow_max_stunrange = abilityModel.getAbilityAttributeValue(ability.attributes, 'arrow_max_stunrange',0);
                var scale = Math.min(v, arrow_max_stunrange) / arrow_max_stunrange;
                return Math.max(arrow_min_stun, Math.floor(a * scale / 0.1) * 0.1);
            }
        },
        {
            attributeName: 'arrow_bonus_damage',
            label: 'TOTAL DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var ability = ability;
                var damage = ability.damage()[ability.level()-1];
                var arrow_max_stunrange = abilityModel.getAbilityAttributeValue(ability.attributes, 'arrow_max_stunrange',0);
                var scale = Math.min(v, arrow_max_stunrange) / arrow_max_stunrange;
                var bonus_damage = Math.floor(a * scale / 2.8) * 2.8;
                return damage + ' + ' + bonus_damage + ' = ' + (damage + bonus_damage);
            }
        }
    ],
    'morphling_morph_agi': [
        {
            label: 'Shifts',
            controlType: 'input'
        },
        {
            attributeName: 'points_per_tick',
            label: 'AGI SHIFT GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'points_per_tick',
            label: 'STR SHIFT LOSS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'bonus_attributes',
            label: 'SHIFT TIME:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusAgility2'
        },
        {
            attributeName: 'morph_cooldown',
            label: 'SHIFT TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_cost',
            label: 'SHIFT MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a*abilityModel.getAbilityAttributeValue(ability.attributes, 'morph_cooldown',ability.level());
            }
        }
    ],
    'morphling_morph_str': [
        {
            label: 'Shifts',
            controlType: 'input'
        },
        {
            attributeName: 'points_per_tick',
            label: 'STR SHIFT GAIN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'points_per_tick',
            label: 'AGI SHIFT LOSS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'bonus_attributes',
            label: 'SHIFT TIME:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusStrength2'
        },
        {
            attributeName: 'morph_cooldown',
            label: 'SHIFT TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_cost',
            label: 'SHIFT MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a*abilityModel.getAbilityAttributeValue(ability.attributes, 'morph_cooldown',ability.level());
            }
        }
    ],
    'furion_wrath_of_nature': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'necrolyte_heartstopper_aura': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Enemy Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'aura_damage',
            label: 'HEALTH LOST:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        }
    ],
    'necrolyte_sadist': [
        {
            label: 'Unit Kills',
            controlType: 'input'
        },
        {
            label: 'Hero Kills',
            controlType: 'input'
        },
        {
            attributeName: 'health_regen',
            label: 'Total Damage',
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var hero_multiplier = abilityModel.getAbilityAttributeValue(ability.attributes, 'hero_multiplier',0)
                return (v[0]+v[1]*hero_multiplier)*a;
            },
            returnProperty: 'healthregen'
        },
        {
            attributeName: 'mana_regen',
            label: 'Total Damage',
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var hero_multiplier = abilityModel.getAbilityAttributeValue(ability.attributes, 'hero_multiplier',0)
                return (v[0]+v[1]*hero_multiplier)*a;
            },
            returnProperty: 'manaregen'
        }
    ],
    'night_stalker_crippling_fear': [
        {
            label: 'Is Night',
            controlType: 'checkbox'
        },
        {
            attributeName: 'miss_rate_night',
            label: '%CHANCE TO MISS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return abilityModel.getAbilityAttributeValue(ability.attributes, 'miss_rate_night',ability.level());
                }
                else {
                    return abilityModel.getAbilityAttributeValue(ability.attributes, 'miss_rate_day',ability.level());
                }
            },
            returnProperty: 'missChance'
        }
    ],    
    'night_stalker_hunter_in_the_night': [
        {
            label: 'Is Night',
            controlType: 'checkbox'
        },
        {
            attributeName: 'bonus_attack_speed_night',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'attackspeed'
        },
        {
            attributeName: 'bonus_movement_speed_pct_night',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'movementSpeedPct'
        }
    ],    
    'obsidian_destroyer_arcane_orb': [
        {
            label: 'Current Mana',
            controlType: 'input'
        },
        {
            attributeName: 'mana_pool_damage_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            },
            returnProperty: 'bonusDamageOrb'
        }
    ],
    'ogre_magi_ignite': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'burn_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'pudge_rot': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            attributeName: 'rot_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'pudge_flesh_heap': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'flesh_heap_strength_buff_amount',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusStrength'
        },
        {
            attributeName: 'flesh_heap_magic_resist',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'magicResist'
        }
    ],
    'pudge_dismember': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'dismember_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'pugna_nether_ward': [
        {
            label: 'Enemy Mana Spent',
            controlType: 'input'
        },
        {
            attributeName: 'mana_multiplier',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'mana_regen',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'manaregenreduction'
        }
    ],
    'pugna_life_drain': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'health_drain',
            label: 'HEALTH DRAINED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'queenofpain_shadow_strike': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'movement_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'strike_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var duration_damage = abilityModel.getAbilityAttributeValue(ability.attributes, 'duration_damage',ability.level());
                var ticks = Math.floor(v/3);
                return a + duration_damage * ticks;
            }
        }
    ],
    'razor_plasma_field': [
        {
            label: 'Distance',
            controlType: 'input'
        },
        {
            attributeName: 'radius',
            label: 'MIN DISTANCE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return 200;
            }
        },
        {
            attributeName: 'radius',
            label: 'MAX DISTANCE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return 200 + a;
            }
        },
        {
            attributeName: 'radius',
            label: 'Instance Damage',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var max_radius = a + 200;
                var scale = (Math.min(Math.max(v, 200), max_radius) - 200) / (max_radius - 200);
                var damage_min = abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_min',ability.level());
                var damage_max = abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_max',ability.level());
                return damage_min + (damage_max - damage_min) * scale;
            }
        }
    ],
    'razor_static_link': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'drain_length',
            label: 'Damage Drained:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var tick_duration = Math.floor(v * 4) + 1;
                var ticks = Math.min(a * 4 + 1, tick_duration);
                var drain_rate = abilityModel.getAbilityAttributeValue(ability.attributes, 'drain_rate',ability.level());
                return ticks * drain_rate/4;
            },
            returnProperty: 'bonusDamage'
        },
        {
            attributeName: 'drain_length',
            label: 'Enemy Damage Lost:',
            ignoreTooltip: true,
            controlType: 'text',
            display: 'hidden',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var tick_duration = Math.floor(v * 4) + 1;
                var ticks = Math.min(a * 4 + 1, tick_duration);
                var drain_rate = abilityModel.getAbilityAttributeValue(ability.attributes, 'drain_rate',ability.level());
                return ticks * drain_rate/4;
            },
            returnProperty: 'bonusDamageReduction'
        }
    ],
    'razor_eye_of_the_storm': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'rubick_fade_bolt': [
        {
            label: 'Jumps',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a * (1 - v*abilityModel.getAbilityAttributeValue(ability.attributes, 'jump_damage_reduction_pct',ability.level())/100);
            }
        },
        {
            attributeName: 'hero_attack_damage_reduction',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'bonusDamageReduction'
        }
    ],
    'sandking_sand_storm': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'sandking_epicenter': [
        {
            label: 'Pulses',
            controlType: 'input'
        },
        {
            attributeName: 'epicenter_damage',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'epicenter_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'epicenter_slow_as',
            label: '%ATTACK SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'shadow_demon_shadow_poison': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'stack_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var stackmult = [1,2,4,8];
                if (v > 4) {
                    return a * stackmult[3] + 50 * (v - 4);
                }
                else if (v <= 0) {
                    return 0
                }
                else {
                    return a * stackmult[v-1]
                }
            }
        }
    ],
    'nevermore_necromastery': [
        {
            label: 'Souls',
            controlType: 'input'
        },
        {
            attributeName: 'necromastery_damage_per_soul',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'nevermore_requiem': [
        {
            label: 'Line Hit Count',
            controlType: 'input'
        },
        {
            attributeName: 'requiem_reduction_damage',
            label: 'Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            label: 'Return Line Hit Count (Scepter)',
            controlType: 'input'
        },
        {
            attributeName: 'requiem_damage_pct_scepter',
            label: 'Damage/Heal:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v*a/100;
            }
        },
        {
            attributeName: 'requiem_damage_pct_scepter',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return damage*v[0] + damage*v[1]*a/100;
            }
        },
        {
            attributeName: 'requiem_reduction_damage',
            label: '%DAMAGE REDUCTION:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'baseDamageReductionPct'
        },
        {
            attributeName: 'requiem_reduction_ms',
            label: '%DAMAGE REDUCTION:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'shadow_shaman_shackles': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'silencer_curse_of_the_silent': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return Math.floor(v)*a;
            }
        },
        {
            attributeName: 'movespeed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
/*        'silencer_glaives_of_wisdom': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],*/
    'skywrath_mage_mystic_flare': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'slark_essence_shift': [
        {
            label: 'Attacks',
            controlType: 'input'
        },
        {
            attributeName: 'agi_gain',
            label: 'Total Damage',
            controlType: 'text',
            display: 'ability',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'bonusAgility'
        },
        {
            attributeName: 'stat_loss',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'bonusAllStatsReduction'
        }
    ],
    'slark_shadow_dance': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_regen_pct',
            label: 'TOTAL HEALTH REGENERATED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*parent.health()*a/100;
            }
        },
        {
            attributeName: 'bonus_regen_pct',
            label: 'HEALTH GAINED PER SECOND:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return parent.health()*a/100;
            },
            returnProperty: 'healthregen'
        },
        {
            attributeName: 'bonus_movement_speed',
            label: '%MOVE SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPct'
        }
    ],
    'sniper_shrapnel': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        },
        {
            attributeName: 'building_damage',
            label: 'BUILDING DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'slow_movement_speed',
            label: 'Enemy Movement Speed Slow',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'spectre_desolate': [
        {
            label: 'Enemy Alone',
            controlType: 'checkbox'
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'spectre_dispersion': [
        {
            label: 'Damage Taken',
            controlType: 'input'
        },
        {
            attributeName: 'damage_reflection_pct',
            label: 'DAMAGE REFLECTED:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'damageReduction'
        },
        {
            attributeName: 'damage_reflection_pct',
            label: 'DAMAGE REFLECTED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        }
    ],
    'storm_spirit_ball_lightning': [
        {
            label: 'MAX MANA',
            controlType: 'input'
        },
        {
            label: 'Distance',
            controlType: 'input'
        },
        {
            attributeName: 'ball_lightning_initial_mana_base',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0, 1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')/100*v[1];
            }
        },
        {
            attributeName: 'ball_lightning_initial_mana_base',
            label: 'FLAT MANA COST:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var distance_intervals = Math.floor(v[1]/100);
                var travel_cost_base = abilityModel.getAbilityAttributeValue(ability.attributes, 'ball_lightning_travel_cost_base',0);
                return a + distance_intervals * travel_cost_base;
            }
        },
        {
            attributeName: 'ball_lightning_initial_mana_percentage',
            label: '%MAX MANA COST:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var distance_intervals = Math.floor(v[1]/100);
                var travel_cost_percent = abilityModel.getAbilityAttributeValue(ability.attributes, 'ball_lightning_travel_cost_percent',0);
                return a + distance_intervals * travel_cost_percent;
            }
        },
        {
            attributeName: 'ball_lightning_initial_mana_base',
            label: 'TOTAL MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0, 1, 2, 3],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[2] + ' + ' + (v[3]/100 * v[0]) + ' (' + v[3] + '% of max) = ' + (v[2] + v[3]/100 * v[0]);
            }
        }
    ],
    'templar_assassin_psionic_trap': [
        {
            label: 'Charge Time',
            controlType: 'input'
        },
        {
            attributeName: 'movement_speed_min_tooltip',
            label: '%MOVE SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var max_slow = abilityModel.getAbilityAttributeValue(ability.attributes, 'movement_speed_max_tooltip',0);
                var slow_per_tick = (max_slow - a)/40;
                return -(a + slow_per_tick * Math.min(Math.max(0, v), 4) * 10);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'shredder_reactive_armor': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_armor',
            label: 'Total Armor Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'armor'
        },
        {
            attributeName: 'bonus_hp_regen',
            label: 'Total HP Regen Bonus',
            controlType: 'text',
            noLevel: true,
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'healthregen'
        }
    ],
    'shredder_chakram': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_second',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_interval',0);
                var ticks = Math.floor(v / interval);
                return a*interval*ticks;
            }
        },
        {
            attributeName: 'mana_per_second',
            label: 'MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes, 'damage_interval',0);
                var ticks = Math.floor(v / interval);
                return a*interval*ticks;
            }
        },
        {
            label: 'ENEMY %HP',
            controlType: 'input'
        },
        {
            attributeName: 'slow',
            label: 'MANA COST:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var ticks = 20 - Math.floor(Math.min(Math.max(v-1, 0), 99) / 5);
                return -a*ticks;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'spirit_breaker_greater_bash': [
        {
            label: 'Bash Proc',
            controlType: 'checkbox'
        },
        {
            attributeName: 'damage',
            label: '%MOVESPEED AS DAMAGE',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'bashBonusDamage'
        },
        {
            attributeName: 'bonus_movespeed_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (v) {
                    return a;
                }
                else {
                    return 0;
                }
            },
            returnProperty: 'movementSpeedPct'
        },
        {
            attributeName: 'chance_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a
            },
            returnProperty: 'bash'
        }
    ],
    'techies_land_mines': [
        {
            label: 'Number of Mines',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'damage',
            label: 'AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var phys_reduction = parent.enemy().totalArmorPhysicalReduction(),
                    magic_reduction = parent.enemy().totalMagicResistance();
                return (v * a * (1 - phys_reduction / 100) * (1 - magic_reduction / 100)).toFixed(2);
            }
        }
    ],
    'techies_suicide': [
        {
            attributeName: 'damage',
            label: 'FULL DAMAGE AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var phys_reduction = parent.enemy().totalArmorPhysicalReduction(),
                    magic_reduction = parent.enemy().totalMagicResistance();
                return (a * (1 - phys_reduction / 100) * (1 - magic_reduction / 100)).toFixed(2);
            }
        },
        {
            attributeName: 'partial_damage',
            label: 'PARTIAL DAMAGE AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var phys_reduction = parent.enemy().totalArmorPhysicalReduction(),
                    magic_reduction = parent.enemy().totalMagicResistance();
                return (a * (1 - phys_reduction / 100) * (1 - magic_reduction / 100)).toFixed(2);
            }
        },
        {
            attributeName: 'damage',
            label: 'RESPAWN TIME:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return (parent.respawnTime() / 2).toFixed(0) + ' seconds';
            }
        }
    ],
    'techies_remote_mines': [
        {
            label: 'Number of Mines',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'damage',
            label: 'AFTER REDUCTIONS:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var magic_reduction = parent.enemy().totalMagicResistance();
                return (v * a * (1 - magic_reduction / 100)).toFixed(2);
            }
        }
    ],
    'tinker_march_of_the_machines': [
        {
            label: 'Robot Explosions',
            controlType: 'input'
        },
        {
            attributeName: 'machines_per_sec',
            label: 'TOTAL DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'treant_leech_seed': [
        {
            label: 'Pulses',
            controlType: 'input'
        },
        {
            attributeName: 'leech_damage',
            label: 'DAMAGE/HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'movement_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'troll_warlord_fervor': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'attack_speed',
            label: 'ATTACK SPEED:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'attackspeed'
        }
    ],
    'undying_decay': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'str_steal',
            label: 'STRENGTH STOLEN:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                if (parent.inventory.hasScepter()) {
                    var str_steal_scepter = abilityModel.getAbilityAttributeValue(ability.attributes, 'str_steal_scepter',0);
                    return v*str_steal_scepter;
                }
                else {
                    return v*a;
                }
            },
            returnProperty: 'bonusStrength'
        },
    ],
    'undying_soul_rip': [
        {
            label: 'Units',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_unit',
            label: 'DAMAGE/HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'undying_flesh_golem': [
        {
            label: 'Distance',
            controlType: 'input'
        },
        {
            attributeName: 'max_speed_slow',
            label: '%MOVE SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var min_speed_slow = abilityModel.getAbilityAttributeValue(ability.attributes, 'min_speed_slow', 0);
                var radius = abilityModel.getAbilityAttributeValue(ability.attributes, 'radius', 0);
                var full_power_radius = abilityModel.getAbilityAttributeValue(ability.attributes, 'full_power_radius', 0);
                var distance = Math.min(Math.max(v, full_power_radius), radius);
                var scale = 1 - (distance - full_power_radius) / (radius - full_power_radius);
                return -Math.max(scale * a, min_speed_slow);
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'max_damage_amp',
            label: '%DAMAGE AMP:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var min_damage_amp = abilityModel.getAbilityAttributeValue(ability.attributes, 'min_damage_amp', 0);
                var radius = abilityModel.getAbilityAttributeValue(ability.attributes, 'radius', 0);
                var full_power_radius = abilityModel.getAbilityAttributeValue(ability.attributes, 'full_power_radius', 0);
                var distance = Math.min(Math.max(v, full_power_radius), radius);
                var scale = 1 - (distance - full_power_radius) / (radius - full_power_radius);
                return Math.max(scale * a, min_damage_amp);
            },
            returnProperty: 'damageAmplification'
        },
        {
            label: 'MAX HP',
            controlType: 'input'
        },
        {
            label: 'Hero Death Count',
            controlType: 'input'
        },
        {
            label: 'Creep Death Count',
            controlType: 'input'
        },
        {
            attributeName: 'death_heal',
            label: 'DEATH HEAL (HEROES):',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [1, 2],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        },
        {
            attributeName: 'death_heal_creep',
            label: 'DEATH HEAL (CREEPS):',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [1, 3],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]*v[1]*a/100;
            }
        },
        {
            attributeName: 'death_heal_creep',
            label: 'TOTAL DEATH HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [4, 5],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v[0]+v[1];
            }
        }
    ],
    'ursa_fury_swipes': [
        {
            label: 'Stacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage_per_stack',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var enrageAbility = abilityModel.abilities().find(function(b) {
                    return b.name == 'ursa_enrage';
                });
                if (enrageAbility.isActive() && enrageAbility.level() > 0) {
                    var enrage_multiplier = abilityModel.getAbilityAttributeValue(enrageAbility.attributes, 'enrage_multiplier', enrageAbility.level());
                    return v*a*enrage_multiplier;
                }
                return v*a;
            },
            returnProperty: 'bonusDamage'
        }
    ],
    'ursa_enrage': [
        {
            attributeName: 'damage_reduction',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -a;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'venomancer_venomous_gale': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'tick_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityAttributeValue(ability.attributes, 'strike_damage',ability.level()) + Math.floor(v/3)*a;
            }
        },
        {
            attributeName: 'movement_slow',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'venomancer_poison_sting': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'venomancer_poison_nova': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'viper_poison_attack': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'viper_corrosive_skin': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        },
        {
            attributeName: 'bonus_magic_resistance',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'magicResist'
        }
    ],
    'viper_viper_strike': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_movement_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'movementSpeedPctReduction'
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeedreduction'
        }
    ],
    'visage_soul_assumption': [
        {
            label: 'Charges',
            controlType: 'input'
        },
        {
            attributeName: 'soul_charge_damage',
            label: 'Total Damage:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var soul_base_damage = abilityModel.getAbilityAttributeValue(ability.attributes, 'soul_base_damage',0);
                var stack_limit = abilityModel.getAbilityAttributeValue(ability.attributes, 'stack_limit', ability.level());
                stack_limit = Math.max(Math.min(v, stack_limit), 0);
                return soul_base_damage + stack_limit*a;
            }
        }
    ],
    'visage_gravekeepers_cloak': [
        {
            label: 'Layers',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_armor',
            label: 'ARMOR:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'armor'
        },
        {
            attributeName: 'bonus_resist',
            label: '%RESIST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            },
            returnProperty: 'magicResist'
        }
    ],
    'warlock_shadow_word': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'warlock_upheaval': [
        {
            label: 'Channel Duration',
            controlType: 'input'
        },
        {
            attributeName: 'slow_rate_duration',
            label: '%MOVE SLOW:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var max_slow = abilityModel.getAbilityAttributeValue(ability.attributes, 'max_slow',0);
                var slow_per_tick = max_slow / (a - 0.5) / 2;
                var ticks = Math.max(Math.floor(v * 2) - 1, 0);
                return -Math.min(ticks * slow_per_tick, max_slow);
            },
            returnProperty: 'movementSpeedPctReduction'
        }
    ],
    'weaver_the_swarm': [
        {
            label: 'Attacks',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'armor_reduction',
            label: 'DAMAGE:',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return -v*a;
            },
            returnProperty: 'armorReduction'
        }
    ],
    'windrunner_powershot': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*v;
            }
        }
    ],
    'winter_wyvern_cold_embrace': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            label: 'Ally Max Health',
            controlType: 'input'
        },
        {
            attributeName: 'heal_percentage',
            label: 'TOTAL HEAL:',
            ignoreTooltip: true,
            controlType: 'text',
            controls: [0,1],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var base_heal = abilityModel.getAbilityAttributeValue(ability.attributes, 'heal_additive',ability.level());
                return (base_heal + v[1] * a/100) * v[0];
            }
        }
    ],
    'wisp_spirits': [
        {
            label: 'Collision Count',
            controlType: 'input'
        },
        {
            attributeName: 'hero_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'creep_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'wisp_overcharge': [
        {
            label: 'Current HP',
            controlType: 'input'
        },
        {
            attributeName: 'drain_pct',
            label: 'HP DRAINED:',
            ignoreTooltip: true, 
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            label: 'Current MP',
            controlType: 'input'
        },
        {
            attributeName: 'drain_pct',
            label: 'MP DRAINED:',
            ignoreTooltip: true, 
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        },
        {
            attributeName: 'bonus_attack_speed',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'attackspeed'
        },
        {
            attributeName: 'bonus_damage_pct',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return a;
            },
            returnProperty: 'damageReduction'
        }
    ],
    'witch_doctor_paralyzing_cask': [
        {
            label: 'Hero Bounce Count',
            controlType: 'input'
        },
        {
            attributeName: 'hero_damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var bounces = abilityModel.getAbilityAttributeValue(ability.attributes, 'bounces',ability.level());
                return Math.min(Math.max(v, 0), bounces)*a;
            }
        },
        {
            label: 'Creep Bounce Count',
            controlType: 'input'
        },
        {
            attributeName: 'hero_damage',
            label: 'CREEP DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var bounces = abilityModel.getAbilityAttributeValue(ability.attributes, 'bounces',ability.level());
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return Math.min(Math.max(v, 0), bounces)*damage;
            }
        }
    ],
    'witch_doctor_voodoo_restoration': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'heal',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes, 'heal_interval',ability.level());
                var heal_per_tick = a * interval;
                var ticks = Math.max(Math.floor(v / interval) - 1, 0);
                return heal_per_tick * ticks;
            }
        },
        {
            attributeName: 'mana_per_second',
            label: 'MANA COST:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var interval = abilityModel.getAbilityAttributeValue(ability.attributes, 'heal_interval',ability.level());
                var mana_per_tick = a * interval;
                var ticks = Math.max(Math.floor(v / interval) - 1, 0);
                return mana_per_tick * ticks;
            }
        }
    ],
    'witch_doctor_maledict': [
        {
            label: 'damage 0-4s',
            controlType: 'input'
        },
        {
            label: 'damage 4-8s',
            controlType: 'input'
        },
        {
            label: 'damage 8-12s',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_damage',
            label: 'Dot Damage after 3s:',
            ignoreTooltip: true,
            controlType: 'method',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return 3*damage;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Burst Damage at 4s:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 3],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                var d = v.reduce(function (memo, o) { return memo + o }, 0);
                return Math.max(d, 0) * a/100;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Dot Damage after 7s:',
            ignoreTooltip: true,
            controlType: 'method',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return 7*damage;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Burst Damage at 8s:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1, 4, 5],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                var d = v.reduce(function (memo, o) { return memo + o }, 0);
                return Math.max(d, 0) * a/100;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Dot Damage after 11s:',
            ignoreTooltip: true,
            controlType: 'method',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return 11*damage;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Burst Damage at 12s:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [0, 1, 2, 4, 6, 7],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                var d = v.reduce(function (memo, o) { return memo + o }, 0);
                return Math.max(d, 0) * a/100;
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Burst Damage:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [4, 6, 8],
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v.reduce(function (memo, o) { return memo + o }, 0);
            }
        },
        {
            attributeName: 'bonus_damage',
            label: 'Total Maledict Damage:',
            ignoreTooltip: true,
            controlType: 'method',
            controls: [9],
            fn: function (v, a, parent, index, abilityModel, ability) {
                var duration = abilityModel.getAbilityAttributeValue(ability.attributes, 'duration_tooltip',0);
                var damage = abilityModel.getAbilityPropertyValue(ability, 'damage');
                return damage * duration + v[0];
            }
        },
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'bonus_damage',
            label: 'DOT Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                var duration = abilityModel.getAbilityAttributeValue(ability.attributes, 'duration_tooltip',0);
                return abilityModel.getAbilityPropertyValue(ability, 'damage')*Math.min(Math.max(v, 0), duration);
            }
        }
    ],
    'witch_doctor_death_ward': [
        {
            label: 'Duration',
            controlType: 'input'
        },
        {
            attributeName: 'damage',
            label: 'Total Damage',
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a;
            }
        }
    ],
    'zuus_static_field': [
        {
            label: 'Enemy HP',
            controlType: 'input'
        },
        {
            attributeName: 'damage_health_pct',
            label: 'DAMAGE:',
            ignoreTooltip: true,
            controlType: 'text',
            fn: function (v, a, parent, index, abilityModel, ability) {
                return v*a/100;
            }
        }
    ]
}
},{"./herocalc_core":4}],3:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.BuffOption = function (hero, ability) {
    this.buffName = ability;
    if (my.prototype.heroData['npc_dota_hero_' + hero] == undefined) {
        this.hero = hero;
        this.abilityData = my.prototype.findWhere(my.prototype.unitData[hero].abilities, {name: ability})
        this.buffDisplayName = my.prototype.unitData[hero].displayname + ' - ' + this.abilityData.displayname;
    }
    else {
        this.hero = 'npc_dota_hero_' + hero;
        this.abilityData = my.prototype.findWhere(my.prototype.heroData['npc_dota_hero_' + hero].abilities, {name: ability})
        this.buffDisplayName = my.prototype.heroData['npc_dota_hero_' + hero].displayname + ' - ' + this.abilityData.displayname;        
        if (ability == 'sven_gods_strength') {
            this.buffDisplayName += ' (Aura for allies)';
        }
    }

};

my.prototype.ItemBuffOption = function (item) {
    this.buffName = item;
    if (my.prototype.heroData['npc_dota_hero_' + hero] == undefined) {
        this.hero = hero;
        this.abilityData = my.prototype.findWhere(my.prototype.unitData[hero].abilities, {name: item})
        this.buffDisplayName = my.prototype.unitData[hero].displayname + ' - ' + this.abilityData.displayname;        
    }
    else {
        this.hero = 'npc_dota_hero_' + hero;
        this.abilityData = my.prototype.findWhere(my.prototype.heroData['npc_dota_hero_' + hero].abilities, {name: item})
        this.buffDisplayName = my.prototype.heroData['npc_dota_hero_' + hero].displayname + ' - ' + this.abilityData.displayname;        
    }

};

my.prototype.BuffViewModel = function (a) {
    var self = new my.prototype.AbilityModel(ko.observableArray([]));
    self.availableBuffs = ko.observableArray(my.prototype.availableBuffs);
    self.availableDebuffs = ko.observableArray(my.prototype.availableDebuffs);
    self.selectedBuff = ko.observable(self.availableBuffs()[0]);
    
    self.buffs = ko.observableArray([]);
    self.itemBuffs = new my.prototype.InventoryViewModel();
    
    self.addBuff = function (data, event) {
        if (my.prototype.findWhere(self.buffs(), { name: self.selectedBuff().buffName })  == undefined) {
            var a = JSON.parse(JSON.stringify(self.selectedBuff().abilityData));
            a.level = ko.observable(0);
            a.isActive = ko.observable(false);
            a.isDetail = ko.observable(false);
            a.baseDamage = ko.observable(0);
            a.bash = ko.observable(0);
            a.bashBonusDamage = ko.observable(0);
            a.bonusDamage = ko.observable(0);
            a.bonusDamageOrb = ko.observable(0);
            a.bonusDamagePct = ko.observable(0);
            a.bonusDamagePrecisionAura = ko.observable(0);
            a.bonusDamageReduction = ko.observable(0);
            a.bonusHealth = ko.observable(0);
            a.bonusStrength = ko.observable(0);
            a.bonusStrength2 = ko.observable(0);
            a.bonusAgility = ko.observable(0);
            a.bonusAgility2 = ko.observable(0);
            a.bonusInt = ko.observable(0);
            a.bonusAllStatsReduction = ko.observable(0);
            a.damageAmplification = ko.observable(0);
            a.damageReduction = ko.observable(0);
            a.evasion = ko.observable(0);
            a.magicResist = ko.observable(0);
            a.manaregen = ko.observable(0);
            a.manaregenreduction = ko.observable(0);
            a.missChance = ko.observable(0);
            a.movementSpeedFlat = ko.observable(0);
            a.movementSpeedPct = ko.observable(0);
            a.movementSpeedPctReduction = ko.observable(0);
            a.turnRateReduction = ko.observable(0);
            a.attackrange = ko.observable(0);
            a.attackspeed = ko.observable(0);
            a.attackspeedreduction = ko.observable(0);
            a.armor = ko.observable(0);
            a.armorReduction = ko.observable(0);
            a.healthregen = ko.observable(0);
            a.lifesteal = ko.observable(0);
            a.visionnight = ko.observable(0);
            a.visionday = ko.observable(0);
            switch (a.name) {
                case 'invoker_cold_snap':
                case 'invoker_ghost_walk':
                case 'invoker_tornado':
                case 'invoker_emp':
                case 'invoker_alacrity':
                case 'invoker_chaos_meteor':
                case 'invoker_sun_strike':
                case 'invoker_forge_spirit':
                case 'invoker_ice_wall':
                case 'invoker_deafening_blast':
                    a.level(1);
                break;
            }
            self.abilities.push(a);
            self.buffs.push({ name: self.selectedBuff().buffName, hero: self.selectedBuff().hero, data: a });
        }
    };
    
    self.removeBuff = function (data, event, abilityName) {
        if (my.prototype.findWhere(self.buffs(), { name: abilityName })  != undefined) {
                self.buffs.remove(my.prototype.findWhere(self.buffs(), { name: abilityName }));
                if (self.abilityControlData[abilityName] != undefined) {
                    for (var i = 0; i < self.abilityControlData[abilityName].data.length; i++) {
                        if (self.abilityControlData[abilityName].data[i].controlVal.dispose != undefined) {
                            self.abilityControlData[abilityName].data[i].controlVal.dispose();
                        }
                        if (self.abilityControlData[abilityName].data[i].clean != undefined) {
                            self.abilityControlData[abilityName].data[i].clean.dispose();
                        }
                    }
                    self.abilityControlData[abilityName] = undefined;
                }
                for (var i = 0; i < self.abilities().length; i++) {
                    if (self.abilities()[i].name == abilityName) {
                        self.abilities()[i].level(0);
                        self.abilities.remove(self.abilities()[i]);
                        break;
                    }
                }
        }
    };
    self.toggleBuff = function (index, data, event) {
        if (self.buffs()[index()].data.behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE') < 0) {
            if (self.buffs()[index()].data.isActive()) {
                self.buffs()[index()].data.isActive(false);
                self.abilities()[index()].isActive(false);
            }
            else {
                self.buffs()[index()].data.isActive(true);
                self.abilities()[index()].isActive(true);
            }
        }
    }.bind(this);

    self.toggleBuffDetail = function (index, data, event) {
        if (self.buffs()[index()].data.isDetail()) {
            self.buffs()[index()].data.isDetail(false);
        }
        else {
            self.buffs()[index()].data.isDetail(true);
        }
    }.bind(this);

    // Overrides the ability module function to remove available skill point check
    self.levelUpAbility = function (index, data, event, hero) {
        if (self.abilities()[index()].level() < hero.getAbilityLevelMax(data)) {
            switch(self.abilities()[index()].abilitytype) {
                case 'DOTA_ABILITY_TYPE_ULTIMATE':
                    self.abilities()[index()].level(self.abilities()[index()].level() + 1);
                break;
                default:
                    self.abilities()[index()].level(self.abilities()[index()].level() + 1);
                break;
            }
            switch (self.abilities()[index()].name) {
                case 'beastmaster_call_of_the_wild':
                case 'chen_test_of_faith':
                case 'morphling_morph_agi':
                case 'shadow_demon_shadow_poison':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'morphling_morph_str':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
                case 'keeper_of_the_light_spirit_form':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                case 'nevermore_shadowraze1':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 2].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze2':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze3':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                break;
            }
        }
    };
    self.levelDownAbility = function (index, data, event, hero) {
        if (self.abilities()[index()].level() > 0) {
            self.abilities()[index()].level(self.abilities()[index()].level() - 1);
            switch (self.abilities()[index()].name) {
                case 'beastmaster_call_of_the_wild':
                case 'chen_test_of_faith':
                case 'morphling_morph_agi':
                case 'shadow_demon_shadow_poison':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'morphling_morph_str':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
                case 'keeper_of_the_light_spirit_form':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                case 'nevermore_shadowraze1':
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 2].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze2':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() + 1].level(self.abilities()[index()].level());
                break;
                case 'nevermore_shadowraze3':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                    self.abilities()[index() - 2].level(self.abilities()[index()].level());
                break;
                case 'ember_spirit_fire_remnant':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
                case 'lone_druid_true_form':
                    self.abilities()[index() - 1].level(self.abilities()[index()].level());
                break;
            }
        }
    };
    
    return self;
}
},{"./herocalc_core":4,"./herocalc_knockout":10}],4:[function(require,module,exports){
'use strict';
require('./polyfill');

function HEROCALCULATOR () {
   // ...
}

var my = HEROCALCULATOR;

my.prototype.heroData = {};
my.prototype.itemData = {};
my.prototype.unitData = {};
my.prototype.abilityData = {};

my.prototype.HeroOptions = [];

my.prototype.HeroOption = function (name, displayname, hero) {
    this.heroName = name;
    this.heroDisplayName = displayname;
    this.hero = hero;
};

my.prototype.idCounter = 0;
my.prototype.uniqueId = function (prefix) {
    var id = ++my.prototype.idCounter + '';
    return prefix ? prefix + id : id;
};
my.prototype.findWhere = function (arr, obj) {
    arrLoop: for (var i = 0; i < arr.length; i++) {
        objLoop: for (var key in obj) {
            if (arr[i][key] != obj[key]) {
                continue arrLoop;
            }
        }
        return arr[i];
    }
}
my.prototype.uniques = function (arr) {
    var a = [];
    for (var i=0, l=arr.length; i<l; i++)
        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')
            a.push(arr[i]);
    return a;
}
my.prototype.union = function (a, b) {
    var arr = a.concat(b);
    return my.prototype.uniques(arr);
}

my.prototype.totalResources = 3;
my.prototype.numResourcesLoaded = 0;
my.prototype.onResourceLoaded = function (callback) {
    my.prototype.numResourcesLoaded++;
    if (my.prototype.numResourcesLoaded == my.prototype.totalResources) {
        
        my.prototype.availableBuffs = [
            new my.prototype.BuffOption('abaddon', 'abaddon_frostmourne'),
            new my.prototype.BuffOption('axe', 'axe_culling_blade'),
            new my.prototype.BuffOption('beastmaster', 'beastmaster_inner_beast'),
            new my.prototype.BuffOption('bloodseeker', 'bloodseeker_bloodrage'),
            new my.prototype.BuffOption('bounty_hunter', 'bounty_hunter_track'),
            new my.prototype.BuffOption('centaur', 'centaur_stampede'),
            new my.prototype.BuffOption('crystal_maiden', 'crystal_maiden_brilliance_aura'),
            new my.prototype.BuffOption('dark_seer', 'dark_seer_surge'),
            new my.prototype.BuffOption('dazzle', 'dazzle_weave'),
            new my.prototype.BuffOption('drow_ranger', 'drow_ranger_trueshot'),
            new my.prototype.BuffOption('invoker', 'invoker_alacrity'),
            new my.prototype.BuffOption('wisp', 'wisp_tether'),
            new my.prototype.BuffOption('wisp', 'wisp_overcharge'),
            new my.prototype.BuffOption('kunkka', 'kunkka_ghostship'),
            new my.prototype.BuffOption('lich', 'lich_frost_armor'),
            new my.prototype.BuffOption('life_stealer', 'life_stealer_open_wounds'),
            new my.prototype.BuffOption('luna', 'luna_lunar_blessing'),
            new my.prototype.BuffOption('lycan', 'lycan_howl'),
            new my.prototype.BuffOption('magnataur', 'magnataur_empower'),
            new my.prototype.BuffOption('mirana', 'mirana_leap'),
            new my.prototype.BuffOption('ogre_magi', 'ogre_magi_bloodlust'),
            new my.prototype.BuffOption('omniknight', 'omniknight_guardian_angel'),
            new my.prototype.BuffOption('rubick', 'rubick_null_field'),
            new my.prototype.BuffOption('skeleton_king', 'skeleton_king_vampiric_aura'),
            new my.prototype.BuffOption('spirit_breaker', 'spirit_breaker_empowering_haste'),
            new my.prototype.BuffOption('sven', 'sven_warcry'),
            new my.prototype.BuffOption('sven', 'sven_gods_strength'),
            new my.prototype.BuffOption('treant', 'treant_living_armor'),
            new my.prototype.BuffOption('troll_warlord', 'troll_warlord_battle_trance'),
            new my.prototype.BuffOption('vengefulspirit', 'vengefulspirit_command_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_alpha_wolf', 'alpha_wolf_critical_strike'),
            new my.prototype.BuffOption('npc_dota_neutral_alpha_wolf', 'alpha_wolf_command_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_polar_furbolg_ursa_warrior', 'centaur_khan_endurance_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_giant_wolf', 'giant_wolf_critical_strike'),
            new my.prototype.BuffOption('npc_dota_neutral_kobold_taskmaster', 'kobold_taskmaster_speed_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_ogre_magi', 'ogre_magi_frost_armor'),
            new my.prototype.BuffOption('npc_dota_neutral_satyr_hellcaller', 'satyr_hellcaller_unholy_aura'),
            new my.prototype.BuffOption('npc_dota_neutral_enraged_wildkin', 'enraged_wildkin_toughness_aura'),
            new my.prototype.BuffOption('npc_dota_necronomicon_archer_1', 'necronomicon_archer_aoe')
        ];

        my.prototype.availableDebuffs = [
            new my.prototype.BuffOption('abaddon', 'abaddon_frostmourne'),
            new my.prototype.BuffOption('alchemist', 'alchemist_acid_spray'),
            new my.prototype.BuffOption('ancient_apparition', 'ancient_apparition_ice_vortex'),
            new my.prototype.BuffOption('axe', 'axe_battle_hunger'),
            new my.prototype.BuffOption('bane', 'bane_enfeeble'),
            new my.prototype.BuffOption('batrider', 'batrider_sticky_napalm'),
            new my.prototype.BuffOption('beastmaster', 'beastmaster_primal_roar'),
            new my.prototype.BuffOption('bounty_hunter', 'bounty_hunter_jinada'),
            new my.prototype.BuffOption('brewmaster', 'brewmaster_thunder_clap'),
            new my.prototype.BuffOption('brewmaster', 'brewmaster_drunken_haze'),
            new my.prototype.BuffOption('bristleback', 'bristleback_viscous_nasal_goo'),
            new my.prototype.BuffOption('broodmother', 'broodmother_incapacitating_bite'),
            new my.prototype.BuffOption('centaur', 'centaur_stampede'),
            new my.prototype.BuffOption('chen', 'chen_penitence'),
            new my.prototype.BuffOption('crystal_maiden', 'crystal_maiden_crystal_nova'),
            new my.prototype.BuffOption('crystal_maiden', 'crystal_maiden_freezing_field'),
            new my.prototype.BuffOption('dazzle', 'dazzle_weave'),
            new my.prototype.BuffOption('drow_ranger', 'drow_ranger_frost_arrows'),
            new my.prototype.BuffOption('earth_spirit', 'earth_spirit_rolling_boulder'),
            new my.prototype.BuffOption('elder_titan', 'elder_titan_natural_order'),
            new my.prototype.BuffOption('elder_titan', 'elder_titan_earth_splitter'),
            new my.prototype.BuffOption('enchantress', 'enchantress_untouchable'),
            new my.prototype.BuffOption('enchantress', 'enchantress_enchant'),
            new my.prototype.BuffOption('faceless_void', 'faceless_void_time_walk'),
            new my.prototype.BuffOption('huskar', 'huskar_life_break'),
            new my.prototype.BuffOption('invoker', 'invoker_ghost_walk'),
            new my.prototype.BuffOption('invoker', 'invoker_ice_wall'),
            new my.prototype.BuffOption('wisp', 'wisp_tether'),
            new my.prototype.BuffOption('jakiro', 'jakiro_dual_breath'),
            new my.prototype.BuffOption('jakiro', 'jakiro_liquid_fire'),
            new my.prototype.BuffOption('keeper_of_the_light', 'keeper_of_the_light_blinding_light'),
            new my.prototype.BuffOption('kunkka', 'kunkka_torrent'),
            new my.prototype.BuffOption('lich', 'lich_frost_nova'),
            new my.prototype.BuffOption('lich', 'lich_frost_armor'),
            new my.prototype.BuffOption('lich', 'lich_chain_frost'),
            new my.prototype.BuffOption('life_stealer', 'life_stealer_open_wounds'),
            new my.prototype.BuffOption('lion', 'lion_voodoo'),
            new my.prototype.BuffOption('magnataur', 'magnataur_skewer'),
            new my.prototype.BuffOption('medusa', 'medusa_stone_gaze'),
            new my.prototype.BuffOption('meepo', 'meepo_geostrike'),
            new my.prototype.BuffOption('naga_siren', 'naga_siren_rip_tide'),
            new my.prototype.BuffOption('night_stalker', 'night_stalker_void'),
            new my.prototype.BuffOption('night_stalker', 'night_stalker_crippling_fear'),
            new my.prototype.BuffOption('night_stalker', 'night_stalker_darkness'),
            new my.prototype.BuffOption('ogre_magi', 'ogre_magi_ignite'),
            new my.prototype.BuffOption('omniknight', 'omniknight_degen_aura'),
            new my.prototype.BuffOption('phantom_assassin', 'phantom_assassin_stifling_dagger'),
            new my.prototype.BuffOption('phantom_lancer', 'phantom_lancer_spirit_lance'),
            new my.prototype.BuffOption('pudge', 'pudge_rot'),
            new my.prototype.BuffOption('pugna', 'pugna_decrepify'),
            new my.prototype.BuffOption('queenofpain', 'queenofpain_shadow_strike'),
            new my.prototype.BuffOption('riki', 'riki_smoke_screen'),
            new my.prototype.BuffOption('rubick', 'rubick_fade_bolt'),
            new my.prototype.BuffOption('sand_king', 'sandking_epicenter'),
            new my.prototype.BuffOption('nevermore', 'nevermore_dark_lord'),
            new my.prototype.BuffOption('shadow_shaman', 'shadow_shaman_voodoo'),
            new my.prototype.BuffOption('skeleton_king', 'skeleton_king_hellfire_blast'),
            new my.prototype.BuffOption('skeleton_king', 'skeleton_king_reincarnation'),
            new my.prototype.BuffOption('skywrath_mage', 'skywrath_mage_concussive_shot'),
            new my.prototype.BuffOption('skywrath_mage', 'skywrath_mage_ancient_seal'),
            new my.prototype.BuffOption('slardar', 'slardar_slithereen_crush'),
            new my.prototype.BuffOption('slardar', 'slardar_amplify_damage'),
            new my.prototype.BuffOption('slark', 'slark_essence_shift'),
            new my.prototype.BuffOption('sniper', 'sniper_shrapnel'),
            new my.prototype.BuffOption('spectre', 'spectre_spectral_dagger'),
            new my.prototype.BuffOption('storm_spirit', 'storm_spirit_overload'),
            new my.prototype.BuffOption('templar_assassin', 'templar_assassin_meld'),
            new my.prototype.BuffOption('tidehunter', 'tidehunter_gush'),
            new my.prototype.BuffOption('tinker', 'tinker_laser'),
            new my.prototype.BuffOption('treant', 'treant_leech_seed'),
            new my.prototype.BuffOption('tusk', 'tusk_frozen_sigil'),
            new my.prototype.BuffOption('undying', 'undying_flesh_golem'),
            new my.prototype.BuffOption('ursa', 'ursa_earthshock'),
            new my.prototype.BuffOption('vengefulspirit', 'vengefulspirit_wave_of_terror'),
            new my.prototype.BuffOption('vengefulspirit', 'vengefulspirit_command_aura'),
            new my.prototype.BuffOption('venomancer', 'venomancer_venomous_gale'),
            new my.prototype.BuffOption('venomancer', 'venomancer_poison_sting'),
            new my.prototype.BuffOption('viper', 'viper_poison_attack'),
            new my.prototype.BuffOption('viper', 'viper_corrosive_skin'),
            new my.prototype.BuffOption('viper', 'viper_viper_strike'),
            new my.prototype.BuffOption('visage', 'visage_grave_chill'),
            new my.prototype.BuffOption('warlock', 'warlock_upheaval'),
            new my.prototype.BuffOption('weaver', 'weaver_the_swarm'),
            new my.prototype.BuffOption('windrunner', 'windrunner_windrun'),
            new my.prototype.BuffOption('winter_wyvern', 'winter_wyvern_arctic_burn'),
            new my.prototype.BuffOption('winter_wyvern', 'winter_wyvern_splinter_blast'),
            new my.prototype.BuffOption('npc_dota_neutral_ghost', 'ghost_frost_attack'),
            new my.prototype.BuffOption('npc_dota_neutral_polar_furbolg_ursa_warrior', 'polar_furbolg_ursa_warrior_thunder_clap'),
            new my.prototype.BuffOption('npc_dota_neutral_ogre_magi', 'ogre_magi_frost_armor'),
            new my.prototype.BuffOption('npc_dota_neutral_satyr_trickster', 'satyr_trickster_purge'),
            new my.prototype.BuffOption('npc_dota_neutral_enraged_wildkin', 'enraged_wildkin_tornado')
        ];
        
        my.prototype.itemOptionsArr = [];
        for (var i = 0; i < my.prototype.validItems.length; i++) {
            my.prototype.itemOptionsArr.push(new my.prototype.ItemInput(my.prototype.validItems[i], my.prototype.itemData['item_' + my.prototype.validItems[i]].displayname));
        }
        
        var itemBuffs = ['assault', 'ancient_janggo', 'headdress', 'mekansm', 'pipe', 'ring_of_aquila', 'vladmir', 'ring_of_basilius', 'buckler', 'solar_crest'];
        my.prototype.itemBuffOptions = itemBuffs.map(function(item) {
            return new my.prototype.ItemInput(item, my.prototype.itemData['item_' + item].displayname);
        });
        
        var itemDebuffs = [
            {item: 'assault', debuff: null},
            {item: 'shivas_guard', debuff: null},
            {item: 'desolator', debuff: null},
            {item: 'medallion_of_courage', debuff: null},
            {item: 'radiance', debuff: null},
            {item: 'sheepstick', debuff: null},
            {item: 'veil_of_discord', debuff: null},
            {item: 'solar_crest', debuff: null},
            {item: 'silver_edge', debuff: {id: 'shadow_walk', name: 'Shadow Walk'}},
            {item: 'silver_edge', debuff: {id: 'maim', name: 'Lesser Maim'}}
        ]
        my.prototype.itemDebuffOptions = itemDebuffs.map(function(item) {
            return new my.prototype.ItemInput(item.item, my.prototype.itemData['item_' + item.item].displayname, item.debuff);
        });
        if (callback) callback();
    }
}

my.prototype.init = function (HERODATA_PATH,ITEMDATA_PATH,UNITDATA_PATH, callback) {
    my.prototype.numResourcesLoaded = 0;
    my.prototype.getJSON(HERODATA_PATH, function (data) {
        my.prototype.heroData = data;
        my.prototype.heroData['npc_dota_hero_chen'].abilities[2].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_nevermore'].abilities[1].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_nevermore'].abilities[2].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_morphling'].abilities[3].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_ogre_magi'].abilities[3].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_techies'].abilities[4].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        my.prototype.heroData['npc_dota_hero_beastmaster'].abilities[2].behavior.push('DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE');
        var index = my.prototype.heroData['npc_dota_hero_lone_druid'].abilities[3].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_HIDDEN');
        my.prototype.heroData['npc_dota_hero_lone_druid'].abilities[3].behavior.splice(index, 1);
        
        index = my.prototype.heroData['npc_dota_hero_abaddon'].abilities[2].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE');
        my.prototype.heroData['npc_dota_hero_abaddon'].abilities[2].behavior.splice(index, 1);
        
        index = my.prototype.heroData['npc_dota_hero_riki'].abilities[2].behavior.indexOf('DOTA_ABILITY_BEHAVIOR_PASSIVE');
        my.prototype.heroData['npc_dota_hero_riki'].abilities[2].behavior.splice(index, 1);
        
        for (var h in my.prototype.heroData) {
            my.prototype.HeroOptions.push(new my.prototype.HeroOption(h.replace('npc_dota_hero_', ''), my.prototype.heroData[h].displayname));
        }
            
        my.prototype.onResourceLoaded(callback);
    });
    my.prototype.getJSON(ITEMDATA_PATH, function (data) {
        my.prototype.itemData = data;
        my.prototype.onResourceLoaded(callback);
    });
    my.prototype.getJSON(UNITDATA_PATH, function (data) {
        my.prototype.unitData = data;
        my.prototype.onResourceLoaded(callback);
    });
}

my.prototype.extend = function (out) {
    out = out || {};

    for (var i = 1; i < arguments.length; i++) {
        var obj = arguments[i];

        if (!obj)
            continue;

        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                if (typeof obj[key] === 'object')
                    out[key] = my.prototype.extend(out[key], obj[key]);
                else
                    out[key] = obj[key];
            }
        }
    }

    return out;
};

my.prototype.getJSON = function (url, successCallback, errorCallback) {
    var request = new XMLHttpRequest();
    request.open('GET', url, true);

    request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
            // Success!
            var data = JSON.parse(request.responseText);
            successCallback(data);
        } else {
            // We reached our target server, but it returned an error
            errorCallback();
        }
    };

    request.onerror = function() {
        // There was a connection error of some sort
        errorCallback();
    };

    request.send();
}
module.exports = HEROCALCULATOR;
},{"./polyfill":13}],5:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.illusionData = {
    chaos_knight_phantasm: {
        hero: 'chaos_knight',
        displayName: 'Chaos Knight Phantasm',
        use_selected_hero: false,
        max_level: 3,
        outgoing_damage: 'outgoing_damage',
        incoming_damage: 'incoming_damage'
    },
    naga_siren_mirror_image: {
        hero: 'naga_siren',
        displayName: 'Naga Siren Mirror Image',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'outgoing_damage',
        incoming_damage: 'incoming_damage'
    },
    dark_seer_wall_of_replica: {
        hero: 'dark_seer',
        displayName: 'Dark Seer Wall of Replica',
        use_selected_hero: true,
        max_level: 3,
        outgoing_damage: 'replica_damage_outgoing',
        incoming_damage: 'replica_damage_incoming',
        outgoing_damage_scepter: 'replica_damage_outgoing_scepter'
    },
    morphling_replicate: {
        hero: 'morphling',
        displayName: 'Morphling Replicate',
        use_selected_hero: true,
        max_level: 3,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'
    },
    phantom_lancer_doppelwalk: {
        hero: 'phantom_lancer',
        displayName: 'Phantom Lancer Doppelwalk',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'        
    },
    phantom_lancer_juxtapose: {
        hero: 'phantom_lancer',
        displayName: 'Phantom Lancer Juxtapose',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'        
    },
    phantom_lancer_spirit_lance: {
        hero: 'phantom_lancer',
        displayName: 'Phantom Lancer Spirit Lance',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_damage_out_pct',
        incoming_damage: 'illusion_damage_in_pct'        
    },
    shadow_demon_disruption: {
        hero: 'shadow_demon',
        displayName: 'Shadow Demon Disruption',
        use_selected_hero: true,
        max_level: 4,
        outgoing_damage: 'illusion_outgoing_damage',
        incoming_damage: 'illusion_incoming_damage'        
    },
    spectre_haunt: {
        hero: 'spectre',
        displayName: 'Spectre Haunt',
        use_selected_hero: false,
        max_level: 3,
        outgoing_damage: 'illusion_damage_outgoing',
        incoming_damage: 'illusion_damage_incoming'        
    },
    terrorblade_conjure_image: {
        hero: 'terrorblade',
        displayName: 'Terrorblade Conjure Image',
        use_selected_hero: false,
        max_level: 4,
        outgoing_damage: 'illusion_outgoing_damage',
        incoming_damage: 'illusion_incoming_damage'        
    },
    terrorblade_reflection: {
        hero: 'terrorblade',
        displayName: 'Terrorblade Reflection',
        use_selected_hero: true,
        max_level: 4,
        outgoing_damage: 'illusion_outgoing_damage'     
    },
    item_manta: {
        hero: '',
        is_item: true,
        displayName: 'Manta Style Illusion',
        use_selected_hero: true,
        max_level: 1,
        outgoing_damage_melee: 'images_do_damage_percent_melee',
        incoming_damage_melee: 'images_take_damage_percent_melee',
        outgoing_damage_ranged: 'images_do_damage_percent_ranged',
        incoming_damage_ranged: 'images_take_damage_percent_ranged'
    }
}

my.prototype.IllusionViewModel = function (h, p, abilityLevel) {
    var self = new my.prototype.HeroCalculatorModel(0);
    self.parent = p;
    self.inventory = self.parent.inventory;
    self.illusionType = ko.observable(self.parent.selectedIllusion().illusionName);
    self.illusionDisplayName = ko.observable(self.parent.selectedIllusion().illusionDisplayName);
    self.illusionAbilityLevel(abilityLevel);
    self.illusionAbilityMaxLevel = ko.observable(my.prototype.illusionData[self.parent.selectedIllusion().illusionName].max_level);
    if (!my.prototype.illusionData[self.illusionType()].use_selected_hero) {
        self.selectedHero(my.prototype.findWhere(self.availableHeroes(), {heroName: self.parent.selectedIllusion().baseHero}));
    }
    else {
        self.selectedHero(self.parent.selectedHero());
    }
    self.selectedHeroLevel(self.parent.selectedHeroLevel());
    self.hero = ko.computed(function() {
        return ko.wrap.fromJS(my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName]);
    });
    
    self.ability().getAttributeBonusLevel = self.parent.ability().getAttributeBonusLevel;
    self.totalAgi = ko.computed(function () {
        return (self.heroData().attributebaseagility
                + self.heroData().attributeagilitygain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('agi') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getAgility()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.intStolen = ko.observable(0).extend({ numeric: 0 });
    self.totalInt = ko.computed(function () {
        return (self.heroData().attributebaseintelligence 
                + self.heroData().attributeintelligencegain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('int') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getIntelligence()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction() + self.intStolen()
               ).toFixed(2);
    });
    self.totalStr = ko.computed(function () {
        return (self.heroData().attributebasestrength 
                + self.heroData().attributestrengthgain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('str') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getStrength()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    
    self.getAbilityAttributeValue = function(hero, ability, attributeName, level) {
        if (ability == 'item_manta') {
            var abilityObj = my.prototype.itemData[ability];
        }
        else {
            var abilityObj = my.prototype.findWhere(my.prototype.heroData['npc_dota_hero_' + hero].abilities, {name: ability});
        }
        var attribute = my.prototype.findWhere(abilityObj.attributes, {name: attributeName});
        if (level == 0) {
            return parseFloat(attribute.value[0]);
        }
        else if (level > attribute.length) {
            return parseFloat(attribute.value[0]);
        }
        else {
            return parseFloat(attribute.value[level - 1]);
        }
    }
    
    self.getIncomingDamageMultiplier = function(illusionType, hasScepter, attackType) {
        if (illusionType == 'item_manta') {
            if (attackType == 'DOTA_UNIT_CAP_MELEE_ATTACK') {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].incoming_damage_melee, self.illusionAbilityLevel())/100)
            }
            else {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].incoming_damage_ranged, self.illusionAbilityLevel())/100)
            }
        }
        else {
            return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].incoming_damage, self.illusionAbilityLevel())/100)
        }
    }
    self.getOutgoingDamageMultiplier = function(illusionType, hasScepter, attackType) {
        if (illusionType == 'item_manta') {
            if (attackType == 'DOTA_UNIT_CAP_MELEE_ATTACK') {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].outgoing_damage_melee, self.illusionAbilityLevel())/100);
            }
            else {
                return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].outgoing_damage_ranged, self.illusionAbilityLevel())/100);
            }
        }
        else {
            return (1 + self.getAbilityAttributeValue(my.prototype.illusionData[self.illusionType()].hero, self.illusionType(), my.prototype.illusionData[illusionType].outgoing_damage, self.illusionAbilityLevel())/100);
        }
    }

    self.baseDamage = ko.computed(function() {
        return [Math.floor(my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName].attackdamagemin + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total)
                * self.getOutgoingDamageMultiplier(self.illusionType(), false, self.hero().attacktype()),
                Math.floor(my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName].attackdamagemax + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total)
                * self.getOutgoingDamageMultiplier(self.illusionType(), false, self.hero().attacktype())];
    });
    
    self.damage = ko.computed(function() {
        return [self.baseDamage()[0],
                self.baseDamage()[1]];
    });
    
    self.ehpPhysical = ko.computed(function() {
        var ehp = (self.health() * (1 + .06 * self.totalArmorPhysical())) / (1 - (1 - (self.inventory.getEvasion() * self.ability().getEvasion())))
        ehp *= (self.inventory.activeItems().some(function(item) {return item.item == 'mask_of_madness';}) ? (1 / 1.3) : 1);
        ehp *= (1 / self.getIncomingDamageMultiplier(self.illusionType(), false, self.hero().attacktype()));
        return ehp.toFixed(2);
    });
    self.ehpMagical = ko.computed(function() {
        var ehp = self.health() / self.totalMagicResistanceProduct();
        ehp *= (1 / self.getIncomingDamageMultiplier(self.illusionType(), false, self.hero().attacktype()));
        return ehp.toFixed(2);
    });
    
    self.totalArmorPhysical = ko.computed(function() {
        return (self.enemy().ability().getArmorBaseReduction() * self.debuffs.getArmorBaseReduction() * (my.prototype.heroData['npc_dota_hero_' + self.selectedHero().heroName].armorphysical + self.totalAgi() * .14)
                + self.ability().getArmor() + self.enemy().ability().getArmorReduction() + self.buffs.getArmor() + self.debuffs.getArmorReduction()).toFixed(2);
    });
    
    self.ias = ko.computed(function() {
        var val = parseFloat(self.totalAgi()) 
                + self.ability().getAttackSpeed() 
                + self.enemy().ability().getAttackSpeedReduction() 
                + self.buffs.getAttackSpeed() 
                + self.debuffs.getAttackSpeedReduction()
                + self.unit().ability().getAttackSpeed(); 
        if (val < -80) {
            return -80;
        }
        else if (val > 400) {
            return 400;
        }
        return val.toFixed(2);
    });
    
    return self;
}
},{"./herocalc_core":4,"./herocalc_knockout":10}],6:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');

var my = require("./herocalc_core");
require("./herocalc_hero_damage");

my.prototype.totalExp = [0, 200, 500, 900, 1400, 2000, 2600, 3400, 4400, 5400, 6000, 8200, 9000, 10400, 11900, 13500, 15200, 17000, 18900, 20900, 23000, 25200, 27500, 29900, 32400];
my.prototype.nextLevelExp = [200, 300, 400, 500, 600, 600, 800, 1000, 1000, 600, 2200, 800, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, '&mdash;'];
my.prototype.diffProperties = [
    'totalAgi',
    'totalInt',
    'totalStr',
    'health',
    'healthregen',
    'mana',
    'manaregen',
    'totalArmorPhysical',
    'totalArmorPhysicalReduction',
    'totalMovementSpeed',
    'totalTurnRate',
    'baseDamage',
    'bonusDamage',
    'bonusDamageReduction',
    'damage',
    'totalMagicResistanceProduct',
    'totalMagicResistance',
    'bat',
    'ias',
    'attackTime',
    'attacksPerSecond',
    'evasion',
    'ehpPhysical',
    'ehpMagical',
    'bash',
    'critChance',
    //'critDamage',
    'missChance',
    'totalattackrange',
    'visionrangeday',
    'visionrangenight',
    'lifesteal'
];

my.prototype.IllusionOption = function (name, displayname, baseHero) {
    this.illusionName = name;
    this.illusionDisplayName = displayname;
    this.baseHero = baseHero;
};

my.prototype.createIllusionOptions = function () {
    var options = [];
    for (var h in my.prototype.illusionData) {
        options.push(new my.prototype.IllusionOption(h, my.prototype.illusionData[h].displayName, my.prototype.illusionData[h].hero));
    }
    return options;
}

my.prototype.HeroModel = function (h) {
    var self = this;
    self.heroId = ko.observable(h);
    self.selectedHeroLevel = ko.observable(1);
    self.inventory = new my.prototype.InventoryViewModel(self);
    self.selectedInventory = ko.observable(-1);
    self.buffs = new my.prototype.BuffViewModel();
    self.buffs.hasScepter = self.inventory.hasScepter;
    self.debuffs = new my.prototype.BuffViewModel();
    /*self.hero = ko.computed(function () {
        return ko.mapping.fromJS(my.prototype.heroData['npc_dota_hero_' + self.heroId()]);
    });*/
    self.heroData = ko.computed(function () {
      return my.prototype.heroData['npc_dota_hero_' + self.heroId()];
    });
    self.heroCompare = ko.observable(self);
    self.enemy = ko.observable(self);
    self.unit = ko.observable(self);
    self.clone = ko.observable(self);
    self.illusions = ko.observableArray([]);
    self.availableIllusions = ko.observableArray(my.prototype.createIllusionOptions());
    self.selectedIllusion = ko.observable(self.availableIllusions()[0]);
    self.illusionAbilityLevel = ko.observable(1);
    self.illusionAbilityMaxLevel = ko.computed(function () {
        return my.prototype.illusionData[self.selectedIllusion().illusionName].max_level;
    });
    
    self.skillPointHistory = ko.observableArray();
    
    self.ability = ko.computed(function () {
        var a = new my.prototype.AbilityModel(ko.observableArray(JSON.parse(JSON.stringify(self.heroData().abilities))), self);
        switch (self.heroId()) {
            case 'earth_spirit':
            case 'ogre_magi':
                a._abilities[3].level(1);
            break;
            case 'invoker':
                for (var i = 6; i < 16; i++) {
                    a._abilities[i].level(1);
                }
            break;
        }
        self.skillPointHistory.removeAll();
        a.hasScepter = self.inventory.hasScepter
        return a;
    });

    self.availableSkillPoints = ko.computed(function () {
        var c = self.selectedHeroLevel();
        for (var i = 0; i < self.ability().abilities().length; i++) {
            switch(self.ability().abilities()[i].abilitytype) {
                case 'DOTA_ABILITY_TYPE_ULTIMATE':
                    if (self.heroId() === 'invoker') {
                        while (
                            ((self.ability().abilities()[i].level() == 1) && (parseInt(self.selectedHeroLevel()) < 2)) ||
                            ((self.ability().abilities()[i].level() == 2) && (parseInt(self.selectedHeroLevel()) < 7)) ||
                            ((self.ability().abilities()[i].level() == 3) && (parseInt(self.selectedHeroLevel()) < 11)) ||
                            ((self.ability().abilities()[i].level() == 4) && (parseInt(self.selectedHeroLevel()) < 17))
                        ) {
                            self.ability().levelDownAbility(i, null, null, self);
                        }
                    }
                    else if (self.heroId() === 'meepo') {
                        while ((self.ability().abilities()[i].level()-1) * 7 + 3 > parseInt(self.selectedHeroLevel())) {
                            self.ability().levelDownAbility(i, null, null, self);
                        }
                    }
                    else {
                        while (self.ability().abilities()[i].level() * 5 + 1 > parseInt(self.selectedHeroLevel())) {
                            self.ability().levelDownAbility(i, null, null, self);
                        }
                    }
                break;
                default:
                    while (self.ability().abilities()[i].level() * 2 - 1 > parseInt(self.selectedHeroLevel())) {
                        self.ability().levelDownAbility(i, null, null, self);
                    }
                break;
            }
        }
        while (self.skillPointHistory().length > c) {
            self.ability().levelDownAbility(self.skillPointHistory()[self.skillPointHistory().length-1], null, null, self);
        }
        return c-self.skillPointHistory().length;
    }, this);
    self.primaryAttribute = ko.pureComputed(function () {
        var v = self.heroData().attributeprimary;
        if (v === 'DOTA_ATTRIBUTE_AGILITY') return 'agi';
        if (v === 'DOTA_ATTRIBUTE_INTELLECT') return 'int';
        if (v === 'DOTA_ATTRIBUTE_STRENGTH') return 'str';
        return '';
    });
    self.totalExp = ko.pureComputed(function () {
        return my.prototype.totalExp[self.selectedHeroLevel() - 1];
    });
    self.nextLevelExp = ko.pureComputed(function () {
        return my.prototype.nextLevelExp[self.selectedHeroLevel() - 1];
    });
    self.startingArmor = ko.pureComputed(function () {
        return (self.heroData().attributebaseagility * .14 + self.heroData().armorphysical).toFixed(2);
    });
    self.respawnTime = ko.pureComputed(function () {
        return 5 + 3.8 * self.selectedHeroLevel();
    });
    self.totalAttribute = function (a) {
        if (a === 'agi') return parseFloat(self.totalAgi());
        if (a === 'int') return parseFloat(self.totalInt());
        if (a === 'str') return parseFloat(self.totalStr());
        return 0;
    };
    self.totalAgi = ko.pureComputed(function () {
        return (self.heroData().attributebaseagility
                + self.heroData().attributeagilitygain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('agi') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getAgility()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.intStolen = ko.observable(0).extend({ numeric: 0 });
    self.totalInt = ko.pureComputed(function () {
        return (self.heroData().attributebaseintelligence 
                + self.heroData().attributeintelligencegain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('int') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getIntelligence()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction() + self.intStolen()
               ).toFixed(2);
    });
    self.totalStr = ko.pureComputed(function () {
        return (self.heroData().attributebasestrength 
                + self.heroData().attributestrengthgain * (self.selectedHeroLevel() - 1) 
                + self.inventory.getAttributes('str') 
                + self.ability().getAttributeBonusLevel() * 2
                + self.ability().getStrength()
                + self.enemy().ability().getStrengthReduction()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.health = ko.pureComputed(function () {
        return (self.heroData().statushealth + Math.floor(self.totalStr()) * 20 
                + self.inventory.getHealth()
                + self.ability().getHealth()).toFixed(2);
    });
    self.healthregen = ko.pureComputed(function () {
        var healthRegenAura = [self.inventory.getHealthRegenAura, self.buffs.itemBuffs.getHealthRegenAura].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value: 0, excludeList: []});
        return (self.heroData().statushealthregen + self.totalStr() * .03 
                + self.inventory.getHealthRegen() 
                + self.ability().getHealthRegen()
                + self.buffs.getHealthRegen()
                + healthRegenAura.value
                ).toFixed(2);
    });
    self.mana = ko.pureComputed(function () {
        return (self.heroData().statusmana
                + self.totalInt() * 12
                + self.inventory.getMana()
                + self.ability().getMana()).toFixed(2);
    });
    self.manaregen = ko.pureComputed(function () {
        return ((self.heroData().statusmanaregen 
                + self.totalInt() * .04 
                + self.ability().getManaRegen()) 
                * (1 + self.inventory.getManaRegenPercent()) 
                + (self.heroId() === 'crystal_maiden' ? self.ability().getManaRegenArcaneAura() * 2 : self.buffs.getManaRegenArcaneAura())
                + self.inventory.getManaRegenBloodstone()
                + self.inventory.getManaRegen()
                - self.enemy().ability().getManaRegenReduction()).toFixed(2);
    });
    self.totalArmorPhysical = ko.pureComputed(function () {
        var armorAura = [self.inventory.getArmorAura, self.buffs.itemBuffs.getArmorAura].reduce(function (memo, fn) {
            var obj = fn(memo.attributes);
            return obj;
        }, {value:0, attributes:[]});
        var armorReduction = [self.enemy().inventory.getArmorReduction, self.debuffs.itemBuffs.getArmorReduction].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value: 0, excludeList: []});
        return (self.enemy().ability().getArmorBaseReduction() * self.debuffs.getArmorBaseReduction() * (self.heroData().armorphysical + self.totalAgi() * .14)
                + self.inventory.getArmor()
                //+ self.inventory.getArmorAura().value
                //+ self.enemy().inventory.getArmorReduction()
                + self.ability().getArmor()
                + self.enemy().ability().getArmorReduction()
                + self.buffs.getArmor()
                + self.buffs.itemBuffs.getArmor()
                + self.debuffs.getArmorReduction()
                //+ self.buffs.itemBuffs.getArmorAura().value
                + armorAura.value
                + armorReduction.value
                //+ self.debuffs.getArmorReduction()
                ).toFixed(2);
    });
    self.totalArmorPhysicalReduction = ko.pureComputed(function () {
        var totalArmor = self.totalArmorPhysical();
        if (totalArmor >= 0) {
            return ((0.06 * self.totalArmorPhysical()) / (1 + 0.06 * self.totalArmorPhysical()) * 100).toFixed(2);
        }
        else {
            return -((0.06 * -self.totalArmorPhysical()) / (1 + 0.06 * -self.totalArmorPhysical()) * 100).toFixed(2);
        }
    });
    self.totalMovementSpeed = ko.pureComputed(function () {
        var MIN_MOVESPEED = 100;
        var ms = (self.ability().setMovementSpeed() > 0 ? self.ability().setMovementSpeed() : self.buffs.setMovementSpeed());
        if (ms > 0) {
            return ms;
        }
        else {
            var movementSpeedPercent = [self.inventory.getMovementSpeedPercent, self.buffs.itemBuffs.getMovementSpeedPercent].reduce(function (memo, fn) {
                var obj = fn(memo.excludeList);
                obj.value += memo.value;
                return obj;
            }, {value:0, excludeList:[]});
            var movementSpeedPercentReduction = [self.enemy().inventory.getMovementSpeedPercentReduction, self.debuffs.itemBuffs.getMovementSpeedPercentReduction].reduce(function (memo, fn) {
                var obj = fn(memo.excludeList);
                obj.value += memo.value;
                return obj;
            }, {value:0, excludeList:[]});
            return Math.max(
                self.enemy().inventory.isSheeped() || self.debuffs.itemBuffs.isSheeped() ? 140 :
                (self.heroData().movementspeed + self.inventory.getMovementSpeedFlat()+ self.ability().getMovementSpeedFlat()) * 
                (1 //+ self.inventory.getMovementSpeedPercent() 
                   + movementSpeedPercent.value
                   + movementSpeedPercentReduction.value
                   + self.ability().getMovementSpeedPercent() 
                   //+ self.enemy().inventory.getMovementSpeedPercentReduction() 
                   + self.enemy().ability().getMovementSpeedPercentReduction() 
                   + self.buffs.getMovementSpeedPercent() 
                   + self.debuffs.getMovementSpeedPercentReduction()
                   + self.unit().ability().getMovementSpeedPercent() 
                )
            , MIN_MOVESPEED).toFixed(2);
        }
    });
    self.totalTurnRate = ko.pureComputed(function () {
        return (self.heroData().movementturnrate 
                * (1 + self.enemy().ability().getTurnRateReduction()
                     + self.debuffs.getTurnRateReduction())).toFixed(2);
    });
    self.baseDamage = ko.pureComputed(function () {
        var totalAttribute = self.totalAttribute(self.primaryAttribute()),
            abilityBaseDamage = self.ability().getBaseDamage(),
            minDamage = self.heroData().attackdamagemin,
            maxDamage = self.heroData().attackdamagemax;
        return [Math.floor((minDamage + totalAttribute + abilityBaseDamage.total) * self.ability().getSelfBaseDamageReductionPct() * self.enemy().ability().getBaseDamageReductionPct() * self.debuffs.getBaseDamageReductionPct() * self.debuffs.itemBuffs.getBaseDamageReductionPct() * abilityBaseDamage.multiplier),
                Math.floor((maxDamage + totalAttribute + abilityBaseDamage.total) * self.ability().getSelfBaseDamageReductionPct() * self.enemy().ability().getBaseDamageReductionPct() * self.debuffs.getBaseDamageReductionPct() * self.debuffs.itemBuffs.getBaseDamageReductionPct() * abilityBaseDamage.multiplier)];
    });
    self.baseDamageAvg = ko.pureComputed(function () {
        return (self.baseDamage()[0] + self.baseDamage()[1]) / 2;
    });
    self.baseDamageMin = ko.pureComputed(function () {
        return self.baseDamage()[0];
    });
    self.baseDamageMax = ko.pureComputed(function () {
        return self.baseDamage()[1];
    });
    self.bonusDamage = ko.pureComputed(function () {
        return ((self.inventory.getBonusDamage().total
                + self.ability().getBonusDamage().total
                + self.buffs.getBonusDamage().total
                + Math.floor((self.baseDamage()[0] + self.baseDamage()[1]) / 2 
                              * (self.buffs.itemBuffs.getBonusDamagePercent(self.inventory.getBonusDamagePercent()).total
                                 + self.ability().getBonusDamagePercent().total
                                 + self.buffs.getBonusDamagePercent().total
                                )
                            )
                + Math.floor(
                    (self.heroData().attacktype == 'DOTA_UNIT_CAP_RANGED_ATTACK' 
                        ? ((self.heroId() == 'drow_ranger') ? self.ability().getBonusDamagePrecisionAura().total[0] * self.totalAgi() : self.buffs.getBonusDamagePrecisionAura().total[1])
                        : 0)
                  )
                + Math.floor(
                    ((self.heroId() == 'riki') ? self.ability().getBonusDamageBackstab().total[0] * self.totalAgi() : 0)
                  )
                ) * self.ability().getSelfBaseDamageReductionPct()
                  * self.enemy().ability().getBaseDamageReductionPct()
                  * self.debuffs.itemBuffs.getBaseDamageReductionPct());
    });
    self.bonusDamageReduction = ko.pureComputed(function () {
        return Math.abs(self.enemy().ability().getBonusDamageReduction() + self.debuffs.getBonusDamageReduction());
    });
    self.damageAvg = ko.pureComputed(function () {
        return (self.baseDamage()[0] + self.baseDamage()[1]) / 2 + self.bonusDamage();
    });
    self.damageMin = ko.pureComputed(function () {
        return self.baseDamage()[0] + self.bonusDamage();
    });
    self.damageMax = ko.pureComputed(function () {
        return self.baseDamage()[1] + self.bonusDamage();
    });
    self.damage = ko.pureComputed(function () {
        return [self.baseDamage()[0] + self.bonusDamage(),
                self.baseDamage()[1] + self.bonusDamage()];
    });
    self.totalMagicResistanceProduct = ko.pureComputed(function () {
        return (1 - self.heroData().magicalresistance / 100) 
                * self.inventory.getMagicResist()
                * self.ability().getMagicResist()
                * self.buffs.getMagicResist()
                * self.inventory.getMagicResistReductionSelf()
                * self.enemy().inventory.getMagicResistReduction()
                * self.enemy().ability().getMagicResistReduction()
                * self.debuffs.getMagicResistReduction()
                * self.debuffs.itemBuffs.getMagicResistReduction();
    });
    self.totalMagicResistance = ko.pureComputed(function () {
        return ((1 - self.totalMagicResistanceProduct()) * 100).toFixed(2);
    });
    self.bat = ko.pureComputed(function () {
        var abilityBAT = self.ability().getBAT();
        if (abilityBAT > 0) {
            return abilityBAT;
        }
        return self.heroData().attackrate;
    });
    self.ias = ko.pureComputed(function () {
        var attackSpeed = [self.inventory.getAttackSpeed, self.buffs.itemBuffs.getAttackSpeed].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value:0, excludeList:[]});
        var attackSpeedReduction = [self.enemy().inventory.getAttackSpeedReduction, self.debuffs.itemBuffs.getAttackSpeedReduction].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value += memo.value;
            return obj;
        }, {value:0, excludeList: []});
        var val = parseFloat(self.totalAgi()) 
                //+ self.inventory.getAttackSpeed() 
                + attackSpeed.value
                + attackSpeedReduction.value
                //+ self.enemy().inventory.getAttackSpeedReduction() 
                + self.ability().getAttackSpeed() 
                + self.enemy().ability().getAttackSpeedReduction() 
                + self.buffs.getAttackSpeed() 
                + self.debuffs.getAttackSpeedReduction()
                + self.unit().ability().getAttackSpeed(); 
        if (val < -80) {
            return -80;
        }
        else if (val > 500) {
            return 500;
        }
        return val.toFixed(2);
    });
    self.attackTime = ko.pureComputed(function () {
        return (self.bat() / (1 + self.ias() / 100)).toFixed(2);
    });
    self.attacksPerSecond = ko.pureComputed(function () {
        return ((1 + self.ias() / 100) / self.bat()).toFixed(2);
    });
    self.evasion = ko.pureComputed(function () {
        if (self.enemy().inventory.isSheeped() || self.debuffs.itemBuffs.isSheeped()) return 0;
        var e = self.ability().setEvasion();
        if (e) {
            return (e * 100).toFixed(2);
        }
        else {
            return ((1-(self.inventory.getEvasion() * self.ability().getEvasion() * self.ability().getEvasionBacktrack() * self.buffs.itemBuffs.getEvasion())) * 100).toFixed(2);
        }
    });
    self.ehpPhysical = ko.pureComputed(function () {
        var evasion = self.enemy().inventory.isSheeped() || self.debuffs.itemBuffs.isSheeped() ? 1 : self.inventory.getEvasion() * self.ability().getEvasion() * self.buffs.itemBuffs.getEvasion();
        if (self.totalArmorPhysical() >= 0) {
            var ehp = self.health() * (1 + .06 * self.totalArmorPhysical());
        }
        else {
            var ehp = self.health() * (1 - .06 * self.totalArmorPhysical()) / (1 - .12 * self.totalArmorPhysical());
        }
        ehp /= (1 - (1 - (evasion * self.ability().getEvasionBacktrack())));
        ehp /= (1 - parseFloat(self.enemy().missChance()) / 100);
        ehp *= (self.inventory.activeItems().some(function (item) {return item.item == 'mask_of_madness';}) ? (1 / 1.3) : 1);
        ehp *= (1 / self.ability().getDamageReduction());
        ehp *= (1 / self.buffs.getDamageReduction());
        ehp *= (1 / self.enemy().ability().getDamageAmplification());
        ehp *= (1 / self.debuffs.getDamageAmplification());
        return ehp.toFixed(2);
    });
    self.ehpMagical = ko.pureComputed(function () {
        var ehp = self.health() / self.totalMagicResistanceProduct();
        ehp *= (self.inventory.activeItems().some(function (item) {return item.item == 'mask_of_madness';}) ? (1 / 1.3) : 1);
        ehp *= (1 / self.ability().getDamageReduction());
        ehp *= (1 / self.buffs.getDamageReduction());
        ehp *= (1 / self.ability().getEvasionBacktrack());
        ehp *= (1 / self.enemy().ability().getDamageAmplification());
        ehp *= (1 / self.debuffs.getDamageAmplification());
        return ehp.toFixed(2);
    });
    self.bash = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        return ((1 - (self.inventory.getBash(attacktype) * self.ability().getBash())) * 100).toFixed(2);
    });
    
    self.critChance = ko.pureComputed(function () {
        return ((1 - (self.inventory.getCritChance() * self.ability().getCritChance())) * 100).toFixed(2);
    });

    my.prototype.HeroDamageMixin(self);
    
    /*self.critDamage = ko.computed(function () {
        self.critInfo();
        return 0;
    });*/
    self.missChance = ko.pureComputed(function () {
        var missDebuff = [self.enemy().inventory.getMissChance, self.debuffs.itemBuffs.getMissChance].reduce(function (memo, fn) {
            var obj = fn(memo.excludeList);
            obj.value *= memo.value;
            return obj;
        }, {value:1, excludeList:[]});
        return ((1 - (self.enemy().ability().getMissChance() * self.debuffs.getMissChance() * missDebuff.value)) * 100).toFixed(2);
    });
    self.totalattackrange = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        return self.heroData().attackrange + self.ability().getAttackRange() + self.inventory.getAttackRange(attacktype).value;
    });
    self.visionrangeday = ko.pureComputed(function () {
        return (self.heroData().visiondaytimerange) * (1 + self.enemy().ability().getVisionRangePctReduction() + self.debuffs.getVisionRangePctReduction());
    });
    self.visionrangenight = ko.pureComputed(function () {
        return (self.heroData().visionnighttimerange + self.inventory.getVisionRangeNight() + self.ability().getVisionRangeNight()) * (1 + self.enemy().ability().getVisionRangePctReduction() + self.debuffs.getVisionRangePctReduction());
    });
    self.lifesteal = ko.pureComputed(function () {
        var total = self.inventory.getLifesteal() + self.ability().getLifesteal() + self.buffs.getLifesteal();
        if (self.heroData().attacktype == 'DOTA_UNIT_CAP_MELEE_ATTACK') {
            var lifestealAura = [self.inventory.getLifestealAura, self.buffs.itemBuffs.getLifestealAura].reduce(function (memo, fn) {
                var obj = fn(memo.excludeList);
                obj.value += memo.value;
                return obj;
            }, {value: 0, excludeList: []});
            total += lifestealAura.value;
        }
        return (total).toFixed(2);
    });
    
    self.addIllusion = function (data, event) {
        self.illusions.push(ko.observable(new my.prototype.IllusionViewModel(0, self, self.illusionAbilityLevel())));
    };
    
    self.diffProperties = my.prototype.diffProperties;
    self.diff = {};

    for (var i = 0; i < self.diffProperties.length; i++) {
        var index = i;
        self.diff[self.diffProperties[index]] = self.getDiffFunction(self.diffProperties[index]);
    }
};

my.prototype.HeroModel.prototype.getDiffFunction = function (prop) {
    var self = this;
    return ko.computed(function () {
        if (prop == 'baseDamage') {
            return [self[prop]()[0] - self.heroCompare()[prop]()[0], self[prop]()[1] - self.heroCompare()[prop]()[1]];
        }
        else {
            return self[prop]() - self.heroCompare()[prop]();
        }
    }, this, { deferEvaluation: true });
}

my.prototype.HeroModel.prototype.getAbilityLevelMax = function (data) {
    if (data.abilitytype === 'DOTA_ABILITY_TYPE_ATTRIBUTES') {
        return 10;
    }
    else if (data.name === 'invoker_quas' || data.name === 'invoker_wex' || data.name === 'invoker_exort') {
        return 7;
    }
    else if (data.name === 'invoker_invoke') {
        return 4;
    }
    else if (data.name === 'earth_spirit_stone_caller' || data.name === 'ogre_magi_unrefined_fireblast') {
        return 1;
    }
    else if (data.abilitytype === 'DOTA_ABILITY_TYPE_ULTIMATE' || data.name === 'keeper_of_the_light_recall' ||
             data.name === 'keeper_of_the_light_blinding_light' || data.name === 'ember_spirit_activate_fire_remnant' ||
             data.name === 'lone_druid_true_form_battle_cry') {
        return 3;
    }
    else if (data.name === 'puck_ethereal_jaunt'  || data.name === 'shadow_demon_shadow_poison_release' ||
             data.name === 'templar_assassin_trap' || data.name === 'spectre_reality') {
        return 0;
    }
    else if (data.name === 'invoker_cold_snap'  || data.name === 'invoker_ghost_walk' || data.name === 'invoker_tornado' || 
             data.name === 'invoker_emp' || data.name === 'invoker_alacrity' || data.name === 'invoker_chaos_meteor' || 
             data.name === 'invoker_sun_strike' || data.name === 'invoker_forge_spirit' || data.name === 'invoker_ice_wall' || 
             data.name === 'invoker_deafening_blast') {
        return 0;
    }
    else if (data.name === 'techies_minefield_sign' || data.name === 'techies_focused_detonate') {
        return 0;
    }
    else {
        return 4;
    }
};
},{"./herocalc_core":4,"./herocalc_hero_damage":8,"./herocalc_knockout":10}],7:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');

var my = require("./herocalc_core");

my.prototype.CloneOption = function (name, displayname, levels, image, level) {
    this.heroName = ko.computed(function() {
        return (levels > 0) ? name + (level() <= levels ? level() : 1) : name;
    });
    this.heroDisplayName = displayname;
    this.image = image;
    this.levels = levels;
};

my.prototype.CloneViewModel = function (h,p) {
    var self = new my.prototype.HeroModel(h);
    self.parent = p;
    /*self.selectedHero(my.prototype.findWhere(self.availableHeroes(), {heroName: 'meepo'}));
    self.hero = ko.computed(function() {
        return ko.wrap.fromJS(my.prototype.heroData['npc_dota_hero_meepo']);
    });*/
    return self;
}
},{"./herocalc_core":4,"./herocalc_knockout":10}],8:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.DamageTypeColor = {
    'physical': '#979aa2',
    'pure': 'goldenrod',
    'magic': '#428bca',
    'default': '#979aa2'
}

my.prototype.HeroDamageMixin = function (self) {
    self.critInfo = ko.pureComputed(function () {
        var critSources = self.inventory.getCritSource();
        my.prototype.extend(critSources, self.ability().getCritSource());
        my.prototype.extend(critSources, self.buffs.getCritSource());
        var critSourcesArray = [];
        for (var prop in critSources) {
            var el = critSources[prop];
            el.name = prop
            critSourcesArray.push(el);
        }
        function compareByMultiplier(a,b) {
            if (a.multiplier < b.multiplier)
                return 1;
            if (a.multiplier > b.multiplier)
                return -1;
            return 0;
        }

        critSourcesArray.sort(compareByMultiplier);
        
        var result = [];
        var critTotal = 0;
        for (var i = 0; i < critSourcesArray.length; i++) {
            var total = 1;
            for (var j = 0; j < i; j++) {
                for (var k = 0; k <critSourcesArray[j].count; k++) {
                    total *= (1 - critSourcesArray[j].chance);
                }
            }
            var total2 = 1;
            for (var k = 0; k < critSourcesArray[i].count; k++) {
                total2 *= (1 - critSourcesArray[i].chance);
            }
            total *= (1 - total2);
            critTotal += total;
            if (critSourcesArray[i].count > 1) {
                result.push({
                    'name':critSourcesArray[i].displayname + ' x' + critSourcesArray[i].count,
                    'chance':critSourcesArray[i].chance,
                    'multiplier':critSourcesArray[i].multiplier,
                    'count':critSourcesArray[i].count,
                    'totalChance':total
                });
            }
            else {
                result.push({
                    'name':critSourcesArray[i].displayname,
                    'chance':critSourcesArray[i].chance,
                    'multiplier':critSourcesArray[i].multiplier,
                    'count':critSourcesArray[i].count,
                    'totalChance':total
                });
            }
        }
        return { sources: result, total: critTotal };
    });

    self.cleaveInfo = ko.pureComputed(function () {
        var cleaveSources = self.inventory.getCleaveSource();
        my.prototype.extend(cleaveSources, self.ability().getCleaveSource());
        my.prototype.extend(cleaveSources, self.buffs.getCleaveSource());
        var cleaveSourcesArray = [];
        for (var prop in cleaveSources) {
            var el = cleaveSources[prop];
            el.name = prop
            cleaveSourcesArray.push(el);
        }
        function compareByRadius(a,b) {
            if (a.radius < b.radius)
                return 1;
            if (a.radius > b.radius)
                return -1;
            return 0;
        }

        cleaveSourcesArray.sort(compareByRadius);
        var cleaveSourcesByRadius = {};
        for (var i = 0; i < cleaveSourcesArray.length; i++) {
            var total = 0;
            for (var j = 0; j <cleaveSourcesArray.length; j++) {
                if (cleaveSourcesArray[j].radius >= cleaveSourcesArray[i].radius) {
                    total += cleaveSourcesArray[j].magnitude * cleaveSourcesArray[j].count;
                }
            }
            cleaveSourcesByRadius[cleaveSourcesArray[i].radius] = total;
        }
        var result = [];
        for (var prop in cleaveSourcesByRadius) {
            result.push({
                'radius':prop,
                'magnitude':cleaveSourcesByRadius[prop]
            });
        }
        return result;
    });
    
    self.bashInfo = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        var bashSources = self.inventory.getBashSource(attacktype);
        my.prototype.extend(bashSources, self.ability().getBashSource());
        var bashSourcesArray = [];
        for (var prop in bashSources) {
            var el = bashSources[prop];
            el.name = prop
            bashSourcesArray.push(el);
        }
        function compareByDuration(a, b) {
            if (a.duration < b.duration)
                return 1;
            if (a.duration > b.duration)
                return -1;
            return 0;
        }

        //bashSourcesArray.sort(compareByDuration);
        
        var result = [];
        var bashTotal = 0;
        for (var i = 0;i < bashSourcesArray.length; i++) {
            var total = 1;
            for (var j = 0; j < i; j++) {
                for (var k = 0; k < bashSourcesArray[j].count; k++) {
                    total *= (1 - bashSourcesArray[j].chance);
                }
            }
            var total2 = 1;
            for (var k = 0; k < bashSourcesArray[i].count; k++) {
                total2 *= (1 - bashSourcesArray[i].chance);
            }
            total *= (1 - total2);
            bashTotal += total;
            if (bashSourcesArray[i].name === 'spirit_breaker_greater_bash') {
                var d = bashSourcesArray[i].damage * self.totalMovementSpeed();
            }
            else {
                var d = bashSourcesArray[i].damage;
            }
            if (bashSourcesArray[i].count > 1) {
                result.push({
                    'name':bashSourcesArray[i].displayname, // + ' x' + bashSourcesArray[i].count,
                    'chance':bashSourcesArray[i].chance,
                    'damage':d,
                    'count':bashSourcesArray[i].count,
                    'damageType':bashSourcesArray[i].damageType,
                    'totalChance':total
                });
            }
            else {
                result.push({
                    'name':bashSourcesArray[i].displayname,
                    'chance':bashSourcesArray[i].chance,
                    'damage':d,
                    'count':bashSourcesArray[i].count,
                    'damageType':bashSourcesArray[i].damageType,
                    'totalChance':total
                });
            }

        }
        return { sources: result, total: bashTotal };
    });
    
    self.orbProcInfo = ko.pureComputed(function () {
        var attacktype = self.heroData().attacktype;
        var damageSources = self.inventory.getOrbProcSource();
        var damageSourcesArray = [];
        for (var prop in damageSources) {
            var el = damageSources[prop];
            el.name = prop
            damageSourcesArray.push(el);
        }
        function compareByDamage(a, b) {
            if (a.priority > b.priority) {
                return 1;
            }
            if (a.priority < b.priority) {
                return -1;
            }
            if (a.damage < b.damage)
                return 1;
            if (a.damage > b.damage)
                return -1;
            return 0;
        }

        damageSourcesArray.sort(compareByDamage);
        
        var result = [];
        var damageTotal = 0;
        for (var i=0 ; i < damageSourcesArray.length; i++) {
            var total = 1;
            for (var j = 0; j < i; j++) {
                for (var k = 0; k < damageSourcesArray[j].count; k++) {
                    total *= (1 - damageSourcesArray[j].chance);
                }
            }
            var total2 = 1;
            for (var k = 0; k < damageSourcesArray[i].count; k++) {
                total2 *= (1 - damageSourcesArray[i].chance);
            }
            total *= (1 - total2);
            damageTotal += total;
            if (damageSourcesArray[i].count > 1) {
                result.push({
                    'name':damageSourcesArray[i].displayname + ' x' + damageSourcesArray[i].count,
                    'chance':damageSourcesArray[i].chance,
                    'damage':damageSourcesArray[i].damage,
                    'count':damageSourcesArray[i].count,
                    'damageType':damageSourcesArray[i].damageType,
                    'totalChance':total
                });
            }
            else {
                result.push({
                    'name':damageSourcesArray[i].displayname,
                    'chance':damageSourcesArray[i].chance,
                    'damage':damageSourcesArray[i].damage,
                    'count':damageSourcesArray[i].count,
                    'damageType':damageSourcesArray[i].damageType,
                    'totalChance':total
                });
            }
        }
        return { sources: result, total: damageTotal };
    });
    
    self.getReducedDamage = function (value, type) {
        var result = value;
        switch (type) {
            case 'physical':
                result = value * (1 - (0.06 * self.enemy().totalArmorPhysical()) / (1 + 0.06 * Math.abs(self.enemy().totalArmorPhysical())));
            break;
            case 'magic':
                result = value * (1 - self.enemy().totalMagicResistance() / 100);
            break;
            case 'pure':
                result = value;
            break;
            case 'composite':
                result = value * (1 - (0.06 * self.enemy().totalArmorPhysical()) / (1 + 0.06 * Math.abs(self.enemy().totalArmorPhysical())));
                result *= (1 - self.enemy().totalMagicResistance() / 100);
            break;
        }
        result *= self.ability().getDamageAmplification() * self.debuffs.getDamageAmplification();
        result *= self.enemy().ability().getDamageReduction() * self.enemy().buffs.getDamageReduction();
        return result;
    }
    
    self.damageTotalInfo = ko.pureComputed(function () {
        var bonusDamageArray = [
            self.ability().getBonusDamage().sources,
            self.buffs.getBonusDamage().sources
        ],
        bonusDamagePctArray = [
            self.ability().getBonusDamagePercent().sources,
            self.buffs.getBonusDamagePercent().sources
        ],
        itemBonusDamage = self.inventory.getBonusDamage().sources,
        itemBonusDamagePct = self.buffs.itemBuffs.getBonusDamagePercent(self.inventory.getBonusDamagePercent()).sources,
        critSources = self.critInfo(),
        abilityOrbSources = self.ability().getOrbSource(),
        itemOrbSources = self.inventory.getOrbSource(),
        itemProcOrbSources = self.orbProcInfo(),
        bashSources = self.bashInfo(),
        
        attackSources = [];
        
        attackSources.push({
            name: 'Base Attack',
            cooldown: 1
        });
        
        // weaver_geminate_attack
        if (self.heroId() === 'weaver') {
            var a = self.ability().abilities().find(function (ability) {
                return ability.name === 'weaver_geminate_attack';
            });
            if (a) {
                if (a.level() > 0) {
                    var cd = a.cooldown[a.level() - 1];
                    attackSources.push({
                        name: a.displayname,
                        cooldown: (1/cd)
                    });
                }
            }
        }
        
        // echo_sabre
        var item = self.inventory.items().find(function (o) { return o.item === "echo_sabre" && o.enabled(); });
        if (item && self.heroData().attacktype === 'DOTA_UNIT_CAP_MELEE_ATTACK') {
            var item_echo_sabre = my.prototype.itemData['item_echo_sabre'];
            attackSources.push({
                name: item_echo_sabre.displayname,
                cooldown: (1/item_echo_sabre.cooldown)
            });
        }

        var attacks = attackSources.map(function (a) {
            var baseDamage = (self.baseDamage()[0] + self.baseDamage()[1]) / 2,
            totalDamage = 0,
            totalCritableDamage = 0,
            totalCrit = 0,
            geminateAttack = { damage: 0, damageReduced: 0, cooldown: 6, active: false },
            echoSabreAttack = { damage: 0, damageReduced: 0, cooldown: my.prototype.itemData['item_echo_sabre'].cooldown[0], active: false },
            damage = {
                pure: 0,
                physical: 0,
                magic: 0
            },
            result = [],
            crits = [];
            
            // base damage
            result.push({
                name: 'Base Damage',
                damage: baseDamage,
                damageType: 'physical',
                damageReduced: self.getReducedDamage(baseDamage, 'physical'),
                enabled: ko.observable(true)
            });
            totalDamage += baseDamage;
            totalCritableDamage += baseDamage;
            damage.physical += baseDamage;
            
            // bonus damage from items
            for (i in itemBonusDamage) {
                var d = itemBonusDamage[i].damage*itemBonusDamage[i].count * self.ability().getSelfBaseDamageReductionPct() * self.enemy().ability().getBaseDamageReductionPct() * self.debuffs.itemBuffs.getBaseDamageReductionPct();
                result.push({
                    name: itemBonusDamage[i].displayname + (itemBonusDamage[i].count > 1 ? ' x' + itemBonusDamage[i].count : ''),
                    damage: d,
                    damageType: itemBonusDamage[i].damageType,
                    damageReduced: self.getReducedDamage(d, itemBonusDamage[i].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                totalCritableDamage += d;
                damage[itemBonusDamage[i].damageType] += d;
            }

            // bonus damage percent from items
            for (i in itemBonusDamagePct) {
                var d = baseDamage * itemBonusDamagePct[i].damage;
                result.push({
                    name: itemBonusDamagePct[i].displayname,
                    damage: d,
                    damageType: itemBonusDamagePct[i].damageType,
                    damageReduced: self.getReducedDamage(d, itemBonusDamagePct[i].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                totalCritableDamage += d;
                damage[itemBonusDamagePct[i].damageType] += d;
            }
            
            // bonus damage from abilities and buffs
            for (var i = 0; i < bonusDamageArray.length; i++) {
                for (j in bonusDamageArray[i]) {
                    var d = bonusDamageArray[i][j].damage;
                    result.push({
                        name: bonusDamageArray[i][j].displayname,
                        damage: d,
                        damageType: bonusDamageArray[i][j].damageType,
                        damageReduced: self.getReducedDamage(d, bonusDamageArray[i][j].damageType),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    totalCritableDamage += d;
                    damage[bonusDamageArray[i][j].damageType] += d;
                }
            }
            
            // bonus damage percent from abilities and buffs
            for (var i = 0; i < bonusDamagePctArray.length; i++) {
                for (j in bonusDamagePctArray[i]) {
                    var d = baseDamage * bonusDamagePctArray[i][j].damage;
                    result.push({
                        name: bonusDamagePctArray[i][j].displayname,
                        damage: d,
                        damageType: bonusDamagePctArray[i][j].damageType,
                        damageReduced: self.getReducedDamage(d, bonusDamagePctArray[i][j].damageType),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    totalCritableDamage += d;
                    damage[bonusDamagePctArray[i][j].damageType] += d;
                }
            }
            // drow_ranger_trueshot
            if (self.heroData().attacktype === 'DOTA_UNIT_CAP_RANGED_ATTACK') {
                if (self.heroId() === 'drow_ranger') {
                    var s = self.ability().getBonusDamagePrecisionAura().sources;
                    var index = 0;
                }
                else {
                    var s = self.buffs.getBonusDamagePrecisionAura().sources;
                    var index = 1;
                }
                if (s[index] != undefined) {
                    if (self.heroId() === 'drow_ranger') {
                        var d = s[index].damage * self.totalAgi();
                    }
                    else {
                        var d = s[index].damage;
                    }
                    result.push({
                        name: s[index].displayname,
                        damage: d,
                        damageType: 'physical',
                        damageReduced: self.getReducedDamage(d, 'physical'),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    totalCritableDamage += d;
                    damage.physical += d;                    
                }
            }
            
            // riki_backstab
            if (self.heroId() === 'riki') {
                var s = self.ability().getBonusDamageBackstab().sources;
                var index = 0;
            }
            else {
                var s = self.buffs.getBonusDamageBackstab().sources;
                var index = 1;
            }
            if (s[index] != undefined) {
                if (self.heroId() === 'riki') {
                    var d = s[index].damage * self.totalAgi();
                }
                else {
                    var d = s[index].damage;
                }
                result.push({
                    name: s[index].displayname,
                    damage: d,
                    damageType: 'physical',
                    damageReduced: self.getReducedDamage(d, 'physical'),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                //totalCritableDamage += d;
                damage.physical += d;                    
            }

            // bash damage
            for (var i = 0; i < bashSources.sources.length; i++) {
                var o = bashSources.sources[i];
                var d = bashSources.sources[i].damage;
                var cd = self.attacksPerSecond();
                if (o.cooldown) {
                    cd = Math.max(1/o.cooldown, cd);
                }
                for (var j = 0; j < bashSources.sources[i].count; j++) {
                    result.push({
                        name: bashSources.sources[i].name,
                        damage: d,
                        damageType: bashSources.sources[i].damageType,
                        damageReduced: self.getReducedDamage(d, bashSources.sources[i].damageType),
                        dps: d * cd * bashSources.sources[i].chance,
                        dpsReduced: self.getReducedDamage(d, bashSources.sources[i].damageType) * cd * bashSources.sources[i].chance,
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    damage[bashSources.sources[i].damageType] += d;
                }

            }
            
            // %-based orbs
            for (var i = 0; i < itemProcOrbSources.sources.length; i++) {
                var d = itemProcOrbSources.sources[i].damage * (1 - Math.pow(1 - itemProcOrbSources.sources[i].chance, itemProcOrbSources.sources[i].count));
                result.push({
                    name: itemProcOrbSources.sources[i].name,
                    damage: d,
                    damageType: itemProcOrbSources.sources[i].damageType,
                    damageReduced: self.getReducedDamage(d, itemProcOrbSources.sources[i].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                damage[itemProcOrbSources.sources[i].damageType] += d;
            }
            
            // ability orbs
            for (var orb in abilityOrbSources) {
                var d = abilityOrbSources[orb].damage * (1 - itemProcOrbSources.total);
                result.push({
                    name: abilityOrbSources[orb].displayname,
                    damage: d,
                    damageType: abilityOrbSources[orb].damageType,
                    damageReduced: self.getReducedDamage(d, abilityOrbSources[orb].damageType),
                    enabled: ko.observable(true)
                });
                totalDamage += d;
                damage[abilityOrbSources[orb].damageType] += d;
            }
            
            // item orbs
            if (Object.keys(abilityOrbSources).length === 0) {
                for (var orb in itemOrbSources) {
                    var d = itemOrbSources[orb].damage * (1 - itemProcOrbSources.total);
                    result.push({
                        name: itemOrbSources[orb].displayname,
                        damage: d,
                        damageType: itemOrbSources[orb].damageType,
                        damageReduced: self.getReducedDamage(d, itemOrbSources[orb].damageType),
                        enabled: ko.observable(true)
                    });
                    totalDamage += d;
                    damage[itemOrbSources[orb].damageType] += d;
                }            
            }
            
            // crit damage
            for (var i = 0; i < critSources.sources.length; i++) {
                var d = totalCritableDamage * (critSources.sources[i].multiplier - 1);// * critSources.sources[i].totalChance;
                crits.push({
                    name: critSources.sources[i].name + ', ' + critSources.sources[i].multiplier + 'x, ' + (critSources.sources[i].totalChance * 100).toFixed(1) + '%',
                    damage: d,
                    damageType: 'physical',
                    damageReduced: self.getReducedDamage(d, 'physical'),
                    enabled: ko.observable(true),
                    chance: critSources.sources[i].totalChance
                });
                totalCrit += d;
            }

            var totalReduced = self.getReducedDamage(damage.pure, 'pure') 
                    + self.getReducedDamage(damage.physical, 'physical')
                    + self.getReducedDamage(damage.magic, 'magic'),
                totalCritReduced = self.getReducedDamage(totalCrit, 'physical'),
                dps = {
                    base: totalDamage * self.attacksPerSecond(),
                    crit: totalCrit * self.attacksPerSecond(),
                    geminateAttack: geminateAttack.active ? geminateAttack.damage / geminateAttack.cooldown : 0,
                    reduced: {
                        base: totalReduced * self.attacksPerSecond(),
                        crit: totalCritReduced * self.attacksPerSecond(),
                        geminateAttack: geminateAttack.active ? self.getReducedDamage(geminateAttack.damage, 'physical') / geminateAttack.cooldown : 0,
                    }
                }
                
            crits.forEach(function (o) {
                if (!o.dps) {
                    o.dps = o.damage * (o.cooldown || self.attacksPerSecond()) * o.chance;
                }
                if (!o.dpsReduced) {
                    o.dpsReduced = o.damageReduced * (o.cooldown || self.attacksPerSecond()) * o.chance;
                }
            });
                
            result.forEach(function (o) {
                if (!o.dps) {
                    o.dps = o.damage * (o.cooldown || self.attacksPerSecond());
                }
                if (!o.dpsReduced) {
                    o.dpsReduced = o.damageReduced * (o.cooldown || self.attacksPerSecond());
                }
            });
            
            var totalCritChance = crits.reduce(function (memo, o) { return memo + o.chance }, 0);
                
            var t1Crit = ko.computed(function () {
                var c = crits.find(function (o) { return o.enabled(); });
                return c ? c.damage : 0;
            });
            var t2Crit = ko.computed(function () {
                var c = crits.find(function (o) { return o.enabled(); });
                return c ? c.damageReduced : 0;
            });
            var t3Crit = ko.computed(function () {
                return crits.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dps }, 0);
            });
            var t4Crit = ko.computed(function () {
                return crits.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dpsReduced }, 0);
            });
                
            var t1 = ko.computed(function () {
                return result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.damage }, 0) + t1Crit();
            });
            var t2 = ko.computed(function () {
                return result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.damageReduced }, 0) + t2Crit();
            });
            var t3 = ko.computed(function () {
                return (result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dps }, 0) + t3Crit()) * a.cooldown;
            });
            var t4 = ko.computed(function () {
                return (result.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.dpsReduced }, 0) + t4Crit()) * a.cooldown;
            });
            
            var totalCritRow = [t1Crit, t2Crit, t3Crit, t4Crit];
            
            var totalRow = [t1, t2, t3, t4];

            return {
                name: a.name + ' Subtotal',
                cooldown: a.cooldown,
                enabled: ko.observable(true),
                visible: ko.observable(true),
                totalCritChance: totalCritChance,
                totalCritRow: totalCritRow,
                totalRow: totalRow,
                sources: result,
                sourcesCrit: crits,
                total: totalDamage,
                totalCrit: totalCrit,
                totalGeminateAttack: totalDamage + geminateAttack.damage,
                totalGeminateAttackReduced: totalReduced + geminateAttack.damageReduced,
                geminateAttack: geminateAttack,
                totalCritReduced: totalCritReduced,
                totalReduced: totalReduced,
                sumTotal: totalDamage + totalCrit,
                sumTotalReduced: totalReduced + totalCritReduced,
                dps: {
                    base: dps.base,
                    crit: dps.base + dps.crit,
                    geminateAttack: dps.base + dps.geminateAttack,
                    total: dps.base + dps.crit + dps.geminateAttack,
                    reduced: {
                        base: dps.reduced.base,
                        crit: dps.reduced.base + dps.reduced.crit,
                        geminateAttack: dps.reduced.base + dps.reduced.geminateAttack,
                        total: dps.reduced.base + dps.reduced.crit + dps.reduced.geminateAttack
                    }
                }
            };
        });
        
        var t1 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[0]() }, 0);
        });
        var t2 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[1]() }, 0);
        });
        var t3 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[2]() }, 0);
        });
        var t4 = ko.computed(function () {
            return attacks.filter(function (o) { return o.enabled(); }).reduce(function (memo, o) { return memo + o.totalRow[3]() }, 0);
        });
            
        return {
            attacks: attacks,
            totalRow: [t1, t2, t3, t4]
        }
    });
    
    self.getDamageTypeColor = function (damageType) {
        return my.prototype.DamageTypeColor[damageType] || my.prototype.DamageTypeColor['default'];
    }
    
}
},{"./herocalc_core":4,"./herocalc_knockout":10}],9:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
var my = require("./herocalc_core");

my.prototype.stackableItems = ['clarity','flask','dust','ward_observer','ward_sentry','tango','tpscroll','smoke_of_deceit'],
my.prototype.levelitems = ['necronomicon','dagon','diffusal_blade','travel_boots'],
my.prototype.validItems = ["abyssal_blade","ultimate_scepter","courier","arcane_boots","armlet","assault","boots_of_elves","bfury","belt_of_strength","black_king_bar","blade_mail","blade_of_alacrity","blades_of_attack","blink","bloodstone","boots","travel_boots","bottle","bracer","broadsword","buckler","butterfly","chainmail","circlet","clarity","claymore","cloak","lesser_crit","greater_crit","dagon","demon_edge","desolator","diffusal_blade","rapier","ancient_janggo","dust","eagle","energy_booster","ethereal_blade","cyclone","skadi","flying_courier","force_staff","gauntlets","gem","ghost","gloves","hand_of_midas","headdress","flask","heart","heavens_halberd","helm_of_iron_will","helm_of_the_dominator","hood_of_defiance","hyperstone","branches","javelin","sphere","maelstrom","magic_stick","magic_wand","manta","mantle","mask_of_madness","medallion_of_courage","mekansm","mithril_hammer","mjollnir","monkey_king_bar","lifesteal","mystic_staff","necronomicon","null_talisman","oblivion_staff","ward_observer","ogre_axe","orb_of_venom","orchid","pers","phase_boots","pipe","platemail","point_booster","poor_mans_shield","power_treads","quarterstaff","quelling_blade","radiance","reaver","refresher","ring_of_aquila","ring_of_basilius","ring_of_health","ring_of_protection","ring_of_regen","robe","rod_of_atos","relic","sobi_mask","sange","sange_and_yasha","satanic","sheepstick","ward_sentry","shadow_amulet","invis_sword","shivas_guard","basher","slippers","smoke_of_deceit","soul_booster","soul_ring","staff_of_wizardry","stout_shield","talisman_of_evasion","tango","tpscroll","tranquil_boots","ultimate_orb","urn_of_shadows","vanguard","veil_of_discord","vitality_booster","vladmir","void_stone","wraith_band","yasha","crimson_guard","enchanted_mango","lotus_orb","glimmer_cape","guardian_greaves","moon_shard","silver_edge","solar_crest","octarine_core","aether_lens","faerie_fire","iron_talon","dragon_lance","echo_sabre","infused_raindrop","blight_stone","wind_lace","tome_of_knowledge","bloodthorn","hurricane_pike"],
my.prototype.itemsWithActive = ['solar_crest', 'heart','smoke_of_deceit','dust','ghost','tranquil_boots','phase_boots','power_treads','buckler','medallion_of_courage','ancient_janggo','mekansm','pipe','veil_of_discord','rod_of_atos','orchid','sheepstick','armlet','invis_sword','ethereal_blade','shivas_guard','manta','mask_of_madness','diffusal_blade','mjollnir','satanic','ring_of_basilius','ring_of_aquila', 'butterfly', 'moon_shard', 'silver_edge','bloodthorn','hurricane_pike'];

my.prototype.ItemInput = function (value, name, debuff) {
    if (my.prototype.itemData['item_' + value].ItemAliases instanceof Array) {
        var itemAlias = my.prototype.itemData['item_' + value].ItemAliases.join(' ');
    }
    else {
        var itemAlias = my.prototype.itemData['item_' + value].ItemAliases;
    }
    this.value = ko.observable(value);
    this.debuff = ko.observable(debuff);
    if (this.debuff()) {
        this.value = ko.observable(value + '|' + debuff.id);
        this.name = ko.observable(name + ' (' + debuff.name + ')');
        this.displayname = ko.observable(name + ' (' + debuff.name + ') <span style="display:none">' + ';' + itemAlias + '</span>');
    }
    else {
        this.value = ko.observable(value);
        this.name = ko.observable(name);
        this.displayname = ko.observable(name + ' <span style="display:none">' + ';' + itemAlias + '</span>');
    }
};

my.prototype.BasicInventoryViewModel = function (h) {
    var self = this;
    self.items = ko.observableArray([]);
    self.activeItems = ko.observableArray([]);
    self.addItem = function (data, event) {
        if (data.selectedItem() != undefined) {
            var new_item = {
                item: data.selectedItem().split('|')[0],
                state: ko.observable(0),
                size: data.itemInputValue(),
                enabled: ko.observable(true)
            }
            switch (new_item.item) {
                case 'dagon':
                    new_item.size = Math.min(new_item.size, 5);
                break;
                break;
                case 'travel_boots':
                case 'diffusal_blade':
                    new_item.size = Math.min(new_item.size, 2);
                break;
                case 'necronomicon':
                    new_item.size = Math.min(new_item.size, 3);
                break;
            }
            self.items.push(new_item);
            if (data.selectedItem() === 'ring_of_aquila' || data.selectedItem() === 'ring_of_basilius' || data.selectedItem() === 'heart') {
                self.toggleItem(undefined, new_item, undefined);
            }
        }
    };
    self.toggleItem = function (index, data, event) {
        if (my.prototype.itemsWithActive.indexOf(data.item) >= 0) {
            if (self.activeItems.indexOf(data) < 0) {
                self.activeItems.push(data);
            }
            else {
                self.activeItems.remove(data);
            }
            switch (data.item) {
                case 'power_treads':
                    if (data.state() < 2) {
                        data.state(data.state() + 1);
                    }
                    else {
                        data.state(0);
                    }                
                break;
                default:
                    if (data.state() == 0) {
                        data.state(1);
                    }
                    else {
                        data.state(0);
                    }                
                break;
            }
        }
    }.bind(this);
    self.removeItem = function (item) {
        self.activeItems.remove(item);
        self.items.remove(item);
    }.bind(this);
    self.toggleMuteItem = function (item) {
        item.enabled(!item.enabled());
    }.bind(this);      
    self.removeAll = function () {
        self.activeItems.removeAll();
        self.items.removeAll();
    }.bind(this);
}
my.prototype.BasicInventoryViewModel.prototype.getItemImage = function (data) {
    var state = ko.utils.unwrapObservable(data.state);
    switch (data.item) {
        case 'power_treads':
            if (state == 0) {
                return '/media/images/items/' + data.item + '_str.png';
            }
            else if (state == 1) {
                return '/media/images/items/' + data.item + '_int.png';
            }
            else {
                return '/media/images/items/' + data.item + '_agi.png';
            }
        break;
        case 'tranquil_boots':
        case 'ring_of_basilius':
            if (state == 0) {
                return '/media/images/items/' + data.item + '.png';
            }
            else {
                return '/media/images/items/' + data.item + '_active.png';
            }
        break;
        case 'armlet':
            if (state == 0) {
                return '/media/images/items/' + data.item + '.png';
            }
            else {
                return '/media/images/items/' + data.item + '_active.png';
            }
        break;
        case 'ring_of_aquila':
            if (state == 0) {
                return '/media/images/items/' + data.item + '_active.png';
            }
            else {
                return '/media/images/items/' + data.item + '.png';
            }
        break;
        case 'dagon':
        case 'diffusal_blade':
        case 'travel_boots':
        case 'necronomicon':
            if (data.size > 1) {
                return '/media/images/items/' + data.item + '_' + data.size + '.png';
            }
            else {
                return '/media/images/items/' + data.item + '.png';
            }
        break;
        default:
            return '/media/images/items/' + data.item + '.png';            
        break;
    }
};
my.prototype.BasicInventoryViewModel.prototype.getItemSizeLabel = function (data) {
    if (my.prototype.stackableItems.indexOf(data.item) != -1) {
        return '<span style="font-size:10px">Qty: </span>' + data.size;
    }
    else if (my.prototype.levelitems.indexOf(data.item) != -1) {
        return '<span style="font-size:10px">Lvl: </span>' + data.size;
    }
    else if (data.item == 'bloodstone') {
        return '<span style="font-size:10px">Charges: </span>' + data.size;
    }
    else {
        return '';
    }
};
my.prototype.BasicInventoryViewModel.prototype.getActiveBorder = function (data) {
    switch (data.item) {
        case 'power_treads':
        case 'tranquil_boots':
        case 'ring_of_basilius':
        case 'ring_of_aquila':
        case 'armlet':
            return 0;
        break;
        default:
            return ko.utils.unwrapObservable(data.state);    
        break;
    }
}
my.prototype.BasicInventoryViewModel.prototype.getItemAttributeValue = function (attributes, attributeName, level) {
    for (var i = 0; i < attributes.length; i++) {
        if (attributes[i].name == attributeName) {
            if (level == 0) {
                return parseFloat(attributes[i].value[0]);
            }
            else if (level > attributes[i].value.length) {
                return parseFloat(attributes[i].value[0]);
            }
            else {
                return parseFloat(attributes[i].value[level - 1]);
            }
        }
    }
}

my.prototype.InventoryViewModel = function (h) {
    var self = new my.prototype.BasicInventoryViewModel();
    self.hero = h;
    self.hasInventory = ko.observable(true);
    self.items = ko.observableArray([]);
    self.activeItems = ko.observableArray([]);
    self.hasScepter = ko.computed(function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (item === 'ultimate_scepter' && self.items()[i].enabled()) {
                return true;
            }
            
        }
        return false;
    }, this);
    self.isEthereal = ko.computed(function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if ((item === 'ghost' || item === 'ethereal_blade') && self.items()[i].enabled() && isActive) {
                return true;
            }
        }
        return false;
    }, this);
    self.isSheeped = ko.computed(function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (item === 'sheepstick' && self.items()[i].enabled() && isActive) {
                return true;
            }
        }
        return false;
    }, this);
    self.totalCost = ko.computed(function () {
        var c = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            if (my.prototype.stackableItems.indexOf(item) != -1) {
                c += my.prototype.itemData['item_' + item].itemcost * self.items()[i].size;
            }
            else if (my.prototype.levelitems.indexOf(item) != -1) {
                switch(item) {
                    case 'diffusal_blade':
                        c += my.prototype.itemData['item_' + item].itemcost + (self.items()[i].size - 1) * 700;
                    break;
                    case 'necronomicon':
                    case 'dagon':
                        c += my.prototype.itemData['item_' + item].itemcost + (self.items()[i].size - 1) * 1250;
                    break;
                    default:
                        c += my.prototype.itemData['item_' + item].itemcost;
                    break;
                }
            }
            else {
                c += my.prototype.itemData['item_' + item].itemcost;
            }
            
        }
        return c;
    }, this);
    self.addItemBuff = function (data, event) {
        if (self.hasInventory() && self.selectedItemBuff() != undefined) {
            var new_item = {
                item: self.selectedItemBuff(),
                state: ko.observable(0),
                size: 1,
                enabled: ko.observable(true)
            }
            self.items.push(new_item);
            if (self.selectedItemBuff() === 'ring_of_aquila' || self.selectedItemBuff() === 'ring_of_basilius') {
                self.toggleItem(undefined, new_item, undefined);
            }
        }
    };
    self.addItemDebuff = function (data, event) {
        if (self.hasInventory() && self.selectedItemDebuff() != undefined) {
            var new_item = {
                item: self.selectedItemDebuff().split('|')[0],
                state: ko.observable(0),
                size: 1,
                enabled: ko.observable(true)
            }
            if (self.selectedItemDebuff().split('|').length == 2) {
                new_item.debuff = self.selectedItemDebuff().split('|')[1]
            }
            self.items.push(new_item);
            if (self.selectedItemDebuff() === 'ring_of_aquila' || self.selectedItemDebuff() === 'ring_of_basilius') {
                self.toggleItem(undefined, new_item, undefined);
            }
        }
    };
    
    self.getAttributes = function (attributetype) {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            var size = self.items()[i].size;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_all_stats':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'bonus_stats':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                }
                switch(attributetype) {
                    case 'agi':
                        if (attribute.name == 'bonus_agility') {
                            if (item == 'diffusal_blade') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        if (attribute.name == 'bonus_stat' && self.items()[i].state() == 2) {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_agi') {totalAttribute += parseInt(attribute.value[0]);};
                    break;
                    case 'int':
                        if (attribute.name == 'bonus_intellect') {
                            if (item == 'necronomicon') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else if (item == 'diffusal_blade') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else if (item == 'dagon') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        if (attribute.name == 'bonus_intelligence') {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_int') {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_stat' && self.items()[i].state() == 1) {totalAttribute += parseInt(attribute.value[0]);};
                    break;
                    case 'str':
                        if (attribute.name == 'bonus_strength') {
                            if (item == 'necronomicon') {
                                totalAttribute += parseInt(attribute.value[size-1]);
                            }
                            else {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        if (attribute.name == 'bonus_stat' && self.items()[i].state() == 0) {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'bonus_str') {totalAttribute += parseInt(attribute.value[0]);};
                        if (attribute.name == 'unholy_bonus_strength' && isActive) {totalAttribute += parseInt(attribute.value[0]);};
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getBash = function (attacktype) {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bash_chance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                    case 'bash_chance_melee':
                        if (attacktype == 'DOTA_UNIT_CAP_MELEE_ATTACK') { totalAttribute *= (1 - parseInt(attribute.value[0]) / 100); };
                    break;
                    case 'bash_chance_ranged':
                        if (attacktype == 'DOTA_UNIT_CAP_RANGED_ATTACK') { totalAttribute *= (1 - parseInt(attribute.value[0]) / 100); };
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getCritChance = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'crit_chance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getCritSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'lesser_crit':
                case 'greater_crit':
                case 'bloodthorn':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'crit_chance', 0) / 100,
                            'multiplier': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'crit_multiplier', 0) / 100,
                            'count': 1,
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }
            if (item === 'bloodthorn' && isActive) {
                if (sources['soul_rend'] == undefined) {
                    sources['soul_rend'] = {
                        'chance': 1,
                        'multiplier': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'target_crit_multiplier', 0) / 100,
                        'count': 1,
                        'displayname': 'Soul Rend'
                    }
                }
                else {
                    sources['soul_rend'].count += 1;
                }
            }
        }
        return sources;
    };

    self.getCleaveSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'bfury':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'radius': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'cleave_radius', 0),
                            'magnitude': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'cleave_damage_percent', 0) / 100,
                            'count': 1,
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };
    
    self.getBashSource = function (attacktype) {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'javelin':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bonus_chance_damage', 1),
                            'damageType': 'magic',
                            'count': 1,
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bonus_chance', 1) / 100,
                            'displayname': my.prototype.itemData['item_' + item].displayname + ' Pierce'
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
                case 'monkey_king_bar':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'item': item,
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_chance', 0) / 100,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_damage', 0),
                            'duration': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_stun', 0),
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': 'Mini-Bash' //my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
                case 'abyssal_blade':
                case 'basher':
                    if (!sources.hasOwnProperty('bash')) {
                        sources['bash'] = {
                            'item': item,
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, (attacktype == 'DOTA_UNIT_CAP_MELEE_ATTACK') ?'bash_chance_melee' : 'bash_chance_ranged', 0) / 100,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bonus_chance_damage', 0),
                            'duration': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'bash_duration', 0),
                            'count': 1,
                            'damageType': 'physical',
                            'displayname': 'Bash' //my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        //sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };
    
    self.getOrbProcSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'maelstrom':
                case 'mjollnir':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'chance': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'chain_chance', 0) / 100,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'chain_damage', 0),
                            'count': 1,
                            'damageType': 'magic',
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };

    self.getOrbSource = function () {
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            switch (item) {
                case 'diffusal_blade':
                    if (sources[item] == undefined) {
                        sources[item] = {
                            'chance': 1,
                            'damage': self.getItemAttributeValue(my.prototype.itemData['item_' + item].attributes, 'feedback_mana_burn', self.items()[i].size),
                            'count': 1,
                            'damageType': 'physical',
                            'displayname': my.prototype.itemData['item_' + item].displayname
                        }
                    }
                    else {
                        sources[item].count += 1;
                    }
                break;
            }

        }
        return sources;
    };
    
    self.getHealth = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_health':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getHealthRegen = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'health_regen':
                    case 'bonus_regen':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'bonus_health_regen':
                        if (item == 'tranquil_boots' && !isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                        else if (item != 'tranquil_boots') {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'hp_regen':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'health_regen_rate':
                        if (item == 'heart' && isActive) {
                            totalAttribute += (parseInt(attribute.value[0]) / 100) * self.hero.health();
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getHealthRegenAura = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(item + attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'aura_health_regen':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(item + attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    
    self.getMana = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_mana':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getManaRegen = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'aura_mana_regen':
                    case 'mana_regen_aura':
                        totalAttribute += parseFloat(attribute.value[0]);
                    break;
                    case 'mana_regen':
                        if (item == 'infused_raindrop') totalAttribute += parseFloat(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute;    
    };
    self.getManaRegenPercent = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_mana_regen':
                    case 'mana_regen':
                    case 'bonus_mana_regen_pct':
                        if (item != 'infused_raindrop') totalAttribute += parseFloat(attribute.value[0]);
                    break;
                }
            }
        }
        return totalAttribute / 100;    
    };
    self.getManaRegenBloodstone = function () {
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            if (!self.items()[i].enabled()) continue;
            if (item.indexOf('bloodstone') != -1) {
                return parseInt(self.items()[i].size);
            }
        }
        return 0;
    };
    
    self.getArmor = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_armor':
                        if (!isActive || (item != 'medallion_of_courage' && item != 'solar_crest')) { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                    case 'unholy_bonus_armor':
                        if (isActive && item == 'armlet') { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                }
            }
        }
        return totalAttribute;
    };
    
    self.getArmorAura = function (aList) {
        var totalAttribute = 0,
            attributeList = aList || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0;j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (attributeList.find(function (a) { return attribute.name == a.name; })) continue;
                switch(attribute.name) {
                    // buckler
                    case 'bonus_aoe_armor':
                        if (isActive) {
                            attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                        }
                    break;
                    // assault
                    case 'aura_positive_armor':
                        attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                    break;
                    // ring_of_aquila,ring_of_basilius
                    case 'aura_bonus_armor':
                        if (isActive) {
                            attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                        }
                    break;
                    // vladmir
                    case 'armor_aura':
                        attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                    break;
                    // mekansm
                    case 'heal_bonus_armor':
                        if (isActive) {
                            attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                        }
                    break;
                }
            }
        }
        // remove buckler if there is a mekansm
        if (attributeList.find(function (attribute) { return attribute.name == 'heal_bonus_armor'; })) {
            attributeList = attributeList.filter(function (attribute) {
                return attribute.name !== 'bonus_aoe_armor';
            });
        }
        // remove ring_of_aquila,ring_of_basilius if there is a vladmir
        if (attributeList.find(function (attribute) { return attribute.name == 'armor_aura'; })) {
            attributeList = attributeList.filter(function (attribute) {
                return attribute.name !== 'aura_bonus_armor';
            });
        }
        
        totalAttribute = attributeList.reduce(function (memo, attribute) {
            return memo += attribute.value;
        }, 0);
        return {value: totalAttribute, attributes: attributeList};
    };
    self.getArmorReduction = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1 || excludeList.indexOf(item + '_' + attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'armor_reduction':
                        if (isActive || (item != 'medallion_of_courage' && item != 'solar_crest')) {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(item + '_' + attribute.name);
                        }
                    break;
                    case 'aura_negative_armor':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                    case 'corruption_armor':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getEvasion = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_evasion':
                        if (!isActive || (item != 'butterfly' && item != 'solar_crest')) { totalAttribute *= (1 - parseInt(attribute.value[0]) / 100); }
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getMovementSpeedFlat = function () {
        var totalAttribute = 0,
        hasBoots = false,
        hasEuls = false,
        hasWindLace = false,
        bootItems = ['boots','phase_boots','arcane_boots','travel_boots','power_treads','tranquil_boots','guardian_greaves'];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_movement_speed':
                        if (!hasBoots && bootItems.indexOf(item) >= 0) {
                            if (item != 'tranquil_boots' || (item == 'tranquil_boots' && !isActive)) {
                                totalAttribute += parseInt(attribute.value[0]);
                                hasBoots = true;
                            }
                        }
                        //else if (!hasEuls && item == 'cyclone') {
                        else if (item == 'cyclone') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasEuls = true;
                        }
                    break;
                    case 'broken_movement_speed':
                        if (!hasBoots && bootItems.indexOf(item) >= 0) {
                            if (item == 'tranquil_boots' && isActive) {
                                totalAttribute += parseInt(attribute.value[0]);
                                hasBoots = true;
                            }
                        }
                    break;
                    case 'bonus_movement':
                        if (!hasBoots && bootItems.indexOf(item) >= 0) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasBoots = true;
                        }
                    break;
                    case 'movement_speed':
                        if (!hasWindLace && item == 'wind_lace') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasWindLace = true;
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getMovementSpeedPercent = function (e) {
        var totalAttribute = 0,
            excludeList = e || [],
            hasYasha = false,
            hasDrums = false,
            hasDrumsActive = false,
            hasPhaseActive = false,
            hasShadowBladeActive = false,
            hasButterflyActive = false,
            hasMoMActive = false,
            yashaItems = ['manta','yasha','sange_and_yasha'];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'movement_speed_percent_bonus':
                        if (!hasYasha && yashaItems.indexOf(item) >= 0) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasYasha = true;
                        }
                    break;
                    case 'bonus_aura_movement_speed_pct':
                        if (!hasDrums && item == 'ancient_janggo') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasDrums = true;
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'phase_movement_speed':
                        if (isActive && !hasPhaseActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasPhaseActive = true;
                        }
                    break;
                    case 'bonus_movement_speed_pct':
                        if (isActive && !hasDrumsActive && item == 'ancient_janggo') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasDrumsActive = true;
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'windwalk_movement_speed':
                        if (isActive && !hasShadowBladeActive && (item == 'invis_sword' || item == 'silver_edge')) {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasShadowBladeActive = true;
                        }
                    break;
                    case 'berserk_bonus_movement_speed':
                        if (isActive && !hasMoMActive && item == 'mask_of_madness') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasMoMActive = true;
                        }
                    break;
                    case 'bonus_movement_speed': //manta
                        if (!hasYasha && item == 'manta') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasYasha = true;
                        }
                        else if (item == 'smoke_of_deceit' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'bonus_move_speed':
                        if (isActive && !hasButterflyActive && item == 'butterfly') {
                            totalAttribute += parseInt(attribute.value[0]);
                            hasButterflyActive = true;
                        }
                    break;
                }
            }
        }
        return {value: totalAttribute/100, excludeList: excludeList};
    };
    
    self.getMovementSpeedPercentReduction = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'movespeed':
                        if (item == 'dust' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    case 'blast_movement_speed':
                        if (item == 'shivas_guard' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    case 'cold_movement_speed':
                        if (item == 'skadi') {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'maim_movement_speed':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'maim') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                }
            }
        }
        return {value: totalAttribute/100, excludeList: excludeList};
    };
    
    self.getBonusDamage = function () {
        var totalAttribute = 0;
        var sources = {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_damage':
                        totalAttribute += parseInt(attribute.value[0]);
                        if (sources[item] == undefined) {
                            sources[item] = {
                                'damage': parseInt(attribute.value[0]),
                                'damageType': 'physical',
                                'count':1,
                                'displayname': my.prototype.itemData['item_' + item].displayname
                            }                            
                        }
                        else {
                            sources[item].count += 1;
                        }
                    break;
                    case 'unholy_bonus_damage':
                        if (isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            if (sources[item + '_active'] == undefined) {
                                sources[item + '_active'] = {
                                    'damage': parseInt(attribute.value[0]),
                                    'damageType': 'physical',
                                    'count':1,
                                    'displayname': my.prototype.itemData['item_' + item].displayname + ' Unholy Strength'
                                }                            
                            }
                            else {
                                sources[item].count += 1;
                            }
                        }
                    break;
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    };
    self.getBonusDamagePercent = function (s) {
        s = s || {sources:{},total:0};
        var totalAttribute = s.total || 0;
        var sources = s.sources || {};
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'damage_aura':
                        if (sources[item] == undefined) {
                            totalAttribute += parseInt(attribute.value[0]) / 100;
                            sources[item] = {
                                'damage': parseInt(attribute.value[0]) / 100,
                                'damageType': 'physical',
                                'count':1,
                                'displayname': my.prototype.itemData['item_' + item].displayname
                            }
                        }
                        // else {
                            // sources[item].count += 1;
                        // }
                    break;
                }
            }
        }
        return { sources: sources, total: totalAttribute };
    };
    self.getAttackSpeed = function (e) {
        var totalAttribute = 0,
            hasPowerTreads = false,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'bonus_attack_speed':
                        if (item == 'power_treads') {
                            if (!hasPowerTreads) {
                                totalAttribute += parseInt(attribute.value[0]);
                                hasPowerTreads = true;
                            }
                        }
                        else if (item == 'moon_shard') {
                            if (!isActive) {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        else if (item == 'hurricane_pike') {
                            if (isActive) {
                                totalAttribute += parseInt(attribute.value[0]);
                            }
                        }
                        else {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    case 'consumed_bonus':
                        if (item == 'moon_shard' && isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                    break;
                    case 'bonus_speed':
                        totalAttribute += parseInt(attribute.value[0]);
                    break;
                    case 'aura_attack_speed':
                        if (item != 'shivas_guard') { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                    // ancient_janggo
                    case 'bonus_aura_attack_speed_pct':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                    // ancient_janggo
                    case 'bonus_attack_speed_pct':
                        if (isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'unholy_bonus_attack_speed':
                        if (isActive) { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                    case 'berserk_bonus_attack_speed':
                        if (isActive) { totalAttribute += parseInt(attribute.value[0]); };
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getAttackSpeedReduction = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'aura_attack_speed':
                        if (item == 'shivas_guard') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'cold_attack_speed':
                        if (item == 'skadi') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'maim_attack_speed':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'maim') {
                            totalAttribute += parseInt(attribute.value[0]);
                            excludeList.push(attribute.name);
                        }
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getLifesteal = function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'lifesteal_percent':
                        if (item == 'satanic') {
                            if (!isActive) { return parseInt(attribute.value[0]); };
                        }
                        else {
                            return parseInt(attribute.value[0]);
                        }
                    break;
                    case 'unholy_lifesteal_percent':
                        if (isActive) { return parseInt(attribute.value[0]); };
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getLifestealAura = function (e) {
        var totalAttribute = 0,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'vampiric_aura':
                        totalAttribute += parseInt(attribute.value[0]);
                        excludeList.push(attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    self.getMagicResist = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_magical_armor':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                    case 'bonus_spell_resist':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                    case 'magic_resistance':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                    break;
                }
            }
        }
        return totalAttribute;
    };
    self.getMagicResistReductionSelf = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            if (isActive) {
                for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                    var attribute = my.prototype.itemData['item_' + item].attributes[j];
                    switch(attribute.name) {
                        case 'extra_spell_damage_percent':
                        case 'ethereal_damage_bonus':
                            return (1 - parseInt(attribute.value[0]) / 100);
                        break;
                    }
                }
            }
        }
        return totalAttribute;
    };   
    self.getMagicResistReduction = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            if (isActive) {
                for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                    var attribute = my.prototype.itemData['item_' + item].attributes[j];
                    switch(attribute.name) {
                        case 'ethereal_damage_bonus':
                            if (!self.isEthereal()) totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        case 'resist_debuff':
                            totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        break;
                    }
                }
            }
        }
        return totalAttribute;
    };        

    self.getVisionRangeNight = ko.computed(function () {
        var totalAttribute = 0;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'bonus_night_vision':
                        if (item != 'moon_shard' || !isActive) {
                            totalAttribute += parseInt(attribute.value[0]);
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    });
    
    self.getAttackRange = function (attacktype, aList) {
        var totalAttribute = 0,
            attributeList = aList || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0;j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (attributeList.find(function (a) { return attribute.name == a.name; })) continue;
                switch(attribute.name) {
                    // dragon_lance
                    case 'base_attack_range':
                        if (attacktype == 'DOTA_UNIT_CAP_RANGED_ATTACK') attributeList.push({'name':attribute.name, 'value': parseInt(attribute.value[0])});
                    break;
                }
            }
        }
        
        totalAttribute = attributeList.reduce(function (memo, attribute) {
            return memo += attribute.value;
        }, 0);
        return {value: totalAttribute, attributes: attributeList};
    };
    
    self.getMissChance = function (e) {
        var totalAttribute = 1,
            excludeList = e || [];
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                if (excludeList.indexOf(attribute.name) > -1) continue;
                switch(attribute.name) {
                    case 'miss_chance':
                        if (item === 'solar_crest' && isActive) {
                            totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                            excludeList.push(attribute.name);
                        }
                    break;
                    case 'blind_pct':
                        totalAttribute *= (1 - parseInt(attribute.value[0]) / 100);
                        excludeList.push(attribute.name);
                    break;
                }
            }
        }
        return {value: totalAttribute, excludeList: excludeList};
    };
    
    self.getBaseDamageReductionPct = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'backstab_reduction':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'shadow_walk') {
                            totalAttribute *= (1 + parseInt(attribute.value[0]) / 100);
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };    
    self.getBonusDamageReductionPct = function () {
        var totalAttribute = 1;
        for (var i = 0; i < self.items().length; i++) {
            var item = self.items()[i].item;
            var isActive = self.activeItems.indexOf(self.items()[i]) >= 0 ? true : false;
            if (!self.items()[i].enabled()) continue;
            for (var j = 0; j < my.prototype.itemData['item_' + item].attributes.length; j++) {
                var attribute = my.prototype.itemData['item_' + item].attributes[j];
                switch(attribute.name) {
                    case 'backstab_reduction':
                        if (self.items()[i].debuff && self.items()[i].debuff == 'shadow_walk') {
                            totalAttribute *= (1 + parseInt(attribute.value[0]) / 100);
                        }
                    break;
                }
            }
        }
        return totalAttribute;
    };    
    
    self.itemOptions = ko.observableArray(my.prototype.itemOptionsArr);
    
    self.itemBuffOptions = ko.observableArray(my.prototype.itemBuffOptions);
    self.selectedItemBuff = ko.observable('assault');

    self.itemDebuffOptions = ko.observableArray(my.prototype.itemDebuffOptions);
    self.selectedItemDebuff = ko.observable('assault');
    
    return self;
};
},{"./herocalc_core":4,"./herocalc_knockout":10}],10:[function(require,module,exports){
(function (global){
'use strict';
var ko = (typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null);

ko.mapping = require('../lib/knockout.mapping');
ko.wrap = require('../lib/knockout.wrap');

ko.extenders.numeric = function(target, precision) {
    //create a writeable computed observable to intercept writes to our observable
    var result = ko.computed({
        read: target,  //always return the original observables value
        write: function(newValue) {
            var current = target(),
                roundingMultiplier = Math.pow(10, precision),
                newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),
                valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;
 
            //only write if it changed
            if (valueToWrite !== current) {
                target(valueToWrite);
            } else {
                //if the rounded value is the same, but a different value was written, force a notification for the current field
                if (newValue !== current) {
                    target.notifySubscribers(valueToWrite);
                }
            }
        }
    }).extend({ notify: 'always' });
 
    //initialize with current value to make sure it is rounded appropriately
    result(target());
 
    //return the new computed observable
    return result;
};

module.exports = ko;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../lib/knockout.mapping":14,"../lib/knockout.wrap":15}],11:[function(require,module,exports){
'use strict';
var ko = require('./herocalc_knockout');
    
var my = require("./herocalc_core");

my.prototype.UnitOption = function (name, displayname, levels, image, level) {
    this.heroName = ko.computed(function() {
        return (levels > 0) ? name + (level() <= levels ? level() : 1) : name;
    });
    this.heroDisplayName = displayname;
    this.image = image;
    this.levels = levels;
};

my.prototype.UnitViewModel = function (h,p) {
    var self = new my.prototype.HeroModel(h);
    self.parent = p;
    self.selectedUnitLevel = ko.observable(1);
    self.availableUnits = ko.observableArray([
        new my.prototype.UnitOption('npc_dota_lone_druid_bear', 'Lone Druid Spirit Bear',4,'/media/images/units/spirit_bear.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_brewmaster_earth_','Brewmaster Earth Warrior',3,'/media/images/units/npc_dota_brewmaster_earth.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_brewmaster_fire_','Brewmaster Fire Warrior',3,'/media/images/units/npc_dota_brewmaster_fire.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_brewmaster_storm_','Brewmaster Storm Warrior',3,'/media/images/units/npc_dota_brewmaster_storm.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_necronomicon_archer_','Necronomicon Archer',3,'/media/images/units/npc_dota_necronomicon_archer.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_necronomicon_warrior_','Necronomicon Warrior',3,'/media/images/units/npc_dota_necronomicon_warrior.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_lycan_wolf','Lycan Wolf',4,'/media/images/units/npc_dota_lycan_wolf.png', self.selectedUnitLevel),
        new my.prototype.UnitOption('npc_dota_visage_familiar','Visage Familiar',3,'/media/images/units/npc_dota_visage_familiar.png', self.selectedUnitLevel)
    ]);
    self.selectedUnit = ko.observable(self.availableUnits()[0]);
    self.selectedUnit.subscribe(function(newValue) {
        if (newValue.heroName().indexOf('npc_dota_lone_druid_bear') != -1) {
            self.inventory.hasInventory(true);
            self.inventory.items.removeAll();
            self.inventory.activeItems.removeAll();
        }
        else {
            self.inventory.hasInventory(false);
            self.inventory.items.removeAll();
            self.inventory.activeItems.removeAll();
        }
    });
    self.hero = ko.computed(function() {
        return ko.wrap.fromJS(my.prototype.unitData[self.selectedUnit().heroName()]);
    });
    self.heroData = ko.computed(function() {
        return my.prototype.unitData[self.selectedUnit().heroName()];
    });
    self.getAbilityLevelMax = function(data) {
        if (data.abilitytype == 'DOTA_ABILITY_TYPE_ATTRIBUTES') {
            return 10;
        }
        else if (data.name == 'necronomicon_archer_mana_burn' || data.name == 'necronomicon_archer_aoe'
            || data.name == 'necronomicon_warrior_mana_burn' || data.name == 'necronomicon_warrior_last_will') {
            return 3;
        }
        else if (data.name == 'necronomicon_warrior_sight') {
            return 1;
        }
        else {
            return 4;
        }
    };
    self.ability = ko.computed(function() {
        var a = new my.prototype.AbilityModel(ko.mapping.fromJS(my.prototype.unitData[self.selectedUnit().heroName()].abilities));
        a.hasScepter = self.inventory.hasScepter
        switch (self.selectedUnit().heroName()) {
            case 'npc_dota_necronomicon_archer_1':
            case 'npc_dota_necronomicon_warrior_1':
                a.abilities()[0].level(1);
                a.abilities()[1].level(1);
            break;
            case 'npc_dota_necronomicon_archer_2':
            case 'npc_dota_necronomicon_warrior_2':
                a.abilities()[0].level(2);
                a.abilities()[1].level(2);
            break;
            case 'npc_dota_necronomicon_archer_3':
                a.abilities()[0].level(3);
                a.abilities()[1].level(3);
            break;
            case 'npc_dota_necronomicon_warrior_3':
                a.abilities()[0].level(3);
                a.abilities()[1].level(3);
                a.abilities()[2].level(1);
            break;
        }
        a.levelUpAbility = function(index, data, event, hero) {
            switch (a.abilities()[index()].name) {
                case 'necronomicon_archer_mana_burn':
                case 'necronomicon_archer_aoe':
                case 'necronomicon_warrior_mana_burn':
                case 'necronomicon_warrior_last_will':
                case 'necronomicon_warrior_sight':
                break;
                default:
                    if (a.abilities()[index()].level() < hero.getAbilityLevelMax(data)) {
                        a.abilities()[index()].level(a.abilities()[index()].level()+1);
                    }                    
                break;
            }

        };
        a.levelDownAbility = function(index, data, event, hero) {            
            switch (a.abilities()[index()].name) {
                case 'necronomicon_archer_mana_burn':
                case 'necronomicon_archer_aoe':
                case 'necronomicon_warrior_mana_burn':
                case 'necronomicon_warrior_last_will':
                case 'necronomicon_warrior_sight':
                break;
                default:
                    if (a.abilities()[index()].level()>0) {
                        a.abilities()[index()].level(a.abilities()[index()].level()-1);
                    }
                break;
            }
        };
        return a;
    });        
    self.primaryAttribute = ko.computed(function() {
        //var v = my.prototype.unitData[self.selectedUnit().heroName()].attributeprimary;
        var v = 0;
        if (v == 'DOTA_ATTRIBUTE_AGILITY') {
            return 'agi'
        }
        else if (v == 'DOTA_ATTRIBUTE_INTELLECT') {
            return 'int'
        }
        else if (v == 'DOTA_ATTRIBUTE_STRENGTH') {
            return 'str'
        }
        else {
            return ''
        }
    });
    self.totalAttribute = function(a) {
        if (a == 'agi') {
            return parseFloat(self.totalAgi());
        }
        if (a == 'int') {
            return parseFloat(self.totalInt());
        }
        if (a == 'str') {
            return parseFloat(self.totalStr());
        }
        return 0;
    };
    self.totalAgi = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].attributebaseagility
                + my.prototype.unitData[self.selectedUnit().heroName()].attributeagilitygain * (self.selectedHeroLevel() - 1) 
                //+ self.inventory.getAttributes('agi') 
                + self.ability().getAttributeBonusLevel()*2
                + self.ability().getAgility()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.totalInt = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].attributebaseintelligence 
                + my.prototype.unitData[self.selectedUnit().heroName()].attributeintelligencegain * (self.selectedHeroLevel() - 1) 
                //+ self.inventory.getAttributes('int') 
                + self.ability().getAttributeBonusLevel()*2
                + self.ability().getIntelligence()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    self.totalStr = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].attributebasestrength 
                + my.prototype.unitData[self.selectedUnit().heroName()].attributestrengthgain * (self.selectedHeroLevel() - 1) 
                //+ self.inventory.getAttributes('str') 
                + self.ability().getAttributeBonusLevel()*2
                + self.ability().getStrength()
                + self.enemy().ability().getAllStatsReduction()
                + self.debuffs.getAllStatsReduction()
               ).toFixed(2);
    });
    /*self.health = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].statushealth + self.totalStr()*19 
                + self.inventory.getHealth()
                + self.ability().getHealth()).toFixed(2);
    });
    self.healthregen = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].statushealthregen + self.totalStr()*.03 
                + self.inventory.getHealthRegen() 
                + self.ability().getHealthRegen()
                + self.buffs.getHealthRegen()).toFixed(2);
    });
    self.mana = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].statusmana + self.totalInt()*13 + self.inventory.getMana()).toFixed(2);
    });
    self.manaregen = ko.computed(function() {
        return ((my.prototype.unitData[self.selectedUnit().heroName()].statusmanaregen 
                + self.totalInt()*.04 
                + self.ability().getManaRegen()) 
                * (1 + self.inventory.getManaRegenPercent()) 
                + (self.selectedHero().heroName == 'crystal_maiden' ? self.ability().getManaRegenArcaneAura() * 2 : self.buffs.getManaRegenArcaneAura())
                + self.inventory.getManaRegenBloodstone()
                - self.enemy().ability().getManaRegenReduction()).toFixed(2);
    });
    self.totalArmorPhysical = ko.computed(function() {
        return (self.enemy().ability().getArmorBaseReduction() * self.debuffs.getArmorBaseReduction() * (my.prototype.unitData[self.selectedUnit().heroName()].armorphysical + self.totalAgi()*.14)
                + self.inventory.getArmor() + self.ability().getArmor() + self.enemy().ability().getArmorReduction() + self.buffs.getArmor() + self.debuffs.getArmorReduction()).toFixed(2);
    });
    self.totalArmorPhysicalReduction = ko.computed(function() {
        return ((0.06 * self.totalArmorPhysical()) / (1 + 0.06 * self.totalArmorPhysical()) * 100).toFixed(2);
    });
    self.totalMovementSpeed = ko.computed(function() {
        if (self.parent.ability().isShapeShiftActive()) {
            return 522;
        }
        var ms = (self.ability().setMovementSpeed() > 0 ? self.ability().setMovementSpeed() : self.buffs.setMovementSpeed());
        if (ms > 0) {
            return ms;
        }
        else {
            return ((my.prototype.unitData[self.selectedUnit().heroName()].movementspeed + self.inventory.getMovementSpeedFlat()+ self.ability().getMovementSpeedFlat()) * 
                    (1 + self.inventory.getMovementSpeedPercent() 
                       + self.ability().getMovementSpeedPercent() 
                       + self.enemy().inventory.getMovementSpeedPercentReduction() 
                       + self.enemy().ability().getMovementSpeedPercentReduction() 
                       + self.buffs.getMovementSpeedPercent() 
                       + self.debuffs.getMovementSpeedPercentReduction()
                    )).toFixed(2);
        }
    });
    self.totalTurnRate = ko.computed(function() {
        return (my.prototype.unitData[self.selectedUnit().heroName()].movementturnrate 
                * (1 + self.enemy().ability().getTurnRateReduction()
                     + self.debuffs.getTurnRateReduction())).toFixed(2);
    });
    */
    self.baseDamage = ko.computed(function() {
        return [Math.floor(my.prototype.unitData[self.selectedUnit().heroName()].attackdamagemin + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total),
                Math.floor(my.prototype.unitData[self.selectedUnit().heroName()].attackdamagemax + self.totalAttribute(self.primaryAttribute()) + self.ability().getBaseDamage().total)];
    });
    /*self.bonusDamage = ko.computed(function() {
        return self.inventory.getBonusDamage().total
                + self.ability().getBonusDamage().total
                + self.buffs.getBonusDamage().total
                + Math.floor((self.baseDamage()[0] + self.baseDamage()[1])/2 
                              * (self.inventory.getBonusDamagePercent().total
                                 + self.ability().getBonusDamagePercent().total
                                 + self.buffs.getBonusDamagePercent().total
                                )
                            )
                + Math.floor(
                    (self.hero().attacktype() == 'DOTA_UNIT_CAP_RANGED_ATTACK' 
                        ? ((self.selectedHero().heroName == 'drow_ranger') ? self.ability().getBonusDamagePrecisionAura().total[0] * self.totalAgi() : self.buffs.getBonusDamagePrecisionAura().total[1])
                        : 0)
                  );
    });*/
    /*self.bonusDamageReduction = ko.computed(function() {
        return Math.abs(self.enemy().ability().getBonusDamageReduction() + self.debuffs.getBonusDamageReduction());
    });
    self.damage = ko.computed(function() {
        return [self.baseDamage()[0] + self.bonusDamage()[0],
                self.baseDamage()[1] + self.bonusDamage()[1]];
    });*/
    self.totalMagicResistanceProduct = ko.computed(function() {
        return (1 - my.prototype.unitData[self.selectedUnit().heroName()].magicalresistance / 100) 
                   * (1 - self.inventory.getMagicResist() / 100) 
                   * (1 - self.ability().getMagicResist() / 100) 
                   * (1 - self.buffs.getMagicResist() / 100) 
                   * self.enemy().inventory.getMagicResistReduction()
                   * self.enemy().ability().getMagicResistReduction() 
                   * self.debuffs.getMagicResistReduction();
    });
    self.totalMagicResistance = ko.computed(function() {
        return (1 - self.totalMagicResistanceProduct());
    });
    self.bat = ko.computed(function() {
        var abilityBAT = self.ability().getBAT();
        if (abilityBAT > 0) {
            return abilityBAT;
        }
        return my.prototype.unitData[self.selectedUnit().heroName()].attackrate;
    });
    /*
    self.ias = ko.computed(function() {
        var val = parseFloat(self.totalAgi()) 
                + self.inventory.getAttackSpeed() 
                + self.ability().getAttackSpeed() 
                + self.enemy().ability().getAttackSpeedReduction() 
                + self.buffs.getAttackSpeed() 
                + self.debuffs.getAttackSpeedReduction();
        if (val < -80) {
            return -80;
        }
        else if (val > 400) {
            return 400;
        }
        return (val).toFixed(2);
    });*/
    self.attackTime = ko.computed(function() {
        return (self.bat() / (1 + self.ias() / 100)).toFixed(2);
    });
    self.attacksPerSecond = ko.computed(function() {
        return (1 + self.ias() / 100) / self.bat();
    });
    self.evasion = ko.computed(function() {
        var e = self.ability().setEvasion();
        if (e) {
            return (e * 100).toFixed(2) + '%';
        }
        else {
            return ((1-(self.inventory.getEvasion() * self.ability().getEvasion())) * 100).toFixed(2) + '%';
        }
    });
    self.ehpPhysical = ko.computed(function() {
        return ((self.health() * (1 + .06 * self.totalArmorPhysical())) / (1-(1-(self.inventory.getEvasion() * self.ability().getEvasion())))).toFixed(2);
    });
    self.ehpMagical = ko.computed(function() {
        return (self.health() / self.totalMagicResistanceProduct()).toFixed(2);
    });
    
    return self;
}
},{"./herocalc_core":4,"./herocalc_knockout":10}],12:[function(require,module,exports){
'use strict';

var core = require("./herocalc_core");
require("./herocalc_inventory");
require("./herocalc_abilitydata");
require("./herocalc_abilities");
require("./herocalc_buffs");
require("./herocalc_hero");
require("./herocalc_hero.illusion");
require("./herocalc_hero.meepo");
require("./herocalc_unit");

module.exports = core;
},{"./herocalc_abilities":1,"./herocalc_abilitydata":2,"./herocalc_buffs":3,"./herocalc_core":4,"./herocalc_hero":6,"./herocalc_hero.illusion":5,"./herocalc_hero.meepo":7,"./herocalc_inventory":9,"./herocalc_unit":11}],13:[function(require,module,exports){
if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    'use strict';
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}
},{}],14:[function(require,module,exports){
(function (global){
(function (factory) {
	// Module systems magic dance.

	if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
		// CommonJS or Node: hard-coded dependency on "knockout"
		factory((typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null), exports);
	} else if (typeof define === "function" && define["amd"]) {
		// AMD anonymous module with hard-coded dependency on "knockout"
		define(["knockout", "exports"], factory);
	} else {
		// <script> tag: use the global `ko` object, attaching a `mapping` property
		factory(ko, ko.mapping = {});
	}
}(function (ko, exports) {
	var DEBUG=true;
	var mappingProperty = "__ko_mapping__";
	var realKoDependentObservable = ko.dependentObservable;
	var mappingNesting = 0;
	var dependentObservables;
	var visitedObjects;
	var recognizedRootProperties = ["create", "update", "key", "arrayChanged"];
	var emptyReturn = {};

	var _defaultOptions = {
		include: ["_destroy"],
		ignore: [],
		copy: [],
		observe: []
	};
	var defaultOptions = _defaultOptions;

	// Author: KennyTM @ StackOverflow
	function unionArrays (x, y) {
		var obj = {};
		for (var i = x.length - 1; i >= 0; -- i) obj[x[i]] = x[i];
		for (var i = y.length - 1; i >= 0; -- i) obj[y[i]] = y[i];
		var res = [];

		for (var k in obj) {
			res.push(obj[k]);
		};

		return res;
	}

	function extendObject(destination, source) {
		var destType;

		for (var key in source) {
			if (source.hasOwnProperty(key) && source[key]) {
				destType = exports.getType(destination[key]);
				if (key && destination[key] && destType !== "array" && destType !== "string") {
					extendObject(destination[key], source[key]);
				} else {
					var bothArrays = exports.getType(destination[key]) === "array" && exports.getType(source[key]) === "array";
					if (bothArrays) {
						destination[key] = unionArrays(destination[key], source[key]);
					} else {
						destination[key] = source[key];
					}
				}
			}
		}
	}

	function merge(obj1, obj2) {
		var merged = {};
		extendObject(merged, obj1);
		extendObject(merged, obj2);

		return merged;
	}

	exports.isMapped = function (viewModel) {
		var unwrapped = ko.utils.unwrapObservable(viewModel);
		return unwrapped && unwrapped[mappingProperty];
	}

	exports.fromJS = function (jsObject /*, inputOptions, target*/ ) {
		if (arguments.length == 0) throw new Error("When calling ko.fromJS, pass the object you want to convert.");

		try {
			if (!mappingNesting++) {
				dependentObservables = [];
				visitedObjects = new objectLookup();
			}

			var options;
			var target;

			if (arguments.length == 2) {
				if (arguments[1][mappingProperty]) {
					target = arguments[1];
				} else {
					options = arguments[1];
				}
			}
			if (arguments.length == 3) {
				options = arguments[1];
				target = arguments[2];
			}

			if (target) {
				options = merge(options, target[mappingProperty]);
			}
			options = fillOptions(options);

			var result = updateViewModel(target, jsObject, options);
			if (target) {
				result = target;
			}

			// Evaluate any dependent observables that were proxied.
			// Do this after the model's observables have been created
			if (!--mappingNesting) {
				while (dependentObservables.length) {
					var DO = dependentObservables.pop();
					if (DO) {
						DO();
						
						// Move this magic property to the underlying dependent observable
						DO.__DO["throttleEvaluation"] = DO["throttleEvaluation"];
					}
				}
			}

			// Save any new mapping options in the view model, so that updateFromJS can use them later.
			result[mappingProperty] = merge(result[mappingProperty], options);

			return result;
		} catch(e) {
			mappingNesting = 0;
			throw e;
		}
	};

	exports.fromJSON = function (jsonString /*, options, target*/ ) {
		var parsed = ko.utils.parseJson(jsonString);
		arguments[0] = parsed;
		return exports.fromJS.apply(this, arguments);
	};

	exports.updateFromJS = function (viewModel) {
		throw new Error("ko.mapping.updateFromJS, use ko.mapping.fromJS instead. Please note that the order of parameters is different!");
	};

	exports.updateFromJSON = function (viewModel) {
		throw new Error("ko.mapping.updateFromJSON, use ko.mapping.fromJSON instead. Please note that the order of parameters is different!");
	};

	exports.toJS = function (rootObject, options) {
		if (!defaultOptions) exports.resetDefaultOptions();

		if (arguments.length == 0) throw new Error("When calling ko.mapping.toJS, pass the object you want to convert.");
		if (exports.getType(defaultOptions.ignore) !== "array") throw new Error("ko.mapping.defaultOptions().ignore should be an array.");
		if (exports.getType(defaultOptions.include) !== "array") throw new Error("ko.mapping.defaultOptions().include should be an array.");
		if (exports.getType(defaultOptions.copy) !== "array") throw new Error("ko.mapping.defaultOptions().copy should be an array.");

		// Merge in the options used in fromJS
		options = fillOptions(options, rootObject[mappingProperty]);

		// We just unwrap everything at every level in the object graph
		return exports.visitModel(rootObject, function (x) {
			return ko.utils.unwrapObservable(x)
		}, options);
	};

	exports.toJSON = function (rootObject, options) {
		var plainJavaScriptObject = exports.toJS(rootObject, options);
		return ko.utils.stringifyJson(plainJavaScriptObject);
	};

	exports.defaultOptions = function () {
		if (arguments.length > 0) {
			defaultOptions = arguments[0];
		} else {
			return defaultOptions;
		}
	};

	exports.resetDefaultOptions = function () {
		defaultOptions = {
			include: _defaultOptions.include.slice(0),
			ignore: _defaultOptions.ignore.slice(0),
			copy: _defaultOptions.copy.slice(0)
		};
	};

	exports.getType = function(x) {
		if ((x) && (typeof (x) === "object")) {
			if (x.constructor === Date) return "date";
			if (x.constructor === Array) return "array";
		}
		return typeof x;
	}

	function fillOptions(rawOptions, otherOptions) {
		var options = merge({}, rawOptions);

		// Move recognized root-level properties into a root namespace
		for (var i = recognizedRootProperties.length - 1; i >= 0; i--) {
			var property = recognizedRootProperties[i];
			
			// Carry on, unless this property is present
			if (!options[property]) continue;
			
			// Move the property into the root namespace
			if (!(options[""] instanceof Object)) options[""] = {};
			options[""][property] = options[property];
			delete options[property];
		}

		if (otherOptions) {
			options.ignore = mergeArrays(otherOptions.ignore, options.ignore);
			options.include = mergeArrays(otherOptions.include, options.include);
			options.copy = mergeArrays(otherOptions.copy, options.copy);
			options.observe = mergeArrays(otherOptions.observe, options.observe);
		}
		options.ignore = mergeArrays(options.ignore, defaultOptions.ignore);
		options.include = mergeArrays(options.include, defaultOptions.include);
		options.copy = mergeArrays(options.copy, defaultOptions.copy);
		options.observe = mergeArrays(options.observe, defaultOptions.observe);

		options.mappedProperties = options.mappedProperties || {};
		options.copiedProperties = options.copiedProperties || {};
		return options;
	}

	function mergeArrays(a, b) {
		if (exports.getType(a) !== "array") {
			if (exports.getType(a) === "undefined") a = [];
			else a = [a];
		}
		if (exports.getType(b) !== "array") {
			if (exports.getType(b) === "undefined") b = [];
			else b = [b];
		}

		return ko.utils.arrayGetDistinctValues(a.concat(b));
	}

	// When using a 'create' callback, we proxy the dependent observable so that it doesn't immediately evaluate on creation.
	// The reason is that the dependent observables in the user-specified callback may contain references to properties that have not been mapped yet.
	function withProxyDependentObservable(dependentObservables, callback) {
		var localDO = ko.dependentObservable;
		ko.dependentObservable = function (read, owner, options) {
			options = options || {};

			if (read && typeof read == "object") { // mirrors condition in knockout implementation of DO's
				options = read;
			}

			var realDeferEvaluation = options.deferEvaluation;

			var isRemoved = false;

			// We wrap the original dependent observable so that we can remove it from the 'dependentObservables' list we need to evaluate after mapping has
			// completed if the user already evaluated the DO themselves in the meantime.
			var wrap = function (DO) {
				// Temporarily revert ko.dependentObservable, since it is used in ko.isWriteableObservable
				var tmp = ko.dependentObservable;
				ko.dependentObservable = realKoDependentObservable;
				var isWriteable = ko.isWriteableObservable(DO);
				ko.dependentObservable = tmp;

				var wrapped = realKoDependentObservable({
					read: function () {
						if (!isRemoved) {
							ko.utils.arrayRemoveItem(dependentObservables, DO);
							isRemoved = true;
						}
						return DO.apply(DO, arguments);
					},
					write: isWriteable && function (val) {
						return DO(val);
					},
					deferEvaluation: true
				});
				if (DEBUG) wrapped._wrapper = true;
				wrapped.__DO = DO;
				return wrapped;
			};
			
			options.deferEvaluation = true; // will either set for just options, or both read/options.
			var realDependentObservable = new realKoDependentObservable(read, owner, options);

			if (!realDeferEvaluation) {
				realDependentObservable = wrap(realDependentObservable);
				dependentObservables.push(realDependentObservable);
			}

			return realDependentObservable;
		}
		ko.dependentObservable.fn = realKoDependentObservable.fn;
		ko.computed = ko.dependentObservable;
		var result = callback();
		ko.dependentObservable = localDO;
		ko.computed = ko.dependentObservable;
		return result;
	}

	function updateViewModel(mappedRootObject, rootObject, options, parentName, parent, parentPropertyName, mappedParent) {
		var isArray = exports.getType(ko.utils.unwrapObservable(rootObject)) === "array";

		parentPropertyName = parentPropertyName || "";

		// If this object was already mapped previously, take the options from there and merge them with our existing ones.
		if (exports.isMapped(mappedRootObject)) {
			var previousMapping = ko.utils.unwrapObservable(mappedRootObject)[mappingProperty];
			options = merge(previousMapping, options);
		}

		var callbackParams = {
			data: rootObject,
			parent: mappedParent || parent
		};

		var hasCreateCallback = function () {
			return options[parentName] && options[parentName].create instanceof Function;
		};

		var createCallback = function (data) {
			return withProxyDependentObservable(dependentObservables, function () {
				
				if (ko.utils.unwrapObservable(parent) instanceof Array) {
					return options[parentName].create({
						data: data || callbackParams.data,
						parent: callbackParams.parent,
						skip: emptyReturn
					});
				} else {
					return options[parentName].create({
						data: data || callbackParams.data,
						parent: callbackParams.parent
					});
				}				
			});
		};

		var hasUpdateCallback = function () {
			return options[parentName] && options[parentName].update instanceof Function;
		};

		var updateCallback = function (obj, data) {
			var params = {
				data: data || callbackParams.data,
				parent: callbackParams.parent,
				target: ko.utils.unwrapObservable(obj)
			};

			if (ko.isWriteableObservable(obj)) {
				params.observable = obj;
			}

			return options[parentName].update(params);
		}

		var alreadyMapped = visitedObjects.get(rootObject);
		if (alreadyMapped) {
			return alreadyMapped;
		}

		parentName = parentName || "";

		if (!isArray) {
			// For atomic types, do a direct update on the observable
			if (!canHaveProperties(rootObject)) {
				switch (exports.getType(rootObject)) {
				case "function":
					if (hasUpdateCallback()) {
						if (ko.isWriteableObservable(rootObject)) {
							rootObject(updateCallback(rootObject));
							mappedRootObject = rootObject;
						} else {
							mappedRootObject = updateCallback(rootObject);
						}
					} else {
						mappedRootObject = rootObject;
					}
					break;
				default:
					if (ko.isWriteableObservable(mappedRootObject)) {
						if (hasUpdateCallback()) {
							var valueToWrite = updateCallback(mappedRootObject);
							mappedRootObject(valueToWrite);
							return valueToWrite;
						} else {
							var valueToWrite = ko.utils.unwrapObservable(rootObject);
							mappedRootObject(valueToWrite);
							return valueToWrite;
						}
					} else {
						var hasCreateOrUpdateCallback = hasCreateCallback() || hasUpdateCallback();
						
						if (hasCreateCallback()) {
							mappedRootObject = createCallback();
						} else {
							mappedRootObject = ko.observable(ko.utils.unwrapObservable(rootObject));
						}

						if (hasUpdateCallback()) {
							mappedRootObject(updateCallback(mappedRootObject));
						}
						
						if (hasCreateOrUpdateCallback) return mappedRootObject;
					}
				}

			} else {
				mappedRootObject = ko.utils.unwrapObservable(mappedRootObject);
				if (!mappedRootObject) {
					if (hasCreateCallback()) {
						var result = createCallback();

						if (hasUpdateCallback()) {
							result = updateCallback(result);
						}

						return result;
					} else {
						if (hasUpdateCallback()) {
							return updateCallback(result);
						}

						mappedRootObject = {};
					}
				}

				if (hasUpdateCallback()) {
					mappedRootObject = updateCallback(mappedRootObject);
				}

				visitedObjects.save(rootObject, mappedRootObject);
				if (hasUpdateCallback()) return mappedRootObject;

				// For non-atomic types, visit all properties and update recursively
				visitPropertiesOrArrayEntries(rootObject, function (indexer) {
					var fullPropertyName = parentPropertyName.length ? parentPropertyName + "." + indexer : indexer;

					if (ko.utils.arrayIndexOf(options.ignore, fullPropertyName) != -1) {
						return;
					}

					if (ko.utils.arrayIndexOf(options.copy, fullPropertyName) != -1) {
						mappedRootObject[indexer] = rootObject[indexer];
						return;
					}

					if(typeof rootObject[indexer] != "object" && typeof rootObject[indexer] != "array" && options.observe.length > 0 && ko.utils.arrayIndexOf(options.observe, fullPropertyName) == -1)
					{
						mappedRootObject[indexer] = rootObject[indexer];
						options.copiedProperties[fullPropertyName] = true;
						return;
					}
					
					// In case we are adding an already mapped property, fill it with the previously mapped property value to prevent recursion.
					// If this is a property that was generated by fromJS, we should use the options specified there
					var prevMappedProperty = visitedObjects.get(rootObject[indexer]);
					var retval = updateViewModel(mappedRootObject[indexer], rootObject[indexer], options, indexer, mappedRootObject, fullPropertyName, mappedRootObject);
					var value = prevMappedProperty || retval;
					
					if(options.observe.length > 0 && ko.utils.arrayIndexOf(options.observe, fullPropertyName) == -1)
					{
						mappedRootObject[indexer] = value();
						options.copiedProperties[fullPropertyName] = true;
						return;
					}
					
					if (ko.isWriteableObservable(mappedRootObject[indexer])) {
						value = ko.utils.unwrapObservable(value);
						if (mappedRootObject[indexer]() !== value) {
							mappedRootObject[indexer](value);
						}
					} else {
						value = mappedRootObject[indexer] === undefined ? value : ko.utils.unwrapObservable(value);
						mappedRootObject[indexer] = value;
					}

					options.mappedProperties[fullPropertyName] = true;
				});
			}
		} else { //mappedRootObject is an array
			var changes = [];

			var hasKeyCallback = false;
			var keyCallback = function (x) {
				return x;
			}
			if (options[parentName] && options[parentName].key) {
				keyCallback = options[parentName].key;
				hasKeyCallback = true;
			}

			if (!ko.isObservable(mappedRootObject)) {
				// When creating the new observable array, also add a bunch of utility functions that take the 'key' of the array items into account.
				mappedRootObject = ko.observableArray([]);

				mappedRootObject.mappedRemove = function (valueOrPredicate) {
					var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) {
							return value === keyCallback(valueOrPredicate);
						};
					return mappedRootObject.remove(function (item) {
						return predicate(keyCallback(item));
					});
				}

				mappedRootObject.mappedRemoveAll = function (arrayOfValues) {
					var arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);
					return mappedRootObject.remove(function (item) {
						return ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) != -1;
					});
				}

				mappedRootObject.mappedDestroy = function (valueOrPredicate) {
					var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) {
							return value === keyCallback(valueOrPredicate);
						};
					return mappedRootObject.destroy(function (item) {
						return predicate(keyCallback(item));
					});
				}

				mappedRootObject.mappedDestroyAll = function (arrayOfValues) {
					var arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);
					return mappedRootObject.destroy(function (item) {
						return ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) != -1;
					});
				}

				mappedRootObject.mappedIndexOf = function (item) {
					var keys = filterArrayByKey(mappedRootObject(), keyCallback);
					var key = keyCallback(item);
					return ko.utils.arrayIndexOf(keys, key);
				}

				mappedRootObject.mappedGet = function (item) {
					return mappedRootObject()[mappedRootObject.mappedIndexOf(item)];
				}

				mappedRootObject.mappedCreate = function (value) {
					if (mappedRootObject.mappedIndexOf(value) !== -1) {
						throw new Error("There already is an object with the key that you specified.");
					}

					var item = hasCreateCallback() ? createCallback(value) : value;
					if (hasUpdateCallback()) {
						var newValue = updateCallback(item, value);
						if (ko.isWriteableObservable(item)) {
							item(newValue);
						} else {
							item = newValue;
						}
					}
					mappedRootObject.push(item);
					return item;
				}
			}

			var currentArrayKeys = filterArrayByKey(ko.utils.unwrapObservable(mappedRootObject), keyCallback).sort();
			var newArrayKeys = filterArrayByKey(rootObject, keyCallback);
			if (hasKeyCallback) newArrayKeys.sort();
			var editScript = ko.utils.compareArrays(currentArrayKeys, newArrayKeys);

			var ignoreIndexOf = {};
			
			var i, j;

			var unwrappedRootObject = ko.utils.unwrapObservable(rootObject);
			var itemsByKey = {};
			var optimizedKeys = true;
			for (i = 0, j = unwrappedRootObject.length; i < j; i++) {
				var key = keyCallback(unwrappedRootObject[i]);
				if (key === undefined || key instanceof Object) {
					optimizedKeys = false;
					break;
				}
				itemsByKey[key] = unwrappedRootObject[i];
			}

			var newContents = [];
			var passedOver = 0;
			for (i = 0, j = editScript.length; i < j; i++) {
				var key = editScript[i];
				var mappedItem;
				var fullPropertyName = parentPropertyName + "[" + i + "]";
				switch (key.status) {
				case "added":
					var item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);
					mappedItem = updateViewModel(undefined, item, options, parentName, mappedRootObject, fullPropertyName, parent);
					if(!hasCreateCallback()) {
						mappedItem = ko.utils.unwrapObservable(mappedItem);
					}

					var index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);
					
					if (mappedItem === emptyReturn) {
						passedOver++;
					} else {
						newContents[index - passedOver] = mappedItem;
					}
						
					ignoreIndexOf[index] = true;
					break;
				case "retained":
					var item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);
					mappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);
					updateViewModel(mappedItem, item, options, parentName, mappedRootObject, fullPropertyName, parent);

					var index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);
					newContents[index] = mappedItem;
					ignoreIndexOf[index] = true;
					break;
				case "deleted":
					mappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);
					break;
				}

				changes.push({
					event: key.status,
					item: mappedItem
				});
			}

			mappedRootObject(newContents);

			if (options[parentName] && options[parentName].arrayChanged) {
				ko.utils.arrayForEach(changes, function (change) {
					options[parentName].arrayChanged(change.event, change.item);
				});
			}
		}

		return mappedRootObject;
	}

	function ignorableIndexOf(array, item, ignoreIndices) {
		for (var i = 0, j = array.length; i < j; i++) {
			if (ignoreIndices[i] === true) continue;
			if (array[i] === item) return i;
		}
		return null;
	}

	function mapKey(item, callback) {
		var mappedItem;
		if (callback) mappedItem = callback(item);
		if (exports.getType(mappedItem) === "undefined") mappedItem = item;

		return ko.utils.unwrapObservable(mappedItem);
	}

	function getItemByKey(array, key, callback) {
		array = ko.utils.unwrapObservable(array);
		for (var i = 0, j = array.length; i < j; i++) {
			var item = array[i];
			if (mapKey(item, callback) === key) return item;
		}

		throw new Error("When calling ko.update*, the key '" + key + "' was not found!");
	}

	function filterArrayByKey(array, callback) {
		return ko.utils.arrayMap(ko.utils.unwrapObservable(array), function (item) {
			if (callback) {
				return mapKey(item, callback);
			} else {
				return item;
			}
		});
	}

	function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
		if (exports.getType(rootObject) === "array") {
			for (var i = 0; i < rootObject.length; i++)
			visitorCallback(i);
		} else {
			for (var propertyName in rootObject)
			visitorCallback(propertyName);
		}
	};

	function canHaveProperties(object) {
		var type = exports.getType(object);
		return ((type === "object") || (type === "array")) && (object !== null);
	}

	// Based on the parentName, this creates a fully classified name of a property

	function getPropertyName(parentName, parent, indexer) {
		var propertyName = parentName || "";
		if (exports.getType(parent) === "array") {
			if (parentName) {
				propertyName += "[" + indexer + "]";
			}
		} else {
			if (parentName) {
				propertyName += ".";
			}
			propertyName += indexer;
		}
		return propertyName;
	}

	exports.visitModel = function (rootObject, callback, options) {
		options = options || {};
		options.visitedObjects = options.visitedObjects || new objectLookup();

		var mappedRootObject;
		var unwrappedRootObject = ko.utils.unwrapObservable(rootObject);

		if (!canHaveProperties(unwrappedRootObject)) {
			return callback(rootObject, options.parentName);
		} else {
			options = fillOptions(options, unwrappedRootObject[mappingProperty]);

			// Only do a callback, but ignore the results
			callback(rootObject, options.parentName);
			mappedRootObject = exports.getType(unwrappedRootObject) === "array" ? [] : {};
		}

		options.visitedObjects.save(rootObject, mappedRootObject);

		var parentName = options.parentName;
		visitPropertiesOrArrayEntries(unwrappedRootObject, function (indexer) {
			if (options.ignore && ko.utils.arrayIndexOf(options.ignore, indexer) != -1) return;

			var propertyValue = unwrappedRootObject[indexer];
			options.parentName = getPropertyName(parentName, unwrappedRootObject, indexer);

			// If we don't want to explicitly copy the unmapped property...
			if (ko.utils.arrayIndexOf(options.copy, indexer) === -1) {
				// ...find out if it's a property we want to explicitly include
				if (ko.utils.arrayIndexOf(options.include, indexer) === -1) {
					// The mapped properties object contains all the properties that were part of the original object.
					// If a property does not exist, and it is not because it is part of an array (e.g. "myProp[3]"), then it should not be unmapped.
				    if (unwrappedRootObject[mappingProperty]
				        && unwrappedRootObject[mappingProperty].mappedProperties && !unwrappedRootObject[mappingProperty].mappedProperties[indexer]
				        && unwrappedRootObject[mappingProperty].copiedProperties && !unwrappedRootObject[mappingProperty].copiedProperties[indexer]
				        && !(exports.getType(unwrappedRootObject) === "array")) {
						return;
					}
				}
			}

			var outputProperty;
			switch (exports.getType(ko.utils.unwrapObservable(propertyValue))) {
			case "object":
			case "array":
			case "undefined":
				var previouslyMappedValue = options.visitedObjects.get(propertyValue);
				mappedRootObject[indexer] = (exports.getType(previouslyMappedValue) !== "undefined") ? previouslyMappedValue : exports.visitModel(propertyValue, callback, options);
				break;
			default:
				mappedRootObject[indexer] = callback(propertyValue, options.parentName);
			}
		});

		return mappedRootObject;
	}

	function simpleObjectLookup() {
		var keys = [];
		var values = [];
		this.save = function (key, value) {
			var existingIndex = ko.utils.arrayIndexOf(keys, key);
			if (existingIndex >= 0) values[existingIndex] = value;
			else {
				keys.push(key);
				values.push(value);
			}
		};
		this.get = function (key) {
			var existingIndex = ko.utils.arrayIndexOf(keys, key);
			var value = (existingIndex >= 0) ? values[existingIndex] : undefined;
			return value;
		};
	};
	
	function objectLookup() {
		var buckets = {};
		
		var findBucket = function(key) {
			var bucketKey;
			try {
				bucketKey = key;//JSON.stringify(key);
			}
			catch (e) {
				bucketKey = "$$$";
			}

			var bucket = buckets[bucketKey];
			if (bucket === undefined) {
				bucket = new simpleObjectLookup();
				buckets[bucketKey] = bucket;
			}
			return bucket;
		};
		
		this.save = function (key, value) {
			findBucket(key).save(key, value);
		};
		this.get = function (key) {
			return findBucket(key).get(key);
		};
	};
}));
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],15:[function(require,module,exports){
(function (global){
// Knockout Fast Mapping v0.1
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function (factory) {
	// Module systems magic dance.

	if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
		// CommonJS or Node: hard-coded dependency on "knockout"
		factory((typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null), exports);
	} else if (typeof define === "function" && define["amd"]) {
		// AMD anonymous module with hard-coded dependency on "knockout"
		define(["knockout", "exports"], factory);
	} else {
		// <script> tag: use the global `ko` object, attaching a `wrap` property
		factory(ko, ko.wrap = {});
	}
}(function (ko, exports) {
    
    // this function mimics ko.mapping
    exports.fromJS = function(jsObject, computedFunctions)
    {
        reset();
	return wrap(jsObject, computedFunctions);
    }

    // this function unwraps the outer for assigning the result to an observable
    // see https://github.com/SteveSanderson/knockout/issues/517
    exports.updateFromJS = function(observable, jsObject, computedFunctions)
    {
        reset();
	return observable(ko.utils.unwrapObservable(wrap(jsObject, computedFunctions)));
    }

    exports.fromJSON = function (jsonString, computedFunctions) {
	var parsed = ko.utils.parseJson(jsonString);
	arguments[0] = parsed;
	return exports.fromJS.apply(this, computedFunctions);
    };
    
    exports.toJS = function (observable) {
	return unwrap(observable);
    }

    exports.toJSON = function (observable) {
	var plainJavaScriptObject = exports.toJS(observable);
	return ko.utils.stringifyJson(plainJavaScriptObject);
    };

    function typeOf(value) {
	var s = typeof value;
	if (s === 'object') {
            if (value) {
                if (value.constructor == Date)
                    s = 'date';
		else if (Object.prototype.toString.call(value) == '[object Array]')
                    s = 'array';
            } else {
		s = 'null';
            }
	}
	return s;
    }

    // unwrapping
    function unwrapObject(o)
    {
	var t = {};

	for (var k in o)
	{
	    var v = o[k];

	    if (ko.isComputed(v))
		continue;

	    t[k] = unwrap(v);
	}

	return t;
    }

    function unwrapArray(a)
    {
	var r = [];

	if (!a || a.length == 0)
	    return r;
	
	for (var i = 0, l = a.length; i < l; ++i)
	    r.push(unwrap(a[i]));

	return r;
    }

    function unwrap(v)
    {
	var isObservable = ko.isObservable(v);

	if (isObservable)
	{
	    var val = v();

	    return unwrap(val);
	}
	else
	{
	    if (typeOf(v) == "array")
	    {
		return unwrapArray(v);
	    }
	    else if (typeOf(v) == "object")
	    {
		return unwrapObject(v);
	    }
	    else
	    {
		return v;
	    }
	}
    }

    function reset()
    {
        parents = [{obj: null, wrapped: null, lvl: ""}];
    }    
    
    // wrapping

    function wrapObject(o, computedFunctions)
    {
        // check for infinite recursion
        for (var i = 0; i < parents.length; ++i) {
            if (parents[i].obj === o) {
                return parents[i].wrapped;
            }
        }

	var t = {};

	for (var k in o)
	{
	    var v = o[k];

            parents.push({obj: o, wrapped: t, lvl: currentLvl() + "/" + k});

	    t[k] = wrap(v, computedFunctions);

            parents.pop();
	}

	if (computedFunctions && computedFunctions[currentLvl()])
	    t = computedFunctions[currentLvl()](t);

        if (hasES5Plugin())
            ko.track(t);

	return t;
    }

    function wrapArray(a, computedFunctions)
    {
	var r = ko.observableArray();

	if (!a || a.length == 0)
	    return r;

	for (var i = 0, l = a.length; i < l; ++i)
	    r.push(wrap(a[i], computedFunctions));

	return r;
    }

    // a stack, used for two purposes:
    //  - circular reference checking
    //  - computed functions
    var parents;

    function currentLvl()
    {
	return parents[parents.length-1].lvl;
    }

    function wrap(v, computedFunctions)
    {
	if (typeOf(v) == "array")
	{
	    return wrapArray(v, computedFunctions);
	}
	else if (typeOf(v) == "object")
	{
	    return wrapObject(v, computedFunctions);
	}
	else
	{
            if (!hasES5Plugin() && typeof v !== 'function')
            {
	        var t = ko.observable();
	        t(v);
	        return t;
            } else
                return v;
	}
    }

    function hasES5Plugin()
    {
        return ko.track != null;
    }
}));
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[12])(12)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ3d3cvanMvaGVyb2NhbGMvaGVyb2NhbGNfYWJpbGl0aWVzLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2FiaWxpdHlkYXRhLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2J1ZmZzLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2NvcmUuanMiLCJ3d3cvanMvaGVyb2NhbGMvaGVyb2NhbGNfaGVyby5pbGx1c2lvbi5qcyIsInd3dy9qcy9oZXJvY2FsYy9oZXJvY2FsY19oZXJvLmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2hlcm8ubWVlcG8uanMiLCJ3d3cvanMvaGVyb2NhbGMvaGVyb2NhbGNfaGVyb19kYW1hZ2UuanMiLCJ3d3cvanMvaGVyb2NhbGMvaGVyb2NhbGNfaW52ZW50b3J5LmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX2tub2Nrb3V0LmpzIiwid3d3L2pzL2hlcm9jYWxjL2hlcm9jYWxjX3VuaXQuanMiLCJ3d3cvanMvaGVyb2NhbGMvbWFpbi5qcyIsInd3dy9qcy9oZXJvY2FsYy9wb2x5ZmlsbC5qcyIsInd3dy9qcy9saWIva25vY2tvdXQubWFwcGluZy5qcyIsInd3dy9qcy9saWIva25vY2tvdXQud3JhcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbDFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMytHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzk0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDcnlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5BYmlsaXR5TW9kZWwgPSBmdW5jdGlvbiAoYSwgaCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLmhlcm8gPSBoO1xuICAgIHNlbGYuYWJpbGl0eURhdGEgPSBteS5wcm90b3R5cGUuYWJpbGl0eURhdGE7XG4gICAgc2VsZi5oYXNTY2VwdGVyID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgc2VsZi5pc1NoYXBlU2hpZnRBY3RpdmUgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICBzZWxmLmFiaWxpdGllcyA9IGE7XG4gICAgc2VsZi5fYWJpbGl0aWVzID0gc2VsZi5hYmlsaXRpZXMoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmxldmVsID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmlzQWN0aXZlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5pc0RldGFpbCA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0uYmFzZURhbWFnZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5iYXNlRGFtYWdlUmVkdWN0aW9uUGN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJhc2VEYW1hZ2VNdWx0aXBsaWVyID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJhc2ggPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0uYmFzaEJvbnVzRGFtYWdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzRGFtYWdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzRGFtYWdlT3JiID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzRGFtYWdlUGN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzRGFtYWdlUHJlY2lzaW9uQXVyYSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5ib251c0RhbWFnZVJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5ib251c0hlYWx0aCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5ib251c1N0cmVuZ3RoID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzU3RyZW5ndGgyID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzQWdpbGl0eSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5ib251c0FnaWxpdHkyID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzSW50ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmJvbnVzQWxsU3RhdHNSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0uZGFtYWdlQW1wbGlmaWNhdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5kYW1hZ2VSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0uZXZhc2lvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5tYWdpY1Jlc2lzdCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5tYW5hcmVnZW4gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0ubWFuYXJlZ2VucmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLm1pc3NDaGFuY2UgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0ubW92ZW1lbnRTcGVlZEZsYXQgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICBzZWxmLl9hYmlsaXRpZXNbaV0ubW92ZW1lbnRTcGVlZFBjdCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS5tb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLnR1cm5SYXRlUmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dGFja3JhbmdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dGFja3NwZWVkID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dGFja3NwZWVkcmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmFybW9yID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmFybW9yUmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmhlYWx0aHJlZ2VuID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgc2VsZi5fYWJpbGl0aWVzW2ldLmxpZmVzdGVhbCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS52aXNpb25uaWdodCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgIHNlbGYuX2FiaWxpdGllc1tpXS52aXNpb25kYXkgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgIH1cbiAgICBzZWxmLmFiaWxpdHlDb250cm9sRGF0YSA9IHt9O1xuICAgIHNlbGYuYWJpbGl0eVNldHRpbmdzRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBwYXJlbnQsIGluZGV4KSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdHlDb250cm9sRGF0YVtkYXRhXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnByb2Nlc3NBYmlsaXR5KGRhdGEsIHBhcmVudCwgaW5kZXgsIHNlbGYuYWJpbGl0eURhdGFbZGF0YV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuYWJpbGl0eUNvbnRyb2xEYXRhW2RhdGFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHNlbGYucHJvY2Vzc0FiaWxpdHkgPSBmdW5jdGlvbiAoZGF0YSwgcGFyZW50LCBpbmRleCwgYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdC5kYXRhID0gW107XG4gICAgICAgIHZhciB2O1xuICAgICAgICB2YXIgdl9saXN0ID0gW107XG4gICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYXJnc1tpXS5jb250cm9sVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICAgICAgICAgICAgdiA9IGtvLm9ic2VydmFibGUoMCkuZXh0ZW5kKHsgbnVtZXJpYzogMiB9KTtcbiAgICAgICAgICAgICAgICAgICAgdi5jb250cm9sVmFsdWVUeXBlID0gYXJnc1tpXS5jb250cm9sVmFsdWVUeXBlO1xuICAgICAgICAgICAgICAgICAgICB2X2xpc3QucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEucHVzaCh7IGxhYmVsTmFtZTogYXJnc1tpXS5sYWJlbC50b1VwcGVyQ2FzZSgpICsgJzonLCBjb250cm9sVmFsOiB2LCBjb250cm9sVHlwZTogYXJnc1tpXS5jb250cm9sVHlwZSwgZGlzcGxheTogYXJnc1tpXS5kaXNwbGF5IH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgICAgdiA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB2LmNvbnRyb2xWYWx1ZVR5cGUgPSBhcmdzW2ldLmNvbnRyb2xWYWx1ZVR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0YS5wdXNoKHsgbGFiZWxOYW1lOiBhcmdzW2ldLmxhYmVsLnRvVXBwZXJDYXNlKCkgKyAnPycsIGNvbnRyb2xWYWw6IHYsIGNvbnRyb2xUeXBlOiBhcmdzW2ldLmNvbnRyb2xUeXBlLCBkaXNwbGF5OiBhcmdzW2ldLmRpc3BsYXkgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgICAgICAgICAgICB2ID0ga28ub2JzZXJ2YWJsZShhcmdzW2ldLmNvbnRyb2xPcHRpb25zWzBdLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdi5jb250cm9sVmFsdWVUeXBlID0gYXJnc1tpXS5jb250cm9sVmFsdWVUeXBlO1xuICAgICAgICAgICAgICAgICAgICB2X2xpc3QucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEucHVzaCh7IGxhYmVsTmFtZTogYXJnc1tpXS5sYWJlbC50b1VwcGVyQ2FzZSgpICsgJz8nLCBjb250cm9sVmFsOiB2LCBjb250cm9sVHlwZTogYXJnc1tpXS5jb250cm9sVHlwZSwgZGlzcGxheTogYXJnc1tpXS5kaXNwbGF5LCBjb250cm9sT3B0aW9uczogYXJnc1tpXS5jb250cm9sT3B0aW9ucyB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtZXRob2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgICAgICAgICAgICAvLyBzaW5nbGUgaW5wdXQgYWJpbGl0aWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdzW2ldLmNvbnRyb2xzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0ubm9MZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7Zm46IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYWJpbGl0eSA9IHNlbGYuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIubmFtZSA9PSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoX2FiaWxpdHkuYXR0cmlidXRlcywgYXR0cmlidXRlTmFtZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmbjoga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hYmlsaXR5ID0gc2VsZi5hYmlsaXRpZXMoKS5maW5kKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5uYW1lID09IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShfYWJpbGl0eS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lLCBfYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IGF0dHJpYnV0ZVZhbHVlKGFyZ3NbaV0uYXR0cmlidXRlTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gc2VsZi5nZXRDb21wdXRlZEZ1bmN0aW9uKHYsIGcuZm4sIGFyZ3NbaV0uZm4sIHBhcmVudCwgaW5kZXgsIHNlbGYsIGFyZ3NbaV0ucmV0dXJuUHJvcGVydHksIHVuZGVmaW5lZCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXS5pZ25vcmVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2x0aXAgPSBhcmdzW2ldLmxhYmVsIHx8IGFyZ3NbaV0uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVG9vbHRpcChzZWxmLmFiaWxpdGllcygpW2luZGV4XS5hdHRyaWJ1dGVzLCBhcmdzW2ldLmF0dHJpYnV0ZU5hbWUpIHx8IGFyZ3NbaV0ubGFiZWwgfHwgYXJnc1tpXS5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEucHVzaCh7IGxhYmVsTmFtZTogdG9vbHRpcC50b1VwcGVyQ2FzZSgpLCBjb250cm9sVmFsOiByLCBjb250cm9sVHlwZTogYXJnc1tpXS5jb250cm9sVHlwZSwgZGlzcGxheTogYXJnc1tpXS5kaXNwbGF5LCBjbGVhbjogZy5mbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBtdWx0aSBpbnB1dCBhYmlsaXRpZXNcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXS5ub0xldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtmbjoga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuYWJpbGl0aWVzKClbaW5kZXhdLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZU5hbWUsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7Zm46IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLmFiaWxpdGllcygpW2luZGV4XS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lLCBzZWxmLmFiaWxpdGllcygpW2luZGV4XS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IGF0dHJpYnV0ZVZhbHVlKGFyZ3NbaV0uYXR0cmlidXRlTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gc2VsZi5nZXRDb21wdXRlZEZ1bmN0aW9uKHZfbGlzdCwgZy5mbiwgYXJnc1tpXS5mbiwgcGFyZW50LCBpbmRleCwgc2VsZiwgYXJnc1tpXS5yZXR1cm5Qcm9wZXJ0eSwgYXJnc1tpXS5jb250cm9scywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXS5pZ25vcmVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2x0aXAgPSBhcmdzW2ldLmxhYmVsIHx8IGFyZ3NbaV0uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVG9vbHRpcChzZWxmLmFiaWxpdGllcygpW2luZGV4XS5hdHRyaWJ1dGVzLCBhcmdzW2ldLmF0dHJpYnV0ZU5hbWUpIHx8IGFyZ3NbaV0ubGFiZWwgfHwgYXJnc1tpXS5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEucHVzaCh7IGxhYmVsTmFtZTogdG9vbHRpcC50b1VwcGVyQ2FzZSgpLCBjb250cm9sVmFsOiByLCBjb250cm9sVHlwZTogYXJnc1tpXS5jb250cm9sVHlwZSwgZGlzcGxheTogYXJnc1tpXS5kaXNwbGF5LCBjbGVhbjogZy5mbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbaV0uY29udHJvbFR5cGUgPT0gJ21ldGhvZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZfbGlzdC5wdXNoKHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbZGF0YV0gPSByZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc2VsZi5nZXRDb21wdXRlZEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYsIGF0dHJpYnV0ZVZhbHVlLCBmbiwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCByZXR1cm5Qcm9wZXJ0eSwgY29udHJvbHMsIGFiaWxpdHlOYW1lKSB7XG4gICAgICAgIHZhciBfYWJpbGl0eSA9IGFiaWxpdHlNb2RlbC5hYmlsaXRpZXMoKS5maW5kKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLm5hbWUgPT0gYWJpbGl0eU5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIGlmIChjb250cm9scyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2KCkgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB2KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYuY29udHJvbFZhbHVlVHlwZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHBhcnNlRmxvYXQodigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodi5jb250cm9sVmFsdWVUeXBlID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB2KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gcGFyc2VGbG9hdCh2KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2X2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7aTxjb250cm9scy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHZbY29udHJvbHNbaV1dKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2X2xpc3QucHVzaCh2W2NvbnRyb2xzW2ldXSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2X2xpc3QucHVzaChwYXJzZUZsb2F0KHZbY29udHJvbHNbaV1dKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB2X2xpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBmbi5jYWxsKHRoaXMsIGlucHV0VmFsdWUsIGF0dHJpYnV0ZVZhbHVlKCksIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgX2FiaWxpdHkpO1xuICAgICAgICAgICAgaWYgKHJldHVyblByb3BlcnR5ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF9hYmlsaXR5W3JldHVyblByb3BlcnR5XShyZXR1cm5WYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIFxuICAgIHNlbGYuZ2V0QWJpbGl0eUxldmVsQnlBYmlsaXR5TmFtZSA9IGZ1bmN0aW9uIChhYmlsaXR5TmFtZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzZWxmLl9hYmlsaXRpZXNbaV0ubmFtZSA9PSBhYmlsaXR5TmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9hYmlsaXRpZXNbaV0ubGV2ZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgc2VsZi5nZXRBYmlsaXR5QnlOYW1lID0gZnVuY3Rpb24gKGFiaWxpdHlOYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlbGYuX2FiaWxpdGllc1tpXS5uYW1lID09IGFiaWxpdHlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHNlbGYuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbiAoYWJpbGl0eSwgcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYWJpbGl0eVtwcm9wZXJ0eV0oKVthYmlsaXR5LmxldmVsKCktMV0pO1xuICAgIH1cbiAgICBcbiAgICBzZWxmLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlbGYuX2FiaWxpdGllc1tpXS5uYW1lID09ICdhdHRyaWJ1dGVfYm9udXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FiaWxpdGllc1tpXS5sZXZlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwOyAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHNlbGYuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkgeyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW52b2tlcl9xdWFzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3RyZW5ndGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbYWJpbGl0eS5sZXZlbCgpLTFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYm9udXNBbGxTdGF0c1JlZHVjdGlvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2xhcmtfZXNzZW5jZV9zaGlmdFxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0FsbFN0YXRzUmVkdWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldFN0cmVuZ3RoUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAvKnN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludm9rZXJfcXVhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX3N0cmVuZ3RoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlW2FiaWxpdHkubGV2ZWwoKS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzU3RyZW5ndGggIT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSA9PSAndW5keWluZ19kZWNheScpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5keWluZ19kZWNheVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZS09YWJpbGl0eS5ib251c1N0cmVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldFN0cmVuZ3RoID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKnN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZva2VyX3F1YXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3RyZW5ndGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlW2FiaWxpdHkubGV2ZWwoKS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5ib251c1N0cmVuZ3RoICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSB8fCBhYmlsaXR5Lm5hbWUgPT0gJ2ludm9rZXJfcXVhcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwdWRnZV9mbGVzaF9oZWFwLGludm9rZXJfcXVhcyxtb3JwaGxpbmdfbW9ycGhfc3RyLG1vcnBobGluZ19tb3JwaF9hZ2ksdW5keWluZ19kZWNheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmJvbnVzU3RyZW5ndGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5ib251c1N0cmVuZ3RoMiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtb3JwaGxpbmdfbW9ycGhfc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNTdHJlbmd0aDIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRBZ2lsaXR5ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfbWFya3NtYW5zaGlwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hcmtzbWFuc2hpcF9hZ2lsaXR5X2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5ib251c0FnaWxpdHkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpIHx8IGFiaWxpdHkubmFtZSA9PSAnaW52b2tlcl93ZXgnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW52b2tlcl93ZXgsbW9ycGhsaW5nX21vcnBoX2FnaSxtb3JwaGxpbmdfbW9ycGhfc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYm9udXNBZ2lsaXR5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuYm9udXNBZ2lsaXR5MiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZva2VyX3dleCxtb3JwaGxpbmdfbW9ycGhfYWdpLG1vcnBobGluZ19tb3JwaF9zdHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0FnaWxpdHkyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRJbnRlbGxpZ2VuY2UgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZva2VyX2V4b3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogICAgY2FzZSAnYm9udXNfaW50ZWxsaWdlbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7Ki9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5ib251c0ludCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSB8fCBhYmlsaXR5Lm5hbWUgPT0gJ2ludm9rZXJfZXhvcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZva2VyX2V4b3J0XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0ludCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEFybW9yID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXhlX2JlcnNlcmtlcnNfY2FsbCxkcmFnb25fa25pZ2h0X2RyYWdvbl9ibG9vZCx0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZSxseWNhbl9zaGFwZXNoaWZ0LGVucmFnZWRfd2lsZGtpbl90b3VnaG5lc3NfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSAhPSAndGVtcGxhcl9hc3Nhc3Npbl9tZWxkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Zlbl93YXJjcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3YXJjcnlfYXJtb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGljaF9mcm9zdF9hcm1vcixvZ3JlX21hZ2lfZnJvc3RfYXJtb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcm1vcl9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2xpY2hfZnJvc3RfYXJtb3InIHx8IGFiaWxpdHkubmFtZSA9PSAnb2dyZV9tYWdpX2Zyb3N0X2FybW9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5hcm1vciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hyZWRkZXJfcmVhY3RpdmVfYXJtb3IsdmlzYWdlX2dyYXZla2VlcGVyc19jbG9ha1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5hcm1vcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldEFybW9yQmFzZVJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgLy9pZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9lbGRlcl90aXRhbl9uYXR1cmFsX29yZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbGRlcl90aXRhbl9uYXR1cmFsX29yZGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMS1zZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2FybW9yX3JlZHVjdGlvbl9wY3QnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEFybW9yUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy90ZW1wbGFyX2Fzc2Fzc2luX21lbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RlbXBsYXJfYXNzYXNzaW5fbWVsZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdib251c19hcm1vcicsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRpZGVodW50ZXJfZ3VzaFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGlkZWh1bnRlcl9ndXNoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2FybW9yX2JvbnVzJywgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmFnYV9zaXJlbl9yaXBfdGlkZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmFnYV9zaXJlbl9yaXBfdGlkZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbGFyZGFyX2FtcGxpZnlfZGFtYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbGFyZGFyX2FtcGxpZnlfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZlbmdlZnVsc3Bpcml0X3dhdmVfb2ZfdGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2ZW5nZWZ1bHNwaXJpdF93YXZlX29mX3RlcnJvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdhcm1vcl9yZWR1Y3Rpb24nLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXZlcm1vcmVfZGFya19sb3JkXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfZGFya19sb3JkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ3ByZXNlbmNlX2FybW9yX3JlZHVjdGlvbicsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmFybW9yUmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhbGNoZW1pc3RfYWNpZF9zcHJheVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5hcm1vclJlZHVjdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldEhlYWx0aCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvbmVfZHJ1aWRfdHJ1ZV9mb3JtLGx5Y2FuX3NoYXBlc2hpZnQsdHJvbGxfd2FybG9yZF9iZXJzZXJrZXJzX3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19ocCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsb25lX2RydWlkX3N5bmVyZ3lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cnVlX2Zvcm1faHBfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc1RydWVGb3JtQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYm9udXNIZWFsdGggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaW5rel9kZWF0aF9wYWN0XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmJvbnVzSGVhbHRoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmlzVHJ1ZUZvcm1BY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5pc0FjdGl2ZSgpICYmIGFiaWxpdHkubmFtZSA9PSAnbG9uZV9kcnVpZF90cnVlX2Zvcm0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNlbGYuZ2V0SGVhbHRoUmVnZW4gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGNoZW1pc3RfY2hlbWljYWxfcmFnZSwgZHJhZ29uX2tuaWdodF9kcmFnb25fYmxvb2RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19oZWFsdGhfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyb29kbW90aGVyX3NwaW5fd2ViXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhdGhfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9tbmlrbmlnaHRfZ3VhcmRpYW5fYW5nZWwsdHJlYW50X2xpdmluZ19hcm1vcixzYXR5cl9oZWxsY2FsbGVyX3VuaG9seV9hdXJhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhbHRoX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlZ2lvbl9jb21tYW5kZXJfcHJlc3NfdGhlX2F0dGFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hwX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuaGVhbHRocmVnZW4gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNocmVkZGVyX3JlYWN0aXZlX2FybW9yLGludm9rZXJfcXVhcyxuZWNyb2x5dGVfc2FkaXN0XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKz1hYmlsaXR5LmhlYWx0aHJlZ2VuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0TWFuYSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgLy9pZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2JzaWRpYW5fZGVzdHJveWVyX2Vzc2VuY2VfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21hbmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRNYW5hUmVnZW4gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGNoZW1pc3RfY2hlbWljYWxfcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21hbmFfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tYW5hcmVnZW4gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lY3JvbHl0ZV9zYWRpc3RcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkubWFuYXJlZ2VuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldE1hbmFSZWdlbkFyY2FuZUF1cmEgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIC8vaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyeXN0YWxfbWFpZGVuX2JyaWxsaWFuY2VfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hbmFfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdjcnlzdGFsX21haWRlbl9icmlsbGlhbmNlX2F1cmEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0TWFuYVJlZ2VuUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAvKmlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgLy8gXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBjYXNlICcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVthYmlsaXR5LmxldmVsKCktMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlKi8gaWYgKGFiaWxpdHkubWFuYXJlZ2VucmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwdWduYV9uZXRoZXJfd2FyZFxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5tYW5hcmVnZW5yZWR1Y3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0QXR0YWNrUmFuZ2UgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW50ZXJfd3l2ZXJuX2FyY3RpY19idXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja19yYW5nZV9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlbXBsYXJfYXNzYXNzaW5fcHNpX2JsYWRlcyxzbmlwZXJfdGFrZV9haW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrX3JhbmdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlcnJvcmJsYWRlX21ldGFtb3JwaG9zaXMsdHJvbGxfd2FybG9yZF9iZXJzZXJrZXJzX3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfcmFuZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAndGVycm9yYmxhZGVfbWV0YW1vcnBob3NpcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICd0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW55X2dyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfcmFuZ2Vfc2NlcHRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICd0aW55X2dyb3cnICYmIHNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5jaGFudHJlc3NfaW1wZXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tfcmFuZ2Vfc2NlcHRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdlbmNoYW50cmVzc19pbXBldHVzJyAmJiBzZWxmLmhhc1NjZXB0ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9uZV9kcnVpZF90cnVlX2Zvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2xvbmVfZHJ1aWRfdHJ1ZV9mb3JtJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IDQyMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2VuY2hhbnRyZXNzX2ltcGV0dXMnICYmIHNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrX3JhbmdlX3NjZXB0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5hdHRhY2tyYW5nZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJhZ29uX2tuaWdodF9lbGRlcl9kcmFnb25fZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkuYXR0YWNrcmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRBdHRhY2tTcGVlZCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFiYWRkb25fZnJvc3Rtb3VybmUsdHJvbGxfd2FybG9yZF9iYXR0bGVfdHJhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2aXNhZ2VfZ3JhdmVfY2hpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2tzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWlyYW5hX2xlYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsZWFwX3NwZWVkYm9udXNfYXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpZmVfc3RlYWxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja19zcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGlua3pfc3RyYWZlLHVyc2Ffb3ZlcnBvd2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3NwZWVkX2JvbnVzX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2NsaW5rel9zdHJhZmUnIHx8IGFiaWxpdHkubmFtZSA9PSAndXJzYV9vdmVycG93ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBheGVfY3VsbGluZ19ibGFkZSxuZWNyb25vbWljb25fYXJjaGVyX2FvZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnYXhlX2N1bGxpbmdfYmxhZGUnIHx8IGFiaWxpdHkubmFtZSA9PSAnbmVjcm9ub21pY29uX2FyY2hlcl9hb2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmNpZW50X2FwcGFyaXRpb25fY2hpbGxpbmdfdG91Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2tfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnYW5jaWVudF9hcHBhcml0aW9uX2NoaWxsaW5nX3RvdWNoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVhc3RtYXN0ZXJfaW5uZXJfYmVhc3QsbHljYW5fZmVyYWxfaW1wdWxzZSxsb25lX2RydWlkX3JhYmlkLHRpbnlfZ3JvdyxwaGFudG9tX2Fzc2Fzc2luX3BoYW50b21fc3RyaWtlLHdpbmRydW5uZXJfZm9jdXNmaXJlLG9ncmVfbWFnaV9ibG9vZGx1c3QsY2VudGF1cl9raGFuX2VuZHVyYW5jZV9hdXJhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnYmVhc3RtYXN0ZXJfaW5uZXJfYmVhc3QnIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWJpbGl0eS5uYW1lID09ICdseWNhbl9mZXJhbF9pbXB1bHNlJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSA9PSAnbG9uZV9kcnVpZF9yYWJpZCcgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhYmlsaXR5Lm5hbWUgPT0gJ3RpbnlfZ3JvdycgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhYmlsaXR5Lm5hbWUgPT0gJ3BoYW50b21fYXNzYXNzaW5fcGhhbnRvbV9zdHJpa2UnIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWJpbGl0eS5uYW1lID09ICd3aW5kcnVubmVyX2ZvY3VzZmlyZScgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhYmlsaXR5Lm5hbWUgPT0gJ29ncmVfbWFnaV9ibG9vZGx1c3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhYmlsaXR5Lm5hbWUgPT0gJ2NlbnRhdXJfa2hhbl9lbmR1cmFuY2VfYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYXR0YWNrc3BlZWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyb2xsX3dhcmxvcmRfZmVydm9yLHdpc3Bfb3ZlcmNoYXJnZSxsaW5hX2ZpZXJ5X3NvdWwsaW52b2tlcl9hbGFjcml0eSxpbnZva2VyX3dleCxodXNrYXJfYmVyc2Vya2Vyc19ibG9vZFxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5hdHRhY2tzcGVlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmlnaHRfc3RhbGtlcl92b2lkLGNyeXN0YWxfbWFpZGVuX2NyeXN0YWxfbm92YSxnaG9zdF9mcm9zdF9hdHRhY2ssb2dyZV9tYWdpX2Zyb3N0X2FybW9yLHBvbGFyX2Z1cmJvbGdfdXJzYV93YXJyaW9yX3RodW5kZXJfY2xhcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja3NwZWVkX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpY2hfZnJvc3RfYXJtb3IsbGljaF9mcm9zdF9ub3ZhLGVuY2hhbnRyZXNzX3VudG91Y2hhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvd19hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlYXN0bWFzdGVyX3ByaW1hbF9yb2FyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvd19hdHRhY2tfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9ybV9zcGlyaXRfb3ZlcmxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvdmVybG9hZF9hdHRhY2tfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbW5pa25pZ2h0X2RlZ2VuX2F1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ29tbmlrbmlnaHRfZGVnZW5fYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHR1c2tfZnJvemVuX3NpZ2lsLGNyeXN0YWxfbWFpZGVuX2ZyZWV6aW5nX2ZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZCcgJiYgIXNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lID09ICd0dXNrX2Zyb3plbl9zaWdpbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F0dGFja19zbG93X3NjZXB0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZCcgJiYgc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZhY2VsZXNzX3ZvaWRfdGltZV93YWxrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2ZhY2VsZXNzX3ZvaWRfdGltZV93YWxrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm91bnR5X2h1bnRlcl9qaW5hZGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tzcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2JvdW50eV9odW50ZXJfamluYWRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJld21hc3Rlcl90aHVuZGVyX2NsYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2tfc3BlZWRfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2JyZXdtYXN0ZXJfdGh1bmRlcl9jbGFwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVkdXNhX3N0b25lX2dhemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnbWVkdXNhX3N0b25lX2dhemUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2aXNhZ2VfZ3JhdmVfY2hpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2tzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhYmFkZG9uX2Zyb3N0bW91cm5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNrX3Nsb3dfdG9vbHRpcCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2FiYWRkb25fZnJvc3Rtb3VybmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdlbnJhZ2VkX3dpbGRraW5fdG9ybmFkbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IDE1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYXR0YWNrc3BlZWRyZWR1Y3Rpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZpcGVyX3ZpcGVyX3N0cmlrZSx2aXBlcl9jb3Jyb3NpdmVfc2tpbixqYWtpcm9fbGlxdWlkX2ZpcmUsbGljaF9jaGFpbl9mcm9zdCxzYW5ka2luZ19lcGljZW50ZXIsZWFydGhfc3Bpcml0X3JvbGxpbmdfYm91bGRlclxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5hdHRhY2tzcGVlZHJlZHVjdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgc2VsZi5nZXRCYXNoID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2xhcmRhcl9iYXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbmlwZXJfaGVhZHNob3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9jX2NoYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5iYXNoICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzcGlyaXRfYnJlYWtlcl9ncmVhdGVyX2Jhc2gsZmFjZWxlc3Nfdm9pZF90aW1lX2xvY2tcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBhYmlsaXR5LmJhc2goKS8xMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7ICAgIFxuICAgIHNlbGYuZ2V0QmFzZURhbWFnZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgdmFyIHRvdGFsTXVsdGlwbGllciA9IDE7XG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW55X2dyb3csdGVycm9yYmxhZGVfbWV0YW1vcnBob3Npc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2RhbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3RpbnlfZ3JvdycgfHwgYWJpbGl0eS5uYW1lID09ICd0ZXJyb3JibGFkZV9tZXRhbW9ycGhvc2lzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5iYXNlRGFtYWdlTXVsdGlwbGllciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVhcnRoc2hha2VyX2VuY2hhbnRfdG90ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTXVsdGlwbGllciArPSBhYmlsaXR5LmJhc2VEYW1hZ2VNdWx0aXBsaWVyKCkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgLyp0b3RhbEF0dHJpYnV0ZSArPSBhYmlsaXR5LmJhc2VEYW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5iYXNlRGFtYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmJhc2VEYW1hZ2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGlua3pfZGVhdGhfcGFjdFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gYWJpbGl0eS5iYXNlRGFtYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYmFzZURhbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgdG90YWw6IHRvdGFsQXR0cmlidXRlLCBtdWx0aXBsaWVyOiB0b3RhbE11bHRpcGxpZXIgfTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldFNlbGZCYXNlRGFtYWdlUmVkdWN0aW9uUGN0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVkdXNhX3NwbGl0X3Nob3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2VfbW9kaWZpZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbmRydW5uZXJfZm9jdXNmaXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9jdXNmaXJlX2RhbWFnZV9yZWR1Y3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9jdXNmaXJlX2RhbWFnZV9yZWR1Y3Rpb25fc2NlcHRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmhhc1NjZXB0ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgKyBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2ZW5nZWZ1bHNwaXJpdF9jb21tYW5kX2F1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19kYW1hZ2VfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAndmVuZ2VmdWxzcGlyaXRfY29tbWFuZF9hdXJhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuYmFzZURhbWFnZVJlZHVjdGlvblBjdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV2ZXJtb3JlX3JlcXVpZW1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgKyBhYmlsaXR5LmJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKS8xMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRCQVQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZSxhbGNoZW1pc3RfY2hlbWljYWxfcmFnZSxsb25lX2RydWlkX3RydWVfZm9ybSxseWNhbl9zaGFwZXNoaWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFzZV9hdHRhY2tfdGltZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgc2VsZi5nZXRCb251c0RhbWFnZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyb29kbW90aGVyX2luc2F0aWFibGVfaHVuZ2VyLGx1bmFfbHVuYXJfYmxlc3NpbmcsdGVtcGxhcl9hc3Nhc3Npbl9yZWZyYWN0aW9uLHRlbXBsYXJfYXNzYXNzaW5fbWVsZCx0cm9sbF93YXJsb3JkX2JlcnNlcmtlcnNfcmFnZSxsb25lX2RydWlkX3RydWVfZm9ybV9iYXR0bGVfY3J5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnYnJvb2Rtb3RoZXJfaW5zYXRpYWJsZV9odW5nZXInIHx8IGFiaWxpdHkubmFtZSA9PSAnbHVuYV9sdW5hcl9ibGVzc2luZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSA9PSAndGVtcGxhcl9hc3Nhc3Npbl9yZWZyYWN0aW9uJyB8fCBhYmlsaXR5Lm5hbWUgPT0gJ3RlbXBsYXJfYXNzYXNzaW5fbWVsZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFiaWxpdHkubmFtZSA9PSAndHJvbGxfd2FybG9yZF9iZXJzZXJrZXJzX3JhZ2UnIHx8IGFiaWxpdHkubmFtZSA9PSAnbG9uZV9kcnVpZF90cnVlX2Zvcm1fYmF0dGxlX2NyeScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBseWNhbl9ob3dsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVyb19ib251c19kYW1hZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdzdG9ybV9zcGlyaXRfb3ZlcmxvYWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAnbWFnaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LmJvbnVzRGFtYWdlICE9IHVuZGVmaW5lZCAmJiBhYmlsaXR5LmJvbnVzRGFtYWdlKCkgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXZlcm1vcmVfbmVjcm9tYXN0ZXJ5LHVyc2FfZnVyeV9zd2lwZXMsdXJzYV9lbnJhZ2UsaW52b2tlcl9hbGFjcml0eSxpbnZva2VyX2V4b3J0LGVsZGVyX3RpdGFuX2FuY2VzdHJhbF9zcGlyaXQsc3BlY3RyZV9kZXNvbGF0ZSxyYXpvcl9zdGF0aWNfbGlua1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0RhbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5ib251c0RhbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiBhYmlsaXR5Lm5hbWUgPT0gJ3NwZWN0cmVfZGVzb2xhdGUnID8gJ3B1cmUnIDogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzb3VyY2VzOiBzb3VyY2VzLCB0b3RhbDogdG90YWxBdHRyaWJ1dGUgfTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmxvb2RzZWVrZXJfYmxvb2RyYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGFtYWdlX2luY3JlYXNlX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2Jsb29kc2Vla2VyX2Jsb29kcmFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hZ25hdGF1cl9lbXBvd2VyLHZlbmdlZnVsc3Bpcml0X2NvbW1hbmRfYXVyYSxhbHBoYV93b2xmX2NvbW1hbmRfYXVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2RhbWFnZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdtYWduYXRhdXJfZW1wb3dlcicgfHwgYWJpbGl0eS5uYW1lID09ICd2ZW5nZWZ1bHNwaXJpdF9jb21tYW5kX2F1cmEnIHx8IGFiaWxpdHkubmFtZSA9PSAnYWxwaGFfd29sZl9jb21tYW5kX2F1cmEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdmVuX2dvZHNfc3RyZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdnb2RzX3N0cmVuZ3RoX2RhbWFnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3N2ZW5fZ29kc19zdHJlbmd0aCcgJiYgc2VsZi5oZXJvICE9IHVuZGVmaW5lZCAmJiBzZWxmLmhlcm8uaGVyb0lkKCkgPT0gJ3N2ZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdnb2RzX3N0cmVuZ3RoX2RhbWFnZV9zY2VwdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnc3Zlbl9nb2RzX3N0cmVuZ3RoJyAmJiBzZWxmLmhlcm8gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKmVsc2UgaWYgKGFiaWxpdHkuYm9udXNEYW1hZ2VQY3QgIT0gdW5kZWZpbmVkICYmIGFiaWxpdHkuYm9udXNEYW1hZ2VQY3QoKSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJsb29kc2Vla2VyX2Jsb29kcmFnZVxuICAgICAgICAgICAgICAgICAgICAvLyB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0RhbWFnZVBjdCgpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ2RhbWFnZSc6IGFiaWxpdHkuYm9udXNEYW1hZ2VQY3QoKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzb3VyY2VzOiBzb3VyY2VzLCB0b3RhbDogdG90YWxBdHRyaWJ1dGUgfTtcbiAgICB9KTtcblxuICAgIHNlbGYuZ2V0Qm9udXNEYW1hZ2VCYWNrc3RhYiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlMSA9IDA7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZTIgPSAwO1xuICAgICAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAncmlraV9iYWNrc3RhYicpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByaWtpX2JhY2tzdGFiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGFtYWdlX211bHRpcGxpZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZTEgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0vKlxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5ib251c0RhbWFnZUJhY2tzdGFiICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2JvbnVzRGFtYWdlQmFja3N0YWInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRhbWFnZV9tdWx0aXBsaWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZTIrPWFiaWxpdHkuYm9udXNEYW1hZ2VCYWNrc3RhYigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5ib251c0RhbWFnZUJhY2tzdGFiKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHNvdXJjZXMsIHRvdGFsOiBbdG90YWxBdHRyaWJ1dGUxLHRvdGFsQXR0cmlidXRlMl0gfTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlUHJlY2lzaW9uQXVyYSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlMSA9IDA7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZTIgPSAwO1xuICAgICAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnZHJvd19yYW5nZXJfdHJ1ZXNob3QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfdHJ1ZXNob3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cnVlc2hvdF9yYW5nZWRfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUxICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuYm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfdHJ1ZXNob3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlMis9YWJpbGl0eS5ib251c0RhbWFnZVByZWNpc2lvbkF1cmEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncGh5c2ljYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHNvdXJjZXMsIHRvdGFsOiBbdG90YWxBdHRyaWJ1dGUxLHRvdGFsQXR0cmlidXRlMl0gfTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFuZV9lbmZlZWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZmVlYmxlX2F0dGFja19yZWR1Y3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5ib251c0RhbWFnZVJlZHVjdGlvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcnViaWNrX2ZhZGVfYm9sdCxyYXpvcl9zdGF0aWNfbGlua1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5ib251c0RhbWFnZVJlZHVjdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRCb251c0RhbWFnZVJlZHVjdGlvblBjdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lZHVzYV9zcGxpdF9zaG90XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGFtYWdlX21vZGlmaWVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgKyBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kcnVubmVyX2ZvY3VzZmlyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvY3VzZmlyZV9kYW1hZ2VfcmVkdWN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmhhc1NjZXB0ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgKyBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvY3VzZmlyZV9kYW1hZ2VfcmVkdWN0aW9uX3NjZXB0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldERhbWFnZUFtcGxpZmljYXRpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIC8qaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiYW5lX2VuZmVlYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZmVlYmxlX2F0dGFja19yZWR1Y3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSovIGlmIChhYmlsaXR5LmRhbWFnZUFtcGxpZmljYXRpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bmR5aW5nX2ZsZXNoX2dvbGVtXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIGFiaWxpdHkuZGFtYWdlQW1wbGlmaWNhdGlvbigpLzEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldERhbWFnZVJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJsb29kc2Vla2VyX2Jsb29kcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhbWFnZV9pbmNyZWFzZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdibG9vZHNlZWtlcl9ibG9vZHJhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8ga3Vua2thX2dob3N0c2hpcFxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdrdW5ra2FfZ2hvc3RzaGlwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSA1MC8xMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkuZGFtYWdlUmVkdWN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aXNwX292ZXJjaGFyZ2UsYnJpc3RsZWJhY2tfYnJpc3RsZWJhY2ssc3BlY3RyZV9kaXNwZXJzaW9uLG1lZHVzYV9tYW5hX3NoaWVsZCx1cnNhX2VucmFnZVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSArIGFiaWxpdHkuZGFtYWdlUmVkdWN0aW9uKCkvMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRDcml0U291cmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGhhbnRvbV9hc3Nhc3Npbl9jb3VwX2RlX2dyYWNlLGJyZXdtYXN0ZXJfZHJ1bmtlbl9icmF3bGVyLGNoYW9zX2tuaWdodF9jaGFvc19zdHJpa2UsbHljYW5fc2hhcGVzaGlmdCxza2VsZXRvbl9raW5nX21vcnRhbF9zdHJpa2UsanVnZ2VybmF1dF9ibGFkZV9kYW5jZSxhbHBoYV93b2xmX2NyaXRpY2FsX3N0cmlrZSxnaWFudF93b2xmX2NyaXRpY2FsX3N0cmlrZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGhhbnRvbV9hc3Nhc3Npbl9jb3VwX2RlX2dyYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdjcml0X2NoYW5jZScsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2NyaXRfYm9udXMnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnJld21hc3Rlcl9kcnVua2VuX2JyYXdsZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2NyaXRfY2hhbmNlJywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCAnY3JpdF9tdWx0aXBsaWVyJywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYW9zX2tuaWdodF9jaGFvc19zdHJpa2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbHljYW5fc2hhcGVzaGlmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCAnY3JpdF9jaGFuY2UnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdjcml0X211bHRpcGxpZXInLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2tlbGV0b25fa2luZ19tb3J0YWxfc3RyaWtlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdjcml0X2NoYW5jZScsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2NyaXRfbXVsdCcsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdqdWdnZXJuYXV0X2JsYWRlX2RhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdibGFkZV9kYW5jZV9jcml0X2NoYW5jZScsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxpZXInOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2JsYWRlX2RhbmNlX2NyaXRfbXVsdCcsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhbHBoYV93b2xmX2NyaXRpY2FsX3N0cmlrZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdnaWFudF93b2xmX2NyaXRpY2FsX3N0cmlrZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCAnY3JpdF9jaGFuY2UnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdjcml0X211bHQnLCBhYmlsaXR5LmxldmVsKCkpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH0pOyAgICBcblxuICAgIHNlbGYuZ2V0Q2xlYXZlU291cmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGFiaWxpdHkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFnbmF0YXVyX2VtcG93ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hZ25hdGF1cl9lbXBvd2VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdjbGVhdmVfcmFkaXVzJywgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2NsZWF2ZV9kYW1hZ2VfcGN0JywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN2ZW5fZ3JlYXRfY2xlYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdmVuX2dyZWF0X2NsZWF2ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cyc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCAnZ3JlYXRfY2xlYXZlX3JhZGl1cycsIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFnbml0dWRlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdncmVhdF9jbGVhdmVfZGFtYWdlJywgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGt1bmtrYV90aWRlYnJpbmdlclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAna3Vua2thX3RpZGVicmluZ2VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdyYWRpdXMnLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hZ25pdHVkZSc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRpbnlfZ3Jvd1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGlueV9ncm93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsICdib251c19jbGVhdmVfcmFkaXVzX3NjZXB0ZXInLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgJ2JvbnVzX2NsZWF2ZV9kYW1hZ2Vfc2NlcHRlcicsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9KTsgICAgXG4gICAgXG4gICAgc2VsZi5nZXRDcml0Q2hhbmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGhhbnRvbV9hc3Nhc3Npbl9jb3VwX2RlX2dyYWNlLGJyZXdtYXN0ZXJfZHJ1bmtlbl9icmF3bGVyLGNoYW9zX2tuaWdodF9jaGFvc19zdHJpa2UsbHljYW5fc2hhcGVzaGlmdCxza2VsZXRvbl9raW5nX21vcnRhbF9zdHJpa2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjcml0X2NoYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pOyAgICAgICAgICAgIFxuICAgIFxuICAgIHNlbGYuZ2V0RXZhc2lvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBoYW50b21fYXNzYXNzaW5fYmx1clxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2V2YXNpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyZXdtYXN0ZXJfZHJ1bmtlbl9icmF3bGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG9kZ2VfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRFdmFzaW9uQmFja3RyYWNrID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFjZWxlc3Nfdm9pZF9iYWNrdHJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkb2RnZV9jaGFuY2VfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRNaXNzQ2hhbmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJvb2Rtb3RoZXJfaW5jYXBhY2l0YXRpbmdfYml0ZSxicmV3bWFzdGVyX2RydW5rZW5faGF6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pc3NfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByaWtpX3Ntb2tlX3NjcmVlbixrZWVwZXJfb2ZfdGhlX2xpZ2h0X2JsaW5kaW5nX2xpZ2h0LHRpbmtlcl9sYXNlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pc3NfcmF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5taXNzQ2hhbmNlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuaWdodF9zdGFsa2VyX2NyaXBwbGluZ19mZWFyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlKj0oMS1hYmlsaXR5Lm1pc3NDaGFuY2UoKS8xMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRMaWZlc3RlYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBza2VsZXRvbl9raW5nX3ZhbXBpcmljX2F1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2YW1waXJpY19hdXJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9vZG1vdGhlcl9pbnNhdGlhYmxlX2h1bmdlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpZmVzdGVhbF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5saWZlc3RlYWwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxpZmVfc3RlYWxlcl9vcGVuX3dvdW5kc1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5saWZlc3RlYWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0TWFnaWNSZXNpc3QgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnRpbWFnZV9zcGVsbF9zaGllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGVsbF9zaGllbGRfcmVzaXN0YW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGhhbnRvbV9sYW5jZXJfcGhhbnRvbV9lZGdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFnaWNfcmVzaXN0YW5jZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdwaGFudG9tX2xhbmNlcl9waGFudG9tX2VkZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcnViaWNrX251bGxfZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtYWdpY19kYW1hZ2VfcmVkdWN0aW9uX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3J1Ymlja19udWxsX2ZpZWxkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkubWFnaWNSZXNpc3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGh1c2thcl9iZXJzZXJrZXJzX2Jsb29kLHZpcGVyX2NvcnJvc2l2ZV9za2luLHZpc2FnZV9ncmF2ZWtlZXBlcnNfY2xvYWtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBhYmlsaXR5Lm1hZ2ljUmVzaXN0KCkvMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuY2llbnRfYXBwYXJpdGlvbl9pY2Vfdm9ydGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlbGxfcmVzaXN0X3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHVnbmFfZGVjcmVwaWZ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3BlbGxfZGFtYWdlX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2t5d3JhdGhfbWFnZV9hbmNpZW50X3NlYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZXNpc3RfZGVidWZmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbGRlcl90aXRhbl9uYXR1cmFsX29yZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFnaWNfcmVzaXN0YW5jZV9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldE1vdmVtZW50U3BlZWRGbGF0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxjaGVtaXN0X2NoZW1pY2FsX3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdhbGNoZW1pc3RfY2hlbWljYWxfcmFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRpbnlfZ3Jvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAndGlueV9ncm93Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJvbGxfd2FybG9yZF9iZXJzZXJrZXJzX3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAndHJvbGxfd2FybG9yZF9iZXJzZXJrZXJzX3JhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvbmVfZHJ1aWRfdHJ1ZV9mb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlZWRfbG9zcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5Lm1vdmVtZW50U3BlZWRGbGF0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGRyYWdvbl9rbmlnaHRfZWxkZXJfZHJhZ29uX2Zvcm1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkubW92ZW1lbnRTcGVlZEZsYXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhYmFkZG9uX2Zyb3N0bW91cm5lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBib3VudHlfaHVudGVyX3RyYWNrIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtaXJhbmFfbGVhcCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsZWFwX3NwZWVkYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN2ZW5fd2FyY3J5IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dhcmNyeV9tb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsaW5rel93aW5kX3dhbGtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlX3NwZWVkX2JvbnVzX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZHJ1bm5lcl93aW5kcnVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkX2JvbnVzX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJvb2Rtb3RoZXJfc3Bpbl93ZWIsc3BlY3RyZV9zcGVjdHJhbF9kYWdnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdicm9vZG1vdGhlcl9zcGluX3dlYicgfHwgYWJpbGl0eS5uYW1lID09ICdzcGVjdHJlX3NwZWN0cmFsX2RhZ2dlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBheGVfY3VsbGluZ19ibGFkZSxuZWNyb25vbWljb25fYXJjaGVyX2FvZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWVkX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnYXhlX2N1bGxpbmdfYmxhZGUnIHx8IGFiaWxpdHkubmFtZSA9PSAnbmVjcm9ub21pY29uX2FyY2hlcl9hb2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbnl4X2Fzc2Fzc2luX3ZlbmRldHRhIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnbnl4X2Fzc2Fzc2luX3ZlbmRldHRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwaXJpdF9icmVha2VyX2VtcG93ZXJpbmdfaGFzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3Zlc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnc3Bpcml0X2JyZWFrZXJfZW1wb3dlcmluZ19oYXN0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvZ3JlX21hZ2lfYmxvb2RsdXN0LGRlYXRoX3Byb3BoZXRfd2l0Y2hjcmFmdCxrb2JvbGRfdGFza21hc3Rlcl9zcGVlZF9hdXJhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdvZ3JlX21hZ2lfYmxvb2RsdXN0JyB8fCBhYmlsaXR5Lm5hbWUgPT0gJ2RlYXRoX3Byb3BoZXRfd2l0Y2hjcmFmdCcgfHwgYWJpbGl0eS5uYW1lID09ICdrb2JvbGRfdGFza21hc3Rlcl9zcGVlZF9hdXJhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJhem9yX3Vuc3RhYmxlX2N1cnJlbnQscGhhbnRvbV9sYW5jZXJfZG9wcGVsd2Fsa1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3Jhem9yX3Vuc3RhYmxlX2N1cnJlbnQnIHx8IGFiaWxpdHkubmFtZSA9PSAncGhhbnRvbV9sYW5jZXJfZG9wcGVsd2FsaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmVhbnRfbmF0dXJlc19ndWlzZSxsb25lX2RydWlkX3JhYmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbW92ZV9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3RyZWFudF9uYXR1cmVzX2d1aXNlJyB8fCBhYmlsaXR5Lm5hbWUgPT0gJ2xvbmVfZHJ1aWRfcmFiaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2lzcF90ZXRoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICd3aXNwX3RldGhlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBrdW5ra2FfZ2hvc3RzaGlwLHZpc2FnZV9ncmF2ZV9jaGlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2t1bmtrYV9naG9zdHNoaXAnIHx8IGFiaWxpdHkubmFtZSA9PSAndmlzYWdlX2dyYXZlX2NoaWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5tb3ZlbWVudFNwZWVkUGN0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGF4ZV9iYXR0bGVfaHVuZ2VyLGJyaXN0bGViYWNrX3dhcnBhdGgsc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoLGxpbmFfZmllcnlfc291bCxpbnZva2VyX2dob3N0X3dhbGssaW52b2tlcl93ZXgsZWxkZXJfdGl0YW5fYW5jZXN0cmFsX3NwaXJpdFxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5tb3ZlbWVudFNwZWVkUGN0KCkvMTAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3J5c3RhbF9tYWlkZW5fZnJlZXppbmdfZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWRfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2NyeXN0YWxfbWFpZGVuX2ZyZWV6aW5nX2ZpZWxkJyAmJiAhc2VsZi5oYXNTY2VwdGVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWRfc2xvd19zY2VwdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnY3J5c3RhbF9tYWlkZW5fZnJlZXppbmdfZmllbGQnICYmIHNlbGYuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxkZXJfdGl0YW5fZWFydGhfc3BsaXR0ZXIsbWFnbmF0YXVyX3NrZXdlcixhYmFkZG9uX2Zyb3N0bW91cm5lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nsb3dfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuaWdodF9zdGFsa2VyX3ZvaWQsY3J5c3RhbF9tYWlkZW5fY3J5c3RhbF9ub3ZhLGdob3N0X2Zyb3N0X2F0dGFjayxvZ3JlX21hZ2lfZnJvc3RfYXJtb3IscG9sYXJfZnVyYm9sZ191cnNhX3dhcnJpb3JfdGh1bmRlcl9jbGFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lICE9ICdjcnlzdGFsX21haWRlbl9mcmVlemluZ19maWVsZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWNoX2Zyb3N0X2FybW9yLGxpY2hfZnJvc3Rfbm92YSxlbmNoYW50cmVzc19lbmNoYW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvd19tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVhc3RtYXN0ZXJfcHJpbWFsX3JvYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93X21vdmVtZW50X3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvd19yYW5nZXJfZnJvc3RfYXJyb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZnJvc3RfYXJyb3dzX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBza2VsZXRvbl9raW5nX2hlbGxmaXJlX2JsYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxhc3Rfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2xhcmRhcl9zbGl0aGVyZWVuX2NydXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3J1c2hfZXh0cmFfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Rvcm1fc3Bpcml0X292ZXJsb2FkOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ292ZXJsb2FkX21vdmVfc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZHJ1bm5lcl93aW5kcnVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5lbXlfbW92ZXNwZWVkX2JvbnVzX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGhhbnRvbV9hc3Nhc3Npbl9zdGlmbGluZ19kYWdnZXIsdHVza19mcm96ZW5fc2lnaWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlX3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdwaGFudG9tX2Fzc2Fzc2luX3N0aWZsaW5nX2RhZ2dlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lID09ICd0dXNrX2Zyb3plbl9zaWdpbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZva2VyX2ljZV93YWxsLG1lZHVzYV9zdG9uZV9nYXplLHdpc3BfdGV0aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2xvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ21lZHVzYV9zdG9uZV9nYXplJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgLT0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9vZG1vdGhlcl9pbmNhcGFjaXRhdGluZ19iaXRlLGJvdW50eV9odW50ZXJfamluYWRhLHNwZWN0cmVfc3BlY3RyYWxfZGFnZ2VyLHdpbnRlcl93eXZlcm5fYXJjdGljX2J1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdicm9vZG1vdGhlcl9pbmNhcGFjaXRhdGluZ19iaXRlJyB8fCBhYmlsaXR5Lm5hbWUgPT0gJ2JvdW50eV9odW50ZXJfamluYWRhJyB8fCBhYmlsaXR5Lm5hbWUgPT0gJ3dpbnRlcl93eXZlcm5fYXJjdGljX2J1cm4nIHx8IGFiaWxpdHkubmFtZSA9PSAnd2ludGVyX3d5dmVybl9zcGxpbnRlcl9ibGFzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lID09ICdzcGVjdHJlX3NwZWN0cmFsX2RhZ2dlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbW5pa25pZ2h0X2RlZ2VuX2F1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ29tbmlrbmlnaHRfZGVnZW5fYXVyYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aWRlaHVudGVyX2d1c2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3RpZGVodW50ZXJfZ3VzaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwdWduYV9kZWNyZXBpZnksY2hlbl9wZW5pdGVuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3B1Z25hX2RlY3JlcGlmeScgfHwgYWJpbGl0eS5uYW1lID09ICdjaGVuX3Blbml0ZW5jZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmNpZW50X2FwcGFyaXRpb25faWNlX3ZvcnRleCxwaGFudG9tX2xhbmNlcl9zcGlyaXRfbGFuY2Usc2t5d3JhdGhfbWFnZV9jb25jdXNzaXZlX3Nob3QsZmFjZWxlc3Nfdm9pZF90aW1lX3dhbGtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3ZlbWVudF9zcGVlZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdhbmNpZW50X2FwcGFyaXRpb25faWNlX3ZvcnRleCcgfHwgYWJpbGl0eS5uYW1lID09ICdwaGFudG9tX2xhbmNlcl9zcGlyaXRfbGFuY2UnIHx8IGFiaWxpdHkubmFtZSA9PSAnZmFjZWxlc3Nfdm9pZF90aW1lX3dhbGsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFiaWxpdHkubmFtZSA9PSAnc2t5d3JhdGhfbWFnZV9jb25jdXNzaXZlX3Nob3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmF6b3JfdW5zdGFibGVfY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nsb3dfYW1vdW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAncmF6b3JfdW5zdGFibGVfY3VycmVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicmV3bWFzdGVyX2RydW5rZW5faGF6ZSxicmV3bWFzdGVyX3RodW5kZXJfY2xhcCx0cmVhbnRfbGVlY2hfc2VlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3Nsb3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdicmV3bWFzdGVyX2RydW5rZW5faGF6ZScgfHwgYWJpbGl0eS5uYW1lID09ICdicmV3bWFzdGVyX3RodW5kZXJfY2xhcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lID09ICd1cnNhX2VhcnRoc2hvY2snIHx8IGFiaWxpdHkubmFtZSA9PSAndHJlYW50X2xlZWNoX3NlZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2tlbGV0b25fa2luZ19yZWluY2FybmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZXNwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnc2tlbGV0b25fa2luZ19yZWluY2FybmF0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGt1bmtrYV90b3JyZW50LHZpc2FnZV9ncmF2ZV9jaGlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVzcGVlZF9ib251cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2t1bmtrYV90b3JyZW50Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3Zpc2FnZV9ncmF2ZV9jaGlsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdzYXR5cl90cmlja3N0ZXJfcHVyZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSA4MC8xMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5uYW1lID09ICdlbnJhZ2VkX3dpbGRraW5fdG9ybmFkbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlIC09IDE1LzEwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5Lm1vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF4ZV9iYXR0bGVfaHVuZ2VyLGJhdHJpZGVyX3N0aWNreV9uYXBhbG0sc2hyZWRkZXJfY2hha3JhbSxtZWVwb19nZW9zdHJpa2UsbGlmZV9zdGVhbGVyX29wZW5fd291bmRzLFxuICAgICAgICAgICAgICAgICAgICAvLyB2ZW5vbWFuY2VyX3BvaXNvbl9zdGluZyx2aXBlcl92aXBlcl9zdHJpa2UsdmlwZXJfY29ycm9zaXZlX3NraW4sdmlwZXJfcG9pc29uX2F0dGFjayx2ZW5vbWFuY2VyX3Zlbm9tb3VzX2dhbGUsdHJlYW50X2xlZWNoX3NlZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gbGljaF9jaGFpbl9mcm9zdCxzbmlwZXJfc2hyYXBuZWwsY2VudGF1cl9zdGFtcGVkZSxodXNrYXJfbGlmZV9icmVhayxqYWtpcm9fZHVhbF9icmVhdGgsbWVlcG9fZ2Vvc3RyaWtlLHNhbmRraW5nX2VwaWNlbnRlclxuICAgICAgICAgICAgICAgICAgICAvLyBlYXJ0aF9zcGlyaXRfcm9sbGluZ19ib3VsZGVyLGludm9rZXJfZ2hvc3Rfd2FsayxpbnZva2VyX2ljZV93YWxsLGVsZGVyX3RpdGFuX2VhcnRoX3NwbGl0dGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZHlpbmdfZmxlc2hfZ29sZW0sdGVtcGxhcl9hc3Nhc3Npbl9wc2lvbmljX3RyYXAsbmV2ZXJtb3JlX3JlcXVpZW0scXVlZW5vZnBhaW5fc2hhZG93X3N0cmlrZVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS5tb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uKCkvMTAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLmdldFR1cm5SYXRlUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5ID0gc2VsZi5fYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkubGV2ZWwoKSA+IDAgJiYgKGFiaWxpdHkuaXNBY3RpdmUoKSB8fCAoYWJpbGl0eS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpICE9IC0xKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhYmlsaXR5Lm5hbWUgaW4gc2VsZi5hYmlsaXR5RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVkdXNhX3N0b25lX2dhemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbG93JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnbWVkdXNhX3N0b25lX2dhemUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAtPSBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS50dXJuUmF0ZVJlZHVjdGlvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmF0cmlkZXJfc3RpY2t5X25hcGFsbVxuICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSs9YWJpbGl0eS50dXJuUmF0ZVJlZHVjdGlvbigpLzEwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuZ2V0VmlzaW9uUmFuZ2VOaWdodCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbnRlcl93eXZlcm5fYXJjdGljX2J1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICduaWdodF92aXNpb25fYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGx5Y2FuX3NoYXBlc2hpZnQsbHVuYV9sdW5hcl9ibGVzc2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX25pZ2h0X3Zpc2lvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhYmlsaXR5LnZpc2lvbm5pZ2h0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBcbiAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUrPWFiaWxpdHkudmlzaW9ubmlnaHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRWaXNpb25SYW5nZVBjdFJlZHVjdGlvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5pZ2h0X3N0YWxrZXJfZGFya25lc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdibGluZF9wZXJjZW50YWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpLzEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfSk7XG5cbiAgICBzZWxmLnNldEV2YXNpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ3dpbmRydW5uZXJfd2luZHJ1bicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLnNldE1vdmVtZW50U3BlZWQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNQVhfTU9WRVNQRUVEID0gNTIyO1xuICAgICAgICB2YXIgTUlOX01PVkVTUEVFRCA9IDEwMDtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnc3Bpcml0X2JyZWFrZXJfY2hhcmdlX29mX2RhcmtuZXNzJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnbW92ZW1lbnRfc3BlZWQnLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdkYXJrX3NlZXJfc3VyZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNQVhfTU9WRVNQRUVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5uYW1lID09ICdjZW50YXVyX3N0YW1wZWRlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTUFYX01PVkVTUEVFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkubmFtZSA9PSAnbHljYW5fc2hhcGVzaGlmdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1BWF9NT1ZFU1BFRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5Lm5hbWUgPT0gJ2xpb25fdm9vZG9vJyB8fCBhYmlsaXR5Lm5hbWUgPT0gJ3NoYWRvd19zaGFtYW5fdm9vZG9vJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTUlOX01PVkVTUEVFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH0pO1xuXG4gICAgc2VsZi5nZXRCYXNoU291cmNlID0gZnVuY3Rpb24gKGF0dGFja3R5cGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdGllcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYWJpbGl0eSA9IHNlbGYuX2FiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmxldmVsKCkgPiAwICYmIChhYmlsaXR5LmlzQWN0aXZlKCkgfHwgKGFiaWxpdHkuYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKSAhPSAtMSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJpbGl0eS5uYW1lIGluIHNlbGYuYWJpbGl0eURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBzZWxmLl9hYmlsaXRpZXNbaV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNuaXBlcl9oZWFkc2hvdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2NfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQgJiYgYWJpbGl0eS5uYW1lID09ICdzbmlwZXJfaGVhZHNob3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbGFyZGFyX2Jhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCAmJiBhYmlsaXR5Lm5hbWUgPT0gJ3NsYXJkYXJfYmFzaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2JvbnVzX2RhbWFnZScsIGFiaWxpdHkubGV2ZWwoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5iYXNoQm9udXNEYW1hZ2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZhY2VsZXNzX3ZvaWRfdGltZV9sb2NrXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZV0gPT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSA9PSAnZmFjZWxlc3Nfdm9pZF90aW1lX2xvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IGFiaWxpdHkuYmFzaCgpLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5iYXNoQm9udXNEYW1hZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ21hZ2ljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZV0gPT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSA9PSAnc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBhYmlsaXR5LmJhc2goKS8xMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IGFiaWxpdHkuYmFzaEJvbnVzRGFtYWdlKCkvMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAnbWFnaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRPcmJTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXRpZXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBzZWxmLl9hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5sZXZlbCgpID4gMCAmJiAoYWJpbGl0eS5pc0FjdGl2ZSgpIHx8IChhYmlsaXR5LmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgIT0gLTEpKSkge1xuICAgICAgICAgICAgICAgIGlmICghKGFiaWxpdHkubmFtZSBpbiBzZWxmLmFiaWxpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGYuX2FiaWxpdGllc1tpXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gc2VsZi5fYWJpbGl0aWVzW2ldLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnRpbWFnZV9tYW5hX2JyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFuYV9wZXJfaGl0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQgJiYgYWJpbGl0eS5uYW1lID09ICdhbnRpbWFnZV9tYW5hX2JyZWFrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1thYmlsaXR5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZS5uYW1lLCBhYmlsaXR5LmxldmVsKCkpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBzZWxmLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdkYW1hZ2VfcGVyX2J1cm4nLCBhYmlsaXR5LmxldmVsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBhYmlsaXR5LmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGlua3pfc2VhcmluZ19hcnJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkYW1hZ2VfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1thYmlsaXR5Lm5hbWVdID09IHVuZGVmaW5lZCAmJiBhYmlsaXR5Lm5hbWUgPT0gJ2NsaW5rel9zZWFyaW5nX2Fycm93cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGUubmFtZSwgYWJpbGl0eS5sZXZlbCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2lsZW5jZXJfZ2xhaXZlc19vZl93aXNkb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnRlbGxlY3RfZGFtYWdlX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2FiaWxpdHkubmFtZV0gPT0gdW5kZWZpbmVkICYmIGFiaWxpdHkubmFtZSA9PSAnc2lsZW5jZXJfZ2xhaXZlc19vZl93aXNkb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2FiaWxpdHkubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgYXR0cmlidXRlLm5hbWUsIGFiaWxpdHkubGV2ZWwoKSkvMTAwICogc2VsZi5oZXJvLnRvdGFsSW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAncHVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogYWJpbGl0eS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWJpbGl0eS5ib251c0RhbWFnZU9yYiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb2JzaWRpYW5fZGVzdHJveWVyX2FyY2FuZV9vcmJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9PSB1bmRlZmluZWQgJiYgYWJpbGl0eS5uYW1lID09ICdvYnNpZGlhbl9kZXN0cm95ZXJfYXJjYW5lX29yYicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbYWJpbGl0eS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogYWJpbGl0eS5ib251c0RhbWFnZU9yYigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3B1cmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IGFiaWxpdHkuZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNvdXJjZXM7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLnRvZ2dsZUFiaWxpdHkgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9QQVNTSVZFJykgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5pc0FjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmlzQWN0aXZlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5uYW1lID09ICdseWNhbl9zaGFwZXNoaWZ0Jykge1xuICAgICAgICAgICAgICAgIHNlbGYuaXNTaGFwZVNoaWZ0QWN0aXZlKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNBY3RpdmUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICBzZWxmLnRvZ2dsZUFiaWxpdHlEZXRhaWwgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmlzRGV0YWlsKCkpIHtcbiAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uaXNEZXRhaWwoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5pc0RldGFpbCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKTtcbiAgICBcbiAgICBzZWxmLmdldEFiaWxpdHkgPSBmdW5jdGlvbiAoYWJpbGl0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5uYW1lID09IGFiaWxpdHlOYW1lO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm15LnByb3RvdHlwZS5BYmlsaXR5TW9kZWwucHJvdG90eXBlLmxldmVsVXBBYmlsaXR5ID0gZnVuY3Rpb24gKGluZGV4LCBkYXRhLCBldmVudCwgaGVybykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpIDwgaGVyby5nZXRBYmlsaXR5TGV2ZWxNYXgoZGF0YSkgJiYgaGVyby5hdmFpbGFibGVTa2lsbFBvaW50cygpID4gMCApIHtcbiAgICAgICAgc3dpdGNoKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0uYWJpbGl0eXR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0RPVEFfQUJJTElUWV9UWVBFX1VMVElNQVRFJzpcbiAgICAgICAgICAgICAgICBpZiAoaGVyby5oZXJvSWQoKSA9PSAnaW52b2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSA9PSAwKSAmJiAocGFyc2VJbnQoaGVyby5zZWxlY3RlZEhlcm9MZXZlbCgpKSA+PSAyKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSA9PSAxKSAmJiAocGFyc2VJbnQoaGVyby5zZWxlY3RlZEhlcm9MZXZlbCgpKSA+PSA3KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSA9PSAyKSAmJiAocGFyc2VJbnQoaGVyby5zZWxlY3RlZEhlcm9MZXZlbCgpKSA+PSAxMSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPT0gMykgJiYgKHBhcnNlSW50KGhlcm8uc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPj0gMTcpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkrMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJvLnNraWxsUG9pbnRIaXN0b3J5LnB1c2goaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVyby5oZXJvSWQoKSA9PSAnbWVlcG8nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgKiA3ICsgMyA8PSBwYXJzZUludChoZXJvLnNlbGVjdGVkSGVyb0xldmVsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSsxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlcm8uc2tpbGxQb2ludEhpc3RvcnkucHVzaChpbmRleCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkrMSkgKiA1ICsgMSA8PSBwYXJzZUludChoZXJvLnNlbGVjdGVkSGVyb0xldmVsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSsxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlcm8uc2tpbGxQb2ludEhpc3RvcnkucHVzaChpbmRleCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpICogMiArIDEgPD0gcGFyc2VJbnQoaGVyby5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSsxKTtcbiAgICAgICAgICAgICAgICAgICAgaGVyby5za2lsbFBvaW50SGlzdG9yeS5wdXNoKGluZGV4KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5uYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdiZWFzdG1hc3Rlcl9jYWxsX29mX3RoZV93aWxkJzpcbiAgICAgICAgICAgIGNhc2UgJ2NoZW5fdGVzdF9vZl9mYWl0aCc6XG4gICAgICAgICAgICBjYXNlICdtb3JwaGxpbmdfbW9ycGhfYWdpJzpcbiAgICAgICAgICAgIGNhc2UgJ3NoYWRvd19kZW1vbl9zaGFkb3dfcG9pc29uJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb3JwaGxpbmdfbW9ycGhfc3RyJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdrZWVwZXJfb2ZfdGhlX2xpZ2h0X3NwaXJpdF9mb3JtJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMSc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTInOlxuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUzJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2VtYmVyX3NwaXJpdF9maXJlX3JlbW5hbnQnOlxuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xvbmVfZHJ1aWRfdHJ1ZV9mb3JtJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59O1xubXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbC5wcm90b3R5cGUubGV2ZWxEb3duQWJpbGl0eSA9IGZ1bmN0aW9uIChpbmRleCwgZGF0YSwgZXZlbnQsIGhlcm8pIHtcbiAgICB2YXIgaSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoaW5kZXgpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpID4gMCkge1xuICAgICAgICBzZWxmLmFiaWxpdGllcygpW2ldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSAtIDEpO1xuICAgICAgICBoZXJvLnNraWxsUG9pbnRIaXN0b3J5LnNwbGljZShoZXJvLnNraWxsUG9pbnRIaXN0b3J5KCkubGFzdEluZGV4T2YoaSksIDEpO1xuICAgICAgICBzd2l0Y2ggKHNlbGYuYWJpbGl0aWVzKClbaV0ubmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnYmVhc3RtYXN0ZXJfY2FsbF9vZl90aGVfd2lsZCc6XG4gICAgICAgICAgICBjYXNlICdjaGVuX3Rlc3Rfb2ZfZmFpdGgnOlxuICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX2FnaSc6XG4gICAgICAgICAgICBjYXNlICdzaGFkb3dfZGVtb25fc2hhZG93X3BvaXNvbic6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX3N0cic6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAna2VlcGVyX29mX3RoZV9saWdodF9zcGlyaXRfZm9ybSc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2kgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2ldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTEnOlxuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpICsgMl0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUyJzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2kgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2ldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMyc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2kgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2ldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlbWJlcl9zcGlyaXRfZmlyZV9yZW1uYW50JzpcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2kgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2ldLmxldmVsKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsb25lX2RydWlkX3RydWVfZm9ybSc6XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufTtcbm15LnByb3RvdHlwZS5BYmlsaXR5TW9kZWwucHJvdG90eXBlLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lLCBsZXZlbCkge1xuICAgIGZvciAodmFyIGk9MDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNbaV0ubmFtZSA9PSBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWwgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGF0dHJpYnV0ZXNbaV0udmFsdWVbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGV2ZWwgPiBhdHRyaWJ1dGVzW2ldLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGF0dHJpYnV0ZXNbaV0udmFsdWVbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXR0cmlidXRlc1tpXS52YWx1ZVtsZXZlbC0xXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5teS5wcm90b3R5cGUuQWJpbGl0eU1vZGVsLnByb3RvdHlwZS5nZXRBYmlsaXR5QXR0cmlidXRlVG9vbHRpcCA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgZm9yICh2YXIgaT0wOyBpPGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNbaV0ubmFtZSA9PSBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlc1tpXS5oYXNPd25Qcm9wZXJ0eSgndG9vbHRpcCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBhdHRyaWJ1dGVzW2ldLnRvb2x0aXAucmVwbGFjZSgvXFxcXG4vZywgJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbn0iLCIndXNlIHN0cmljdCc7XG4gICAgXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuYWJpbGl0eURhdGEgPSB7XG4gICAgJ2FsY2hlbWlzdF9hY2lkX3NwcmF5JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2FybW9yX3JlZHVjdGlvbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhcm1vclJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2FsY2hlbWlzdF91bnN0YWJsZV9jb25jb2N0aW9uJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0JyZXcgVGltZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWF4X2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYXhfc3R1bicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIFN0dW4nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS81O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYW5jaWVudF9hcHBhcml0aW9uX2NvbGRfZmVldCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzdHVuX2R1cmF0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgU3R1bicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2FuY2llbnRfYXBwYXJpdGlvbl9pY2VfYmxhc3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RvdF9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykrdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYW50aW1hZ2VfbWFuYV92b2lkJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IE1pc3NpbmcgTWFuYScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV92b2lkX2RhbWFnZV9wZXJfbWFuYScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYXhlX2JhdHRsZV9odW5nZXInOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQmF0dGxlIEh1bmdlcmVkIEVuZW1pZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NwZWVkX2JvbnVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTW92ZW1lbnQgU3BlZWQgQm9udXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIG5vTGV2ZWw6IHRydWUsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ01vdmVtZW50IFNwZWVkIEJvbnVzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBub0xldmVsOiB0cnVlLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdiYW5lX25pZ2h0bWFyZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2JhbmVfZmllbmRzX2dyaXAnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggTWFuYScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmllbmRfZ3JpcF9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pbnZlbnRvcnkuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKmFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnZmllbmRfZ3JpcF9kYW1hZ2Vfc2NlcHRlcicsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKmE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmllbmRfZ3JpcF9tYW5hX2RyYWluJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgTWFuYSBEcmFpbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgbm9MZXZlbDogdHJ1ZSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pbnZlbnRvcnkuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKnZbMV0qYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdmaWVuZF9ncmlwX21hbmFfZHJhaW5fc2NlcHRlcicsYWJpbGl0eS5sZXZlbCgpKS8xMDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdlswXSp2WzFdKmEvMTAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2JhdHJpZGVyX3N0aWNreV9uYXBhbG0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBCb251cyBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW92ZW1lbnRfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgTW92ZW1lbnQgU3BlZWQgU2xvdycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3R1cm5fcmF0ZV9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBUdXJuIFJhdGUgU2xvdycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ3R1cm5SYXRlUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnYmF0cmlkZXJfZmlyZWZseSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2Jsb29kc2Vla2VyX3J1cHR1cmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgRGlzdGFuY2UgVHJhdmVsZWQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X2RhbWFnZV9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSArIHYqYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdicmlzdGxlYmFja192aXNjb3VzX25hc2FsX2dvbyc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGFja3MnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2FybW9yX3Blcl9zdGFjaycsXG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IEFybW9yIFJlZHVjdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2FybW9yUmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW92ZV9zbG93X3Blcl9zdGFjaycsXG4gICAgICAgICAgICBsYWJlbDogJyVTTE9XOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0oYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdiYXNlX21vdmVfc2xvdycsMCkrdiphKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdicmlzdGxlYmFja19xdWlsbF9zcHJheSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGFja3MnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3F1aWxsX3N0YWNrX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ3F1aWxsX2Jhc2VfZGFtYWdlJyxhYmlsaXR5LmxldmVsKCkpK3YqYSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfY2FwID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdtYXhfZGFtYWdlJywwKTtcbiAgICAgICAgICAgICAgICBpZiAodG90YWwgPiBkYW1hZ2VfY2FwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsID0gZGFtYWdlX2NhcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnYnJpc3RsZWJhY2tfYnJpc3RsZWJhY2snOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlIEZyb20nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdyYWRpbycsXG4gICAgICAgICAgICBjb250cm9sVmFsdWVUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGNvbnRyb2xPcHRpb25zOiBbXG4gICAgICAgICAgICAgICAge3RleHQ6ICdCYWNrJywgdmFsdWU6ICdiYWNrJ30sXG4gICAgICAgICAgICAgICAge3RleHQ6ICdTaWRlJywgdmFsdWU6ICdzaWRlJ31cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JhY2tfZGFtYWdlX3JlZHVjdGlvbicsXG4gICAgICAgICAgICBsYWJlbDogJyVEQU1BR0UgUkVEVUNUSU9OOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBhYmlsaXR5TW9kZWwuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiLm5hbWUgPT0gJ2JyaXN0bGViYWNrX2JyaXN0bGViYWNrJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAnYmFjaycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdiYWNrX2RhbWFnZV9yZWR1Y3Rpb24nLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzaWRlX2RhbWFnZV9yZWR1Y3Rpb24nLCBhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLXRvdGFsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnZGFtYWdlUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnYnJpc3RsZWJhY2tfd2FycGF0aCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGFja3MnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc3RhY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdCT05VUyBEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdiYXNlX2RhbWFnZScsYWJpbGl0eS5sZXZlbCgpKSsodi0xKSphO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVfc3BlZWRfcGVyX3N0YWNrJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkVNRU5UOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYmFzZV9tb3ZlX3NwZWVkJyxhYmlsaXR5LmxldmVsKCkpKyh2LTEpKmE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2NlbnRhdXJfcmV0dXJuJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0cmVuZ3RoJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzdHJlbmd0aF9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ3JldHVybl9kYW1hZ2UnLGFiaWxpdHkubGV2ZWwoKSkgKyB2KmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnY2VudGF1cl9zdGFtcGVkZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdHJlbmd0aCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc3RyZW5ndGhfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNb3ZlbWVudCBTcGVlZCBTbG93JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdjbGlua3pfZGVhdGhfcGFjdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDb25zdW1lZCBVbml0IEhQJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfZ2Fpbl9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdCQVNFIERBTUFHRSBHQUlOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdiYXNlRGFtYWdlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbHRoX2dhaW5fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnSEVBTFRIIEdBSU46JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzEwMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzSGVhbHRoJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnY3J5c3RhbF9tYWlkZW5fZnJvc3RiaXRlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZGFya19zZWVyX2lvbl9zaGVsbCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2RhenpsZV9zaGFkb3dfd2F2ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdUYXJnZXRzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZGF6emxlX3dlYXZlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhcm1vcl9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQVJNT1InLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhcm1vcidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2FybW9yX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdBUk1PUiBSRURVQ1RJT046JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2FybW9yUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZGVhdGhfcHJvcGhldF9leG9yY2lzbSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2UgRGVhbHQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWxfcGVyY2VudCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIEFybW9yJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZGlzcnVwdG9yX3N0YXRpY19zdG9ybSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZXZhbHVlID0gMC4yNSAqICgxMzAgKyA0MCAqIGFiaWxpdHkubGV2ZWwoKSkgKiAoMS8yMCksXG4gICAgICAgICAgICAgICAgbXVsdCA9ICh2KjQpKigodio0KSsxKS8yO1xuICAgICAgICAgICAgICAgIHJldHVybiBkYW1hZ2V2YWx1ZSAqIG11bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkb29tX2JyaW5nZXJfc2NvcmNoZWRfZWFydGgnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19tb3ZlbWVudF9zcGVlZF9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdIUCBSRUdFTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnaGVhbHRocmVnZW4nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkb29tX2JyaW5nZXJfZG9vbSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuaW52ZW50b3J5Lmhhc1NjZXB0ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdiphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2RhbWFnZV9zY2VwdGVyJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkcmFnb25fa25pZ2h0X2VsZGVyX2RyYWdvbl9mb3JtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hdHRhY2tfcmFuZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tyYW5nZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZEZsYXQnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdkcm93X3Jhbmdlcl90cnVlc2hvdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEcm93XFwncyBBZ2lsaXR5JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2J1ZmYnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0cnVlc2hvdF9yYW5nZWRfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFIEJPTlVTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdidWZmJyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZVByZWNpc2lvbkF1cmEnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlYXJ0aF9zcGlyaXRfcm9sbGluZ19ib3VsZGVyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1VzaW5nIFN0b25lJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnY2hlY2tib3gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlX3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2VhcnRoc2hha2VyX2VuY2hhbnRfdG90ZW0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQWN0aXZhdGVkJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnY2hlY2tib3gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0b3RlbV9kYW1hZ2VfcGVyY2VudGFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2VEYW1hZ2VNdWx0aXBsaWVyJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZWFydGhzaGFrZXJfZWNob19zbGFtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW1pZXMgaW4gUmFuZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2VjaG9fc2xhbV9lY2hvX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZWxkZXJfdGl0YW5fYW5jZXN0cmFsX3NwaXJpdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdIRVJPRVMgUEFTU0VEIFRIUk9VR0gnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDUkVFUFMgUEFTU0VEIFRIUk9VR0gnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9jcmVlcHMnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2RhbWFnZV9oZXJvZXMnLGFiaWxpdHkubGV2ZWwoKSkgKyB2WzFdKmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVfcGN0X2NyZWVwcycsXG4gICAgICAgICAgICBsYWJlbDogJyVCT05VUyBTUEVFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKmFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnbW92ZV9wY3RfaGVyb2VzJyxhYmlsaXR5LmxldmVsKCkpICsgdlsxXSphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2VsZGVyX3RpdGFuX2VhcnRoX3NwbGl0dGVyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IE1heCBIZWFsdGgnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93X3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZW5jaGFudHJlc3NfbmF0dXJlc19hdHRlbmRhbnRzJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsJyxcbiAgICAgICAgICAgIGxhYmVsOiAnSEVBTDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ3dpc3BfY291bnQnLGFiaWxpdHkubGV2ZWwoKSkqdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZW5pZ21hX21hbGVmaWNlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hpdHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzdHVuX2R1cmF0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlbmlnbWFfbWlkbmlnaHRfcHVsc2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggSGVhbHRoJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyY2VudCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzBdKnZbMV0qYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdlbmlnbWFfYmxhY2tfaG9sZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmFyX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbmVhcl9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ZhY2VsZXNzX3ZvaWRfdGltZV9sb2NrJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0luIENocm9ub3NwaGVyZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2NoZWNrYm94J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkVTUEVFRCBBUyBEQU1BR0UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEqMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2hCb251c0RhbWFnZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2R1cmF0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnY2hhbmNlX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2gnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdneXJvY29wdGVyX3JvY2tldF9iYXJyYWdlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1JvY2tldHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JvY2tldHNfcGVyX3NlY29uZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuLyogICAgICAgICdneXJvY29wdGVyX2hvbWluZ19taXNzaWxlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Rpc3RhbmNlIFRyYXZlbGVkJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2d5cm9jb3B0ZXJfZmxha19jYW5ub24nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQXR0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLCovXG4gICAgJ2h1c2thcl9idXJuaW5nX3NwZWFyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbHRoX2Nvc3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdodXNrYXJfYmVyc2Vya2Vyc19ibG9vZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICclSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hwX3RocmVzaG9sZF9tYXgnLFxuICAgICAgICAgICAgbGFiZWw6ICdIZWFsdGggYXQgZ2l2ZW4gJUhQOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5oZWFsdGgoKSp2LzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hwX3RocmVzaG9sZF9tYXgnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYXhpbXVtX3Jlc2lzdGFuY2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdNQUdJQyBSRVNJU1RBTkNFIEJPTlVTOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBNYXRoLm1pbih2LCAxMDApO1xuICAgICAgICAgICAgICAgIHYgPSBNYXRoLm1heCh2LCAxMCk7XG4gICAgICAgICAgICAgICAgdmFyIGhwX3RocmVzaG9sZF9tYXggPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2hwX3RocmVzaG9sZF9tYXgnLDApO1xuICAgICAgICAgICAgICAgIHZhciBkID0gMTAwIC0gaHBfdGhyZXNob2xkX21heDtcbiAgICAgICAgICAgICAgICB2YXIgYyA9ICh2IC0gaHBfdGhyZXNob2xkX21heCkgLyBkO1xuICAgICAgICAgICAgICAgIGMgPSAxIC0gYztcbiAgICAgICAgICAgICAgICByZXR1cm4gYyphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbWFnaWNSZXNpc3QnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYXhpbXVtX2F0dGFja19zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ0FUVEFDSyBTUEVFRCBCT05VUzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gTWF0aC5taW4odiwgMTAwKTtcbiAgICAgICAgICAgICAgICB2ID0gTWF0aC5tYXgodiwgMTApO1xuICAgICAgICAgICAgICAgIHZhciBocF90aHJlc2hvbGRfbWF4ID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdocF90aHJlc2hvbGRfbWF4JywwKTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IDEwMCAtIGhwX3RocmVzaG9sZF9tYXg7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSAodiAtIGhwX3RocmVzaG9sZF9tYXgpIC8gZDtcbiAgICAgICAgICAgICAgICBjID0gMSAtIGM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnaHVza2FyX2xpZmVfYnJlYWsnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgQ3VycmVudCBIUCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbHRoX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSHVza2FyIEN1cnJlbnQgSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9jb3N0X3BlcmNlbnQnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0UgVEFLRU46JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbW92ZXNwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfcXVhcyc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdJbnN0YW5jZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX3N0cmVuZ3RoJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNTdHJlbmd0aCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9yZWdlbl9wZXJfaW5zdGFuY2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdIUCBSRUdFTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdoZWFsdGhyZWdlbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfd2V4JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0luc3RhbmNlcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfYWdpbGl0eScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzQWdpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVfc3BlZWRfcGVyX2luc3RhbmNlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkUgU1BFRUQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2F0dGFja19zcGVlZF9wZXJfaW5zdGFuY2UnLFxuICAgICAgICAgICAgbGFiZWw6ICclQVRUQUNLIFNQRUVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnaW52b2tlcl9leG9ydCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdJbnN0YW5jZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2ludGVsbGlnZW5jZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzSW50J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlX3Blcl9pbnN0YW5jZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfZ2hvc3Rfd2Fsayc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdRdWFzIExldmVsJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdlbmVteV9zbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2VuZW15X3Nsb3cnLHYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdXZXggTGV2ZWwnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYWJpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NlbGZfc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2FiaWxpdHknLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzZWxmX3Nsb3cnLHYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfYWxhY3JpdHknOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnV2V4IExldmVsJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hdHRhY2tfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYm9udXNfYXR0YWNrX3NwZWVkJyx2KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0V4b3J0IExldmVsJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2JvbnVzX2RhbWFnZScsdik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ludm9rZXJfaWNlX3dhbGwnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnUXVhcyBMZXZlbCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzbG93Jyx2KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRXhvcnQgTGV2ZWwnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYWJpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdhYmlsaXR5J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2FiaWxpdHknLFxuICAgICAgICAgICAgY29udHJvbHM6IFsxLDJdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodlswXSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdkYW1hZ2VfcGVyX3NlY29uZCcsdlswXSkqdlsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2pha2lyb19kdWFsX2JyZWF0aCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqMiArIFxuICAgICAgICAgICAgICAgIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYnVybl9kYW1hZ2UnLGFiaWxpdHkubGV2ZWwoKSkqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfbW92ZW1lbnRfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfYXR0YWNrX3NwZWVkX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJyVBVFRBQ0sgU0xPVzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdqYWtpcm9fbGlxdWlkX2ZpcmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19hdHRhY2tfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWRyZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdqYWtpcm9fbWFjcm9weXJlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2p1Z2dlcm5hdXRfYmxhZGVfZnVyeSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2p1Z2dlcm5hdXRfaGVhbGluZ193YXJkJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTWF4IEhlYWx0aCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnaGVhbGluZ193YXJkX2hlYWxfYW1vdW50JyxcbiAgICAgICAgICAgIGxhYmVsOiAnSEVBTCBPVkVSIFRJTUU6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSp2WzFdKmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnanVnZ2VybmF1dF9vbW5pX3NsYXNoJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0p1bXBzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTUlOIERBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ29tbmlfc2xhc2hfZGFtYWdlJywxKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ01BWCBEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdvbW5pX3NsYXNoX2RhbWFnZScsMikqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2tlZXBlcl9vZl90aGVfbGlnaHRfaWxsdW1pbmF0ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAna2VlcGVyX29mX3RoZV9saWdodF9tYW5hX2xlYWsnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGlzdGFuY2UgTW92ZWQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggTWFuYScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9sZWFrX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ01BTkEgTEVBS0VEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0vMTAwKnZbMV0qYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdsZWdpb25fY29tbWFuZGVyX2R1ZWwnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVlbCBXaW5zJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyZXdhcmRfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnbGVzaHJhY19wdWxzZV9ub3ZhJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfY29zdF9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTUFOQSBDT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xpY2hfY2hhaW5fZnJvc3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQm91bmNlIEhpdHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19tb3ZlbWVudF9zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ0VuZW15IE1vdmVtZW50IFNwZWVkIFNsb3cnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc2xvd19hdHRhY2tfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZHJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xpZmVfc3RlYWxlcl9mZWFzdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBDdXJyZW50IEhQJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdocF9sZWVjaF9wZXJjZW50JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEvMTAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdsaWZlX3N0ZWFsZXJfb3Blbl93b3VuZHMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWxfcGVyY2VudCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2xpZmVzdGVhbCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfc3RlcHMnLFxuICAgICAgICAgICAgbGFiZWw6ICclU0xPVzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBub0xldmVsOiB0cnVlLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzbG93X3N0ZXBzJyx2KzEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xpbmFfZmllcnlfc291bCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmllcnlfc291bF9tb3ZlX3NwZWVkX2JvbnVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgTW92ZW1lbnQgU3BlZWQgU2xvdycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2ZpZXJ5X3NvdWxfYXR0YWNrX3NwZWVkX2JvbnVzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2xpb25fbWFuYV9kcmFpbic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTUFOQSBEUkFJTkVEOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2x1bmFfbW9vbl9nbGFpdmUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcmVkdWN0aW9uX3BlcmNlbnQnLFxuICAgICAgICAgICAgbGFiZWw6ICdCT1VOQ0UgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh2Kk1hdGgucG93KGEvMTAwLGkpKS50b0ZpeGVkKDIpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJzxicj4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2x1bmFfZWNsaXBzZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdCZWFtIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdiZWFtcycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbHVjZW50QmVhbUFiaWxpdHkgPSBhYmlsaXR5TW9kZWwuYWJpbGl0aWVzKCkuZmluZChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiLm5hbWUgPT0gJ2x1bmFfbHVjZW50X2JlYW0nO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChsdWNlbnRCZWFtQWJpbGl0eS5sZXZlbCgpID09IDApIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2UgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUobHVjZW50QmVhbUFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdipkYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdtZWR1c2FfbXlzdGljX3NuYWtlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0p1bXAgQ291bnQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NuYWtlX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RhbWFnZSBQZXIgSnVtcDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNuYWtlX2p1bXBzID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzbmFrZV9qdW1wcycsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICB2YXIgc25ha2Vfc2NhbGUgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ3NuYWtlX3NjYWxlJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbmFrZV9qdW1wczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZS5wdXNoKGEgKyBhICogaSAqIHNuYWtlX3NjYWxlLzEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbmFrZV9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2UgUGVyIEp1bXA6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlsxXS5qb2luKCcgLyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3NuYWtlX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2WzFdLnNsaWNlKDAsIHZbMF0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8gfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbmFrZV9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdNYXggRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMV0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgbyB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ21lZHVzYV9tYW5hX3NoaWVsZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9wZXJfbWFuYScsXG4gICAgICAgICAgICBsYWJlbDogJ01BTkEgVVNFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodi9hKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYWJzb3JwdGlvbl90b29sdGlwJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJURBTUFHRSBSRURVQ1RJT046JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdkYW1hZ2VSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdtZWVwb19wb29mJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ01lZXBvIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnbWVlcG9fZ2Vvc3RyaWtlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnJVNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgbm9MZXZlbDogdHJ1ZSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnc2xvdycsYWJpbGl0eS5sZXZlbCgpKSp2O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ21pcmFuYV9hcnJvdyc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdBcnJvdyBUcmF2ZWwgRGlzdGFuY2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2Fycm93X21heF9zdHVuJyxcbiAgICAgICAgICAgIGxhYmVsOiAnU1RVTiBEVVJBVElPTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBhcnJvd19taW5fc3R1biA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYXJyb3dfbWluX3N0dW4nLDApO1xuICAgICAgICAgICAgICAgIHZhciBhcnJvd19tYXhfc3R1bnJhbmdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdhcnJvd19tYXhfc3R1bnJhbmdlJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLm1pbih2LCBhcnJvd19tYXhfc3R1bnJhbmdlKSAvIGFycm93X21heF9zdHVucmFuZ2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGFycm93X21pbl9zdHVuLCBNYXRoLmZsb29yKGEgKiBzY2FsZSAvIDAuMSkgKiAwLjEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYXJyb3dfYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVE9UQUwgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFiaWxpdHkgPSBhYmlsaXR5O1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2UgPSBhYmlsaXR5LmRhbWFnZSgpW2FiaWxpdHkubGV2ZWwoKS0xXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJyb3dfbWF4X3N0dW5yYW5nZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYXJyb3dfbWF4X3N0dW5yYW5nZScsMCk7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gTWF0aC5taW4odiwgYXJyb3dfbWF4X3N0dW5yYW5nZSkgLyBhcnJvd19tYXhfc3R1bnJhbmdlO1xuICAgICAgICAgICAgICAgIHZhciBib251c19kYW1hZ2UgPSBNYXRoLmZsb29yKGEgKiBzY2FsZSAvIDIuOCkgKiAyLjg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhbWFnZSArICcgKyAnICsgYm9udXNfZGFtYWdlICsgJyA9ICcgKyAoZGFtYWdlICsgYm9udXNfZGFtYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ21vcnBobGluZ19tb3JwaF9hZ2knOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU2hpZnRzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdwb2ludHNfcGVyX3RpY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdBR0kgU0hJRlQgR0FJTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0FnaWxpdHknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdwb2ludHNfcGVyX3RpY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdTVFIgU0hJRlQgTE9TUzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNTdHJlbmd0aCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dHJpYnV0ZXMnLFxuICAgICAgICAgICAgbGFiZWw6ICdTSElGVCBUSU1FOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzQWdpbGl0eTInXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3JwaF9jb29sZG93bicsXG4gICAgICAgICAgICBsYWJlbDogJ1NISUZUIFRJTUU6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9jb3N0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnU0hJRlQgTUFOQSBDT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYSphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ21vcnBoX2Nvb2xkb3duJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnbW9ycGhsaW5nX21vcnBoX3N0cic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTaGlmdHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3BvaW50c19wZXJfdGljaycsXG4gICAgICAgICAgICBsYWJlbDogJ1NUUiBTSElGVCBHQUlOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzU3RyZW5ndGgnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdwb2ludHNfcGVyX3RpY2snLFxuICAgICAgICAgICAgbGFiZWw6ICdBR0kgU0hJRlQgTE9TUzonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNBZ2lsaXR5J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfYXR0cmlidXRlcycsXG4gICAgICAgICAgICBsYWJlbDogJ1NISUZUIFRJTUU6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNTdHJlbmd0aDInXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3JwaF9jb29sZG93bicsXG4gICAgICAgICAgICBsYWJlbDogJ1NISUZUIFRJTUU6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9jb3N0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnU0hJRlQgTUFOQSBDT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYSphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ21vcnBoX2Nvb2xkb3duJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnZnVyaW9uX3dyYXRoX29mX25hdHVyZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICduZWNyb2x5dGVfaGVhcnRzdG9wcGVyX2F1cmEnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNYXggSGVhbHRoJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhdXJhX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0hFQUxUSCBMT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0qdlsxXSphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ25lY3JvbHl0ZV9zYWRpc3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnVW5pdCBLaWxscycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hlcm8gS2lsbHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWx0aF9yZWdlbicsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVyb19tdWx0aXBsaWVyID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdoZXJvX211bHRpcGxpZXInLDApXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2WzBdK3ZbMV0qaGVyb19tdWx0aXBsaWVyKSphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnaGVhbHRocmVnZW4nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYW5hX3JlZ2VuJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBoZXJvX211bHRpcGxpZXIgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2hlcm9fbXVsdGlwbGllcicsMClcbiAgICAgICAgICAgICAgICByZXR1cm4gKHZbMF0rdlsxXSpoZXJvX211bHRpcGxpZXIpKmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtYW5hcmVnZW4nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICduaWdodF9zdGFsa2VyX2NyaXBwbGluZ19mZWFyJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0lzIE5pZ2h0JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnY2hlY2tib3gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtaXNzX3JhdGVfbmlnaHQnLFxuICAgICAgICAgICAgbGFiZWw6ICclQ0hBTkNFIFRPIE1JU1M6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdtaXNzX3JhdGVfbmlnaHQnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdtaXNzX3JhdGVfZGF5JyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21pc3NDaGFuY2UnXG4gICAgICAgIH1cbiAgICBdLCAgICBcbiAgICAnbmlnaHRfc3RhbGtlcl9odW50ZXJfaW5fdGhlX25pZ2h0JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0lzIE5pZ2h0JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnY2hlY2tib3gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hdHRhY2tfc3BlZWRfbmlnaHQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkX3BjdF9uaWdodCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3QnXG4gICAgICAgIH1cbiAgICBdLCAgICBcbiAgICAnb2JzaWRpYW5fZGVzdHJveWVyX2FyY2FuZV9vcmInOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ3VycmVudCBNYW5hJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYW5hX3Bvb2xfZGFtYWdlX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzEwMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlT3JiJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnb2dyZV9tYWdpX2lnbml0ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYnVybl9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfbW92ZW1lbnRfc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3B1ZGdlX3JvdCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRTonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JvdF9zbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3B1ZGdlX2ZsZXNoX2hlYXAnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdmbGVzaF9oZWFwX3N0cmVuZ3RoX2J1ZmZfYW1vdW50JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c1N0cmVuZ3RoJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZmxlc2hfaGVhcF9tYWdpY19yZXNpc3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtYWdpY1Jlc2lzdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3B1ZGdlX2Rpc21lbWJlcic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGlzbWVtYmVyX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAncHVnbmFfbmV0aGVyX3dhcmQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgTWFuYSBTcGVudCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9tdWx0aXBsaWVyJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21hbmFfcmVnZW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtYW5hcmVnZW5yZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdwdWduYV9saWZlX2RyYWluJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsdGhfZHJhaW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdIRUFMVEggRFJBSU5FRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdxdWVlbm9mcGFpbl9zaGFkb3dfc3RyaWtlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlbWVudF9zbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3N0cmlrZV9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb25fZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdkdXJhdGlvbl9kYW1hZ2UnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgdmFyIHRpY2tzID0gTWF0aC5mbG9vcih2LzMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhICsgZHVyYXRpb25fZGFtYWdlICogdGlja3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdyYXpvcl9wbGFzbWFfZmllbGQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGlzdGFuY2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JhZGl1cycsXG4gICAgICAgICAgICBsYWJlbDogJ01JTiBESVNUQU5DRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAyMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyYWRpdXMnLFxuICAgICAgICAgICAgbGFiZWw6ICdNQVggRElTVEFOQ0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjAwICsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JhZGl1cycsXG4gICAgICAgICAgICBsYWJlbDogJ0luc3RhbmNlIERhbWFnZScsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heF9yYWRpdXMgPSBhICsgMjAwO1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IChNYXRoLm1pbihNYXRoLm1heCh2LCAyMDApLCBtYXhfcmFkaXVzKSAtIDIwMCkgLyAobWF4X3JhZGl1cyAtIDIwMCk7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZV9taW4gPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2RhbWFnZV9taW4nLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZV9tYXggPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2RhbWFnZV9tYXgnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhbWFnZV9taW4gKyAoZGFtYWdlX21heCAtIGRhbWFnZV9taW4pICogc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdyYXpvcl9zdGF0aWNfbGluayc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZHJhaW5fbGVuZ3RoJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlIERyYWluZWQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGlja19kdXJhdGlvbiA9IE1hdGguZmxvb3IodiAqIDQpICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgdGlja3MgPSBNYXRoLm1pbihhICogNCArIDEsIHRpY2tfZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHZhciBkcmFpbl9yYXRlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdkcmFpbl9yYXRlJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aWNrcyAqIGRyYWluX3JhdGUvNDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZHJhaW5fbGVuZ3RoJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgRGFtYWdlIExvc3Q6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2hpZGRlbicsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciB0aWNrX2R1cmF0aW9uID0gTWF0aC5mbG9vcih2ICogNCkgKyAxO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGgubWluKGEgKiA0ICsgMSwgdGlja19kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWluX3JhdGUgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2RyYWluX3JhdGUnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpY2tzICogZHJhaW5fcmF0ZS80O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2VSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdyYXpvcl9leWVfb2ZfdGhlX3N0b3JtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3J1Ymlja19mYWRlX2JvbHQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSnVtcHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAqICgxIC0gdiphYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2p1bXBfZGFtYWdlX3JlZHVjdGlvbl9wY3QnLGFiaWxpdHkubGV2ZWwoKSkvMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlcm9fYXR0YWNrX2RhbWFnZV9yZWR1Y3Rpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdib251c0RhbWFnZVJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NhbmRraW5nX3NhbmRfc3Rvcm0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzYW5ka2luZ19lcGljZW50ZXInOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnUHVsc2VzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdlcGljZW50ZXJfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2VwaWNlbnRlcl9zbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2VwaWNlbnRlcl9zbG93X2FzJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJUFUVEFDSyBTTE9XOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZHJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NoYWRvd19kZW1vbl9zaGFkb3dfcG9pc29uJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzdGFja19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWNrbXVsdCA9IFsxLDIsNCw4XTtcbiAgICAgICAgICAgICAgICBpZiAodiA+IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKiBzdGFja211bHRbM10gKyA1MCAqICh2IC0gNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKiBzdGFja211bHRbdi0xXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ25ldmVybW9yZV9uZWNyb21hc3RlcnknOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU291bHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ25lY3JvbWFzdGVyeV9kYW1hZ2VfcGVyX3NvdWwnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICduZXZlcm1vcmVfcmVxdWllbSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdMaW5lIEhpdCBDb3VudCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncmVxdWllbV9yZWR1Y3Rpb25fZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdSZXR1cm4gTGluZSBIaXQgQ291bnQgKFNjZXB0ZXIpJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyZXF1aWVtX2RhbWFnZV9wY3Rfc2NlcHRlcicsXG4gICAgICAgICAgICBsYWJlbDogJ0RhbWFnZS9IZWFsOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJykqdiphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JlcXVpZW1fZGFtYWdlX3BjdF9zY2VwdGVyJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwxXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhbWFnZSp2WzBdICsgZGFtYWdlKnZbMV0qYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyZXF1aWVtX3JlZHVjdGlvbl9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICclREFNQUdFIFJFRFVDVElPTjonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYmFzZURhbWFnZVJlZHVjdGlvblBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3JlcXVpZW1fcmVkdWN0aW9uX21zJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJURBTUFHRSBSRURVQ1RJT046JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NoYWRvd19zaGFtYW5fc2hhY2tsZXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzaWxlbmNlcl9jdXJzZV9vZl90aGVfc2lsZW50JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodikqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVzcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuLyogICAgICAgICdzaWxlbmNlcl9nbGFpdmVzX29mX3dpc2RvbSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLCovXG4gICAgJ3NreXdyYXRoX21hZ2VfbXlzdGljX2ZsYXJlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NsYXJrX2Vzc2VuY2Vfc2hpZnQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQXR0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYWdpX2dhaW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdhYmlsaXR5JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzQWdpbGl0eSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3N0YXRfbG9zcycsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzQWxsU3RhdHNSZWR1Y3Rpb24nXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzbGFya19zaGFkb3dfZGFuY2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX3JlZ2VuX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RPVEFMIEhFQUxUSCBSRUdFTkVSQVRFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KnBhcmVudC5oZWFsdGgoKSphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX3JlZ2VuX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ0hFQUxUSCBHQUlORUQgUEVSIFNFQ09ORDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQuaGVhbHRoKCkqYS8xMDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdoZWFsdGhyZWdlbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkUgU1BFRUQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3QnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICdzbmlwZXJfc2hyYXBuZWwnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYnVpbGRpbmdfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQlVJTERJTkcgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3dfbW92ZW1lbnRfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBNb3ZlbWVudCBTcGVlZCBTbG93JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NwZWN0cmVfZGVzb2xhdGUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRW5lbXkgQWxvbmUnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdjaGVja2JveCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2JvbnVzRGFtYWdlJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc3BlY3RyZV9kaXNwZXJzaW9uJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0RhbWFnZSBUYWtlbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3JlZmxlY3Rpb25fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFIFJFRkxFQ1RFRDonLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnZGFtYWdlUmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3JlZmxlY3Rpb25fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFIFJFRkxFQ1RFRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnc3Rvcm1fc3Bpcml0X2JhbGxfbGlnaHRuaW5nJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ01BWCBNQU5BJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRGlzdGFuY2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JhbGxfbGlnaHRuaW5nX2luaXRpYWxfbWFuYV9iYXNlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwgMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpLzEwMCp2WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYmFsbF9saWdodG5pbmdfaW5pdGlhbF9tYW5hX2Jhc2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdGTEFUIE1BTkEgQ09TVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwgMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZV9pbnRlcnZhbHMgPSBNYXRoLmZsb29yKHZbMV0vMTAwKTtcbiAgICAgICAgICAgICAgICB2YXIgdHJhdmVsX2Nvc3RfYmFzZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYmFsbF9saWdodG5pbmdfdHJhdmVsX2Nvc3RfYmFzZScsMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBkaXN0YW5jZV9pbnRlcnZhbHMgKiB0cmF2ZWxfY29zdF9iYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYmFsbF9saWdodG5pbmdfaW5pdGlhbF9tYW5hX3BlcmNlbnRhZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICclTUFYIE1BTkEgQ09TVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwgMV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZV9pbnRlcnZhbHMgPSBNYXRoLmZsb29yKHZbMV0vMTAwKTtcbiAgICAgICAgICAgICAgICB2YXIgdHJhdmVsX2Nvc3RfcGVyY2VudCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnYmFsbF9saWdodG5pbmdfdHJhdmVsX2Nvc3RfcGVyY2VudCcsMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBkaXN0YW5jZV9pbnRlcnZhbHMgKiB0cmF2ZWxfY29zdF9wZXJjZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYmFsbF9saWdodG5pbmdfaW5pdGlhbF9tYW5hX2Jhc2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUT1RBTCBNQU5BIENPU1Q6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLCAxLCAyLCAzXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMl0gKyAnICsgJyArICh2WzNdLzEwMCAqIHZbMF0pICsgJyAoJyArIHZbM10gKyAnJSBvZiBtYXgpID0gJyArICh2WzJdICsgdlszXS8xMDAgKiB2WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3RlbXBsYXJfYXNzYXNzaW5fcHNpb25pY190cmFwJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0NoYXJnZSBUaW1lJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlbWVudF9zcGVlZF9taW5fdG9vbHRpcCcsXG4gICAgICAgICAgICBsYWJlbDogJyVNT1ZFIFNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF4X3Nsb3cgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ21vdmVtZW50X3NwZWVkX21heF90b29sdGlwJywwKTtcbiAgICAgICAgICAgICAgICB2YXIgc2xvd19wZXJfdGljayA9IChtYXhfc2xvdyAtIGEpLzQwO1xuICAgICAgICAgICAgICAgIHJldHVybiAtKGEgKyBzbG93X3Blcl90aWNrICogTWF0aC5taW4oTWF0aC5tYXgoMCwgdiksIDQpICogMTApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3NocmVkZGVyX3JlYWN0aXZlX2FybW9yJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfYXJtb3InLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBBcm1vciBCb251cycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgbm9MZXZlbDogdHJ1ZSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2FybW9yJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfaHBfcmVnZW4nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBIUCBSZWdlbiBCb251cycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgbm9MZXZlbDogdHJ1ZSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2hlYWx0aHJlZ2VuJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc2hyZWRkZXJfY2hha3JhbSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX3Blcl9zZWNvbmQnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2RhbWFnZV9pbnRlcnZhbCcsMCk7XG4gICAgICAgICAgICAgICAgdmFyIHRpY2tzID0gTWF0aC5mbG9vcih2IC8gaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhKmludGVydmFsKnRpY2tzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTUFOQSBDT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdkYW1hZ2VfaW50ZXJ2YWwnLDApO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGguZmxvb3IodiAvIGludGVydmFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSppbnRlcnZhbCp0aWNrcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFTkVNWSAlSFAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdNQU5BIENPU1Q6JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IDIwIC0gTWF0aC5mbG9vcihNYXRoLm1pbihNYXRoLm1heCh2LTEsIDApLCA5OSkgLyA1KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWEqdGlja3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnc3Bpcml0X2JyZWFrZXJfZ3JlYXRlcl9iYXNoJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Jhc2ggUHJvYycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2NoZWNrYm94J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJU1PVkVTUEVFRCBBUyBEQU1BR0UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdiYXNoQm9udXNEYW1hZ2UnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19tb3Zlc3BlZWRfcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2NoYW5jZV9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2Jhc2gnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd0ZWNoaWVzX2xhbmRfbWluZXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTnVtYmVyIG9mIE1pbmVzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0FGVEVSIFJFRFVDVElPTlM6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGh5c19yZWR1Y3Rpb24gPSBwYXJlbnQuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWxSZWR1Y3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbWFnaWNfcmVkdWN0aW9uID0gcGFyZW50LmVuZW15KCkudG90YWxNYWdpY1Jlc2lzdGFuY2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYgKiBhICogKDEgLSBwaHlzX3JlZHVjdGlvbiAvIDEwMCkgKiAoMSAtIG1hZ2ljX3JlZHVjdGlvbiAvIDEwMCkpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd0ZWNoaWVzX3N1aWNpZGUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdGVUxMIERBTUFHRSBBRlRFUiBSRURVQ1RJT05TOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBoeXNfcmVkdWN0aW9uID0gcGFyZW50LmVuZW15KCkudG90YWxBcm1vclBoeXNpY2FsUmVkdWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIG1hZ2ljX3JlZHVjdGlvbiA9IHBhcmVudC5lbmVteSgpLnRvdGFsTWFnaWNSZXNpc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhICogKDEgLSBwaHlzX3JlZHVjdGlvbiAvIDEwMCkgKiAoMSAtIG1hZ2ljX3JlZHVjdGlvbiAvIDEwMCkpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdwYXJ0aWFsX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1BBUlRJQUwgREFNQUdFIEFGVEVSIFJFRFVDVElPTlM6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGh5c19yZWR1Y3Rpb24gPSBwYXJlbnQuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWxSZWR1Y3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbWFnaWNfcmVkdWN0aW9uID0gcGFyZW50LmVuZW15KCkudG90YWxNYWdpY1Jlc2lzdGFuY2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEgKiAoMSAtIHBoeXNfcmVkdWN0aW9uIC8gMTAwKSAqICgxIC0gbWFnaWNfcmVkdWN0aW9uIC8gMTAwKSkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1JFU1BBV04gVElNRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAocGFyZW50LnJlc3Bhd25UaW1lKCkgLyAyKS50b0ZpeGVkKDApICsgJyBzZWNvbmRzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3RlY2hpZXNfcmVtb3RlX21pbmVzJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ051bWJlciBvZiBNaW5lcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdBRlRFUiBSRURVQ1RJT05TOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hZ2ljX3JlZHVjdGlvbiA9IHBhcmVudC5lbmVteSgpLnRvdGFsTWFnaWNSZXNpc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2ICogYSAqICgxIC0gbWFnaWNfcmVkdWN0aW9uIC8gMTAwKSkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Rpbmtlcl9tYXJjaF9vZl90aGVfbWFjaGluZXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnUm9ib3QgRXhwbG9zaW9ucycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFjaGluZXNfcGVyX3NlYycsXG4gICAgICAgICAgICBsYWJlbDogJ1RPVEFMIERBTUFHRTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKnY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd0cmVhbnRfbGVlY2hfc2VlZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdQdWxzZXMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2xlZWNoX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RBTUFHRS9IRUFMOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X3Nsb3cnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtb3ZlbWVudFNwZWVkUGN0UmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndHJvbGxfd2FybG9yZF9mZXJ2b3InOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdhdHRhY2tfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdBVFRBQ0sgU1BFRUQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYXR0YWNrc3BlZWQnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd1bmR5aW5nX2RlY2F5JzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnc3RyX3N0ZWFsJyxcbiAgICAgICAgICAgIGxhYmVsOiAnU1RSRU5HVEggU1RPTEVOOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pbnZlbnRvcnkuaGFzU2NlcHRlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJfc3RlYWxfc2NlcHRlciA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnc3RyX3N0ZWFsX3NjZXB0ZXInLDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdipzdHJfc3RlYWxfc2NlcHRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNTdHJlbmd0aCdcbiAgICAgICAgfSxcbiAgICBdLFxuICAgICd1bmR5aW5nX3NvdWxfcmlwJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1VuaXRzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyX3VuaXQnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0UvSEVBTDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd1bmR5aW5nX2ZsZXNoX2dvbGVtJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0Rpc3RhbmNlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtYXhfc3BlZWRfc2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJyVNT1ZFIFNMT1c6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWluX3NwZWVkX3Nsb3cgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ21pbl9zcGVlZF9zbG93JywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAncmFkaXVzJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxfcG93ZXJfcmFkaXVzID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdmdWxsX3Bvd2VyX3JhZGl1cycsIDApO1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGgubWluKE1hdGgubWF4KHYsIGZ1bGxfcG93ZXJfcmFkaXVzKSwgcmFkaXVzKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxIC0gKGRpc3RhbmNlIC0gZnVsbF9wb3dlcl9yYWRpdXMpIC8gKHJhZGl1cyAtIGZ1bGxfcG93ZXJfcmFkaXVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLU1hdGgubWF4KHNjYWxlICogYSwgbWluX3NwZWVkX3Nsb3cpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21heF9kYW1hZ2VfYW1wJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJURBTUFHRSBBTVA6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWluX2RhbWFnZV9hbXAgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ21pbl9kYW1hZ2VfYW1wJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAncmFkaXVzJywgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxfcG93ZXJfcmFkaXVzID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdmdWxsX3Bvd2VyX3JhZGl1cycsIDApO1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGgubWluKE1hdGgubWF4KHYsIGZ1bGxfcG93ZXJfcmFkaXVzKSwgcmFkaXVzKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxIC0gKGRpc3RhbmNlIC0gZnVsbF9wb3dlcl9yYWRpdXMpIC8gKHJhZGl1cyAtIGZ1bGxfcG93ZXJfcmFkaXVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoc2NhbGUgKiBhLCBtaW5fZGFtYWdlX2FtcCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdkYW1hZ2VBbXBsaWZpY2F0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ01BWCBIUCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hlcm8gRGVhdGggQ291bnQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDcmVlcCBEZWF0aCBDb3VudCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGVhdGhfaGVhbCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RFQVRIIEhFQUwgKEhFUk9FUyk6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ21ldGhvZCcsXG4gICAgICAgICAgICBjb250cm9sczogWzEsIDJdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSp2WzFdKmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGVhdGhfaGVhbF9jcmVlcCcsXG4gICAgICAgICAgICBsYWJlbDogJ0RFQVRIIEhFQUwgKENSRUVQUyk6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ21ldGhvZCcsXG4gICAgICAgICAgICBjb250cm9sczogWzEsIDNdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSp2WzFdKmEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGVhdGhfaGVhbF9jcmVlcCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RPVEFMIERFQVRIIEhFQUw6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFs0LCA1XSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0rdlsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Vyc2FfZnVyeV9zd2lwZXMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnU3RhY2tzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2VfcGVyX3N0YWNrJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnJhZ2VBYmlsaXR5ID0gYWJpbGl0eU1vZGVsLmFiaWxpdGllcygpLmZpbmQoZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5uYW1lID09ICd1cnNhX2VucmFnZSc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGVucmFnZUFiaWxpdHkuaXNBY3RpdmUoKSAmJiBlbnJhZ2VBYmlsaXR5LmxldmVsKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnJhZ2VfbXVsdGlwbGllciA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoZW5yYWdlQWJpbGl0eS5hdHRyaWJ1dGVzLCAnZW5yYWdlX211bHRpcGxpZXInLCBlbnJhZ2VBYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdiphKmVucmFnZV9tdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnYm9udXNEYW1hZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgICd1cnNhX2VucmFnZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZV9yZWR1Y3Rpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnZGFtYWdlUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmVub21hbmNlcl92ZW5vbW91c19nYWxlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICd0aWNrX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzdHJpa2VfZGFtYWdlJyxhYmlsaXR5LmxldmVsKCkpICsgTWF0aC5mbG9vcih2LzMpKmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdtb3ZlbWVudF9zbG93JyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Zlbm9tYW5jZXJfcG9pc29uX3N0aW5nJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Zlbm9tYW5jZXJfcG9pc29uX25vdmEnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAndmlwZXJfcG9pc29uX2F0dGFjayc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19tb3ZlbWVudF9zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hdHRhY2tfc3BlZWQnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdhdHRhY2tzcGVlZHJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3ZpcGVyX2NvcnJvc2l2ZV9za2luJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dGFja19zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkcmVkdWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfbWFnaWNfcmVzaXN0YW5jZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ21hZ2ljUmVzaXN0J1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmlwZXJfdmlwZXJfc3RyaWtlJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdkYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2UnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX21vdmVtZW50X3NwZWVkJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dGFja19zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkcmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAndmlzYWdlX3NvdWxfYXNzdW1wdGlvbic6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDaGFyZ2VzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzb3VsX2NoYXJnZV9kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBEYW1hZ2U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc291bF9iYXNlX2RhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnc291bF9iYXNlX2RhbWFnZScsMCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWNrX2xpbWl0ID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdzdGFja19saW1pdCcsIGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgc3RhY2tfbGltaXQgPSBNYXRoLm1heChNYXRoLm1pbih2LCBzdGFja19saW1pdCksIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBzb3VsX2Jhc2VfZGFtYWdlICsgc3RhY2tfbGltaXQqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3Zpc2FnZV9ncmF2ZWtlZXBlcnNfY2xvYWsnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnTGF5ZXJzJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19hcm1vcicsXG4gICAgICAgICAgICBsYWJlbDogJ0FSTU9SOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2FybW9yJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfcmVzaXN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnJVJFU0lTVDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuUHJvcGVydHk6ICdtYWdpY1Jlc2lzdCdcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3dhcmxvY2tfc2hhZG93X3dvcmQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2FybG9ja191cGhlYXZhbCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDaGFubmVsIER1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzbG93X3JhdGVfZHVyYXRpb24nLFxuICAgICAgICAgICAgbGFiZWw6ICclTU9WRSBTTE9XOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heF9zbG93ID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdtYXhfc2xvdycsMCk7XG4gICAgICAgICAgICAgICAgdmFyIHNsb3dfcGVyX3RpY2sgPSBtYXhfc2xvdyAvIChhIC0gMC41KSAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIHRpY2tzID0gTWF0aC5tYXgoTWF0aC5mbG9vcih2ICogMikgLSAxLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLU1hdGgubWluKHRpY2tzICogc2xvd19wZXJfdGljaywgbWF4X3Nsb3cpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldHVyblByb3BlcnR5OiAnbW92ZW1lbnRTcGVlZFBjdFJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3dlYXZlcl90aGVfc3dhcm0nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQXR0YWNrcycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYXJtb3JfcmVkdWN0aW9uJyxcbiAgICAgICAgICAgIGxhYmVsOiAnREFNQUdFOicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXYqYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2FybW9yUmVkdWN0aW9uJ1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2luZHJ1bm5lcl9wb3dlcnNob3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKSp2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICAnd2ludGVyX3d5dmVybl9jb2xkX2VtYnJhY2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHVyYXRpb24nLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdBbGx5IE1heCBIZWFsdGgnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlYWxfcGVyY2VudGFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RPVEFMIEhFQUw6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLDFdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmFzZV9oZWFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdoZWFsX2FkZGl0aXZlJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoYmFzZV9oZWFsICsgdlsxXSAqIGEvMTAwKSAqIHZbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXNwX3NwaXJpdHMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ29sbGlzaW9uIENvdW50JyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZXJvX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnY3JlZXBfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXNwX292ZXJjaGFyZ2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ3VycmVudCBIUCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZHJhaW5fcGN0JyxcbiAgICAgICAgICAgIGxhYmVsOiAnSFAgRFJBSU5FRDonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSwgXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0N1cnJlbnQgTVAnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RyYWluX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ01QIERSQUlORUQ6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsIFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2F0dGFja19zcGVlZCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2F0dGFja3NwZWVkJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlX3BjdCcsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXR1cm5Qcm9wZXJ0eTogJ2RhbWFnZVJlZHVjdGlvbidcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3dpdGNoX2RvY3Rvcl9wYXJhbHl6aW5nX2Nhc2snOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnSGVybyBCb3VuY2UgQ291bnQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlcm9fZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuY2VzID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdib3VuY2VzJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2LCAwKSwgYm91bmNlcykqYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdDcmVlcCBCb3VuY2UgQ291bnQnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2hlcm9fZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQ1JFRVAgREFNQUdFOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5jZXMgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2JvdW5jZXMnLGFiaWxpdHkubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHYsIDApLCBib3VuY2VzKSpkYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXRjaF9kb2N0b3Jfdm9vZG9vX3Jlc3RvcmF0aW9uJzogW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnaW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdoZWFsJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnaGVhbF9pbnRlcnZhbCcsYWJpbGl0eS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICB2YXIgaGVhbF9wZXJfdGljayA9IGEgKiBpbnRlcnZhbDtcbiAgICAgICAgICAgICAgICB2YXIgdGlja3MgPSBNYXRoLm1heChNYXRoLmZsb29yKHYgLyBpbnRlcnZhbCkgLSAxLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVhbF9wZXJfdGljayAqIHRpY2tzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbWFuYV9wZXJfc2Vjb25kJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTUFOQSBDT1NUOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlBdHRyaWJ1dGVWYWx1ZShhYmlsaXR5LmF0dHJpYnV0ZXMsICdoZWFsX2ludGVydmFsJyxhYmlsaXR5LmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIHZhciBtYW5hX3Blcl90aWNrID0gYSAqIGludGVydmFsO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IE1hdGgubWF4KE1hdGguZmxvb3IodiAvIGludGVydmFsKSAtIDEsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYW5hX3Blcl90aWNrICogdGlja3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXRjaF9kb2N0b3JfbWFsZWRpY3QnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnZGFtYWdlIDAtNHMnLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdpbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdkYW1hZ2UgNC04cycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ2RhbWFnZSA4LTEycycsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRG90IERhbWFnZSBhZnRlciAzczonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDMqZGFtYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQnVyc3QgRGFtYWdlIGF0IDRzOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgY29udHJvbHM6IFswLCAzXSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSB2LnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8gfSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGQsIDApICogYS8xMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdEb3QgRGFtYWdlIGFmdGVyIDdzOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gNypkYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdib251c19kYW1hZ2UnLFxuICAgICAgICAgICAgbGFiZWw6ICdCdXJzdCBEYW1hZ2UgYXQgOHM6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ21ldGhvZCcsXG4gICAgICAgICAgICBjb250cm9sczogWzAsIDEsIDQsIDVdLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHYucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgbyB9LCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoZCwgMCkgKiBhLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ0RvdCBEYW1hZ2UgYWZ0ZXIgMTFzOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFtYWdlID0gYWJpbGl0eU1vZGVsLmdldEFiaWxpdHlQcm9wZXJ0eVZhbHVlKGFiaWxpdHksICdkYW1hZ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTEqZGFtYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQnVyc3QgRGFtYWdlIGF0IDEyczonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbMCwgMSwgMiwgNCwgNiwgN10sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2UgPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpO1xuICAgICAgICAgICAgICAgIHZhciBkID0gdi5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIG8pIHsgcmV0dXJuIG1lbW8gKyBvIH0sIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChkLCAwKSAqIGEvMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgQnVyc3QgRGFtYWdlOicsXG4gICAgICAgICAgICBpZ25vcmVUb29sdGlwOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbFR5cGU6ICdtZXRob2QnLFxuICAgICAgICAgICAgY29udHJvbHM6IFs0LCA2LCA4XSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAodiwgYSwgcGFyZW50LCBpbmRleCwgYWJpbGl0eU1vZGVsLCBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgbyB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2JvbnVzX2RhbWFnZScsXG4gICAgICAgICAgICBsYWJlbDogJ1RvdGFsIE1hbGVkaWN0IERhbWFnZTonLFxuICAgICAgICAgICAgaWdub3JlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAnbWV0aG9kJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbOV0sXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUoYWJpbGl0eS5hdHRyaWJ1dGVzLCAnZHVyYXRpb25fdG9vbHRpcCcsMCk7XG4gICAgICAgICAgICAgICAgdmFyIGRhbWFnZSA9IGFiaWxpdHlNb2RlbC5nZXRBYmlsaXR5UHJvcGVydHlWYWx1ZShhYmlsaXR5LCAnZGFtYWdlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhbWFnZSAqIGR1cmF0aW9uICsgdlswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnYm9udXNfZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnRE9UIERhbWFnZScsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKGFiaWxpdHkuYXR0cmlidXRlcywgJ2R1cmF0aW9uX3Rvb2x0aXAnLDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5TW9kZWwuZ2V0QWJpbGl0eVByb3BlcnR5VmFsdWUoYWJpbGl0eSwgJ2RhbWFnZScpKk1hdGgubWluKE1hdGgubWF4KHYsIDApLCBkdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd3aXRjaF9kb2N0b3JfZGVhdGhfd2FyZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdEdXJhdGlvbicsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlJyxcbiAgICAgICAgICAgIGxhYmVsOiAnVG90YWwgRGFtYWdlJyxcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gKHYsIGEsIHBhcmVudCwgaW5kZXgsIGFiaWxpdHlNb2RlbCwgYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2KmE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgICd6dXVzX3N0YXRpY19maWVsZCc6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdFbmVteSBIUCcsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ2lucHV0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGFtYWdlX2hlYWx0aF9wY3QnLFxuICAgICAgICAgICAgbGFiZWw6ICdEQU1BR0U6JyxcbiAgICAgICAgICAgIGlnbm9yZVRvb2x0aXA6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uICh2LCBhLCBwYXJlbnQsIGluZGV4LCBhYmlsaXR5TW9kZWwsIGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiphLzEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF1cbn0iLCIndXNlIHN0cmljdCc7XG52YXIga28gPSByZXF1aXJlKCcuL2hlcm9jYWxjX2tub2Nrb3V0Jyk7XG4gICAgXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuQnVmZk9wdGlvbiA9IGZ1bmN0aW9uIChoZXJvLCBhYmlsaXR5KSB7XG4gICAgdGhpcy5idWZmTmFtZSA9IGFiaWxpdHk7XG4gICAgaWYgKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgaGVyb10gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuaGVybyA9IGhlcm87XG4gICAgICAgIHRoaXMuYWJpbGl0eURhdGEgPSBteS5wcm90b3R5cGUuZmluZFdoZXJlKG15LnByb3RvdHlwZS51bml0RGF0YVtoZXJvXS5hYmlsaXRpZXMsIHtuYW1lOiBhYmlsaXR5fSlcbiAgICAgICAgdGhpcy5idWZmRGlzcGxheU5hbWUgPSBteS5wcm90b3R5cGUudW5pdERhdGFbaGVyb10uZGlzcGxheW5hbWUgKyAnIC0gJyArIHRoaXMuYWJpbGl0eURhdGEuZGlzcGxheW5hbWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmhlcm8gPSAnbnBjX2RvdGFfaGVyb18nICsgaGVybztcbiAgICAgICAgdGhpcy5hYmlsaXR5RGF0YSA9IG15LnByb3RvdHlwZS5maW5kV2hlcmUobXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBoZXJvXS5hYmlsaXRpZXMsIHtuYW1lOiBhYmlsaXR5fSlcbiAgICAgICAgdGhpcy5idWZmRGlzcGxheU5hbWUgPSBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIGhlcm9dLmRpc3BsYXluYW1lICsgJyAtICcgKyB0aGlzLmFiaWxpdHlEYXRhLmRpc3BsYXluYW1lOyAgICAgICAgXG4gICAgICAgIGlmIChhYmlsaXR5ID09ICdzdmVuX2dvZHNfc3RyZW5ndGgnKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZEaXNwbGF5TmFtZSArPSAnIChBdXJhIGZvciBhbGxpZXMpJztcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxubXkucHJvdG90eXBlLkl0ZW1CdWZmT3B0aW9uID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLmJ1ZmZOYW1lID0gaXRlbTtcbiAgICBpZiAobXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBoZXJvXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5oZXJvID0gaGVybztcbiAgICAgICAgdGhpcy5hYmlsaXR5RGF0YSA9IG15LnByb3RvdHlwZS5maW5kV2hlcmUobXkucHJvdG90eXBlLnVuaXREYXRhW2hlcm9dLmFiaWxpdGllcywge25hbWU6IGl0ZW19KVxuICAgICAgICB0aGlzLmJ1ZmZEaXNwbGF5TmFtZSA9IG15LnByb3RvdHlwZS51bml0RGF0YVtoZXJvXS5kaXNwbGF5bmFtZSArICcgLSAnICsgdGhpcy5hYmlsaXR5RGF0YS5kaXNwbGF5bmFtZTsgICAgICAgIFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5oZXJvID0gJ25wY19kb3RhX2hlcm9fJyArIGhlcm87XG4gICAgICAgIHRoaXMuYWJpbGl0eURhdGEgPSBteS5wcm90b3R5cGUuZmluZFdoZXJlKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgaGVyb10uYWJpbGl0aWVzLCB7bmFtZTogaXRlbX0pXG4gICAgICAgIHRoaXMuYnVmZkRpc3BsYXlOYW1lID0gbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvXycgKyBoZXJvXS5kaXNwbGF5bmFtZSArICcgLSAnICsgdGhpcy5hYmlsaXR5RGF0YS5kaXNwbGF5bmFtZTsgICAgICAgIFxuICAgIH1cblxufTtcblxubXkucHJvdG90eXBlLkJ1ZmZWaWV3TW9kZWwgPSBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBzZWxmID0gbmV3IG15LnByb3RvdHlwZS5BYmlsaXR5TW9kZWwoa28ub2JzZXJ2YWJsZUFycmF5KFtdKSk7XG4gICAgc2VsZi5hdmFpbGFibGVCdWZmcyA9IGtvLm9ic2VydmFibGVBcnJheShteS5wcm90b3R5cGUuYXZhaWxhYmxlQnVmZnMpO1xuICAgIHNlbGYuYXZhaWxhYmxlRGVidWZmcyA9IGtvLm9ic2VydmFibGVBcnJheShteS5wcm90b3R5cGUuYXZhaWxhYmxlRGVidWZmcyk7XG4gICAgc2VsZi5zZWxlY3RlZEJ1ZmYgPSBrby5vYnNlcnZhYmxlKHNlbGYuYXZhaWxhYmxlQnVmZnMoKVswXSk7XG4gICAgXG4gICAgc2VsZi5idWZmcyA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7XG4gICAgc2VsZi5pdGVtQnVmZnMgPSBuZXcgbXkucHJvdG90eXBlLkludmVudG9yeVZpZXdNb2RlbCgpO1xuICAgIFxuICAgIHNlbGYuYWRkQnVmZiA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICBpZiAobXkucHJvdG90eXBlLmZpbmRXaGVyZShzZWxmLmJ1ZmZzKCksIHsgbmFtZTogc2VsZi5zZWxlY3RlZEJ1ZmYoKS5idWZmTmFtZSB9KSAgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgYSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VsZi5zZWxlY3RlZEJ1ZmYoKS5hYmlsaXR5RGF0YSkpO1xuICAgICAgICAgICAgYS5sZXZlbCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmlzQWN0aXZlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgICAgICAgICBhLmlzRGV0YWlsID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgICAgICAgICBhLmJhc2VEYW1hZ2UgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5iYXNoID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYmFzaEJvbnVzRGFtYWdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNEYW1hZ2UgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c0RhbWFnZU9yYiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzRGFtYWdlUGN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYm9udXNEYW1hZ2VSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c0hlYWx0aCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzU3RyZW5ndGggPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c1N0cmVuZ3RoMiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzQWdpbGl0eSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzQWdpbGl0eTIgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5ib251c0ludCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmJvbnVzQWxsU3RhdHNSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5kYW1hZ2VBbXBsaWZpY2F0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuZGFtYWdlUmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuZXZhc2lvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLm1hZ2ljUmVzaXN0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubWFuYXJlZ2VuID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubWFuYXJlZ2VucmVkdWN0aW9uID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubWlzc0NoYW5jZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLm1vdmVtZW50U3BlZWRGbGF0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEubW92ZW1lbnRTcGVlZFBjdCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLm1vdmVtZW50U3BlZWRQY3RSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS50dXJuUmF0ZVJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmF0dGFja3JhbmdlID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYXR0YWNrc3BlZWQgPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5hdHRhY2tzcGVlZHJlZHVjdGlvbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmFybW9yID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEuYXJtb3JSZWR1Y3Rpb24gPSBrby5vYnNlcnZhYmxlKDApO1xuICAgICAgICAgICAgYS5oZWFsdGhyZWdlbiA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLmxpZmVzdGVhbCA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgICAgICAgICBhLnZpc2lvbm5pZ2h0ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIGEudmlzaW9uZGF5ID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgICAgICAgICAgIHN3aXRjaCAoYS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52b2tlcl9jb2xkX3NuYXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfZ2hvc3Rfd2Fsayc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52b2tlcl90b3JuYWRvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbnZva2VyX2VtcCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52b2tlcl9hbGFjcml0eSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52b2tlcl9jaGFvc19tZXRlb3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfc3VuX3N0cmlrZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52b2tlcl9mb3JnZV9zcGlyaXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfaWNlX3dhbGwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ludm9rZXJfZGVhZmVuaW5nX2JsYXN0JzpcbiAgICAgICAgICAgICAgICAgICAgYS5sZXZlbCgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzLnB1c2goYSk7XG4gICAgICAgICAgICBzZWxmLmJ1ZmZzLnB1c2goeyBuYW1lOiBzZWxmLnNlbGVjdGVkQnVmZigpLmJ1ZmZOYW1lLCBoZXJvOiBzZWxmLnNlbGVjdGVkQnVmZigpLmhlcm8sIGRhdGE6IGEgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHNlbGYucmVtb3ZlQnVmZiA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCwgYWJpbGl0eU5hbWUpIHtcbiAgICAgICAgaWYgKG15LnByb3RvdHlwZS5maW5kV2hlcmUoc2VsZi5idWZmcygpLCB7IG5hbWU6IGFiaWxpdHlOYW1lIH0pICAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmJ1ZmZzLnJlbW92ZShteS5wcm90b3R5cGUuZmluZFdoZXJlKHNlbGYuYnVmZnMoKSwgeyBuYW1lOiBhYmlsaXR5TmFtZSB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0eUNvbnRyb2xEYXRhW2FiaWxpdHlOYW1lXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmFiaWxpdHlDb250cm9sRGF0YVthYmlsaXR5TmFtZV0uZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0eUNvbnRyb2xEYXRhW2FiaWxpdHlOYW1lXS5kYXRhW2ldLmNvbnRyb2xWYWwuZGlzcG9zZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdHlDb250cm9sRGF0YVthYmlsaXR5TmFtZV0uZGF0YVtpXS5jb250cm9sVmFsLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmFiaWxpdHlDb250cm9sRGF0YVthYmlsaXR5TmFtZV0uZGF0YVtpXS5jbGVhbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdHlDb250cm9sRGF0YVthYmlsaXR5TmFtZV0uZGF0YVtpXS5jbGVhbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXR5Q29udHJvbERhdGFbYWJpbGl0eU5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYWJpbGl0aWVzKClbaV0ubmFtZSA9PSBhYmlsaXR5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpXS5sZXZlbCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzLnJlbW92ZShzZWxmLmFiaWxpdGllcygpW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLnRvZ2dsZUJ1ZmYgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5iZWhhdmlvci5pbmRleE9mKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfUEFTU0lWRScpIDwgMCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuYnVmZnMoKVtpbmRleCgpXS5kYXRhLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5pc0FjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5pc0FjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmJ1ZmZzKClbaW5kZXgoKV0uZGF0YS5pc0FjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmlzQWN0aXZlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgc2VsZi50b2dnbGVCdWZmRGV0YWlsID0gZnVuY3Rpb24gKGluZGV4LCBkYXRhLCBldmVudCkge1xuICAgICAgICBpZiAoc2VsZi5idWZmcygpW2luZGV4KCldLmRhdGEuaXNEZXRhaWwoKSkge1xuICAgICAgICAgICAgc2VsZi5idWZmcygpW2luZGV4KCldLmRhdGEuaXNEZXRhaWwoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5idWZmcygpW2luZGV4KCldLmRhdGEuaXNEZXRhaWwodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcyk7XG5cbiAgICAvLyBPdmVycmlkZXMgdGhlIGFiaWxpdHkgbW9kdWxlIGZ1bmN0aW9uIHRvIHJlbW92ZSBhdmFpbGFibGUgc2tpbGwgcG9pbnQgY2hlY2tcbiAgICBzZWxmLmxldmVsVXBBYmlsaXR5ID0gZnVuY3Rpb24gKGluZGV4LCBkYXRhLCBldmVudCwgaGVybykge1xuICAgICAgICBpZiAoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpIDwgaGVyby5nZXRBYmlsaXR5TGV2ZWxNYXgoZGF0YSkpIHtcbiAgICAgICAgICAgIHN3aXRjaChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmFiaWxpdHl0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRE9UQV9BQklMSVRZX1RZUEVfVUxUSU1BVEUnOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSArIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpICsgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JlYXN0bWFzdGVyX2NhbGxfb2ZfdGhlX3dpbGQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZW5fdGVzdF9vZl9mYWl0aCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9ycGhsaW5nX21vcnBoX2FnaSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2hhZG93X2RlbW9uX3NoYWRvd19wb2lzb24nOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vcnBobGluZ19tb3JwaF9zdHInOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tlZXBlcl9vZl90aGVfbGlnaHRfc3Bpcml0X2Zvcm0nOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMSc6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDJdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUyJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTMnOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgLSAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLmxldmVsRG93bkFiaWxpdHkgPSBmdW5jdGlvbiAoaW5kZXgsIGRhdGEsIGV2ZW50LCBoZXJvKSB7XG4gICAgICAgIGlmIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkgPiAwKSB7XG4gICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSAtIDEpO1xuICAgICAgICAgICAgc3dpdGNoIChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdiZWFzdG1hc3Rlcl9jYWxsX29mX3RoZV93aWxkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVuX3Rlc3Rfb2ZfZmFpdGgnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vcnBobGluZ19tb3JwaF9hZ2knOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NoYWRvd19kZW1vbl9zaGFkb3dfcG9pc29uJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpICsgMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtb3JwaGxpbmdfbW9ycGhfc3RyJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdrZWVwZXJfb2ZfdGhlX2xpZ2h0X3NwaXJpdF9mb3JtJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMl0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBjYXNlICduZXZlcm1vcmVfc2hhZG93cmF6ZTEnOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAxXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdGllcygpW2luZGV4KCkgKyAyXS5sZXZlbChzZWxmLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ldmVybW9yZV9zaGFkb3dyYXplMic6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSArIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV2ZXJtb3JlX3NoYWRvd3JhemUzJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMl0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbWJlcl9zcGlyaXRfZmlyZV9yZW1uYW50JzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpIC0gMV0ubGV2ZWwoc2VsZi5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsb25lX2RydWlkX3RydWVfZm9ybSc6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKSAtIDFdLmxldmVsKHNlbGYuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBzZWxmO1xufSIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxuZnVuY3Rpb24gSEVST0NBTENVTEFUT1IgKCkge1xuICAgLy8gLi4uXG59XG5cbnZhciBteSA9IEhFUk9DQUxDVUxBVE9SO1xuXG5teS5wcm90b3R5cGUuaGVyb0RhdGEgPSB7fTtcbm15LnByb3RvdHlwZS5pdGVtRGF0YSA9IHt9O1xubXkucHJvdG90eXBlLnVuaXREYXRhID0ge307XG5teS5wcm90b3R5cGUuYWJpbGl0eURhdGEgPSB7fTtcblxubXkucHJvdG90eXBlLkhlcm9PcHRpb25zID0gW107XG5cbm15LnByb3RvdHlwZS5IZXJvT3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGRpc3BsYXluYW1lLCBoZXJvKSB7XG4gICAgdGhpcy5oZXJvTmFtZSA9IG5hbWU7XG4gICAgdGhpcy5oZXJvRGlzcGxheU5hbWUgPSBkaXNwbGF5bmFtZTtcbiAgICB0aGlzLmhlcm8gPSBoZXJvO1xufTtcblxubXkucHJvdG90eXBlLmlkQ291bnRlciA9IDA7XG5teS5wcm90b3R5cGUudW5pcXVlSWQgPSBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytteS5wcm90b3R5cGUuaWRDb3VudGVyICsgJyc7XG4gICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG59O1xubXkucHJvdG90eXBlLmZpbmRXaGVyZSA9IGZ1bmN0aW9uIChhcnIsIG9iaikge1xuICAgIGFyckxvb3A6IGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG9iakxvb3A6IGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChhcnJbaV1ba2V5XSAhPSBvYmpba2V5XSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIGFyckxvb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycltpXTtcbiAgICB9XG59XG5teS5wcm90b3R5cGUudW5pcXVlcyA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIGZvciAodmFyIGk9MCwgbD1hcnIubGVuZ3RoOyBpPGw7IGkrKylcbiAgICAgICAgaWYgKGEuaW5kZXhPZihhcnJbaV0pID09PSAtMSAmJiBhcnJbaV0gIT09ICcnKVxuICAgICAgICAgICAgYS5wdXNoKGFycltpXSk7XG4gICAgcmV0dXJuIGE7XG59XG5teS5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBhcnIgPSBhLmNvbmNhdChiKTtcbiAgICByZXR1cm4gbXkucHJvdG90eXBlLnVuaXF1ZXMoYXJyKTtcbn1cblxubXkucHJvdG90eXBlLnRvdGFsUmVzb3VyY2VzID0gMztcbm15LnByb3RvdHlwZS5udW1SZXNvdXJjZXNMb2FkZWQgPSAwO1xubXkucHJvdG90eXBlLm9uUmVzb3VyY2VMb2FkZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBteS5wcm90b3R5cGUubnVtUmVzb3VyY2VzTG9hZGVkKys7XG4gICAgaWYgKG15LnByb3RvdHlwZS5udW1SZXNvdXJjZXNMb2FkZWQgPT0gbXkucHJvdG90eXBlLnRvdGFsUmVzb3VyY2VzKSB7XG4gICAgICAgIFxuICAgICAgICBteS5wcm90b3R5cGUuYXZhaWxhYmxlQnVmZnMgPSBbXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2FiYWRkb24nLCAnYWJhZGRvbl9mcm9zdG1vdXJuZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdheGUnLCAnYXhlX2N1bGxpbmdfYmxhZGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYmVhc3RtYXN0ZXInLCAnYmVhc3RtYXN0ZXJfaW5uZXJfYmVhc3QnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYmxvb2RzZWVrZXInLCAnYmxvb2RzZWVrZXJfYmxvb2RyYWdlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2JvdW50eV9odW50ZXInLCAnYm91bnR5X2h1bnRlcl90cmFjaycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdjZW50YXVyJywgJ2NlbnRhdXJfc3RhbXBlZGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignY3J5c3RhbF9tYWlkZW4nLCAnY3J5c3RhbF9tYWlkZW5fYnJpbGxpYW5jZV9hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2Rhcmtfc2VlcicsICdkYXJrX3NlZXJfc3VyZ2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZGF6emxlJywgJ2RhenpsZV93ZWF2ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdkcm93X3JhbmdlcicsICdkcm93X3Jhbmdlcl90cnVlc2hvdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdpbnZva2VyJywgJ2ludm9rZXJfYWxhY3JpdHknKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignd2lzcCcsICd3aXNwX3RldGhlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3aXNwJywgJ3dpc3Bfb3ZlcmNoYXJnZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdrdW5ra2EnLCAna3Vua2thX2dob3N0c2hpcCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdsaWNoJywgJ2xpY2hfZnJvc3RfYXJtb3InKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbGlmZV9zdGVhbGVyJywgJ2xpZmVfc3RlYWxlcl9vcGVuX3dvdW5kcycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdsdW5hJywgJ2x1bmFfbHVuYXJfYmxlc3NpbmcnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbHljYW4nLCAnbHljYW5faG93bCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdtYWduYXRhdXInLCAnbWFnbmF0YXVyX2VtcG93ZXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbWlyYW5hJywgJ21pcmFuYV9sZWFwJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ29ncmVfbWFnaScsICdvZ3JlX21hZ2lfYmxvb2RsdXN0JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ29tbmlrbmlnaHQnLCAnb21uaWtuaWdodF9ndWFyZGlhbl9hbmdlbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdydWJpY2snLCAncnViaWNrX251bGxfZmllbGQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2tlbGV0b25fa2luZycsICdza2VsZXRvbl9raW5nX3ZhbXBpcmljX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc3Bpcml0X2JyZWFrZXInLCAnc3Bpcml0X2JyZWFrZXJfZW1wb3dlcmluZ19oYXN0ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzdmVuJywgJ3N2ZW5fd2FyY3J5JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3N2ZW4nLCAnc3Zlbl9nb2RzX3N0cmVuZ3RoJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3RyZWFudCcsICd0cmVhbnRfbGl2aW5nX2FybW9yJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3Ryb2xsX3dhcmxvcmQnLCAndHJvbGxfd2FybG9yZF9iYXR0bGVfdHJhbmNlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3ZlbmdlZnVsc3Bpcml0JywgJ3ZlbmdlZnVsc3Bpcml0X2NvbW1hbmRfYXVyYScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX2FscGhhX3dvbGYnLCAnYWxwaGFfd29sZl9jcml0aWNhbF9zdHJpa2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9hbHBoYV93b2xmJywgJ2FscGhhX3dvbGZfY29tbWFuZF9hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfcG9sYXJfZnVyYm9sZ191cnNhX3dhcnJpb3InLCAnY2VudGF1cl9raGFuX2VuZHVyYW5jZV9hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfZ2lhbnRfd29sZicsICdnaWFudF93b2xmX2NyaXRpY2FsX3N0cmlrZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX2tvYm9sZF90YXNrbWFzdGVyJywgJ2tvYm9sZF90YXNrbWFzdGVyX3NwZWVkX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9vZ3JlX21hZ2knLCAnb2dyZV9tYWdpX2Zyb3N0X2FybW9yJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfc2F0eXJfaGVsbGNhbGxlcicsICdzYXR5cl9oZWxsY2FsbGVyX3VuaG9seV9hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfZW5yYWdlZF93aWxka2luJywgJ2VucmFnZWRfd2lsZGtpbl90b3VnaG5lc3NfYXVyYScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZWNyb25vbWljb25fYXJjaGVyXzEnLCAnbmVjcm9ub21pY29uX2FyY2hlcl9hb2UnKVxuICAgICAgICBdO1xuXG4gICAgICAgIG15LnByb3RvdHlwZS5hdmFpbGFibGVEZWJ1ZmZzID0gW1xuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdhYmFkZG9uJywgJ2FiYWRkb25fZnJvc3Rtb3VybmUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYWxjaGVtaXN0JywgJ2FsY2hlbWlzdF9hY2lkX3NwcmF5JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2FuY2llbnRfYXBwYXJpdGlvbicsICdhbmNpZW50X2FwcGFyaXRpb25faWNlX3ZvcnRleCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdheGUnLCAnYXhlX2JhdHRsZV9odW5nZXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYmFuZScsICdiYW5lX2VuZmVlYmxlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2JhdHJpZGVyJywgJ2JhdHJpZGVyX3N0aWNreV9uYXBhbG0nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYmVhc3RtYXN0ZXInLCAnYmVhc3RtYXN0ZXJfcHJpbWFsX3JvYXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYm91bnR5X2h1bnRlcicsICdib3VudHlfaHVudGVyX2ppbmFkYScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdicmV3bWFzdGVyJywgJ2JyZXdtYXN0ZXJfdGh1bmRlcl9jbGFwJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2JyZXdtYXN0ZXInLCAnYnJld21hc3Rlcl9kcnVua2VuX2hhemUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYnJpc3RsZWJhY2snLCAnYnJpc3RsZWJhY2tfdmlzY291c19uYXNhbF9nb28nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignYnJvb2Rtb3RoZXInLCAnYnJvb2Rtb3RoZXJfaW5jYXBhY2l0YXRpbmdfYml0ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdjZW50YXVyJywgJ2NlbnRhdXJfc3RhbXBlZGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignY2hlbicsICdjaGVuX3Blbml0ZW5jZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdjcnlzdGFsX21haWRlbicsICdjcnlzdGFsX21haWRlbl9jcnlzdGFsX25vdmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignY3J5c3RhbF9tYWlkZW4nLCAnY3J5c3RhbF9tYWlkZW5fZnJlZXppbmdfZmllbGQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZGF6emxlJywgJ2RhenpsZV93ZWF2ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdkcm93X3JhbmdlcicsICdkcm93X3Jhbmdlcl9mcm9zdF9hcnJvd3MnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZWFydGhfc3Bpcml0JywgJ2VhcnRoX3NwaXJpdF9yb2xsaW5nX2JvdWxkZXInKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignZWxkZXJfdGl0YW4nLCAnZWxkZXJfdGl0YW5fbmF0dXJhbF9vcmRlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdlbGRlcl90aXRhbicsICdlbGRlcl90aXRhbl9lYXJ0aF9zcGxpdHRlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdlbmNoYW50cmVzcycsICdlbmNoYW50cmVzc191bnRvdWNoYWJsZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdlbmNoYW50cmVzcycsICdlbmNoYW50cmVzc19lbmNoYW50JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2ZhY2VsZXNzX3ZvaWQnLCAnZmFjZWxlc3Nfdm9pZF90aW1lX3dhbGsnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignaHVza2FyJywgJ2h1c2thcl9saWZlX2JyZWFrJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2ludm9rZXInLCAnaW52b2tlcl9naG9zdF93YWxrJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2ludm9rZXInLCAnaW52b2tlcl9pY2Vfd2FsbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3aXNwJywgJ3dpc3BfdGV0aGVyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2pha2lybycsICdqYWtpcm9fZHVhbF9icmVhdGgnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignamFraXJvJywgJ2pha2lyb19saXF1aWRfZmlyZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdrZWVwZXJfb2ZfdGhlX2xpZ2h0JywgJ2tlZXBlcl9vZl90aGVfbGlnaHRfYmxpbmRpbmdfbGlnaHQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigna3Vua2thJywgJ2t1bmtrYV90b3JyZW50JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2xpY2gnLCAnbGljaF9mcm9zdF9ub3ZhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ2xpY2gnLCAnbGljaF9mcm9zdF9hcm1vcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdsaWNoJywgJ2xpY2hfY2hhaW5fZnJvc3QnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbGlmZV9zdGVhbGVyJywgJ2xpZmVfc3RlYWxlcl9vcGVuX3dvdW5kcycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdsaW9uJywgJ2xpb25fdm9vZG9vJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ21hZ25hdGF1cicsICdtYWduYXRhdXJfc2tld2VyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ21lZHVzYScsICdtZWR1c2Ffc3RvbmVfZ2F6ZScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdtZWVwbycsICdtZWVwb19nZW9zdHJpa2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbmFnYV9zaXJlbicsICduYWdhX3NpcmVuX3JpcF90aWRlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25pZ2h0X3N0YWxrZXInLCAnbmlnaHRfc3RhbGtlcl92b2lkJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25pZ2h0X3N0YWxrZXInLCAnbmlnaHRfc3RhbGtlcl9jcmlwcGxpbmdfZmVhcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCduaWdodF9zdGFsa2VyJywgJ25pZ2h0X3N0YWxrZXJfZGFya25lc3MnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignb2dyZV9tYWdpJywgJ29ncmVfbWFnaV9pZ25pdGUnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignb21uaWtuaWdodCcsICdvbW5pa25pZ2h0X2RlZ2VuX2F1cmEnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigncGhhbnRvbV9hc3Nhc3NpbicsICdwaGFudG9tX2Fzc2Fzc2luX3N0aWZsaW5nX2RhZ2dlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdwaGFudG9tX2xhbmNlcicsICdwaGFudG9tX2xhbmNlcl9zcGlyaXRfbGFuY2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigncHVkZ2UnLCAncHVkZ2Vfcm90JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3B1Z25hJywgJ3B1Z25hX2RlY3JlcGlmeScpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdxdWVlbm9mcGFpbicsICdxdWVlbm9mcGFpbl9zaGFkb3dfc3RyaWtlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3Jpa2knLCAncmlraV9zbW9rZV9zY3JlZW4nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigncnViaWNrJywgJ3J1Ymlja19mYWRlX2JvbHQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2FuZF9raW5nJywgJ3NhbmRraW5nX2VwaWNlbnRlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCduZXZlcm1vcmUnLCAnbmV2ZXJtb3JlX2RhcmtfbG9yZCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzaGFkb3dfc2hhbWFuJywgJ3NoYWRvd19zaGFtYW5fdm9vZG9vJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NrZWxldG9uX2tpbmcnLCAnc2tlbGV0b25fa2luZ19oZWxsZmlyZV9ibGFzdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdza2VsZXRvbl9raW5nJywgJ3NrZWxldG9uX2tpbmdfcmVpbmNhcm5hdGlvbicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdza3l3cmF0aF9tYWdlJywgJ3NreXdyYXRoX21hZ2VfY29uY3Vzc2l2ZV9zaG90JyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NreXdyYXRoX21hZ2UnLCAnc2t5d3JhdGhfbWFnZV9hbmNpZW50X3NlYWwnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2xhcmRhcicsICdzbGFyZGFyX3NsaXRoZXJlZW5fY3J1c2gnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc2xhcmRhcicsICdzbGFyZGFyX2FtcGxpZnlfZGFtYWdlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3NsYXJrJywgJ3NsYXJrX2Vzc2VuY2Vfc2hpZnQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignc25pcGVyJywgJ3NuaXBlcl9zaHJhcG5lbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCdzcGVjdHJlJywgJ3NwZWN0cmVfc3BlY3RyYWxfZGFnZ2VyJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3N0b3JtX3NwaXJpdCcsICdzdG9ybV9zcGlyaXRfb3ZlcmxvYWQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndGVtcGxhcl9hc3Nhc3NpbicsICd0ZW1wbGFyX2Fzc2Fzc2luX21lbGQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndGlkZWh1bnRlcicsICd0aWRlaHVudGVyX2d1c2gnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndGlua2VyJywgJ3Rpbmtlcl9sYXNlcicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd0cmVhbnQnLCAndHJlYW50X2xlZWNoX3NlZWQnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndHVzaycsICd0dXNrX2Zyb3plbl9zaWdpbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd1bmR5aW5nJywgJ3VuZHlpbmdfZmxlc2hfZ29sZW0nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndXJzYScsICd1cnNhX2VhcnRoc2hvY2snKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmVuZ2VmdWxzcGlyaXQnLCAndmVuZ2VmdWxzcGlyaXRfd2F2ZV9vZl90ZXJyb3InKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmVuZ2VmdWxzcGlyaXQnLCAndmVuZ2VmdWxzcGlyaXRfY29tbWFuZF9hdXJhJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3Zlbm9tYW5jZXInLCAndmVub21hbmNlcl92ZW5vbW91c19nYWxlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3Zlbm9tYW5jZXInLCAndmVub21hbmNlcl9wb2lzb25fc3RpbmcnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmlwZXInLCAndmlwZXJfcG9pc29uX2F0dGFjaycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd2aXBlcicsICd2aXBlcl9jb3Jyb3NpdmVfc2tpbicpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd2aXBlcicsICd2aXBlcl92aXBlcl9zdHJpa2UnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbigndmlzYWdlJywgJ3Zpc2FnZV9ncmF2ZV9jaGlsbCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCd3YXJsb2NrJywgJ3dhcmxvY2tfdXBoZWF2YWwnKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignd2VhdmVyJywgJ3dlYXZlcl90aGVfc3dhcm0nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignd2luZHJ1bm5lcicsICd3aW5kcnVubmVyX3dpbmRydW4nKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignd2ludGVyX3d5dmVybicsICd3aW50ZXJfd3l2ZXJuX2FyY3RpY19idXJuJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ3dpbnRlcl93eXZlcm4nLCAnd2ludGVyX3d5dmVybl9zcGxpbnRlcl9ibGFzdCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX2dob3N0JywgJ2dob3N0X2Zyb3N0X2F0dGFjaycpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX3BvbGFyX2Z1cmJvbGdfdXJzYV93YXJyaW9yJywgJ3BvbGFyX2Z1cmJvbGdfdXJzYV93YXJyaW9yX3RodW5kZXJfY2xhcCcpLFxuICAgICAgICAgICAgbmV3IG15LnByb3RvdHlwZS5CdWZmT3B0aW9uKCducGNfZG90YV9uZXV0cmFsX29ncmVfbWFnaScsICdvZ3JlX21hZ2lfZnJvc3RfYXJtb3InKSxcbiAgICAgICAgICAgIG5ldyBteS5wcm90b3R5cGUuQnVmZk9wdGlvbignbnBjX2RvdGFfbmV1dHJhbF9zYXR5cl90cmlja3N0ZXInLCAnc2F0eXJfdHJpY2tzdGVyX3B1cmdlJyksXG4gICAgICAgICAgICBuZXcgbXkucHJvdG90eXBlLkJ1ZmZPcHRpb24oJ25wY19kb3RhX25ldXRyYWxfZW5yYWdlZF93aWxka2luJywgJ2VucmFnZWRfd2lsZGtpbl90b3JuYWRvJylcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIG15LnByb3RvdHlwZS5pdGVtT3B0aW9uc0FyciA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG15LnByb3RvdHlwZS52YWxpZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBteS5wcm90b3R5cGUuaXRlbU9wdGlvbnNBcnIucHVzaChuZXcgbXkucHJvdG90eXBlLkl0ZW1JbnB1dChteS5wcm90b3R5cGUudmFsaWRJdGVtc1tpXSwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBteS5wcm90b3R5cGUudmFsaWRJdGVtc1tpXV0uZGlzcGxheW5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGl0ZW1CdWZmcyA9IFsnYXNzYXVsdCcsICdhbmNpZW50X2phbmdnbycsICdoZWFkZHJlc3MnLCAnbWVrYW5zbScsICdwaXBlJywgJ3Jpbmdfb2ZfYXF1aWxhJywgJ3ZsYWRtaXInLCAncmluZ19vZl9iYXNpbGl1cycsICdidWNrbGVyJywgJ3NvbGFyX2NyZXN0J107XG4gICAgICAgIG15LnByb3RvdHlwZS5pdGVtQnVmZk9wdGlvbnMgPSBpdGVtQnVmZnMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbXkucHJvdG90eXBlLkl0ZW1JbnB1dChpdGVtLCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaXRlbURlYnVmZnMgPSBbXG4gICAgICAgICAgICB7aXRlbTogJ2Fzc2F1bHQnLCBkZWJ1ZmY6IG51bGx9LFxuICAgICAgICAgICAge2l0ZW06ICdzaGl2YXNfZ3VhcmQnLCBkZWJ1ZmY6IG51bGx9LFxuICAgICAgICAgICAge2l0ZW06ICdkZXNvbGF0b3InLCBkZWJ1ZmY6IG51bGx9LFxuICAgICAgICAgICAge2l0ZW06ICdtZWRhbGxpb25fb2ZfY291cmFnZScsIGRlYnVmZjogbnVsbH0sXG4gICAgICAgICAgICB7aXRlbTogJ3JhZGlhbmNlJywgZGVidWZmOiBudWxsfSxcbiAgICAgICAgICAgIHtpdGVtOiAnc2hlZXBzdGljaycsIGRlYnVmZjogbnVsbH0sXG4gICAgICAgICAgICB7aXRlbTogJ3ZlaWxfb2ZfZGlzY29yZCcsIGRlYnVmZjogbnVsbH0sXG4gICAgICAgICAgICB7aXRlbTogJ3NvbGFyX2NyZXN0JywgZGVidWZmOiBudWxsfSxcbiAgICAgICAgICAgIHtpdGVtOiAnc2lsdmVyX2VkZ2UnLCBkZWJ1ZmY6IHtpZDogJ3NoYWRvd193YWxrJywgbmFtZTogJ1NoYWRvdyBXYWxrJ319LFxuICAgICAgICAgICAge2l0ZW06ICdzaWx2ZXJfZWRnZScsIGRlYnVmZjoge2lkOiAnbWFpbScsIG5hbWU6ICdMZXNzZXIgTWFpbSd9fVxuICAgICAgICBdXG4gICAgICAgIG15LnByb3RvdHlwZS5pdGVtRGVidWZmT3B0aW9ucyA9IGl0ZW1EZWJ1ZmZzLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IG15LnByb3RvdHlwZS5JdGVtSW5wdXQoaXRlbS5pdGVtLCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW0uaXRlbV0uZGlzcGxheW5hbWUsIGl0ZW0uZGVidWZmKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICB9XG59XG5cbm15LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKEhFUk9EQVRBX1BBVEgsSVRFTURBVEFfUEFUSCxVTklUREFUQV9QQVRILCBjYWxsYmFjaykge1xuICAgIG15LnByb3RvdHlwZS5udW1SZXNvdXJjZXNMb2FkZWQgPSAwO1xuICAgIG15LnByb3RvdHlwZS5nZXRKU09OKEhFUk9EQVRBX1BBVEgsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIG15LnByb3RvdHlwZS5oZXJvRGF0YSA9IGRhdGE7XG4gICAgICAgIG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19jaGVuJ10uYWJpbGl0aWVzWzJdLmJlaGF2aW9yLnB1c2goJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9OT1RfTEVBUk5BQkxFJyk7XG4gICAgICAgIG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19uZXZlcm1vcmUnXS5hYmlsaXRpZXNbMV0uYmVoYXZpb3IucHVzaCgnRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX25ldmVybW9yZSddLmFiaWxpdGllc1syXS5iZWhhdmlvci5wdXNoKCdET1RBX0FCSUxJVFlfQkVIQVZJT1JfTk9UX0xFQVJOQUJMRScpO1xuICAgICAgICBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fbW9ycGhsaW5nJ10uYWJpbGl0aWVzWzNdLmJlaGF2aW9yLnB1c2goJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9OT1RfTEVBUk5BQkxFJyk7XG4gICAgICAgIG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19vZ3JlX21hZ2knXS5hYmlsaXRpZXNbM10uYmVoYXZpb3IucHVzaCgnRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX3RlY2hpZXMnXS5hYmlsaXRpZXNbNF0uYmVoYXZpb3IucHVzaCgnRE9UQV9BQklMSVRZX0JFSEFWSU9SX05PVF9MRUFSTkFCTEUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX2JlYXN0bWFzdGVyJ10uYWJpbGl0aWVzWzJdLmJlaGF2aW9yLnB1c2goJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9OT1RfTEVBUk5BQkxFJyk7XG4gICAgICAgIHZhciBpbmRleCA9IG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19sb25lX2RydWlkJ10uYWJpbGl0aWVzWzNdLmJlaGF2aW9yLmluZGV4T2YoJ0RPVEFfQUJJTElUWV9CRUhBVklPUl9ISURERU4nKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX2xvbmVfZHJ1aWQnXS5hYmlsaXRpZXNbM10uYmVoYXZpb3Iuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgXG4gICAgICAgIGluZGV4ID0gbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX2FiYWRkb24nXS5hYmlsaXRpZXNbMl0uYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX2FiYWRkb24nXS5hYmlsaXRpZXNbMl0uYmVoYXZpb3Iuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgXG4gICAgICAgIGluZGV4ID0gbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX3Jpa2knXS5hYmlsaXRpZXNbMl0uYmVoYXZpb3IuaW5kZXhPZignRE9UQV9BQklMSVRZX0JFSEFWSU9SX1BBU1NJVkUnKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmhlcm9EYXRhWyducGNfZG90YV9oZXJvX3Jpa2knXS5hYmlsaXRpZXNbMl0uYmVoYXZpb3Iuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGggaW4gbXkucHJvdG90eXBlLmhlcm9EYXRhKSB7XG4gICAgICAgICAgICBteS5wcm90b3R5cGUuSGVyb09wdGlvbnMucHVzaChuZXcgbXkucHJvdG90eXBlLkhlcm9PcHRpb24oaC5yZXBsYWNlKCducGNfZG90YV9oZXJvXycsICcnKSwgbXkucHJvdG90eXBlLmhlcm9EYXRhW2hdLmRpc3BsYXluYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICBteS5wcm90b3R5cGUub25SZXNvdXJjZUxvYWRlZChjYWxsYmFjayk7XG4gICAgfSk7XG4gICAgbXkucHJvdG90eXBlLmdldEpTT04oSVRFTURBVEFfUEFUSCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgbXkucHJvdG90eXBlLml0ZW1EYXRhID0gZGF0YTtcbiAgICAgICAgbXkucHJvdG90eXBlLm9uUmVzb3VyY2VMb2FkZWQoY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIG15LnByb3RvdHlwZS5nZXRKU09OKFVOSVREQVRBX1BBVEgsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIG15LnByb3RvdHlwZS51bml0RGF0YSA9IGRhdGE7XG4gICAgICAgIG15LnByb3RvdHlwZS5vblJlc291cmNlTG9hZGVkKGNhbGxiYWNrKTtcbiAgICB9KTtcbn1cblxubXkucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICBvdXQgPSBvdXQgfHwge307XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgIGlmICghb2JqKVxuICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gbXkucHJvdG90eXBlLmV4dGVuZChvdXRba2V5XSwgb2JqW2tleV0pO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG5teS5wcm90b3R5cGUuZ2V0SlNPTiA9IGZ1bmN0aW9uICh1cmwsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuXG4gICAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID49IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyA8IDQwMCkge1xuICAgICAgICAgICAgLy8gU3VjY2VzcyFcbiAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXZSByZWFjaGVkIG91ciB0YXJnZXQgc2VydmVyLCBidXQgaXQgcmV0dXJuZWQgYW4gZXJyb3JcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlcmUgd2FzIGEgY29ubmVjdGlvbiBlcnJvciBvZiBzb21lIHNvcnRcbiAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICByZXF1ZXN0LnNlbmQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSEVST0NBTENVTEFUT1I7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGtvID0gcmVxdWlyZSgnLi9oZXJvY2FsY19rbm9ja291dCcpO1xuICAgIFxudmFyIG15ID0gcmVxdWlyZShcIi4vaGVyb2NhbGNfY29yZVwiKTtcblxubXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YSA9IHtcbiAgICBjaGFvc19rbmlnaHRfcGhhbnRhc206IHtcbiAgICAgICAgaGVybzogJ2NoYW9zX2tuaWdodCcsXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnQ2hhb3MgS25pZ2h0IFBoYW50YXNtJyxcbiAgICAgICAgdXNlX3NlbGVjdGVkX2hlcm86IGZhbHNlLFxuICAgICAgICBtYXhfbGV2ZWw6IDMsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ291dGdvaW5nX2RhbWFnZScsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2luY29taW5nX2RhbWFnZSdcbiAgICB9LFxuICAgIG5hZ2Ffc2lyZW5fbWlycm9yX2ltYWdlOiB7XG4gICAgICAgIGhlcm86ICduYWdhX3NpcmVuJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdOYWdhIFNpcmVuIE1pcnJvciBJbWFnZScsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiBmYWxzZSxcbiAgICAgICAgbWF4X2xldmVsOiA0LFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdvdXRnb2luZ19kYW1hZ2UnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2U6ICdpbmNvbWluZ19kYW1hZ2UnXG4gICAgfSxcbiAgICBkYXJrX3NlZXJfd2FsbF9vZl9yZXBsaWNhOiB7XG4gICAgICAgIGhlcm86ICdkYXJrX3NlZXInLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ0RhcmsgU2VlciBXYWxsIG9mIFJlcGxpY2EnLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogdHJ1ZSxcbiAgICAgICAgbWF4X2xldmVsOiAzLFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdyZXBsaWNhX2RhbWFnZV9vdXRnb2luZycsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ3JlcGxpY2FfZGFtYWdlX2luY29taW5nJyxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlX3NjZXB0ZXI6ICdyZXBsaWNhX2RhbWFnZV9vdXRnb2luZ19zY2VwdGVyJ1xuICAgIH0sXG4gICAgbW9ycGhsaW5nX3JlcGxpY2F0ZToge1xuICAgICAgICBoZXJvOiAnbW9ycGhsaW5nJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdNb3JwaGxpbmcgUmVwbGljYXRlJyxcbiAgICAgICAgdXNlX3NlbGVjdGVkX2hlcm86IHRydWUsXG4gICAgICAgIG1heF9sZXZlbDogMyxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnaWxsdXNpb25fZGFtYWdlX291dF9wY3QnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2VfaW5fcGN0J1xuICAgIH0sXG4gICAgcGhhbnRvbV9sYW5jZXJfZG9wcGVsd2Fsazoge1xuICAgICAgICBoZXJvOiAncGhhbnRvbV9sYW5jZXInLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1BoYW50b20gTGFuY2VyIERvcHBlbHdhbGsnLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogZmFsc2UsXG4gICAgICAgIG1heF9sZXZlbDogNCxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnaWxsdXNpb25fZGFtYWdlX291dF9wY3QnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2VfaW5fcGN0JyAgICAgICAgXG4gICAgfSxcbiAgICBwaGFudG9tX2xhbmNlcl9qdXh0YXBvc2U6IHtcbiAgICAgICAgaGVybzogJ3BoYW50b21fbGFuY2VyJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdQaGFudG9tIExhbmNlciBKdXh0YXBvc2UnLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogZmFsc2UsXG4gICAgICAgIG1heF9sZXZlbDogNCxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnaWxsdXNpb25fZGFtYWdlX291dF9wY3QnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2VfaW5fcGN0JyAgICAgICAgXG4gICAgfSxcbiAgICBwaGFudG9tX2xhbmNlcl9zcGlyaXRfbGFuY2U6IHtcbiAgICAgICAgaGVybzogJ3BoYW50b21fbGFuY2VyJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdQaGFudG9tIExhbmNlciBTcGlyaXQgTGFuY2UnLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogZmFsc2UsXG4gICAgICAgIG1heF9sZXZlbDogNCxcbiAgICAgICAgb3V0Z29pbmdfZGFtYWdlOiAnaWxsdXNpb25fZGFtYWdlX291dF9wY3QnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2VfaW5fcGN0JyAgICAgICAgXG4gICAgfSxcbiAgICBzaGFkb3dfZGVtb25fZGlzcnVwdGlvbjoge1xuICAgICAgICBoZXJvOiAnc2hhZG93X2RlbW9uJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdTaGFkb3cgRGVtb24gRGlzcnVwdGlvbicsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiB0cnVlLFxuICAgICAgICBtYXhfbGV2ZWw6IDQsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ2lsbHVzaW9uX291dGdvaW5nX2RhbWFnZScsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2luY29taW5nX2RhbWFnZScgICAgICAgIFxuICAgIH0sXG4gICAgc3BlY3RyZV9oYXVudDoge1xuICAgICAgICBoZXJvOiAnc3BlY3RyZScsXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnU3BlY3RyZSBIYXVudCcsXG4gICAgICAgIHVzZV9zZWxlY3RlZF9oZXJvOiBmYWxzZSxcbiAgICAgICAgbWF4X2xldmVsOiAzLFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2Vfb3V0Z29pbmcnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2U6ICdpbGx1c2lvbl9kYW1hZ2VfaW5jb21pbmcnICAgICAgICBcbiAgICB9LFxuICAgIHRlcnJvcmJsYWRlX2Nvbmp1cmVfaW1hZ2U6IHtcbiAgICAgICAgaGVybzogJ3RlcnJvcmJsYWRlJyxcbiAgICAgICAgZGlzcGxheU5hbWU6ICdUZXJyb3JibGFkZSBDb25qdXJlIEltYWdlJyxcbiAgICAgICAgdXNlX3NlbGVjdGVkX2hlcm86IGZhbHNlLFxuICAgICAgICBtYXhfbGV2ZWw6IDQsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZTogJ2lsbHVzaW9uX291dGdvaW5nX2RhbWFnZScsXG4gICAgICAgIGluY29taW5nX2RhbWFnZTogJ2lsbHVzaW9uX2luY29taW5nX2RhbWFnZScgICAgICAgIFxuICAgIH0sXG4gICAgdGVycm9yYmxhZGVfcmVmbGVjdGlvbjoge1xuICAgICAgICBoZXJvOiAndGVycm9yYmxhZGUnLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1RlcnJvcmJsYWRlIFJlZmxlY3Rpb24nLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogdHJ1ZSxcbiAgICAgICAgbWF4X2xldmVsOiA0LFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2U6ICdpbGx1c2lvbl9vdXRnb2luZ19kYW1hZ2UnICAgICBcbiAgICB9LFxuICAgIGl0ZW1fbWFudGE6IHtcbiAgICAgICAgaGVybzogJycsXG4gICAgICAgIGlzX2l0ZW06IHRydWUsXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnTWFudGEgU3R5bGUgSWxsdXNpb24nLFxuICAgICAgICB1c2Vfc2VsZWN0ZWRfaGVybzogdHJ1ZSxcbiAgICAgICAgbWF4X2xldmVsOiAxLFxuICAgICAgICBvdXRnb2luZ19kYW1hZ2VfbWVsZWU6ICdpbWFnZXNfZG9fZGFtYWdlX3BlcmNlbnRfbWVsZWUnLFxuICAgICAgICBpbmNvbWluZ19kYW1hZ2VfbWVsZWU6ICdpbWFnZXNfdGFrZV9kYW1hZ2VfcGVyY2VudF9tZWxlZScsXG4gICAgICAgIG91dGdvaW5nX2RhbWFnZV9yYW5nZWQ6ICdpbWFnZXNfZG9fZGFtYWdlX3BlcmNlbnRfcmFuZ2VkJyxcbiAgICAgICAgaW5jb21pbmdfZGFtYWdlX3JhbmdlZDogJ2ltYWdlc190YWtlX2RhbWFnZV9wZXJjZW50X3JhbmdlZCdcbiAgICB9XG59XG5cbm15LnByb3RvdHlwZS5JbGx1c2lvblZpZXdNb2RlbCA9IGZ1bmN0aW9uIChoLCBwLCBhYmlsaXR5TGV2ZWwpIHtcbiAgICB2YXIgc2VsZiA9IG5ldyBteS5wcm90b3R5cGUuSGVyb0NhbGN1bGF0b3JNb2RlbCgwKTtcbiAgICBzZWxmLnBhcmVudCA9IHA7XG4gICAgc2VsZi5pbnZlbnRvcnkgPSBzZWxmLnBhcmVudC5pbnZlbnRvcnk7XG4gICAgc2VsZi5pbGx1c2lvblR5cGUgPSBrby5vYnNlcnZhYmxlKHNlbGYucGFyZW50LnNlbGVjdGVkSWxsdXNpb24oKS5pbGx1c2lvbk5hbWUpO1xuICAgIHNlbGYuaWxsdXNpb25EaXNwbGF5TmFtZSA9IGtvLm9ic2VydmFibGUoc2VsZi5wYXJlbnQuc2VsZWN0ZWRJbGx1c2lvbigpLmlsbHVzaW9uRGlzcGxheU5hbWUpO1xuICAgIHNlbGYuaWxsdXNpb25BYmlsaXR5TGV2ZWwoYWJpbGl0eUxldmVsKTtcbiAgICBzZWxmLmlsbHVzaW9uQWJpbGl0eU1heExldmVsID0ga28ub2JzZXJ2YWJsZShteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW3NlbGYucGFyZW50LnNlbGVjdGVkSWxsdXNpb24oKS5pbGx1c2lvbk5hbWVdLm1heF9sZXZlbCk7XG4gICAgaWYgKCFteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW3NlbGYuaWxsdXNpb25UeXBlKCldLnVzZV9zZWxlY3RlZF9oZXJvKSB7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWRIZXJvKG15LnByb3RvdHlwZS5maW5kV2hlcmUoc2VsZi5hdmFpbGFibGVIZXJvZXMoKSwge2hlcm9OYW1lOiBzZWxmLnBhcmVudC5zZWxlY3RlZElsbHVzaW9uKCkuYmFzZUhlcm99KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZWxmLnNlbGVjdGVkSGVybyhzZWxmLnBhcmVudC5zZWxlY3RlZEhlcm8oKSk7XG4gICAgfVxuICAgIHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoc2VsZi5wYXJlbnQuc2VsZWN0ZWRIZXJvTGV2ZWwoKSk7XG4gICAgc2VsZi5oZXJvID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBrby53cmFwLmZyb21KUyhteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIHNlbGYuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWVdKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsID0gc2VsZi5wYXJlbnQuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWw7XG4gICAgc2VsZi50b3RhbEFnaSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZWFnaWxpdHlcbiAgICAgICAgICAgICAgICArIHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGVhZ2lsaXR5Z2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ2FnaScpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpICogMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QWdpbGl0eSgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5pbnRTdG9sZW4gPSBrby5vYnNlcnZhYmxlKDApLmV4dGVuZCh7IG51bWVyaWM6IDAgfSk7XG4gICAgc2VsZi50b3RhbEludCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZWludGVsbGlnZW5jZSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGVpbnRlbGxpZ2VuY2VnYWluICogKHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSAtIDEpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0cmlidXRlcygnaW50JykgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsKCkgKiAyXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRJbnRlbGxpZ2VuY2UoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKSArIHNlbGYuaW50U3RvbGVuKClcbiAgICAgICAgICAgICAgICkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsU3RyID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGViYXNlc3RyZW5ndGggXG4gICAgICAgICAgICAgICAgKyBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlc3RyZW5ndGhnYWluICogKHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSAtIDEpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0cmlidXRlcygnc3RyJykgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsKCkgKiAyXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRTdHJlbmd0aCgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbihoZXJvLCBhYmlsaXR5LCBhdHRyaWJ1dGVOYW1lLCBsZXZlbCkge1xuICAgICAgICBpZiAoYWJpbGl0eSA9PSAnaXRlbV9tYW50YScpIHtcbiAgICAgICAgICAgIHZhciBhYmlsaXR5T2JqID0gbXkucHJvdG90eXBlLml0ZW1EYXRhW2FiaWxpdHldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFiaWxpdHlPYmogPSBteS5wcm90b3R5cGUuZmluZFdoZXJlKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgaGVyb10uYWJpbGl0aWVzLCB7bmFtZTogYWJpbGl0eX0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuZmluZFdoZXJlKGFiaWxpdHlPYmouYXR0cmlidXRlcywge25hbWU6IGF0dHJpYnV0ZU5hbWV9KTtcbiAgICAgICAgaWYgKGxldmVsID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGV2ZWwgPiBhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYXR0cmlidXRlLnZhbHVlW2xldmVsIC0gMV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHNlbGYuZ2V0SW5jb21pbmdEYW1hZ2VNdWx0aXBsaWVyID0gZnVuY3Rpb24oaWxsdXNpb25UeXBlLCBoYXNTY2VwdGVyLCBhdHRhY2tUeXBlKSB7XG4gICAgICAgIGlmIChpbGx1c2lvblR5cGUgPT0gJ2l0ZW1fbWFudGEnKSB7XG4gICAgICAgICAgICBpZiAoYXR0YWNrVHlwZSA9PSAnRE9UQV9VTklUX0NBUF9NRUxFRV9BVFRBQ0snKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLmlsbHVzaW9uVHlwZSgpXS5oZXJvLCBzZWxmLmlsbHVzaW9uVHlwZSgpLCBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW2lsbHVzaW9uVHlwZV0uaW5jb21pbmdfZGFtYWdlX21lbGVlLCBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsKCkpLzEwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5pbGx1c2lvblR5cGUoKV0uaGVybywgc2VsZi5pbGx1c2lvblR5cGUoKSwgbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtpbGx1c2lvblR5cGVdLmluY29taW5nX2RhbWFnZV9yYW5nZWQsIHNlbGYuaWxsdXNpb25BYmlsaXR5TGV2ZWwoKSkvMTAwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLmlsbHVzaW9uVHlwZSgpXS5oZXJvLCBzZWxmLmlsbHVzaW9uVHlwZSgpLCBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW2lsbHVzaW9uVHlwZV0uaW5jb21pbmdfZGFtYWdlLCBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsKCkpLzEwMClcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmdldE91dGdvaW5nRGFtYWdlTXVsdGlwbGllciA9IGZ1bmN0aW9uKGlsbHVzaW9uVHlwZSwgaGFzU2NlcHRlciwgYXR0YWNrVHlwZSkge1xuICAgICAgICBpZiAoaWxsdXNpb25UeXBlID09ICdpdGVtX21hbnRhJykge1xuICAgICAgICAgICAgaWYgKGF0dGFja1R5cGUgPT0gJ0RPVEFfVU5JVF9DQVBfTUVMRUVfQVRUQUNLJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMSArIHNlbGYuZ2V0QWJpbGl0eUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbc2VsZi5pbGx1c2lvblR5cGUoKV0uaGVybywgc2VsZi5pbGx1c2lvblR5cGUoKSwgbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtpbGx1c2lvblR5cGVdLm91dGdvaW5nX2RhbWFnZV9tZWxlZSwgc2VsZi5pbGx1c2lvbkFiaWxpdHlMZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLmlsbHVzaW9uVHlwZSgpXS5oZXJvLCBzZWxmLmlsbHVzaW9uVHlwZSgpLCBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW2lsbHVzaW9uVHlwZV0ub3V0Z29pbmdfZGFtYWdlX3JhbmdlZCwgc2VsZi5pbGx1c2lvbkFiaWxpdHlMZXZlbCgpKS8xMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICgxICsgc2VsZi5nZXRBYmlsaXR5QXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLmlsbHVzaW9uVHlwZSgpXS5oZXJvLCBzZWxmLmlsbHVzaW9uVHlwZSgpLCBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhW2lsbHVzaW9uVHlwZV0ub3V0Z29pbmdfZGFtYWdlLCBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsKCkpLzEwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLmJhc2VEYW1hZ2UgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtNYXRoLmZsb29yKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgc2VsZi5zZWxlY3RlZEhlcm8oKS5oZXJvTmFtZV0uYXR0YWNrZGFtYWdlbWluICsgc2VsZi50b3RhbEF0dHJpYnV0ZShzZWxmLnByaW1hcnlBdHRyaWJ1dGUoKSkgKyBzZWxmLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlKCkudG90YWwpXG4gICAgICAgICAgICAgICAgKiBzZWxmLmdldE91dGdvaW5nRGFtYWdlTXVsdGlwbGllcihzZWxmLmlsbHVzaW9uVHlwZSgpLCBmYWxzZSwgc2VsZi5oZXJvKCkuYXR0YWNrdHlwZSgpKSxcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgc2VsZi5zZWxlY3RlZEhlcm8oKS5oZXJvTmFtZV0uYXR0YWNrZGFtYWdlbWF4ICsgc2VsZi50b3RhbEF0dHJpYnV0ZShzZWxmLnByaW1hcnlBdHRyaWJ1dGUoKSkgKyBzZWxmLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlKCkudG90YWwpXG4gICAgICAgICAgICAgICAgKiBzZWxmLmdldE91dGdvaW5nRGFtYWdlTXVsdGlwbGllcihzZWxmLmlsbHVzaW9uVHlwZSgpLCBmYWxzZSwgc2VsZi5oZXJvKCkuYXR0YWNrdHlwZSgpKV07XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5kYW1hZ2UgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtzZWxmLmJhc2VEYW1hZ2UoKVswXSxcbiAgICAgICAgICAgICAgICBzZWxmLmJhc2VEYW1hZ2UoKVsxXV07XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5laHBQaHlzaWNhbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZWhwID0gKHNlbGYuaGVhbHRoKCkgKiAoMSArIC4wNiAqIHNlbGYudG90YWxBcm1vclBoeXNpY2FsKCkpKSAvICgxIC0gKDEgLSAoc2VsZi5pbnZlbnRvcnkuZ2V0RXZhc2lvbigpICogc2VsZi5hYmlsaXR5KCkuZ2V0RXZhc2lvbigpKSkpXG4gICAgICAgIGVocCAqPSAoc2VsZi5pbnZlbnRvcnkuYWN0aXZlSXRlbXMoKS5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtyZXR1cm4gaXRlbS5pdGVtID09ICdtYXNrX29mX21hZG5lc3MnO30pID8gKDEgLyAxLjMpIDogMSk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuZ2V0SW5jb21pbmdEYW1hZ2VNdWx0aXBsaWVyKHNlbGYuaWxsdXNpb25UeXBlKCksIGZhbHNlLCBzZWxmLmhlcm8oKS5hdHRhY2t0eXBlKCkpKTtcbiAgICAgICAgcmV0dXJuIGVocC50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuZWhwTWFnaWNhbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZWhwID0gc2VsZi5oZWFsdGgoKSAvIHNlbGYudG90YWxNYWdpY1Jlc2lzdGFuY2VQcm9kdWN0KCk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuZ2V0SW5jb21pbmdEYW1hZ2VNdWx0aXBsaWVyKHNlbGYuaWxsdXNpb25UeXBlKCksIGZhbHNlLCBzZWxmLmhlcm8oKS5hdHRhY2t0eXBlKCkpKTtcbiAgICAgICAgcmV0dXJuIGVocC50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYudG90YWxBcm1vclBoeXNpY2FsID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBcm1vckJhc2VSZWR1Y3Rpb24oKSAqIHNlbGYuZGVidWZmcy5nZXRBcm1vckJhc2VSZWR1Y3Rpb24oKSAqIChteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIHNlbGYuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWVdLmFybW9ycGh5c2ljYWwgKyBzZWxmLnRvdGFsQWdpKCkgKiAuMTQpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBcm1vcigpICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBcm1vclJlZHVjdGlvbigpICsgc2VsZi5idWZmcy5nZXRBcm1vcigpICsgc2VsZi5kZWJ1ZmZzLmdldEFybW9yUmVkdWN0aW9uKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5pYXMgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbCA9IHBhcnNlRmxvYXQoc2VsZi50b3RhbEFnaSgpKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dGFja1NwZWVkKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEF0dGFja1NwZWVkKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QXR0YWNrU3BlZWRSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi51bml0KCkuYWJpbGl0eSgpLmdldEF0dGFja1NwZWVkKCk7IFxuICAgICAgICBpZiAodmFsIDwgLTgwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTgwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCA+IDQwMCkge1xuICAgICAgICAgICAgcmV0dXJuIDQwMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHNlbGY7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGtvID0gcmVxdWlyZSgnLi9oZXJvY2FsY19rbm9ja291dCcpO1xuXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfaGVyb19kYW1hZ2VcIik7XG5cbm15LnByb3RvdHlwZS50b3RhbEV4cCA9IFswLCAyMDAsIDUwMCwgOTAwLCAxNDAwLCAyMDAwLCAyNjAwLCAzNDAwLCA0NDAwLCA1NDAwLCA2MDAwLCA4MjAwLCA5MDAwLCAxMDQwMCwgMTE5MDAsIDEzNTAwLCAxNTIwMCwgMTcwMDAsIDE4OTAwLCAyMDkwMCwgMjMwMDAsIDI1MjAwLCAyNzUwMCwgMjk5MDAsIDMyNDAwXTtcbm15LnByb3RvdHlwZS5uZXh0TGV2ZWxFeHAgPSBbMjAwLCAzMDAsIDQwMCwgNTAwLCA2MDAsIDYwMCwgODAwLCAxMDAwLCAxMDAwLCA2MDAsIDIyMDAsIDgwMCwgMTQwMCwgMTUwMCwgMTYwMCwgMTcwMCwgMTgwMCwgMTkwMCwgMjAwMCwgMjEwMCwgMjIwMCwgMjMwMCwgMjQwMCwgMjUwMCwgJyZtZGFzaDsnXTtcbm15LnByb3RvdHlwZS5kaWZmUHJvcGVydGllcyA9IFtcbiAgICAndG90YWxBZ2knLFxuICAgICd0b3RhbEludCcsXG4gICAgJ3RvdGFsU3RyJyxcbiAgICAnaGVhbHRoJyxcbiAgICAnaGVhbHRocmVnZW4nLFxuICAgICdtYW5hJyxcbiAgICAnbWFuYXJlZ2VuJyxcbiAgICAndG90YWxBcm1vclBoeXNpY2FsJyxcbiAgICAndG90YWxBcm1vclBoeXNpY2FsUmVkdWN0aW9uJyxcbiAgICAndG90YWxNb3ZlbWVudFNwZWVkJyxcbiAgICAndG90YWxUdXJuUmF0ZScsXG4gICAgJ2Jhc2VEYW1hZ2UnLFxuICAgICdib251c0RhbWFnZScsXG4gICAgJ2JvbnVzRGFtYWdlUmVkdWN0aW9uJyxcbiAgICAnZGFtYWdlJyxcbiAgICAndG90YWxNYWdpY1Jlc2lzdGFuY2VQcm9kdWN0JyxcbiAgICAndG90YWxNYWdpY1Jlc2lzdGFuY2UnLFxuICAgICdiYXQnLFxuICAgICdpYXMnLFxuICAgICdhdHRhY2tUaW1lJyxcbiAgICAnYXR0YWNrc1BlclNlY29uZCcsXG4gICAgJ2V2YXNpb24nLFxuICAgICdlaHBQaHlzaWNhbCcsXG4gICAgJ2VocE1hZ2ljYWwnLFxuICAgICdiYXNoJyxcbiAgICAnY3JpdENoYW5jZScsXG4gICAgLy8nY3JpdERhbWFnZScsXG4gICAgJ21pc3NDaGFuY2UnLFxuICAgICd0b3RhbGF0dGFja3JhbmdlJyxcbiAgICAndmlzaW9ucmFuZ2VkYXknLFxuICAgICd2aXNpb25yYW5nZW5pZ2h0JyxcbiAgICAnbGlmZXN0ZWFsJ1xuXTtcblxubXkucHJvdG90eXBlLklsbHVzaW9uT3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGRpc3BsYXluYW1lLCBiYXNlSGVybykge1xuICAgIHRoaXMuaWxsdXNpb25OYW1lID0gbmFtZTtcbiAgICB0aGlzLmlsbHVzaW9uRGlzcGxheU5hbWUgPSBkaXNwbGF5bmFtZTtcbiAgICB0aGlzLmJhc2VIZXJvID0gYmFzZUhlcm87XG59O1xuXG5teS5wcm90b3R5cGUuY3JlYXRlSWxsdXNpb25PcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gW107XG4gICAgZm9yICh2YXIgaCBpbiBteS5wcm90b3R5cGUuaWxsdXNpb25EYXRhKSB7XG4gICAgICAgIG9wdGlvbnMucHVzaChuZXcgbXkucHJvdG90eXBlLklsbHVzaW9uT3B0aW9uKGgsIG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbaF0uZGlzcGxheU5hbWUsIG15LnByb3RvdHlwZS5pbGx1c2lvbkRhdGFbaF0uaGVybykpO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxubXkucHJvdG90eXBlLkhlcm9Nb2RlbCA9IGZ1bmN0aW9uIChoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuaGVyb0lkID0ga28ub2JzZXJ2YWJsZShoKTtcbiAgICBzZWxmLnNlbGVjdGVkSGVyb0xldmVsID0ga28ub2JzZXJ2YWJsZSgxKTtcbiAgICBzZWxmLmludmVudG9yeSA9IG5ldyBteS5wcm90b3R5cGUuSW52ZW50b3J5Vmlld01vZGVsKHNlbGYpO1xuICAgIHNlbGYuc2VsZWN0ZWRJbnZlbnRvcnkgPSBrby5vYnNlcnZhYmxlKC0xKTtcbiAgICBzZWxmLmJ1ZmZzID0gbmV3IG15LnByb3RvdHlwZS5CdWZmVmlld01vZGVsKCk7XG4gICAgc2VsZi5idWZmcy5oYXNTY2VwdGVyID0gc2VsZi5pbnZlbnRvcnkuaGFzU2NlcHRlcjtcbiAgICBzZWxmLmRlYnVmZnMgPSBuZXcgbXkucHJvdG90eXBlLkJ1ZmZWaWV3TW9kZWwoKTtcbiAgICAvKnNlbGYuaGVybyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGtvLm1hcHBpbmcuZnJvbUpTKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb18nICsgc2VsZi5oZXJvSWQoKV0pO1xuICAgIH0pOyovXG4gICAgc2VsZi5oZXJvRGF0YSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBteS5wcm90b3R5cGUuaGVyb0RhdGFbJ25wY19kb3RhX2hlcm9fJyArIHNlbGYuaGVyb0lkKCldO1xuICAgIH0pO1xuICAgIHNlbGYuaGVyb0NvbXBhcmUgPSBrby5vYnNlcnZhYmxlKHNlbGYpO1xuICAgIHNlbGYuZW5lbXkgPSBrby5vYnNlcnZhYmxlKHNlbGYpO1xuICAgIHNlbGYudW5pdCA9IGtvLm9ic2VydmFibGUoc2VsZik7XG4gICAgc2VsZi5jbG9uZSA9IGtvLm9ic2VydmFibGUoc2VsZik7XG4gICAgc2VsZi5pbGx1c2lvbnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuYXZhaWxhYmxlSWxsdXNpb25zID0ga28ub2JzZXJ2YWJsZUFycmF5KG15LnByb3RvdHlwZS5jcmVhdGVJbGx1c2lvbk9wdGlvbnMoKSk7XG4gICAgc2VsZi5zZWxlY3RlZElsbHVzaW9uID0ga28ub2JzZXJ2YWJsZShzZWxmLmF2YWlsYWJsZUlsbHVzaW9ucygpWzBdKTtcbiAgICBzZWxmLmlsbHVzaW9uQWJpbGl0eUxldmVsID0ga28ub2JzZXJ2YWJsZSgxKTtcbiAgICBzZWxmLmlsbHVzaW9uQWJpbGl0eU1heExldmVsID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbXkucHJvdG90eXBlLmlsbHVzaW9uRGF0YVtzZWxmLnNlbGVjdGVkSWxsdXNpb24oKS5pbGx1c2lvbk5hbWVdLm1heF9sZXZlbDtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLnNraWxsUG9pbnRIaXN0b3J5ID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG4gICAgXG4gICAgc2VsZi5hYmlsaXR5ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYSA9IG5ldyBteS5wcm90b3R5cGUuQWJpbGl0eU1vZGVsKGtvLm9ic2VydmFibGVBcnJheShKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlbGYuaGVyb0RhdGEoKS5hYmlsaXRpZXMpKSksIHNlbGYpO1xuICAgICAgICBzd2l0Y2ggKHNlbGYuaGVyb0lkKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2VhcnRoX3NwaXJpdCc6XG4gICAgICAgICAgICBjYXNlICdvZ3JlX21hZ2knOlxuICAgICAgICAgICAgICAgIGEuX2FiaWxpdGllc1szXS5sZXZlbCgxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW52b2tlcic6XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDY7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuX2FiaWxpdGllc1tpXS5sZXZlbCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnNraWxsUG9pbnRIaXN0b3J5LnJlbW92ZUFsbCgpO1xuICAgICAgICBhLmhhc1NjZXB0ZXIgPSBzZWxmLmludmVudG9yeS5oYXNTY2VwdGVyXG4gICAgICAgIHJldHVybiBhO1xuICAgIH0pO1xuXG4gICAgc2VsZi5hdmFpbGFibGVTa2lsbFBvaW50cyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGMgPSBzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN3aXRjaChzZWxmLmFiaWxpdHkoKS5hYmlsaXRpZXMoKVtpXS5hYmlsaXR5dHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RPVEFfQUJJTElUWV9UWVBFX1VMVElNQVRFJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaGVyb0lkKCkgPT09ICdpbnZva2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSA9PSAxKSAmJiAocGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSA8IDIpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSA9PSAyKSAmJiAocGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSA8IDcpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSA9PSAzKSAmJiAocGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSA8IDExKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpW2ldLmxldmVsKCkgPT0gNCkgJiYgKHBhcnNlSW50KHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSkgPCAxNykpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFiaWxpdHkoKS5sZXZlbERvd25BYmlsaXR5KGksIG51bGwsIG51bGwsIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuaGVyb0lkKCkgPT09ICdtZWVwbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKS0xKSAqIDcgKyAzID4gcGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmxldmVsRG93bkFiaWxpdHkoaSwgbnVsbCwgbnVsbCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSAqIDUgKyAxID4gcGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmxldmVsRG93bkFiaWxpdHkoaSwgbnVsbCwgbnVsbCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2VsZi5hYmlsaXR5KCkuYWJpbGl0aWVzKClbaV0ubGV2ZWwoKSAqIDIgLSAxID4gcGFyc2VJbnQoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hYmlsaXR5KCkubGV2ZWxEb3duQWJpbGl0eShpLCBudWxsLCBudWxsLCBzZWxmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzZWxmLnNraWxsUG9pbnRIaXN0b3J5KCkubGVuZ3RoID4gYykge1xuICAgICAgICAgICAgc2VsZi5hYmlsaXR5KCkubGV2ZWxEb3duQWJpbGl0eShzZWxmLnNraWxsUG9pbnRIaXN0b3J5KClbc2VsZi5za2lsbFBvaW50SGlzdG9yeSgpLmxlbmd0aC0xXSwgbnVsbCwgbnVsbCwgc2VsZik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGMtc2VsZi5za2lsbFBvaW50SGlzdG9yeSgpLmxlbmd0aDtcbiAgICB9LCB0aGlzKTtcbiAgICBzZWxmLnByaW1hcnlBdHRyaWJ1dGUgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdiA9IHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGVwcmltYXJ5O1xuICAgICAgICBpZiAodiA9PT0gJ0RPVEFfQVRUUklCVVRFX0FHSUxJVFknKSByZXR1cm4gJ2FnaSc7XG4gICAgICAgIGlmICh2ID09PSAnRE9UQV9BVFRSSUJVVEVfSU5URUxMRUNUJykgcmV0dXJuICdpbnQnO1xuICAgICAgICBpZiAodiA9PT0gJ0RPVEFfQVRUUklCVVRFX1NUUkVOR1RIJykgcmV0dXJuICdzdHInO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEV4cCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBteS5wcm90b3R5cGUudG90YWxFeHBbc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMV07XG4gICAgfSk7XG4gICAgc2VsZi5uZXh0TGV2ZWxFeHAgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbXkucHJvdG90eXBlLm5leHRMZXZlbEV4cFtzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxXTtcbiAgICB9KTtcbiAgICBzZWxmLnN0YXJ0aW5nQXJtb3IgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGViYXNlYWdpbGl0eSAqIC4xNCArIHNlbGYuaGVyb0RhdGEoKS5hcm1vcnBoeXNpY2FsKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYucmVzcGF3blRpbWUgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gNSArIDMuOCAqIHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsQXR0cmlidXRlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgaWYgKGEgPT09ICdhZ2knKSByZXR1cm4gcGFyc2VGbG9hdChzZWxmLnRvdGFsQWdpKCkpO1xuICAgICAgICBpZiAoYSA9PT0gJ2ludCcpIHJldHVybiBwYXJzZUZsb2F0KHNlbGYudG90YWxJbnQoKSk7XG4gICAgICAgIGlmIChhID09PSAnc3RyJykgcmV0dXJuIHBhcnNlRmxvYXQoc2VsZi50b3RhbFN0cigpKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBzZWxmLnRvdGFsQWdpID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlYmFzZWFnaWxpdHlcbiAgICAgICAgICAgICAgICArIHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGVhZ2lsaXR5Z2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ2FnaScpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpICogMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QWdpbGl0eSgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5pbnRTdG9sZW4gPSBrby5vYnNlcnZhYmxlKDApLmV4dGVuZCh7IG51bWVyaWM6IDAgfSk7XG4gICAgc2VsZi50b3RhbEludCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZWJhc2VpbnRlbGxpZ2VuY2UgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmhlcm9EYXRhKCkuYXR0cmlidXRlaW50ZWxsaWdlbmNlZ2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ2ludCcpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpICogMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0SW50ZWxsaWdlbmNlKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEFsbFN0YXRzUmVkdWN0aW9uKCkgKyBzZWxmLmludFN0b2xlbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbFN0ciA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLmF0dHJpYnV0ZWJhc2VzdHJlbmd0aCBcbiAgICAgICAgICAgICAgICArIHNlbGYuaGVyb0RhdGEoKS5hdHRyaWJ1dGVzdHJlbmd0aGdhaW4gKiAoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMSkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRBdHRyaWJ1dGVzKCdzdHInKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwoKSAqIDJcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldFN0cmVuZ3RoKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0U3RyZW5ndGhSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuaGVhbHRoID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuc3RhdHVzaGVhbHRoICsgTWF0aC5mbG9vcihzZWxmLnRvdGFsU3RyKCkpICogMjAgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRIZWFsdGgoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0SGVhbHRoKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5oZWFsdGhyZWdlbiA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWFsdGhSZWdlbkF1cmEgPSBbc2VsZi5pbnZlbnRvcnkuZ2V0SGVhbHRoUmVnZW5BdXJhLCBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRIZWFsdGhSZWdlbkF1cmFdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZm4pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgIG9iai52YWx1ZSArPSBtZW1vLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge3ZhbHVlOiAwLCBleGNsdWRlTGlzdDogW119KTtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuc3RhdHVzaGVhbHRocmVnZW4gKyBzZWxmLnRvdGFsU3RyKCkgKiAuMDMgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRIZWFsdGhSZWdlbigpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0SGVhbHRoUmVnZW4oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRIZWFsdGhSZWdlbigpXG4gICAgICAgICAgICAgICAgKyBoZWFsdGhSZWdlbkF1cmEudmFsdWVcbiAgICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5tYW5hID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmhlcm9EYXRhKCkuc3RhdHVzbWFuYVxuICAgICAgICAgICAgICAgICsgc2VsZi50b3RhbEludCgpICogMTJcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldE1hbmEoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0TWFuYSgpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYubWFuYXJlZ2VuID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgoc2VsZi5oZXJvRGF0YSgpLnN0YXR1c21hbmFyZWdlbiBcbiAgICAgICAgICAgICAgICArIHNlbGYudG90YWxJbnQoKSAqIC4wNCBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldE1hbmFSZWdlbigpKSBcbiAgICAgICAgICAgICAgICAqICgxICsgc2VsZi5pbnZlbnRvcnkuZ2V0TWFuYVJlZ2VuUGVyY2VudCgpKSBcbiAgICAgICAgICAgICAgICArIChzZWxmLmhlcm9JZCgpID09PSAnY3J5c3RhbF9tYWlkZW4nID8gc2VsZi5hYmlsaXR5KCkuZ2V0TWFuYVJlZ2VuQXJjYW5lQXVyYSgpICogMiA6IHNlbGYuYnVmZnMuZ2V0TWFuYVJlZ2VuQXJjYW5lQXVyYSgpKVxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0TWFuYVJlZ2VuQmxvb2RzdG9uZSgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRNYW5hUmVnZW4oKVxuICAgICAgICAgICAgICAgIC0gc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRNYW5hUmVnZW5SZWR1Y3Rpb24oKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcm1vckF1cmEgPSBbc2VsZi5pbnZlbnRvcnkuZ2V0QXJtb3JBdXJhLCBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRBcm1vckF1cmFdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZm4pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge3ZhbHVlOjAsIGF0dHJpYnV0ZXM6W119KTtcbiAgICAgICAgdmFyIGFybW9yUmVkdWN0aW9uID0gW3NlbGYuZW5lbXkoKS5pbnZlbnRvcnkuZ2V0QXJtb3JSZWR1Y3Rpb24sIHNlbGYuZGVidWZmcy5pdGVtQnVmZnMuZ2V0QXJtb3JSZWR1Y3Rpb25dLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZm4pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgIG9iai52YWx1ZSArPSBtZW1vLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge3ZhbHVlOiAwLCBleGNsdWRlTGlzdDogW119KTtcbiAgICAgICAgcmV0dXJuIChzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFybW9yQmFzZVJlZHVjdGlvbigpICogc2VsZi5kZWJ1ZmZzLmdldEFybW9yQmFzZVJlZHVjdGlvbigpICogKHNlbGYuaGVyb0RhdGEoKS5hcm1vcnBoeXNpY2FsICsgc2VsZi50b3RhbEFnaSgpICogLjE0KVxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXJtb3IoKVxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmludmVudG9yeS5nZXRBcm1vckF1cmEoKS52YWx1ZVxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldEFybW9yUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEFybW9yKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QXJtb3JSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRBcm1vcigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRBcm1vcigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QXJtb3JSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRBcm1vckF1cmEoKS52YWx1ZVxuICAgICAgICAgICAgICAgICsgYXJtb3JBdXJhLnZhbHVlXG4gICAgICAgICAgICAgICAgKyBhcm1vclJlZHVjdGlvbi52YWx1ZVxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmRlYnVmZnMuZ2V0QXJtb3JSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbFJlZHVjdGlvbiA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEFybW9yID0gc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKTtcbiAgICAgICAgaWYgKHRvdGFsQXJtb3IgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICgoMC4wNiAqIHNlbGYudG90YWxBcm1vclBoeXNpY2FsKCkpIC8gKDEgKyAwLjA2ICogc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLSgoMC4wNiAqIC1zZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAvICgxICsgMC4wNiAqIC1zZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHNlbGYudG90YWxNb3ZlbWVudFNwZWVkID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIE1JTl9NT1ZFU1BFRUQgPSAxMDA7XG4gICAgICAgIHZhciBtcyA9IChzZWxmLmFiaWxpdHkoKS5zZXRNb3ZlbWVudFNwZWVkKCkgPiAwID8gc2VsZi5hYmlsaXR5KCkuc2V0TW92ZW1lbnRTcGVlZCgpIDogc2VsZi5idWZmcy5zZXRNb3ZlbWVudFNwZWVkKCkpO1xuICAgICAgICBpZiAobXMgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbW92ZW1lbnRTcGVlZFBlcmNlbnQgPSBbc2VsZi5pbnZlbnRvcnkuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnQsIHNlbGYuYnVmZnMuaXRlbUJ1ZmZzLmdldE1vdmVtZW50U3BlZWRQZXJjZW50XS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IGZuKG1lbW8uZXhjbHVkZUxpc3QpO1xuICAgICAgICAgICAgICAgIG9iai52YWx1ZSArPSBtZW1vLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9LCB7dmFsdWU6MCwgZXhjbHVkZUxpc3Q6W119KTtcbiAgICAgICAgICAgIHZhciBtb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbiA9IFtzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uLCBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IGZuKG1lbW8uZXhjbHVkZUxpc3QpO1xuICAgICAgICAgICAgICAgIG9iai52YWx1ZSArPSBtZW1vLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9LCB7dmFsdWU6MCwgZXhjbHVkZUxpc3Q6W119KTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChcbiAgICAgICAgICAgICAgICBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmlzU2hlZXBlZCgpIHx8IHNlbGYuZGVidWZmcy5pdGVtQnVmZnMuaXNTaGVlcGVkKCkgPyAxNDAgOlxuICAgICAgICAgICAgICAgIChzZWxmLmhlcm9EYXRhKCkubW92ZW1lbnRzcGVlZCArIHNlbGYuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRGbGF0KCkrIHNlbGYuYWJpbGl0eSgpLmdldE1vdmVtZW50U3BlZWRGbGF0KCkpICogXG4gICAgICAgICAgICAgICAgKDEgLy8rIHNlbGYuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgICAgKyBtb3ZlbWVudFNwZWVkUGVyY2VudC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICsgbW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24udmFsdWVcbiAgICAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgICAgLy8rIHNlbGYuZW5lbXkoKS5pbnZlbnRvcnkuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24oKSBcbiAgICAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24oKSBcbiAgICAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnQoKSBcbiAgICAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgKyBzZWxmLnVuaXQoKS5hYmlsaXR5KCkuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnQoKSBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAsIE1JTl9NT1ZFU1BFRUQpLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsVHVyblJhdGUgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS5tb3ZlbWVudHR1cm5yYXRlIFxuICAgICAgICAgICAgICAgICogKDEgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldFR1cm5SYXRlUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldFR1cm5SYXRlUmVkdWN0aW9uKCkpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuYmFzZURhbWFnZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IHNlbGYudG90YWxBdHRyaWJ1dGUoc2VsZi5wcmltYXJ5QXR0cmlidXRlKCkpLFxuICAgICAgICAgICAgYWJpbGl0eUJhc2VEYW1hZ2UgPSBzZWxmLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlKCksXG4gICAgICAgICAgICBtaW5EYW1hZ2UgPSBzZWxmLmhlcm9EYXRhKCkuYXR0YWNrZGFtYWdlbWluLFxuICAgICAgICAgICAgbWF4RGFtYWdlID0gc2VsZi5oZXJvRGF0YSgpLmF0dGFja2RhbWFnZW1heDtcbiAgICAgICAgcmV0dXJuIFtNYXRoLmZsb29yKChtaW5EYW1hZ2UgKyB0b3RhbEF0dHJpYnV0ZSArIGFiaWxpdHlCYXNlRGFtYWdlLnRvdGFsKSAqIHNlbGYuYWJpbGl0eSgpLmdldFNlbGZCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSAqIHNlbGYuZGVidWZmcy5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSAqIGFiaWxpdHlCYXNlRGFtYWdlLm11bHRpcGxpZXIpLFxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoKG1heERhbWFnZSArIHRvdGFsQXR0cmlidXRlICsgYWJpbGl0eUJhc2VEYW1hZ2UudG90YWwpICogc2VsZi5hYmlsaXR5KCkuZ2V0U2VsZkJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSAqIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QmFzZURhbWFnZVJlZHVjdGlvblBjdCgpICogc2VsZi5kZWJ1ZmZzLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSAqIHNlbGYuZGVidWZmcy5pdGVtQnVmZnMuZ2V0QmFzZURhbWFnZVJlZHVjdGlvblBjdCgpICogYWJpbGl0eUJhc2VEYW1hZ2UubXVsdGlwbGllcildO1xuICAgIH0pO1xuICAgIHNlbGYuYmFzZURhbWFnZUF2ZyA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5iYXNlRGFtYWdlKClbMF0gKyBzZWxmLmJhc2VEYW1hZ2UoKVsxXSkgLyAyO1xuICAgIH0pO1xuICAgIHNlbGYuYmFzZURhbWFnZU1pbiA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJhc2VEYW1hZ2UoKVswXTtcbiAgICB9KTtcbiAgICBzZWxmLmJhc2VEYW1hZ2VNYXggPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5iYXNlRGFtYWdlKClbMV07XG4gICAgfSk7XG4gICAgc2VsZi5ib251c0RhbWFnZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoKHNlbGYuaW52ZW50b3J5LmdldEJvbnVzRGFtYWdlKCkudG90YWxcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlKCkudG90YWxcbiAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2UoKS50b3RhbFxuICAgICAgICAgICAgICAgICsgTWF0aC5mbG9vcigoc2VsZi5iYXNlRGFtYWdlKClbMF0gKyBzZWxmLmJhc2VEYW1hZ2UoKVsxXSkgLyAyIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAoc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50KHNlbGYuaW52ZW50b3J5LmdldEJvbnVzRGFtYWdlUGVyY2VudCgpKS50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRCb251c0RhbWFnZVBlcmNlbnQoKS50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKyBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgICAoc2VsZi5oZXJvRGF0YSgpLmF0dGFja3R5cGUgPT0gJ0RPVEFfVU5JVF9DQVBfUkFOR0VEX0FUVEFDSycgXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoc2VsZi5oZXJvSWQoKSA9PSAnZHJvd19yYW5nZXInKSA/IHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUHJlY2lzaW9uQXVyYSgpLnRvdGFsWzBdICogc2VsZi50b3RhbEFnaSgpIDogc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZVByZWNpc2lvbkF1cmEoKS50b3RhbFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgICgoc2VsZi5oZXJvSWQoKSA9PSAncmlraScpID8gc2VsZi5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2VCYWNrc3RhYigpLnRvdGFsWzBdICogc2VsZi50b3RhbEFnaSgpIDogMClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApICogc2VsZi5hYmlsaXR5KCkuZ2V0U2VsZkJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKVxuICAgICAgICAgICAgICAgICAgKiBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKVxuICAgICAgICAgICAgICAgICAgKiBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKSk7XG4gICAgfSk7XG4gICAgc2VsZi5ib251c0RhbWFnZVJlZHVjdGlvbiA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUmVkdWN0aW9uKCkgKyBzZWxmLmRlYnVmZnMuZ2V0Qm9udXNEYW1hZ2VSZWR1Y3Rpb24oKSk7XG4gICAgfSk7XG4gICAgc2VsZi5kYW1hZ2VBdmcgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5iYXNlRGFtYWdlKClbMV0pIC8gMiArIHNlbGYuYm9udXNEYW1hZ2UoKTtcbiAgICB9KTtcbiAgICBzZWxmLmRhbWFnZU1pbiA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJhc2VEYW1hZ2UoKVswXSArIHNlbGYuYm9udXNEYW1hZ2UoKTtcbiAgICB9KTtcbiAgICBzZWxmLmRhbWFnZU1heCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJhc2VEYW1hZ2UoKVsxXSArIHNlbGYuYm9udXNEYW1hZ2UoKTtcbiAgICB9KTtcbiAgICBzZWxmLmRhbWFnZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbc2VsZi5iYXNlRGFtYWdlKClbMF0gKyBzZWxmLmJvbnVzRGFtYWdlKCksXG4gICAgICAgICAgICAgICAgc2VsZi5iYXNlRGFtYWdlKClbMV0gKyBzZWxmLmJvbnVzRGFtYWdlKCldO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxNYWdpY1Jlc2lzdGFuY2VQcm9kdWN0ID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgxIC0gc2VsZi5oZXJvRGF0YSgpLm1hZ2ljYWxyZXNpc3RhbmNlIC8gMTAwKSBcbiAgICAgICAgICAgICAgICAqIHNlbGYuaW52ZW50b3J5LmdldE1hZ2ljUmVzaXN0KClcbiAgICAgICAgICAgICAgICAqIHNlbGYuYWJpbGl0eSgpLmdldE1hZ2ljUmVzaXN0KClcbiAgICAgICAgICAgICAgICAqIHNlbGYuYnVmZnMuZ2V0TWFnaWNSZXNpc3QoKVxuICAgICAgICAgICAgICAgICogc2VsZi5pbnZlbnRvcnkuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb25TZWxmKClcbiAgICAgICAgICAgICAgICAqIHNlbGYuZW5lbXkoKS5pbnZlbnRvcnkuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICogc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKiBzZWxmLmRlYnVmZnMuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICogc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbigpO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxNYWdpY1Jlc2lzdGFuY2UgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKCgxIC0gc2VsZi50b3RhbE1hZ2ljUmVzaXN0YW5jZVByb2R1Y3QoKSkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5iYXQgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWJpbGl0eUJBVCA9IHNlbGYuYWJpbGl0eSgpLmdldEJBVCgpO1xuICAgICAgICBpZiAoYWJpbGl0eUJBVCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhYmlsaXR5QkFUO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLmhlcm9EYXRhKCkuYXR0YWNrcmF0ZTtcbiAgICB9KTtcbiAgICBzZWxmLmlhcyA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhdHRhY2tTcGVlZCA9IFtzZWxmLmludmVudG9yeS5nZXRBdHRhY2tTcGVlZCwgc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0QXR0YWNrU3BlZWRdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZm4pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgIG9iai52YWx1ZSArPSBtZW1vLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge3ZhbHVlOjAsIGV4Y2x1ZGVMaXN0OltdfSk7XG4gICAgICAgIHZhciBhdHRhY2tTcGVlZFJlZHVjdGlvbiA9IFtzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldEF0dGFja1NwZWVkUmVkdWN0aW9uLCBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGZuKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gZm4obWVtby5leGNsdWRlTGlzdCk7XG4gICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt2YWx1ZTowLCBleGNsdWRlTGlzdDogW119KTtcbiAgICAgICAgdmFyIHZhbCA9IHBhcnNlRmxvYXQoc2VsZi50b3RhbEFnaSgpKSBcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0YWNrU3BlZWQoKSBcbiAgICAgICAgICAgICAgICArIGF0dGFja1NwZWVkLnZhbHVlXG4gICAgICAgICAgICAgICAgKyBhdHRhY2tTcGVlZFJlZHVjdGlvbi52YWx1ZVxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldEF0dGFja1NwZWVkUmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZCgpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5idWZmcy5nZXRBdHRhY2tTcGVlZCgpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYudW5pdCgpLmFiaWxpdHkoKS5nZXRBdHRhY2tTcGVlZCgpOyBcbiAgICAgICAgaWYgKHZhbCA8IC04MCkge1xuICAgICAgICAgICAgcmV0dXJuIC04MDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgPiA1MDApIHtcbiAgICAgICAgICAgIHJldHVybiA1MDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbC50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuYXR0YWNrVGltZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5iYXQoKSAvICgxICsgc2VsZi5pYXMoKSAvIDEwMCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5hdHRhY2tzUGVyU2Vjb25kID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgoMSArIHNlbGYuaWFzKCkgLyAxMDApIC8gc2VsZi5iYXQoKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmV2YXNpb24gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2VsZi5lbmVteSgpLmludmVudG9yeS5pc1NoZWVwZWQoKSB8fCBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmlzU2hlZXBlZCgpKSByZXR1cm4gMDtcbiAgICAgICAgdmFyIGUgPSBzZWxmLmFiaWxpdHkoKS5zZXRFdmFzaW9uKCk7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gKGUgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKCgxLShzZWxmLmludmVudG9yeS5nZXRFdmFzaW9uKCkgKiBzZWxmLmFiaWxpdHkoKS5nZXRFdmFzaW9uKCkgKiBzZWxmLmFiaWxpdHkoKS5nZXRFdmFzaW9uQmFja3RyYWNrKCkgKiBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRFdmFzaW9uKCkpKSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHNlbGYuZWhwUGh5c2ljYWwgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXZhc2lvbiA9IHNlbGYuZW5lbXkoKS5pbnZlbnRvcnkuaXNTaGVlcGVkKCkgfHwgc2VsZi5kZWJ1ZmZzLml0ZW1CdWZmcy5pc1NoZWVwZWQoKSA/IDEgOiBzZWxmLmludmVudG9yeS5nZXRFdmFzaW9uKCkgKiBzZWxmLmFiaWxpdHkoKS5nZXRFdmFzaW9uKCkgKiBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRFdmFzaW9uKCk7XG4gICAgICAgIGlmIChzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpID49IDApIHtcbiAgICAgICAgICAgIHZhciBlaHAgPSBzZWxmLmhlYWx0aCgpICogKDEgKyAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlaHAgPSBzZWxmLmhlYWx0aCgpICogKDEgLSAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAvICgxIC0gLjEyICogc2VsZi50b3RhbEFybW9yUGh5c2ljYWwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWhwIC89ICgxIC0gKDEgLSAoZXZhc2lvbiAqIHNlbGYuYWJpbGl0eSgpLmdldEV2YXNpb25CYWNrdHJhY2soKSkpKTtcbiAgICAgICAgZWhwIC89ICgxIC0gcGFyc2VGbG9hdChzZWxmLmVuZW15KCkubWlzc0NoYW5jZSgpKSAvIDEwMCk7XG4gICAgICAgIGVocCAqPSAoc2VsZi5pbnZlbnRvcnkuYWN0aXZlSXRlbXMoKS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7cmV0dXJuIGl0ZW0uaXRlbSA9PSAnbWFza19vZl9tYWRuZXNzJzt9KSA/ICgxIC8gMS4zKSA6IDEpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmFiaWxpdHkoKS5nZXREYW1hZ2VSZWR1Y3Rpb24oKSk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuYnVmZnMuZ2V0RGFtYWdlUmVkdWN0aW9uKCkpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldERhbWFnZUFtcGxpZmljYXRpb24oKSk7XG4gICAgICAgIGVocCAqPSAoMSAvIHNlbGYuZGVidWZmcy5nZXREYW1hZ2VBbXBsaWZpY2F0aW9uKCkpO1xuICAgICAgICByZXR1cm4gZWhwLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5laHBNYWdpY2FsID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVocCA9IHNlbGYuaGVhbHRoKCkgLyBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCgpO1xuICAgICAgICBlaHAgKj0gKHNlbGYuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zKCkuc29tZShmdW5jdGlvbiAoaXRlbSkge3JldHVybiBpdGVtLml0ZW0gPT0gJ21hc2tfb2ZfbWFkbmVzcyc7fSkgPyAoMSAvIDEuMykgOiAxKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5hYmlsaXR5KCkuZ2V0RGFtYWdlUmVkdWN0aW9uKCkpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmJ1ZmZzLmdldERhbWFnZVJlZHVjdGlvbigpKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5hYmlsaXR5KCkuZ2V0RXZhc2lvbkJhY2t0cmFjaygpKTtcbiAgICAgICAgZWhwICo9ICgxIC8gc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXREYW1hZ2VBbXBsaWZpY2F0aW9uKCkpO1xuICAgICAgICBlaHAgKj0gKDEgLyBzZWxmLmRlYnVmZnMuZ2V0RGFtYWdlQW1wbGlmaWNhdGlvbigpKTtcbiAgICAgICAgcmV0dXJuIGVocC50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuYmFzaCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhdHRhY2t0eXBlID0gc2VsZi5oZXJvRGF0YSgpLmF0dGFja3R5cGU7XG4gICAgICAgIHJldHVybiAoKDEgLSAoc2VsZi5pbnZlbnRvcnkuZ2V0QmFzaChhdHRhY2t0eXBlKSAqIHNlbGYuYWJpbGl0eSgpLmdldEJhc2goKSkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuY3JpdENoYW5jZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoKDEgLSAoc2VsZi5pbnZlbnRvcnkuZ2V0Q3JpdENoYW5jZSgpICogc2VsZi5hYmlsaXR5KCkuZ2V0Q3JpdENoYW5jZSgpKSkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgfSk7XG5cbiAgICBteS5wcm90b3R5cGUuSGVyb0RhbWFnZU1peGluKHNlbGYpO1xuICAgIFxuICAgIC8qc2VsZi5jcml0RGFtYWdlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmNyaXRJbmZvKCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyovXG4gICAgc2VsZi5taXNzQ2hhbmNlID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1pc3NEZWJ1ZmYgPSBbc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRNaXNzQ2hhbmNlLCBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldE1pc3NDaGFuY2VdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZm4pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgIG9iai52YWx1ZSAqPSBtZW1vLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge3ZhbHVlOjEsIGV4Y2x1ZGVMaXN0OltdfSk7XG4gICAgICAgIHJldHVybiAoKDEgLSAoc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRNaXNzQ2hhbmNlKCkgKiBzZWxmLmRlYnVmZnMuZ2V0TWlzc0NoYW5jZSgpICogbWlzc0RlYnVmZi52YWx1ZSkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxhdHRhY2tyYW5nZSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhdHRhY2t0eXBlID0gc2VsZi5oZXJvRGF0YSgpLmF0dGFja3R5cGU7XG4gICAgICAgIHJldHVybiBzZWxmLmhlcm9EYXRhKCkuYXR0YWNrcmFuZ2UgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRhY2tSYW5nZSgpICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0YWNrUmFuZ2UoYXR0YWNrdHlwZSkudmFsdWU7XG4gICAgfSk7XG4gICAgc2VsZi52aXNpb25yYW5nZWRheSA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5oZXJvRGF0YSgpLnZpc2lvbmRheXRpbWVyYW5nZSkgKiAoMSArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0VmlzaW9uUmFuZ2VQY3RSZWR1Y3Rpb24oKSArIHNlbGYuZGVidWZmcy5nZXRWaXNpb25SYW5nZVBjdFJlZHVjdGlvbigpKTtcbiAgICB9KTtcbiAgICBzZWxmLnZpc2lvbnJhbmdlbmlnaHQgPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVyb0RhdGEoKS52aXNpb25uaWdodHRpbWVyYW5nZSArIHNlbGYuaW52ZW50b3J5LmdldFZpc2lvblJhbmdlTmlnaHQoKSArIHNlbGYuYWJpbGl0eSgpLmdldFZpc2lvblJhbmdlTmlnaHQoKSkgKiAoMSArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0VmlzaW9uUmFuZ2VQY3RSZWR1Y3Rpb24oKSArIHNlbGYuZGVidWZmcy5nZXRWaXNpb25SYW5nZVBjdFJlZHVjdGlvbigpKTtcbiAgICB9KTtcbiAgICBzZWxmLmxpZmVzdGVhbCA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbCA9IHNlbGYuaW52ZW50b3J5LmdldExpZmVzdGVhbCgpICsgc2VsZi5hYmlsaXR5KCkuZ2V0TGlmZXN0ZWFsKCkgKyBzZWxmLmJ1ZmZzLmdldExpZmVzdGVhbCgpO1xuICAgICAgICBpZiAoc2VsZi5oZXJvRGF0YSgpLmF0dGFja3R5cGUgPT0gJ0RPVEFfVU5JVF9DQVBfTUVMRUVfQVRUQUNLJykge1xuICAgICAgICAgICAgdmFyIGxpZmVzdGVhbEF1cmEgPSBbc2VsZi5pbnZlbnRvcnkuZ2V0TGlmZXN0ZWFsQXVyYSwgc2VsZi5idWZmcy5pdGVtQnVmZnMuZ2V0TGlmZXN0ZWFsQXVyYV0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBmbikge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSBmbihtZW1vLmV4Y2x1ZGVMaXN0KTtcbiAgICAgICAgICAgICAgICBvYmoudmFsdWUgKz0gbWVtby52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSwge3ZhbHVlOiAwLCBleGNsdWRlTGlzdDogW119KTtcbiAgICAgICAgICAgIHRvdGFsICs9IGxpZmVzdGVhbEF1cmEudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0b3RhbCkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmFkZElsbHVzaW9uID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIHNlbGYuaWxsdXNpb25zLnB1c2goa28ub2JzZXJ2YWJsZShuZXcgbXkucHJvdG90eXBlLklsbHVzaW9uVmlld01vZGVsKDAsIHNlbGYsIHNlbGYuaWxsdXNpb25BYmlsaXR5TGV2ZWwoKSkpKTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZGlmZlByb3BlcnRpZXMgPSBteS5wcm90b3R5cGUuZGlmZlByb3BlcnRpZXM7XG4gICAgc2VsZi5kaWZmID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuZGlmZlByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaTtcbiAgICAgICAgc2VsZi5kaWZmW3NlbGYuZGlmZlByb3BlcnRpZXNbaW5kZXhdXSA9IHNlbGYuZ2V0RGlmZkZ1bmN0aW9uKHNlbGYuZGlmZlByb3BlcnRpZXNbaW5kZXhdKTtcbiAgICB9XG59O1xuXG5teS5wcm90b3R5cGUuSGVyb01vZGVsLnByb3RvdHlwZS5nZXREaWZmRnVuY3Rpb24gPSBmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocHJvcCA9PSAnYmFzZURhbWFnZScpIHtcbiAgICAgICAgICAgIHJldHVybiBbc2VsZltwcm9wXSgpWzBdIC0gc2VsZi5oZXJvQ29tcGFyZSgpW3Byb3BdKClbMF0sIHNlbGZbcHJvcF0oKVsxXSAtIHNlbGYuaGVyb0NvbXBhcmUoKVtwcm9wXSgpWzFdXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmW3Byb3BdKCkgLSBzZWxmLmhlcm9Db21wYXJlKClbcHJvcF0oKTtcbiAgICAgICAgfVxuICAgIH0sIHRoaXMsIHsgZGVmZXJFdmFsdWF0aW9uOiB0cnVlIH0pO1xufVxuXG5teS5wcm90b3R5cGUuSGVyb01vZGVsLnByb3RvdHlwZS5nZXRBYmlsaXR5TGV2ZWxNYXggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhLmFiaWxpdHl0eXBlID09PSAnRE9UQV9BQklMSVRZX1RZUEVfQVRUUklCVVRFUycpIHtcbiAgICAgICAgcmV0dXJuIDEwO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLm5hbWUgPT09ICdpbnZva2VyX3F1YXMnIHx8IGRhdGEubmFtZSA9PT0gJ2ludm9rZXJfd2V4JyB8fCBkYXRhLm5hbWUgPT09ICdpbnZva2VyX2V4b3J0Jykge1xuICAgICAgICByZXR1cm4gNztcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YS5uYW1lID09PSAnaW52b2tlcl9pbnZva2UnKSB7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLm5hbWUgPT09ICdlYXJ0aF9zcGlyaXRfc3RvbmVfY2FsbGVyJyB8fCBkYXRhLm5hbWUgPT09ICdvZ3JlX21hZ2lfdW5yZWZpbmVkX2ZpcmVibGFzdCcpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEuYWJpbGl0eXR5cGUgPT09ICdET1RBX0FCSUxJVFlfVFlQRV9VTFRJTUFURScgfHwgZGF0YS5uYW1lID09PSAna2VlcGVyX29mX3RoZV9saWdodF9yZWNhbGwnIHx8XG4gICAgICAgICAgICAgZGF0YS5uYW1lID09PSAna2VlcGVyX29mX3RoZV9saWdodF9ibGluZGluZ19saWdodCcgfHwgZGF0YS5uYW1lID09PSAnZW1iZXJfc3Bpcml0X2FjdGl2YXRlX2ZpcmVfcmVtbmFudCcgfHxcbiAgICAgICAgICAgICBkYXRhLm5hbWUgPT09ICdsb25lX2RydWlkX3RydWVfZm9ybV9iYXR0bGVfY3J5Jykge1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YS5uYW1lID09PSAncHVja19ldGhlcmVhbF9qYXVudCcgIHx8IGRhdGEubmFtZSA9PT0gJ3NoYWRvd19kZW1vbl9zaGFkb3dfcG9pc29uX3JlbGVhc2UnIHx8XG4gICAgICAgICAgICAgZGF0YS5uYW1lID09PSAndGVtcGxhcl9hc3Nhc3Npbl90cmFwJyB8fCBkYXRhLm5hbWUgPT09ICdzcGVjdHJlX3JlYWxpdHknKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLm5hbWUgPT09ICdpbnZva2VyX2NvbGRfc25hcCcgIHx8IGRhdGEubmFtZSA9PT0gJ2ludm9rZXJfZ2hvc3Rfd2FsaycgfHwgZGF0YS5uYW1lID09PSAnaW52b2tlcl90b3JuYWRvJyB8fCBcbiAgICAgICAgICAgICBkYXRhLm5hbWUgPT09ICdpbnZva2VyX2VtcCcgfHwgZGF0YS5uYW1lID09PSAnaW52b2tlcl9hbGFjcml0eScgfHwgZGF0YS5uYW1lID09PSAnaW52b2tlcl9jaGFvc19tZXRlb3InIHx8IFxuICAgICAgICAgICAgIGRhdGEubmFtZSA9PT0gJ2ludm9rZXJfc3VuX3N0cmlrZScgfHwgZGF0YS5uYW1lID09PSAnaW52b2tlcl9mb3JnZV9zcGlyaXQnIHx8IGRhdGEubmFtZSA9PT0gJ2ludm9rZXJfaWNlX3dhbGwnIHx8IFxuICAgICAgICAgICAgIGRhdGEubmFtZSA9PT0gJ2ludm9rZXJfZGVhZmVuaW5nX2JsYXN0Jykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YS5uYW1lID09PSAndGVjaGllc19taW5lZmllbGRfc2lnbicgfHwgZGF0YS5uYW1lID09PSAndGVjaGllc19mb2N1c2VkX2RldG9uYXRlJykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGtvID0gcmVxdWlyZSgnLi9oZXJvY2FsY19rbm9ja291dCcpO1xuXG52YXIgbXkgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xuXG5teS5wcm90b3R5cGUuQ2xvbmVPcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgZGlzcGxheW5hbWUsIGxldmVscywgaW1hZ2UsIGxldmVsKSB7XG4gICAgdGhpcy5oZXJvTmFtZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKGxldmVscyA+IDApID8gbmFtZSArIChsZXZlbCgpIDw9IGxldmVscyA/IGxldmVsKCkgOiAxKSA6IG5hbWU7XG4gICAgfSk7XG4gICAgdGhpcy5oZXJvRGlzcGxheU5hbWUgPSBkaXNwbGF5bmFtZTtcbiAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgdGhpcy5sZXZlbHMgPSBsZXZlbHM7XG59O1xuXG5teS5wcm90b3R5cGUuQ2xvbmVWaWV3TW9kZWwgPSBmdW5jdGlvbiAoaCxwKSB7XG4gICAgdmFyIHNlbGYgPSBuZXcgbXkucHJvdG90eXBlLkhlcm9Nb2RlbChoKTtcbiAgICBzZWxmLnBhcmVudCA9IHA7XG4gICAgLypzZWxmLnNlbGVjdGVkSGVybyhteS5wcm90b3R5cGUuZmluZFdoZXJlKHNlbGYuYXZhaWxhYmxlSGVyb2VzKCksIHtoZXJvTmFtZTogJ21lZXBvJ30pKTtcbiAgICBzZWxmLmhlcm8gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGtvLndyYXAuZnJvbUpTKG15LnByb3RvdHlwZS5oZXJvRGF0YVsnbnBjX2RvdGFfaGVyb19tZWVwbyddKTtcbiAgICB9KTsqL1xuICAgIHJldHVybiBzZWxmO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5EYW1hZ2VUeXBlQ29sb3IgPSB7XG4gICAgJ3BoeXNpY2FsJzogJyM5NzlhYTInLFxuICAgICdwdXJlJzogJ2dvbGRlbnJvZCcsXG4gICAgJ21hZ2ljJzogJyM0MjhiY2EnLFxuICAgICdkZWZhdWx0JzogJyM5NzlhYTInXG59XG5cbm15LnByb3RvdHlwZS5IZXJvRGFtYWdlTWl4aW4gPSBmdW5jdGlvbiAoc2VsZikge1xuICAgIHNlbGYuY3JpdEluZm8gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3JpdFNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRDcml0U291cmNlKCk7XG4gICAgICAgIG15LnByb3RvdHlwZS5leHRlbmQoY3JpdFNvdXJjZXMsIHNlbGYuYWJpbGl0eSgpLmdldENyaXRTb3VyY2UoKSk7XG4gICAgICAgIG15LnByb3RvdHlwZS5leHRlbmQoY3JpdFNvdXJjZXMsIHNlbGYuYnVmZnMuZ2V0Q3JpdFNvdXJjZSgpKTtcbiAgICAgICAgdmFyIGNyaXRTb3VyY2VzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjcml0U291cmNlcykge1xuICAgICAgICAgICAgdmFyIGVsID0gY3JpdFNvdXJjZXNbcHJvcF07XG4gICAgICAgICAgICBlbC5uYW1lID0gcHJvcFxuICAgICAgICAgICAgY3JpdFNvdXJjZXNBcnJheS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlNdWx0aXBsaWVyKGEsYikge1xuICAgICAgICAgICAgaWYgKGEubXVsdGlwbGllciA8IGIubXVsdGlwbGllcilcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLm11bHRpcGxpZXIgPiBiLm11bHRpcGxpZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBjcml0U291cmNlc0FycmF5LnNvcnQoY29tcGFyZUJ5TXVsdGlwbGllcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIHZhciBjcml0VG90YWwgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNyaXRTb3VyY2VzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDxjcml0U291cmNlc0FycmF5W2pdLmNvdW50OyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgKj0gKDEgLSBjcml0U291cmNlc0FycmF5W2pdLmNoYW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRvdGFsMiA9IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNyaXRTb3VyY2VzQXJyYXlbaV0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgIHRvdGFsMiAqPSAoMSAtIGNyaXRTb3VyY2VzQXJyYXlbaV0uY2hhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvdGFsICo9ICgxIC0gdG90YWwyKTtcbiAgICAgICAgICAgIGNyaXRUb3RhbCArPSB0b3RhbDtcbiAgICAgICAgICAgIGlmIChjcml0U291cmNlc0FycmF5W2ldLmNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOmNyaXRTb3VyY2VzQXJyYXlbaV0uZGlzcGxheW5hbWUgKyAnIHgnICsgY3JpdFNvdXJjZXNBcnJheVtpXS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzpjcml0U291cmNlc0FycmF5W2ldLm11bHRpcGxpZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb3VudCc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ2hhbmNlJzp0b3RhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAnbmFtZSc6Y3JpdFNvdXJjZXNBcnJheVtpXS5kaXNwbGF5bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzpjcml0U291cmNlc0FycmF5W2ldLm11bHRpcGxpZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb3VudCc6Y3JpdFNvdXJjZXNBcnJheVtpXS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ2hhbmNlJzp0b3RhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHJlc3VsdCwgdG90YWw6IGNyaXRUb3RhbCB9O1xuICAgIH0pO1xuXG4gICAgc2VsZi5jbGVhdmVJbmZvID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsZWF2ZVNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRDbGVhdmVTb3VyY2UoKTtcbiAgICAgICAgbXkucHJvdG90eXBlLmV4dGVuZChjbGVhdmVTb3VyY2VzLCBzZWxmLmFiaWxpdHkoKS5nZXRDbGVhdmVTb3VyY2UoKSk7XG4gICAgICAgIG15LnByb3RvdHlwZS5leHRlbmQoY2xlYXZlU291cmNlcywgc2VsZi5idWZmcy5nZXRDbGVhdmVTb3VyY2UoKSk7XG4gICAgICAgIHZhciBjbGVhdmVTb3VyY2VzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjbGVhdmVTb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBjbGVhdmVTb3VyY2VzW3Byb3BdO1xuICAgICAgICAgICAgZWwubmFtZSA9IHByb3BcbiAgICAgICAgICAgIGNsZWF2ZVNvdXJjZXNBcnJheS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlSYWRpdXMoYSxiKSB7XG4gICAgICAgICAgICBpZiAoYS5yYWRpdXMgPCBiLnJhZGl1cylcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLnJhZGl1cyA+IGIucmFkaXVzKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXZlU291cmNlc0FycmF5LnNvcnQoY29tcGFyZUJ5UmFkaXVzKTtcbiAgICAgICAgdmFyIGNsZWF2ZVNvdXJjZXNCeVJhZGl1cyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsZWF2ZVNvdXJjZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDxjbGVhdmVTb3VyY2VzQXJyYXkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xlYXZlU291cmNlc0FycmF5W2pdLnJhZGl1cyA+PSBjbGVhdmVTb3VyY2VzQXJyYXlbaV0ucmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IGNsZWF2ZVNvdXJjZXNBcnJheVtqXS5tYWduaXR1ZGUgKiBjbGVhdmVTb3VyY2VzQXJyYXlbal0uY291bnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYXZlU291cmNlc0J5UmFkaXVzW2NsZWF2ZVNvdXJjZXNBcnJheVtpXS5yYWRpdXNdID0gdG90YWw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGNsZWF2ZVNvdXJjZXNCeVJhZGl1cykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICdyYWRpdXMnOnByb3AsXG4gICAgICAgICAgICAgICAgJ21hZ25pdHVkZSc6Y2xlYXZlU291cmNlc0J5UmFkaXVzW3Byb3BdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICAgIFxuICAgIHNlbGYuYmFzaEluZm8gPSBrby5wdXJlQ29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0YWNrdHlwZSA9IHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlO1xuICAgICAgICB2YXIgYmFzaFNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRCYXNoU291cmNlKGF0dGFja3R5cGUpO1xuICAgICAgICBteS5wcm90b3R5cGUuZXh0ZW5kKGJhc2hTb3VyY2VzLCBzZWxmLmFiaWxpdHkoKS5nZXRCYXNoU291cmNlKCkpO1xuICAgICAgICB2YXIgYmFzaFNvdXJjZXNBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGJhc2hTb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBiYXNoU291cmNlc1twcm9wXTtcbiAgICAgICAgICAgIGVsLm5hbWUgPSBwcm9wXG4gICAgICAgICAgICBiYXNoU291cmNlc0FycmF5LnB1c2goZWwpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVCeUR1cmF0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChhLmR1cmF0aW9uIDwgYi5kdXJhdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLmR1cmF0aW9uID4gYi5kdXJhdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vYmFzaFNvdXJjZXNBcnJheS5zb3J0KGNvbXBhcmVCeUR1cmF0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIGJhc2hUb3RhbCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwO2kgPCBiYXNoU291cmNlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdG90YWwgPSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGJhc2hTb3VyY2VzQXJyYXlbal0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCAqPSAoMSAtIGJhc2hTb3VyY2VzQXJyYXlbal0uY2hhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG90YWwyID0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYmFzaFNvdXJjZXNBcnJheVtpXS5jb3VudDsgaysrKSB7XG4gICAgICAgICAgICAgICAgdG90YWwyICo9ICgxIC0gYmFzaFNvdXJjZXNBcnJheVtpXS5jaGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWwgKj0gKDEgLSB0b3RhbDIpO1xuICAgICAgICAgICAgYmFzaFRvdGFsICs9IHRvdGFsO1xuICAgICAgICAgICAgaWYgKGJhc2hTb3VyY2VzQXJyYXlbaV0ubmFtZSA9PT0gJ3NwaXJpdF9icmVha2VyX2dyZWF0ZXJfYmFzaCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IGJhc2hTb3VyY2VzQXJyYXlbaV0uZGFtYWdlICogc2VsZi50b3RhbE1vdmVtZW50U3BlZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYmFzaFNvdXJjZXNBcnJheVtpXS5kYW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmFzaFNvdXJjZXNBcnJheVtpXS5jb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICduYW1lJzpiYXNoU291cmNlc0FycmF5W2ldLmRpc3BsYXluYW1lLCAvLyArICcgeCcgKyBiYXNoU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzpiYXNoU291cmNlc0FycmF5W2ldLmNoYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6ZCxcbiAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzpiYXNoU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6YmFzaFNvdXJjZXNBcnJheVtpXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAndG90YWxDaGFuY2UnOnRvdGFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICduYW1lJzpiYXNoU291cmNlc0FycmF5W2ldLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzpiYXNoU291cmNlc0FycmF5W2ldLmNoYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6ZCxcbiAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzpiYXNoU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6YmFzaFNvdXJjZXNBcnJheVtpXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAndG90YWxDaGFuY2UnOnRvdGFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzb3VyY2VzOiByZXN1bHQsIHRvdGFsOiBiYXNoVG90YWwgfTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLm9yYlByb2NJbmZvID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGF0dGFja3R5cGUgPSBzZWxmLmhlcm9EYXRhKCkuYXR0YWNrdHlwZTtcbiAgICAgICAgdmFyIGRhbWFnZVNvdXJjZXMgPSBzZWxmLmludmVudG9yeS5nZXRPcmJQcm9jU291cmNlKCk7XG4gICAgICAgIHZhciBkYW1hZ2VTb3VyY2VzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkYW1hZ2VTb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBkYW1hZ2VTb3VyY2VzW3Byb3BdO1xuICAgICAgICAgICAgZWwubmFtZSA9IHByb3BcbiAgICAgICAgICAgIGRhbWFnZVNvdXJjZXNBcnJheS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlEYW1hZ2UoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEucHJpb3JpdHkgPiBiLnByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS5wcmlvcml0eSA8IGIucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS5kYW1hZ2UgPCBiLmRhbWFnZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhLmRhbWFnZSA+IGIuZGFtYWdlKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZGFtYWdlU291cmNlc0FycmF5LnNvcnQoY29tcGFyZUJ5RGFtYWdlKTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIGRhbWFnZVRvdGFsID0gMDtcbiAgICAgICAgZm9yICh2YXIgaT0wIDsgaSA8IGRhbWFnZVNvdXJjZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkYW1hZ2VTb3VyY2VzQXJyYXlbal0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCAqPSAoMSAtIGRhbWFnZVNvdXJjZXNBcnJheVtqXS5jaGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0b3RhbDIgPSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uY291bnQ7IGsrKykge1xuICAgICAgICAgICAgICAgIHRvdGFsMiAqPSAoMSAtIGRhbWFnZVNvdXJjZXNBcnJheVtpXS5jaGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWwgKj0gKDEgLSB0b3RhbDIpO1xuICAgICAgICAgICAgZGFtYWdlVG90YWwgKz0gdG90YWw7XG4gICAgICAgICAgICBpZiAoZGFtYWdlU291cmNlc0FycmF5W2ldLmNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5kaXNwbGF5bmFtZSArICcgeCcgKyBkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uY291bnQsXG4gICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5kYW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgICdjb3VudCc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICd0b3RhbENoYW5jZSc6dG90YWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOmRhbWFnZVNvdXJjZXNBcnJheVtpXS5kaXNwbGF5bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmNoYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6ZGFtYWdlU291cmNlc0FycmF5W2ldLmRhbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzpkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uY291bnQsXG4gICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzpkYW1hZ2VTb3VyY2VzQXJyYXlbaV0uZGFtYWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ2hhbmNlJzp0b3RhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNvdXJjZXM6IHJlc3VsdCwgdG90YWw6IGRhbWFnZVRvdGFsIH07XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXRSZWR1Y2VkRGFtYWdlID0gZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdwaHlzaWNhbCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUgKiAoMSAtICgwLjA2ICogc2VsZi5lbmVteSgpLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAvICgxICsgMC4wNiAqIE1hdGguYWJzKHNlbGYuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWwoKSkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWFnaWMnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlICogKDEgLSBzZWxmLmVuZW15KCkudG90YWxNYWdpY1Jlc2lzdGFuY2UoKSAvIDEwMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3B1cmUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21wb3NpdGUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlICogKDEgLSAoMC4wNiAqIHNlbGYuZW5lbXkoKS50b3RhbEFybW9yUGh5c2ljYWwoKSkgLyAoMSArIDAuMDYgKiBNYXRoLmFicyhzZWxmLmVuZW15KCkudG90YWxBcm1vclBoeXNpY2FsKCkpKSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICo9ICgxIC0gc2VsZi5lbmVteSgpLnRvdGFsTWFnaWNSZXNpc3RhbmNlKCkgLyAxMDApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICo9IHNlbGYuYWJpbGl0eSgpLmdldERhbWFnZUFtcGxpZmljYXRpb24oKSAqIHNlbGYuZGVidWZmcy5nZXREYW1hZ2VBbXBsaWZpY2F0aW9uKCk7XG4gICAgICAgIHJlc3VsdCAqPSBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldERhbWFnZVJlZHVjdGlvbigpICogc2VsZi5lbmVteSgpLmJ1ZmZzLmdldERhbWFnZVJlZHVjdGlvbigpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcbiAgICBzZWxmLmRhbWFnZVRvdGFsSW5mbyA9IGtvLnB1cmVDb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBib251c0RhbWFnZUFycmF5ID0gW1xuICAgICAgICAgICAgc2VsZi5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2UoKS5zb3VyY2VzLFxuICAgICAgICAgICAgc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZSgpLnNvdXJjZXNcbiAgICAgICAgXSxcbiAgICAgICAgYm9udXNEYW1hZ2VQY3RBcnJheSA9IFtcbiAgICAgICAgICAgIHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnNvdXJjZXMsXG4gICAgICAgICAgICBzZWxmLmJ1ZmZzLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnNvdXJjZXNcbiAgICAgICAgXSxcbiAgICAgICAgaXRlbUJvbnVzRGFtYWdlID0gc2VsZi5pbnZlbnRvcnkuZ2V0Qm9udXNEYW1hZ2UoKS5zb3VyY2VzLFxuICAgICAgICBpdGVtQm9udXNEYW1hZ2VQY3QgPSBzZWxmLmJ1ZmZzLml0ZW1CdWZmcy5nZXRCb251c0RhbWFnZVBlcmNlbnQoc2VsZi5pbnZlbnRvcnkuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50KCkpLnNvdXJjZXMsXG4gICAgICAgIGNyaXRTb3VyY2VzID0gc2VsZi5jcml0SW5mbygpLFxuICAgICAgICBhYmlsaXR5T3JiU291cmNlcyA9IHNlbGYuYWJpbGl0eSgpLmdldE9yYlNvdXJjZSgpLFxuICAgICAgICBpdGVtT3JiU291cmNlcyA9IHNlbGYuaW52ZW50b3J5LmdldE9yYlNvdXJjZSgpLFxuICAgICAgICBpdGVtUHJvY09yYlNvdXJjZXMgPSBzZWxmLm9yYlByb2NJbmZvKCksXG4gICAgICAgIGJhc2hTb3VyY2VzID0gc2VsZi5iYXNoSW5mbygpLFxuICAgICAgICBcbiAgICAgICAgYXR0YWNrU291cmNlcyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgYXR0YWNrU291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6ICdCYXNlIEF0dGFjaycsXG4gICAgICAgICAgICBjb29sZG93bjogMVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIHdlYXZlcl9nZW1pbmF0ZV9hdHRhY2tcbiAgICAgICAgaWYgKHNlbGYuaGVyb0lkKCkgPT09ICd3ZWF2ZXInKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHNlbGYuYWJpbGl0eSgpLmFiaWxpdGllcygpLmZpbmQoZnVuY3Rpb24gKGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eS5uYW1lID09PSAnd2VhdmVyX2dlbWluYXRlX2F0dGFjayc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEubGV2ZWwoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNkID0gYS5jb29sZG93blthLmxldmVsKCkgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNrU291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGEuZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29sZG93bjogKDEvY2QpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gZWNob19zYWJyZVxuICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaW52ZW50b3J5Lml0ZW1zKCkuZmluZChmdW5jdGlvbiAobykgeyByZXR1cm4gby5pdGVtID09PSBcImVjaG9fc2FicmVcIiAmJiBvLmVuYWJsZWQoKTsgfSk7XG4gICAgICAgIGlmIChpdGVtICYmIHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlID09PSAnRE9UQV9VTklUX0NBUF9NRUxFRV9BVFRBQ0snKSB7XG4gICAgICAgICAgICB2YXIgaXRlbV9lY2hvX3NhYnJlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtX2VjaG9fc2FicmUnXTtcbiAgICAgICAgICAgIGF0dGFja1NvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogaXRlbV9lY2hvX3NhYnJlLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgIGNvb2xkb3duOiAoMS9pdGVtX2VjaG9fc2FicmUuY29vbGRvd24pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhdHRhY2tzID0gYXR0YWNrU291cmNlcy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHZhciBiYXNlRGFtYWdlID0gKHNlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5iYXNlRGFtYWdlKClbMV0pIC8gMixcbiAgICAgICAgICAgIHRvdGFsRGFtYWdlID0gMCxcbiAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgPSAwLFxuICAgICAgICAgICAgdG90YWxDcml0ID0gMCxcbiAgICAgICAgICAgIGdlbWluYXRlQXR0YWNrID0geyBkYW1hZ2U6IDAsIGRhbWFnZVJlZHVjZWQ6IDAsIGNvb2xkb3duOiA2LCBhY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICBlY2hvU2FicmVBdHRhY2sgPSB7IGRhbWFnZTogMCwgZGFtYWdlUmVkdWNlZDogMCwgY29vbGRvd246IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV9lY2hvX3NhYnJlJ10uY29vbGRvd25bMF0sIGFjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIGRhbWFnZSA9IHtcbiAgICAgICAgICAgICAgICBwdXJlOiAwLFxuICAgICAgICAgICAgICAgIHBoeXNpY2FsOiAwLFxuICAgICAgICAgICAgICAgIG1hZ2ljOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgICBjcml0cyA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBiYXNlIGRhbWFnZVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdCYXNlIERhbWFnZScsXG4gICAgICAgICAgICAgICAgZGFtYWdlOiBiYXNlRGFtYWdlLFxuICAgICAgICAgICAgICAgIGRhbWFnZVR5cGU6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGJhc2VEYW1hZ2UsICdwaHlzaWNhbCcpLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG90YWxEYW1hZ2UgKz0gYmFzZURhbWFnZTtcbiAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gYmFzZURhbWFnZTtcbiAgICAgICAgICAgIGRhbWFnZS5waHlzaWNhbCArPSBiYXNlRGFtYWdlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBib251cyBkYW1hZ2UgZnJvbSBpdGVtc1xuICAgICAgICAgICAgZm9yIChpIGluIGl0ZW1Cb251c0RhbWFnZSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gaXRlbUJvbnVzRGFtYWdlW2ldLmRhbWFnZSppdGVtQm9udXNEYW1hZ2VbaV0uY291bnQgKiBzZWxmLmFiaWxpdHkoKS5nZXRTZWxmQmFzZURhbWFnZVJlZHVjdGlvblBjdCgpICogc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlUmVkdWN0aW9uUGN0KCkgKiBzZWxmLmRlYnVmZnMuaXRlbUJ1ZmZzLmdldEJhc2VEYW1hZ2VSZWR1Y3Rpb25QY3QoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1Cb251c0RhbWFnZVtpXS5kaXNwbGF5bmFtZSArIChpdGVtQm9udXNEYW1hZ2VbaV0uY291bnQgPiAxID8gJyB4JyArIGl0ZW1Cb251c0RhbWFnZVtpXS5jb3VudCA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlOiBpdGVtQm9udXNEYW1hZ2VbaV0uZGFtYWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGl0ZW1Cb251c0RhbWFnZVtpXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgdG90YWxDcml0YWJsZURhbWFnZSArPSBkO1xuICAgICAgICAgICAgICAgIGRhbWFnZVtpdGVtQm9udXNEYW1hZ2VbaV0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYm9udXMgZGFtYWdlIHBlcmNlbnQgZnJvbSBpdGVtc1xuICAgICAgICAgICAgZm9yIChpIGluIGl0ZW1Cb251c0RhbWFnZVBjdCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYmFzZURhbWFnZSAqIGl0ZW1Cb251c0RhbWFnZVBjdFtpXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtQm9udXNEYW1hZ2VQY3RbaV0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogZCxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogaXRlbUJvbnVzRGFtYWdlUGN0W2ldLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCBpdGVtQm9udXNEYW1hZ2VQY3RbaV0uZGFtYWdlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0b3RhbERhbWFnZSArPSBkO1xuICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICBkYW1hZ2VbaXRlbUJvbnVzRGFtYWdlUGN0W2ldLmRhbWFnZVR5cGVdICs9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJvbnVzIGRhbWFnZSBmcm9tIGFiaWxpdGllcyBhbmQgYnVmZnNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9udXNEYW1hZ2VBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAoaiBpbiBib251c0RhbWFnZUFycmF5W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gYm9udXNEYW1hZ2VBcnJheVtpXVtqXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJvbnVzRGFtYWdlQXJyYXlbaV1bal0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlOiBib251c0RhbWFnZUFycmF5W2ldW2pdLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VSZWR1Y2VkOiBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZCwgYm9udXNEYW1hZ2VBcnJheVtpXVtqXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlW2JvbnVzRGFtYWdlQXJyYXlbaV1bal0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJvbnVzIGRhbWFnZSBwZXJjZW50IGZyb20gYWJpbGl0aWVzIGFuZCBidWZmc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib251c0RhbWFnZVBjdEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqIGluIGJvbnVzRGFtYWdlUGN0QXJyYXlbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBiYXNlRGFtYWdlICogYm9udXNEYW1hZ2VQY3RBcnJheVtpXVtqXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJvbnVzRGFtYWdlUGN0QXJyYXlbaV1bal0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlOiBib251c0RhbWFnZVBjdEFycmF5W2ldW2pdLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VSZWR1Y2VkOiBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZCwgYm9udXNEYW1hZ2VQY3RBcnJheVtpXVtqXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlW2JvbnVzRGFtYWdlUGN0QXJyYXlbaV1bal0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkcm93X3Jhbmdlcl90cnVlc2hvdFxuICAgICAgICAgICAgaWYgKHNlbGYuaGVyb0RhdGEoKS5hdHRhY2t0eXBlID09PSAnRE9UQV9VTklUX0NBUF9SQU5HRURfQVRUQUNLJykge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAnZHJvd19yYW5nZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gc2VsZi5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2VQcmVjaXNpb25BdXJhKCkuc291cmNlcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZVByZWNpc2lvbkF1cmEoKS5zb3VyY2VzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc1tpbmRleF0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAnZHJvd19yYW5nZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHNbaW5kZXhdLmRhbWFnZSAqIHNlbGYudG90YWxBZ2koKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gc1tpbmRleF0uZGFtYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNbaW5kZXhdLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCAncGh5c2ljYWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlLnBoeXNpY2FsICs9IGQ7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJpa2lfYmFja3N0YWJcbiAgICAgICAgICAgIGlmIChzZWxmLmhlcm9JZCgpID09PSAncmlraScpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlQmFja3N0YWIoKS5zb3VyY2VzO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2VCYWNrc3RhYigpLnNvdXJjZXM7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzW2luZGV4XSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5oZXJvSWQoKSA9PT0gJ3Jpa2knKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gc1tpbmRleF0uZGFtYWdlICogc2VsZi50b3RhbEFnaSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBzW2luZGV4XS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogc1tpbmRleF0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogZCxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsICdwaHlzaWNhbCcpLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG90YWxEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAvL3RvdGFsQ3JpdGFibGVEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICBkYW1hZ2UucGh5c2ljYWwgKz0gZDsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYXNoIGRhbWFnZVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYXNoU291cmNlcy5zb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBiYXNoU291cmNlcy5zb3VyY2VzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkID0gYmFzaFNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2U7XG4gICAgICAgICAgICAgICAgdmFyIGNkID0gc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCk7XG4gICAgICAgICAgICAgICAgaWYgKG8uY29vbGRvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2QgPSBNYXRoLm1heCgxL28uY29vbGRvd24sIGNkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiYXNoU291cmNlcy5zb3VyY2VzW2ldLmNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYmFzaFNvdXJjZXMuc291cmNlc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogYmFzaFNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uZGFtYWdlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkcHM6IGQgKiBjZCAqIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uY2hhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHBzUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uZGFtYWdlVHlwZSkgKiBjZCAqIGJhc2hTb3VyY2VzLnNvdXJjZXNbaV0uY2hhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxEYW1hZ2UgKz0gZDtcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlW2Jhc2hTb3VyY2VzLnNvdXJjZXNbaV0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gJS1iYXNlZCBvcmJzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2UgKiAoMSAtIE1hdGgucG93KDEgLSBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5jaGFuY2UsIGl0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzW2ldLmNvdW50KSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVR5cGU6IGl0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzW2ldLmRhbWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCBpdGVtUHJvY09yYlNvdXJjZXMuc291cmNlc1tpXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgZGFtYWdlW2l0ZW1Qcm9jT3JiU291cmNlcy5zb3VyY2VzW2ldLmRhbWFnZVR5cGVdICs9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFiaWxpdHkgb3Jic1xuICAgICAgICAgICAgZm9yICh2YXIgb3JiIGluIGFiaWxpdHlPcmJTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBhYmlsaXR5T3JiU291cmNlc1tvcmJdLmRhbWFnZSAqICgxIC0gaXRlbVByb2NPcmJTb3VyY2VzLnRvdGFsKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGFiaWxpdHlPcmJTb3VyY2VzW29yYl0uZGlzcGxheW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogZCxcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogYWJpbGl0eU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VSZWR1Y2VkOiBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZCwgYWJpbGl0eU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRvdGFsRGFtYWdlICs9IGQ7XG4gICAgICAgICAgICAgICAgZGFtYWdlW2FiaWxpdHlPcmJTb3VyY2VzW29yYl0uZGFtYWdlVHlwZV0gKz0gZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gaXRlbSBvcmJzXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoYWJpbGl0eU9yYlNvdXJjZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG9yYiBpbiBpdGVtT3JiU291cmNlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGl0ZW1PcmJTb3VyY2VzW29yYl0uZGFtYWdlICogKDEgLSBpdGVtUHJvY09yYlNvdXJjZXMudG90YWwpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtT3JiU291cmNlc1tvcmJdLmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZTogaXRlbU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlUmVkdWNlZDogc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGQsIGl0ZW1PcmJTb3VyY2VzW29yYl0uZGFtYWdlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBrby5vYnNlcnZhYmxlKHRydWUpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0b3RhbERhbWFnZSArPSBkO1xuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VbaXRlbU9yYlNvdXJjZXNbb3JiXS5kYW1hZ2VUeXBlXSArPSBkO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gY3JpdCBkYW1hZ2VcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3JpdFNvdXJjZXMuc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gdG90YWxDcml0YWJsZURhbWFnZSAqIChjcml0U291cmNlcy5zb3VyY2VzW2ldLm11bHRpcGxpZXIgLSAxKTsvLyAqIGNyaXRTb3VyY2VzLnNvdXJjZXNbaV0udG90YWxDaGFuY2U7XG4gICAgICAgICAgICAgICAgY3JpdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGNyaXRTb3VyY2VzLnNvdXJjZXNbaV0ubmFtZSArICcsICcgKyBjcml0U291cmNlcy5zb3VyY2VzW2ldLm11bHRpcGxpZXIgKyAneCwgJyArIChjcml0U291cmNlcy5zb3VyY2VzW2ldLnRvdGFsQ2hhbmNlICogMTAwKS50b0ZpeGVkKDEpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGQsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVR5cGU6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZVJlZHVjZWQ6IHNlbGYuZ2V0UmVkdWNlZERhbWFnZShkLCAncGh5c2ljYWwnKSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmNlOiBjcml0U291cmNlcy5zb3VyY2VzW2ldLnRvdGFsQ2hhbmNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG90YWxDcml0ICs9IGQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0b3RhbFJlZHVjZWQgPSBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZGFtYWdlLnB1cmUsICdwdXJlJykgXG4gICAgICAgICAgICAgICAgICAgICsgc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGRhbWFnZS5waHlzaWNhbCwgJ3BoeXNpY2FsJylcbiAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmdldFJlZHVjZWREYW1hZ2UoZGFtYWdlLm1hZ2ljLCAnbWFnaWMnKSxcbiAgICAgICAgICAgICAgICB0b3RhbENyaXRSZWR1Y2VkID0gc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKHRvdGFsQ3JpdCwgJ3BoeXNpY2FsJyksXG4gICAgICAgICAgICAgICAgZHBzID0ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiB0b3RhbERhbWFnZSAqIHNlbGYuYXR0YWNrc1BlclNlY29uZCgpLFxuICAgICAgICAgICAgICAgICAgICBjcml0OiB0b3RhbENyaXQgKiBzZWxmLmF0dGFja3NQZXJTZWNvbmQoKSxcbiAgICAgICAgICAgICAgICAgICAgZ2VtaW5hdGVBdHRhY2s6IGdlbWluYXRlQXR0YWNrLmFjdGl2ZSA/IGdlbWluYXRlQXR0YWNrLmRhbWFnZSAvIGdlbWluYXRlQXR0YWNrLmNvb2xkb3duIDogMCxcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogdG90YWxSZWR1Y2VkICogc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjcml0OiB0b3RhbENyaXRSZWR1Y2VkICogc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW1pbmF0ZUF0dGFjazogZ2VtaW5hdGVBdHRhY2suYWN0aXZlID8gc2VsZi5nZXRSZWR1Y2VkRGFtYWdlKGdlbWluYXRlQXR0YWNrLmRhbWFnZSwgJ3BoeXNpY2FsJykgLyBnZW1pbmF0ZUF0dGFjay5jb29sZG93biA6IDAsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjcml0cy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvLmRwcykge1xuICAgICAgICAgICAgICAgICAgICBvLmRwcyA9IG8uZGFtYWdlICogKG8uY29vbGRvd24gfHwgc2VsZi5hdHRhY2tzUGVyU2Vjb25kKCkpICogby5jaGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghby5kcHNSZWR1Y2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uZHBzUmVkdWNlZCA9IG8uZGFtYWdlUmVkdWNlZCAqIChvLmNvb2xkb3duIHx8IHNlbGYuYXR0YWNrc1BlclNlY29uZCgpKSAqIG8uY2hhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8uZHBzKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uZHBzID0gby5kYW1hZ2UgKiAoby5jb29sZG93biB8fCBzZWxmLmF0dGFja3NQZXJTZWNvbmQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghby5kcHNSZWR1Y2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIG8uZHBzUmVkdWNlZCA9IG8uZGFtYWdlUmVkdWNlZCAqIChvLmNvb2xkb3duIHx8IHNlbGYuYXR0YWNrc1BlclNlY29uZCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHRvdGFsQ3JpdENoYW5jZSA9IGNyaXRzLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uY2hhbmNlIH0sIDApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHQxQ3JpdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNyaXRzLmZpbmQoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8uZW5hYmxlZCgpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IGMuZGFtYWdlIDogMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHQyQ3JpdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNyaXRzLmZpbmQoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8uZW5hYmxlZCgpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IGMuZGFtYWdlUmVkdWNlZCA6IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB0M0NyaXQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyaXRzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uZHBzIH0sIDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdDRDcml0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcml0cy5maWx0ZXIoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8uZW5hYmxlZCgpOyB9KS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIG8pIHsgcmV0dXJuIG1lbW8gKyBvLmRwc1JlZHVjZWQgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0MSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uZGFtYWdlIH0sIDApICsgdDFDcml0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB0MiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8uZGFtYWdlUmVkdWNlZCB9LCAwKSArIHQyQ3JpdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdDMgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLmVuYWJsZWQoKTsgfSkucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgby5kcHMgfSwgMCkgKyB0M0NyaXQoKSkgKiBhLmNvb2xkb3duO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdDQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLmVuYWJsZWQoKTsgfSkucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBvKSB7IHJldHVybiBtZW1vICsgby5kcHNSZWR1Y2VkIH0sIDApICsgdDRDcml0KCkpICogYS5jb29sZG93bjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdG90YWxDcml0Um93ID0gW3QxQ3JpdCwgdDJDcml0LCB0M0NyaXQsIHQ0Q3JpdF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0b3RhbFJvdyA9IFt0MSwgdDIsIHQzLCB0NF07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogYS5uYW1lICsgJyBTdWJ0b3RhbCcsXG4gICAgICAgICAgICAgICAgY29vbGRvd246IGEuY29vbGRvd24sXG4gICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBrby5vYnNlcnZhYmxlKHRydWUpLFxuICAgICAgICAgICAgICAgIHRvdGFsQ3JpdENoYW5jZTogdG90YWxDcml0Q2hhbmNlLFxuICAgICAgICAgICAgICAgIHRvdGFsQ3JpdFJvdzogdG90YWxDcml0Um93LFxuICAgICAgICAgICAgICAgIHRvdGFsUm93OiB0b3RhbFJvdyxcbiAgICAgICAgICAgICAgICBzb3VyY2VzOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgc291cmNlc0NyaXQ6IGNyaXRzLFxuICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbERhbWFnZSxcbiAgICAgICAgICAgICAgICB0b3RhbENyaXQ6IHRvdGFsQ3JpdCxcbiAgICAgICAgICAgICAgICB0b3RhbEdlbWluYXRlQXR0YWNrOiB0b3RhbERhbWFnZSArIGdlbWluYXRlQXR0YWNrLmRhbWFnZSxcbiAgICAgICAgICAgICAgICB0b3RhbEdlbWluYXRlQXR0YWNrUmVkdWNlZDogdG90YWxSZWR1Y2VkICsgZ2VtaW5hdGVBdHRhY2suZGFtYWdlUmVkdWNlZCxcbiAgICAgICAgICAgICAgICBnZW1pbmF0ZUF0dGFjazogZ2VtaW5hdGVBdHRhY2ssXG4gICAgICAgICAgICAgICAgdG90YWxDcml0UmVkdWNlZDogdG90YWxDcml0UmVkdWNlZCxcbiAgICAgICAgICAgICAgICB0b3RhbFJlZHVjZWQ6IHRvdGFsUmVkdWNlZCxcbiAgICAgICAgICAgICAgICBzdW1Ub3RhbDogdG90YWxEYW1hZ2UgKyB0b3RhbENyaXQsXG4gICAgICAgICAgICAgICAgc3VtVG90YWxSZWR1Y2VkOiB0b3RhbFJlZHVjZWQgKyB0b3RhbENyaXRSZWR1Y2VkLFxuICAgICAgICAgICAgICAgIGRwczoge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBkcHMuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgY3JpdDogZHBzLmJhc2UgKyBkcHMuY3JpdCxcbiAgICAgICAgICAgICAgICAgICAgZ2VtaW5hdGVBdHRhY2s6IGRwcy5iYXNlICsgZHBzLmdlbWluYXRlQXR0YWNrLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogZHBzLmJhc2UgKyBkcHMuY3JpdCArIGRwcy5nZW1pbmF0ZUF0dGFjayxcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogZHBzLnJlZHVjZWQuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyaXQ6IGRwcy5yZWR1Y2VkLmJhc2UgKyBkcHMucmVkdWNlZC5jcml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VtaW5hdGVBdHRhY2s6IGRwcy5yZWR1Y2VkLmJhc2UgKyBkcHMucmVkdWNlZC5nZW1pbmF0ZUF0dGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBkcHMucmVkdWNlZC5iYXNlICsgZHBzLnJlZHVjZWQuY3JpdCArIGRwcy5yZWR1Y2VkLmdlbWluYXRlQXR0YWNrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0MSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbMF0oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0MiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbMV0oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0MyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbMl0oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0NCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRhY2tzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gby5lbmFibGVkKCk7IH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgbykgeyByZXR1cm4gbWVtbyArIG8udG90YWxSb3dbM10oKSB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dGFja3M6IGF0dGFja3MsXG4gICAgICAgICAgICB0b3RhbFJvdzogW3QxLCB0MiwgdDMsIHQ0XVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgc2VsZi5nZXREYW1hZ2VUeXBlQ29sb3IgPSBmdW5jdGlvbiAoZGFtYWdlVHlwZSkge1xuICAgICAgICByZXR1cm4gbXkucHJvdG90eXBlLkRhbWFnZVR5cGVDb2xvcltkYW1hZ2VUeXBlXSB8fCBteS5wcm90b3R5cGUuRGFtYWdlVHlwZUNvbG9yWydkZWZhdWx0J107XG4gICAgfVxuICAgIFxufSIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5zdGFja2FibGVJdGVtcyA9IFsnY2xhcml0eScsJ2ZsYXNrJywnZHVzdCcsJ3dhcmRfb2JzZXJ2ZXInLCd3YXJkX3NlbnRyeScsJ3RhbmdvJywndHBzY3JvbGwnLCdzbW9rZV9vZl9kZWNlaXQnXSxcbm15LnByb3RvdHlwZS5sZXZlbGl0ZW1zID0gWyduZWNyb25vbWljb24nLCdkYWdvbicsJ2RpZmZ1c2FsX2JsYWRlJywndHJhdmVsX2Jvb3RzJ10sXG5teS5wcm90b3R5cGUudmFsaWRJdGVtcyA9IFtcImFieXNzYWxfYmxhZGVcIixcInVsdGltYXRlX3NjZXB0ZXJcIixcImNvdXJpZXJcIixcImFyY2FuZV9ib290c1wiLFwiYXJtbGV0XCIsXCJhc3NhdWx0XCIsXCJib290c19vZl9lbHZlc1wiLFwiYmZ1cnlcIixcImJlbHRfb2Zfc3RyZW5ndGhcIixcImJsYWNrX2tpbmdfYmFyXCIsXCJibGFkZV9tYWlsXCIsXCJibGFkZV9vZl9hbGFjcml0eVwiLFwiYmxhZGVzX29mX2F0dGFja1wiLFwiYmxpbmtcIixcImJsb29kc3RvbmVcIixcImJvb3RzXCIsXCJ0cmF2ZWxfYm9vdHNcIixcImJvdHRsZVwiLFwiYnJhY2VyXCIsXCJicm9hZHN3b3JkXCIsXCJidWNrbGVyXCIsXCJidXR0ZXJmbHlcIixcImNoYWlubWFpbFwiLFwiY2lyY2xldFwiLFwiY2xhcml0eVwiLFwiY2xheW1vcmVcIixcImNsb2FrXCIsXCJsZXNzZXJfY3JpdFwiLFwiZ3JlYXRlcl9jcml0XCIsXCJkYWdvblwiLFwiZGVtb25fZWRnZVwiLFwiZGVzb2xhdG9yXCIsXCJkaWZmdXNhbF9ibGFkZVwiLFwicmFwaWVyXCIsXCJhbmNpZW50X2phbmdnb1wiLFwiZHVzdFwiLFwiZWFnbGVcIixcImVuZXJneV9ib29zdGVyXCIsXCJldGhlcmVhbF9ibGFkZVwiLFwiY3ljbG9uZVwiLFwic2thZGlcIixcImZseWluZ19jb3VyaWVyXCIsXCJmb3JjZV9zdGFmZlwiLFwiZ2F1bnRsZXRzXCIsXCJnZW1cIixcImdob3N0XCIsXCJnbG92ZXNcIixcImhhbmRfb2ZfbWlkYXNcIixcImhlYWRkcmVzc1wiLFwiZmxhc2tcIixcImhlYXJ0XCIsXCJoZWF2ZW5zX2hhbGJlcmRcIixcImhlbG1fb2ZfaXJvbl93aWxsXCIsXCJoZWxtX29mX3RoZV9kb21pbmF0b3JcIixcImhvb2Rfb2ZfZGVmaWFuY2VcIixcImh5cGVyc3RvbmVcIixcImJyYW5jaGVzXCIsXCJqYXZlbGluXCIsXCJzcGhlcmVcIixcIm1hZWxzdHJvbVwiLFwibWFnaWNfc3RpY2tcIixcIm1hZ2ljX3dhbmRcIixcIm1hbnRhXCIsXCJtYW50bGVcIixcIm1hc2tfb2ZfbWFkbmVzc1wiLFwibWVkYWxsaW9uX29mX2NvdXJhZ2VcIixcIm1la2Fuc21cIixcIm1pdGhyaWxfaGFtbWVyXCIsXCJtam9sbG5pclwiLFwibW9ua2V5X2tpbmdfYmFyXCIsXCJsaWZlc3RlYWxcIixcIm15c3RpY19zdGFmZlwiLFwibmVjcm9ub21pY29uXCIsXCJudWxsX3RhbGlzbWFuXCIsXCJvYmxpdmlvbl9zdGFmZlwiLFwid2FyZF9vYnNlcnZlclwiLFwib2dyZV9heGVcIixcIm9yYl9vZl92ZW5vbVwiLFwib3JjaGlkXCIsXCJwZXJzXCIsXCJwaGFzZV9ib290c1wiLFwicGlwZVwiLFwicGxhdGVtYWlsXCIsXCJwb2ludF9ib29zdGVyXCIsXCJwb29yX21hbnNfc2hpZWxkXCIsXCJwb3dlcl90cmVhZHNcIixcInF1YXJ0ZXJzdGFmZlwiLFwicXVlbGxpbmdfYmxhZGVcIixcInJhZGlhbmNlXCIsXCJyZWF2ZXJcIixcInJlZnJlc2hlclwiLFwicmluZ19vZl9hcXVpbGFcIixcInJpbmdfb2ZfYmFzaWxpdXNcIixcInJpbmdfb2ZfaGVhbHRoXCIsXCJyaW5nX29mX3Byb3RlY3Rpb25cIixcInJpbmdfb2ZfcmVnZW5cIixcInJvYmVcIixcInJvZF9vZl9hdG9zXCIsXCJyZWxpY1wiLFwic29iaV9tYXNrXCIsXCJzYW5nZVwiLFwic2FuZ2VfYW5kX3lhc2hhXCIsXCJzYXRhbmljXCIsXCJzaGVlcHN0aWNrXCIsXCJ3YXJkX3NlbnRyeVwiLFwic2hhZG93X2FtdWxldFwiLFwiaW52aXNfc3dvcmRcIixcInNoaXZhc19ndWFyZFwiLFwiYmFzaGVyXCIsXCJzbGlwcGVyc1wiLFwic21va2Vfb2ZfZGVjZWl0XCIsXCJzb3VsX2Jvb3N0ZXJcIixcInNvdWxfcmluZ1wiLFwic3RhZmZfb2Zfd2l6YXJkcnlcIixcInN0b3V0X3NoaWVsZFwiLFwidGFsaXNtYW5fb2ZfZXZhc2lvblwiLFwidGFuZ29cIixcInRwc2Nyb2xsXCIsXCJ0cmFucXVpbF9ib290c1wiLFwidWx0aW1hdGVfb3JiXCIsXCJ1cm5fb2Zfc2hhZG93c1wiLFwidmFuZ3VhcmRcIixcInZlaWxfb2ZfZGlzY29yZFwiLFwidml0YWxpdHlfYm9vc3RlclwiLFwidmxhZG1pclwiLFwidm9pZF9zdG9uZVwiLFwid3JhaXRoX2JhbmRcIixcInlhc2hhXCIsXCJjcmltc29uX2d1YXJkXCIsXCJlbmNoYW50ZWRfbWFuZ29cIixcImxvdHVzX29yYlwiLFwiZ2xpbW1lcl9jYXBlXCIsXCJndWFyZGlhbl9ncmVhdmVzXCIsXCJtb29uX3NoYXJkXCIsXCJzaWx2ZXJfZWRnZVwiLFwic29sYXJfY3Jlc3RcIixcIm9jdGFyaW5lX2NvcmVcIixcImFldGhlcl9sZW5zXCIsXCJmYWVyaWVfZmlyZVwiLFwiaXJvbl90YWxvblwiLFwiZHJhZ29uX2xhbmNlXCIsXCJlY2hvX3NhYnJlXCIsXCJpbmZ1c2VkX3JhaW5kcm9wXCIsXCJibGlnaHRfc3RvbmVcIixcIndpbmRfbGFjZVwiLFwidG9tZV9vZl9rbm93bGVkZ2VcIixcImJsb29kdGhvcm5cIixcImh1cnJpY2FuZV9waWtlXCJdLFxubXkucHJvdG90eXBlLml0ZW1zV2l0aEFjdGl2ZSA9IFsnc29sYXJfY3Jlc3QnLCAnaGVhcnQnLCdzbW9rZV9vZl9kZWNlaXQnLCdkdXN0JywnZ2hvc3QnLCd0cmFucXVpbF9ib290cycsJ3BoYXNlX2Jvb3RzJywncG93ZXJfdHJlYWRzJywnYnVja2xlcicsJ21lZGFsbGlvbl9vZl9jb3VyYWdlJywnYW5jaWVudF9qYW5nZ28nLCdtZWthbnNtJywncGlwZScsJ3ZlaWxfb2ZfZGlzY29yZCcsJ3JvZF9vZl9hdG9zJywnb3JjaGlkJywnc2hlZXBzdGljaycsJ2FybWxldCcsJ2ludmlzX3N3b3JkJywnZXRoZXJlYWxfYmxhZGUnLCdzaGl2YXNfZ3VhcmQnLCdtYW50YScsJ21hc2tfb2ZfbWFkbmVzcycsJ2RpZmZ1c2FsX2JsYWRlJywnbWpvbGxuaXInLCdzYXRhbmljJywncmluZ19vZl9iYXNpbGl1cycsJ3Jpbmdfb2ZfYXF1aWxhJywgJ2J1dHRlcmZseScsICdtb29uX3NoYXJkJywgJ3NpbHZlcl9lZGdlJywnYmxvb2R0aG9ybicsJ2h1cnJpY2FuZV9waWtlJ107XG5cbm15LnByb3RvdHlwZS5JdGVtSW5wdXQgPSBmdW5jdGlvbiAodmFsdWUsIG5hbWUsIGRlYnVmZikge1xuICAgIGlmIChteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIHZhbHVlXS5JdGVtQWxpYXNlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHZhciBpdGVtQWxpYXMgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIHZhbHVlXS5JdGVtQWxpYXNlcy5qb2luKCcgJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgaXRlbUFsaWFzID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyB2YWx1ZV0uSXRlbUFsaWFzZXM7XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSBrby5vYnNlcnZhYmxlKHZhbHVlKTtcbiAgICB0aGlzLmRlYnVmZiA9IGtvLm9ic2VydmFibGUoZGVidWZmKTtcbiAgICBpZiAodGhpcy5kZWJ1ZmYoKSkge1xuICAgICAgICB0aGlzLnZhbHVlID0ga28ub2JzZXJ2YWJsZSh2YWx1ZSArICd8JyArIGRlYnVmZi5pZCk7XG4gICAgICAgIHRoaXMubmFtZSA9IGtvLm9ic2VydmFibGUobmFtZSArICcgKCcgKyBkZWJ1ZmYubmFtZSArICcpJyk7XG4gICAgICAgIHRoaXMuZGlzcGxheW5hbWUgPSBrby5vYnNlcnZhYmxlKG5hbWUgKyAnICgnICsgZGVidWZmLm5hbWUgKyAnKSA8c3BhbiBzdHlsZT1cImRpc3BsYXk6bm9uZVwiPicgKyAnOycgKyBpdGVtQWxpYXMgKyAnPC9zcGFuPicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGtvLm9ic2VydmFibGUodmFsdWUpO1xuICAgICAgICB0aGlzLm5hbWUgPSBrby5vYnNlcnZhYmxlKG5hbWUpO1xuICAgICAgICB0aGlzLmRpc3BsYXluYW1lID0ga28ub2JzZXJ2YWJsZShuYW1lICsgJyA8c3BhbiBzdHlsZT1cImRpc3BsYXk6bm9uZVwiPicgKyAnOycgKyBpdGVtQWxpYXMgKyAnPC9zcGFuPicpO1xuICAgIH1cbn07XG5cbm15LnByb3RvdHlwZS5CYXNpY0ludmVudG9yeVZpZXdNb2RlbCA9IGZ1bmN0aW9uIChoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuaXRlbXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuYWN0aXZlSXRlbXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuYWRkSXRlbSA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICBpZiAoZGF0YS5zZWxlY3RlZEl0ZW0oKSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBuZXdfaXRlbSA9IHtcbiAgICAgICAgICAgICAgICBpdGVtOiBkYXRhLnNlbGVjdGVkSXRlbSgpLnNwbGl0KCd8JylbMF0sXG4gICAgICAgICAgICAgICAgc3RhdGU6IGtvLm9ic2VydmFibGUoMCksXG4gICAgICAgICAgICAgICAgc2l6ZTogZGF0YS5pdGVtSW5wdXRWYWx1ZSgpLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAobmV3X2l0ZW0uaXRlbSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RhZ29uJzpcbiAgICAgICAgICAgICAgICAgICAgbmV3X2l0ZW0uc2l6ZSA9IE1hdGgubWluKG5ld19pdGVtLnNpemUsIDUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RyYXZlbF9ib290cyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlmZnVzYWxfYmxhZGUnOlxuICAgICAgICAgICAgICAgICAgICBuZXdfaXRlbS5zaXplID0gTWF0aC5taW4obmV3X2l0ZW0uc2l6ZSwgMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uJzpcbiAgICAgICAgICAgICAgICAgICAgbmV3X2l0ZW0uc2l6ZSA9IE1hdGgubWluKG5ld19pdGVtLnNpemUsIDMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5pdGVtcy5wdXNoKG5ld19pdGVtKTtcbiAgICAgICAgICAgIGlmIChkYXRhLnNlbGVjdGVkSXRlbSgpID09PSAncmluZ19vZl9hcXVpbGEnIHx8IGRhdGEuc2VsZWN0ZWRJdGVtKCkgPT09ICdyaW5nX29mX2Jhc2lsaXVzJyB8fCBkYXRhLnNlbGVjdGVkSXRlbSgpID09PSAnaGVhcnQnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi50b2dnbGVJdGVtKHVuZGVmaW5lZCwgbmV3X2l0ZW0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNlbGYudG9nZ2xlSXRlbSA9IGZ1bmN0aW9uIChpbmRleCwgZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgaWYgKG15LnByb3RvdHlwZS5pdGVtc1dpdGhBY3RpdmUuaW5kZXhPZihkYXRhLml0ZW0pID49IDApIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2YoZGF0YSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hY3RpdmVJdGVtcy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hY3RpdmVJdGVtcy5yZW1vdmUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGRhdGEuaXRlbSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Bvd2VyX3RyZWFkcyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlKCkgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXRlKGRhdGEuc3RhdGUoKSArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0ZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0ZSgpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdGUoMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXRlKDApO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfS5iaW5kKHRoaXMpO1xuICAgIHNlbGYucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHNlbGYuYWN0aXZlSXRlbXMucmVtb3ZlKGl0ZW0pO1xuICAgICAgICBzZWxmLml0ZW1zLnJlbW92ZShpdGVtKTtcbiAgICB9LmJpbmQodGhpcyk7XG4gICAgc2VsZi50b2dnbGVNdXRlSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGl0ZW0uZW5hYmxlZCghaXRlbS5lbmFibGVkKCkpO1xuICAgIH0uYmluZCh0aGlzKTsgICAgICBcbiAgICBzZWxmLnJlbW92ZUFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5hY3RpdmVJdGVtcy5yZW1vdmVBbGwoKTtcbiAgICAgICAgc2VsZi5pdGVtcy5yZW1vdmVBbGwoKTtcbiAgICB9LmJpbmQodGhpcyk7XG59XG5teS5wcm90b3R5cGUuQmFzaWNJbnZlbnRvcnlWaWV3TW9kZWwucHJvdG90eXBlLmdldEl0ZW1JbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHN0YXRlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShkYXRhLnN0YXRlKTtcbiAgICBzd2l0Y2ggKGRhdGEuaXRlbSkge1xuICAgICAgICBjYXNlICdwb3dlcl90cmVhZHMnOlxuICAgICAgICAgICAgaWYgKHN0YXRlID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy9tZWRpYS9pbWFnZXMvaXRlbXMvJyArIGRhdGEuaXRlbSArICdfc3RyLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnX2ludC5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnX2FnaS5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHJhbnF1aWxfYm9vdHMnOlxuICAgICAgICBjYXNlICdyaW5nX29mX2Jhc2lsaXVzJzpcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy9tZWRpYS9pbWFnZXMvaXRlbXMvJyArIGRhdGEuaXRlbSArICdfYWN0aXZlLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhcm1sZXQnOlxuICAgICAgICAgICAgaWYgKHN0YXRlID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy9tZWRpYS9pbWFnZXMvaXRlbXMvJyArIGRhdGEuaXRlbSArICcucG5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnL21lZGlhL2ltYWdlcy9pdGVtcy8nICsgZGF0YS5pdGVtICsgJ19hY3RpdmUucG5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Jpbmdfb2ZfYXF1aWxhJzpcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnX2FjdGl2ZS5wbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkYWdvbic6XG4gICAgICAgIGNhc2UgJ2RpZmZ1c2FsX2JsYWRlJzpcbiAgICAgICAgY2FzZSAndHJhdmVsX2Jvb3RzJzpcbiAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uJzpcbiAgICAgICAgICAgIGlmIChkYXRhLnNpemUgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvbWVkaWEvaW1hZ2VzL2l0ZW1zLycgKyBkYXRhLml0ZW0gKyAnXycgKyBkYXRhLnNpemUgKyAnLnBuZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy9tZWRpYS9pbWFnZXMvaXRlbXMvJyArIGRhdGEuaXRlbSArICcucG5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJy9tZWRpYS9pbWFnZXMvaXRlbXMvJyArIGRhdGEuaXRlbSArICcucG5nJzsgICAgICAgICAgICBcbiAgICAgICAgYnJlYWs7XG4gICAgfVxufTtcbm15LnByb3RvdHlwZS5CYXNpY0ludmVudG9yeVZpZXdNb2RlbC5wcm90b3R5cGUuZ2V0SXRlbVNpemVMYWJlbCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKG15LnByb3RvdHlwZS5zdGFja2FibGVJdGVtcy5pbmRleE9mKGRhdGEuaXRlbSkgIT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICc8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZToxMHB4XCI+UXR5OiA8L3NwYW4+JyArIGRhdGEuc2l6ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAobXkucHJvdG90eXBlLmxldmVsaXRlbXMuaW5kZXhPZihkYXRhLml0ZW0pICE9IC0xKSB7XG4gICAgICAgIHJldHVybiAnPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTBweFwiPkx2bDogPC9zcGFuPicgKyBkYXRhLnNpemU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEuaXRlbSA9PSAnYmxvb2RzdG9uZScpIHtcbiAgICAgICAgcmV0dXJuICc8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZToxMHB4XCI+Q2hhcmdlczogPC9zcGFuPicgKyBkYXRhLnNpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcbm15LnByb3RvdHlwZS5CYXNpY0ludmVudG9yeVZpZXdNb2RlbC5wcm90b3R5cGUuZ2V0QWN0aXZlQm9yZGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzd2l0Y2ggKGRhdGEuaXRlbSkge1xuICAgICAgICBjYXNlICdwb3dlcl90cmVhZHMnOlxuICAgICAgICBjYXNlICd0cmFucXVpbF9ib290cyc6XG4gICAgICAgIGNhc2UgJ3Jpbmdfb2ZfYmFzaWxpdXMnOlxuICAgICAgICBjYXNlICdyaW5nX29mX2FxdWlsYSc6XG4gICAgICAgIGNhc2UgJ2FybWxldCc6XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShkYXRhLnN0YXRlKTsgICAgXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbm15LnByb3RvdHlwZS5CYXNpY0ludmVudG9yeVZpZXdNb2RlbC5wcm90b3R5cGUuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZU5hbWUsIGxldmVsKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2ldLm5hbWUgPT0gYXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgICAgaWYgKGxldmVsID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhdHRyaWJ1dGVzW2ldLnZhbHVlWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxldmVsID4gYXR0cmlidXRlc1tpXS52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhdHRyaWJ1dGVzW2ldLnZhbHVlWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGF0dHJpYnV0ZXNbaV0udmFsdWVbbGV2ZWwgLSAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm15LnByb3RvdHlwZS5JbnZlbnRvcnlWaWV3TW9kZWwgPSBmdW5jdGlvbiAoaCkge1xuICAgIHZhciBzZWxmID0gbmV3IG15LnByb3RvdHlwZS5CYXNpY0ludmVudG9yeVZpZXdNb2RlbCgpO1xuICAgIHNlbGYuaGVybyA9IGg7XG4gICAgc2VsZi5oYXNJbnZlbnRvcnkgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xuICAgIHNlbGYuaXRlbXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuYWN0aXZlSXRlbXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHNlbGYuaGFzU2NlcHRlciA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gJ3VsdGltYXRlX3NjZXB0ZXInICYmIHNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCB0aGlzKTtcbiAgICBzZWxmLmlzRXRoZXJlYWwgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICgoaXRlbSA9PT0gJ2dob3N0JyB8fCBpdGVtID09PSAnZXRoZXJlYWxfYmxhZGUnKSAmJiBzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIHRoaXMpO1xuICAgIHNlbGYuaXNTaGVlcGVkID0ga28uY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gJ3NoZWVwc3RpY2snICYmIHNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkgJiYgaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgdGhpcyk7XG4gICAgc2VsZi50b3RhbENvc3QgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKG15LnByb3RvdHlwZS5zdGFja2FibGVJdGVtcy5pbmRleE9mKGl0ZW0pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgYyArPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLml0ZW1jb3N0ICogc2VsZi5pdGVtcygpW2ldLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChteS5wcm90b3R5cGUubGV2ZWxpdGVtcy5pbmRleE9mKGl0ZW0pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGlmZnVzYWxfYmxhZGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYyArPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLml0ZW1jb3N0ICsgKHNlbGYuaXRlbXMoKVtpXS5zaXplIC0gMSkgKiA3MDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb24nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYWdvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjICs9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uaXRlbWNvc3QgKyAoc2VsZi5pdGVtcygpW2ldLnNpemUgLSAxKSAqIDEyNTA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYyArPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLml0ZW1jb3N0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjICs9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uaXRlbWNvc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9LCB0aGlzKTtcbiAgICBzZWxmLmFkZEl0ZW1CdWZmID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLmhhc0ludmVudG9yeSgpICYmIHNlbGYuc2VsZWN0ZWRJdGVtQnVmZigpICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIG5ld19pdGVtID0ge1xuICAgICAgICAgICAgICAgIGl0ZW06IHNlbGYuc2VsZWN0ZWRJdGVtQnVmZigpLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBrby5vYnNlcnZhYmxlKDApLFxuICAgICAgICAgICAgICAgIHNpemU6IDEsXG4gICAgICAgICAgICAgICAgZW5hYmxlZDoga28ub2JzZXJ2YWJsZSh0cnVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5pdGVtcy5wdXNoKG5ld19pdGVtKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkSXRlbUJ1ZmYoKSA9PT0gJ3Jpbmdfb2ZfYXF1aWxhJyB8fCBzZWxmLnNlbGVjdGVkSXRlbUJ1ZmYoKSA9PT0gJ3Jpbmdfb2ZfYmFzaWxpdXMnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi50b2dnbGVJdGVtKHVuZGVmaW5lZCwgbmV3X2l0ZW0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNlbGYuYWRkSXRlbURlYnVmZiA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICBpZiAoc2VsZi5oYXNJbnZlbnRvcnkoKSAmJiBzZWxmLnNlbGVjdGVkSXRlbURlYnVmZigpICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIG5ld19pdGVtID0ge1xuICAgICAgICAgICAgICAgIGl0ZW06IHNlbGYuc2VsZWN0ZWRJdGVtRGVidWZmKCkuc3BsaXQoJ3wnKVswXSxcbiAgICAgICAgICAgICAgICBzdGF0ZToga28ub2JzZXJ2YWJsZSgwKSxcbiAgICAgICAgICAgICAgICBzaXplOiAxLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGtvLm9ic2VydmFibGUodHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkSXRlbURlYnVmZigpLnNwbGl0KCd8JykubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICBuZXdfaXRlbS5kZWJ1ZmYgPSBzZWxmLnNlbGVjdGVkSXRlbURlYnVmZigpLnNwbGl0KCd8JylbMV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaXRlbXMucHVzaChuZXdfaXRlbSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZEl0ZW1EZWJ1ZmYoKSA9PT0gJ3Jpbmdfb2ZfYXF1aWxhJyB8fCBzZWxmLnNlbGVjdGVkSXRlbURlYnVmZigpID09PSAncmluZ19vZl9iYXNpbGl1cycpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnRvZ2dsZUl0ZW0odW5kZWZpbmVkLCBuZXdfaXRlbSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXR5cGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBzaXplID0gc2VsZi5pdGVtcygpW2ldLnNpemU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2FsbF9zdGF0cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfc3RhdHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGV0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FnaSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX2FnaWxpdHknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ2RpZmZ1c2FsX2JsYWRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbc2l6ZS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfc3RhdCcgJiYgc2VsZi5pdGVtcygpW2ldLnN0YXRlKCkgPT0gMikge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfYWdpJykge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX2ludGVsbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAnbmVjcm9ub21pY29uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbc2l6ZS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gPT0gJ2RpZmZ1c2FsX2JsYWRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbc2l6ZS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gPT0gJ2RhZ29uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbc2l6ZS0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfaW50ZWxsaWdlbmNlJykge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfaW50Jykge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PSAnYm9udXNfc3RhdCcgJiYgc2VsZi5pdGVtcygpW2ldLnN0YXRlKCkgPT0gMSkge3RvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7fTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT0gJ2JvbnVzX3N0cmVuZ3RoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICduZWNyb25vbWljb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVtzaXplLTFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lID09ICdib251c19zdGF0JyAmJiBzZWxmLml0ZW1zKClbaV0uc3RhdGUoKSA9PSAwKSB7dG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lID09ICdib251c19zdHInKSB7dG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lID09ICd1bmhvbHlfYm9udXNfc3RyZW5ndGgnICYmIGlzQWN0aXZlKSB7dG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTt9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgc2VsZi5nZXRCYXNoID0gZnVuY3Rpb24gKGF0dGFja3R5cGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdiYXNoX2NoYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFzaF9jaGFuY2VfbWVsZWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFja3R5cGUgPT0gJ0RPVEFfVU5JVF9DQVBfTUVMRUVfQVRUQUNLJykgeyB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApOyB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFzaF9jaGFuY2VfcmFuZ2VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2t0eXBlID09ICdET1RBX1VOSVRfQ0FQX1JBTkdFRF9BVFRBQ0snKSB7IHRvdGFsQXR0cmlidXRlICo9ICgxIC0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7IH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldENyaXRDaGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyaXRfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldENyaXRTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdsZXNzZXJfY3JpdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZ3JlYXRlcl9jcml0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdibG9vZHRob3JuJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbaXRlbV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdjcml0X2NoYW5jZScsIDApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aXBsaWVyJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnY3JpdF9tdWx0aXBsaWVyJywgMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtID09PSAnYmxvb2R0aG9ybicgJiYgaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlc1snc291bF9yZW5kJ10gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbJ3NvdWxfcmVuZCddID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlwbGllcic6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ3RhcmdldF9jcml0X211bHRpcGxpZXInLCAwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiAnU291bCBSZW5kJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzWydzb3VsX3JlbmQnXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9O1xuXG4gICAgc2VsZi5nZXRDbGVhdmVTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdiZnVyeSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW1dID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmFkaXVzJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnY2xlYXZlX3JhZGl1cycsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWduaXR1ZGUnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdjbGVhdmVfZGFtYWdlX3BlcmNlbnQnLCAwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZXM7XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldEJhc2hTb3VyY2UgPSBmdW5jdGlvbiAoYXR0YWNrdHlwZSkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnamF2ZWxpbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW1dID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnYm9udXNfY2hhbmNlX2RhbWFnZScsIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ21hZ2ljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdib251c19jaGFuY2UnLCAxKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lICsgJyBQaWVyY2UnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtb25rZXlfa2luZ19iYXInOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2l0ZW0nOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuY2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdiYXNoX2NoYW5jZScsIDApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdiYXNoX2RhbWFnZScsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2Jhc2hfc3R1bicsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAnbWFnaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6ICdNaW5pLUJhc2gnIC8vbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYWJ5c3NhbF9ibGFkZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnYmFzaGVyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzb3VyY2VzLmhhc093blByb3BlcnR5KCdiYXNoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbJ2Jhc2gnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXRlbSc6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgKGF0dGFja3R5cGUgPT0gJ0RPVEFfVU5JVF9DQVBfTUVMRUVfQVRUQUNLJykgPydiYXNoX2NoYW5jZV9tZWxlZScgOiAnYmFzaF9jaGFuY2VfcmFuZ2VkJywgMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2JvbnVzX2NoYW5jZV9kYW1hZ2UnLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiBzZWxmLmdldEl0ZW1BdHRyaWJ1dGVWYWx1ZShteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMsICdiYXNoX2R1cmF0aW9uJywgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogJ0Jhc2gnIC8vbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRPcmJQcm9jU291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFlbHN0cm9tJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtam9sbG5pcic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW1dID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmNlJzogc2VsZi5nZXRJdGVtQXR0cmlidXRlVmFsdWUobXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLCAnY2hhaW5fY2hhbmNlJywgMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2NoYWluX2RhbWFnZScsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZVR5cGUnOiAnbWFnaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZXM7XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0T3JiU291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlmZnVzYWxfYmxhZGUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpdGVtXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYW5jZSc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHNlbGYuZ2V0SXRlbUF0dHJpYnV0ZVZhbHVlKG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcywgJ2ZlZWRiYWNrX21hbmFfYnVybicsIHNlbGYuaXRlbXMoKVtpXS5zaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRIZWFsdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfaGVhbHRoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBzZWxmLmdldEhlYWx0aFJlZ2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdoZWFsdGhfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfaGVhbHRoX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICd0cmFucXVpbF9ib290cycgJiYgIWlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gIT0gJ3RyYW5xdWlsX2Jvb3RzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdocF9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhbHRoX3JlZ2VuX3JhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ2hlYXJ0JyAmJiBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IChwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKSAqIHNlbGYuaGVyby5oZWFsdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0SGVhbHRoUmVnZW5BdXJhID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgICAgIGV4Y2x1ZGVMaXN0ID0gZSB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZUxpc3QuaW5kZXhPZihpdGVtICsgYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdXJhX2hlYWx0aF9yZWdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChpdGVtICsgYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldE1hbmEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbWFuYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRNYW5hUmVnZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVyYV9tYW5hX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFuYV9yZWdlbl9hdXJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlRmxvYXQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hbmFfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ2luZnVzZWRfcmFpbmRyb3AnKSB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUZsb2F0KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7ICAgIFxuICAgIH07XG4gICAgc2VsZi5nZXRNYW5hUmVnZW5QZXJjZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21hbmFfcmVnZW4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYW5hX3JlZ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbWFuYV9yZWdlbl9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gJ2luZnVzZWRfcmFpbmRyb3AnKSB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUZsb2F0KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGUgLyAxMDA7ICAgIFxuICAgIH07XG4gICAgc2VsZi5nZXRNYW5hUmVnZW5CbG9vZHN0b25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoaXRlbS5pbmRleE9mKCdibG9vZHN0b25lJykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoc2VsZi5pdGVtcygpW2ldLnNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRBcm1vciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXJtb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FjdGl2ZSB8fCAoaXRlbSAhPSAnbWVkYWxsaW9uX29mX2NvdXJhZ2UnICYmIGl0ZW0gIT0gJ3NvbGFyX2NyZXN0JykpIHsgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VuaG9seV9ib251c19hcm1vcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUgJiYgaXRlbSA9PSAnYXJtbGV0JykgeyB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pOyB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRBcm1vckF1cmEgPSBmdW5jdGlvbiAoYUxpc3QpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgICAgIGF0dHJpYnV0ZUxpc3QgPSBhTGlzdCB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwO2ogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVMaXN0LmZpbmQoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGF0dHJpYnV0ZS5uYW1lID09IGEubmFtZTsgfSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBidWNrbGVyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2FvZV9hcm1vcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVMaXN0LnB1c2goeyduYW1lJzphdHRyaWJ1dGUubmFtZSwgJ3ZhbHVlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgLy8gYXNzYXVsdFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdXJhX3Bvc2l0aXZlX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUxpc3QucHVzaCh7J25hbWUnOmF0dHJpYnV0ZS5uYW1lLCAndmFsdWUnOiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvLyByaW5nX29mX2FxdWlsYSxyaW5nX29mX2Jhc2lsaXVzXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1cmFfYm9udXNfYXJtb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTGlzdC5wdXNoKHsnbmFtZSc6YXR0cmlidXRlLm5hbWUsICd2YWx1ZSc6IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSl9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZsYWRtaXJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXJtb3JfYXVyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVMaXN0LnB1c2goeyduYW1lJzphdHRyaWJ1dGUubmFtZSwgJ3ZhbHVlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKX0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgLy8gbWVrYW5zbVxuICAgICAgICAgICAgICAgICAgICBjYXNlICdoZWFsX2JvbnVzX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUxpc3QucHVzaCh7J25hbWUnOmF0dHJpYnV0ZS5uYW1lLCAndmFsdWUnOiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyByZW1vdmUgYnVja2xlciBpZiB0aGVyZSBpcyBhIG1la2Fuc21cbiAgICAgICAgaWYgKGF0dHJpYnV0ZUxpc3QuZmluZChmdW5jdGlvbiAoYXR0cmlidXRlKSB7IHJldHVybiBhdHRyaWJ1dGUubmFtZSA9PSAnaGVhbF9ib251c19hcm1vcic7IH0pKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVMaXN0ID0gYXR0cmlidXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGUubmFtZSAhPT0gJ2JvbnVzX2FvZV9hcm1vcic7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZW1vdmUgcmluZ19vZl9hcXVpbGEscmluZ19vZl9iYXNpbGl1cyBpZiB0aGVyZSBpcyBhIHZsYWRtaXJcbiAgICAgICAgaWYgKGF0dHJpYnV0ZUxpc3QuZmluZChmdW5jdGlvbiAoYXR0cmlidXRlKSB7IHJldHVybiBhdHRyaWJ1dGUubmFtZSA9PSAnYXJtb3JfYXVyYSc7IH0pKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVMaXN0ID0gYXR0cmlidXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGUubmFtZSAhPT0gJ2F1cmFfYm9udXNfYXJtb3InO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRvdGFsQXR0cmlidXRlID0gYXR0cmlidXRlTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lbW8gKz0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZUxpc3R9O1xuICAgIH07XG4gICAgc2VsZi5nZXRBcm1vclJlZHVjdGlvbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTEgfHwgZXhjbHVkZUxpc3QuaW5kZXhPZihpdGVtICsgJ18nICsgYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhcm1vcl9yZWR1Y3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlIHx8IChpdGVtICE9ICdtZWRhbGxpb25fb2ZfY291cmFnZScgJiYgaXRlbSAhPSAnc29sYXJfY3Jlc3QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChpdGVtICsgJ18nICsgYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVyYV9uZWdhdGl2ZV9hcm1vcic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb3JydXB0aW9uX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHRvdGFsQXR0cmlidXRlLCBleGNsdWRlTGlzdDogZXhjbHVkZUxpc3R9O1xuICAgIH07XG4gICAgc2VsZi5nZXRFdmFzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19ldmFzaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBY3RpdmUgfHwgKGl0ZW0gIT0gJ2J1dHRlcmZseScgJiYgaXRlbSAhPSAnc29sYXJfY3Jlc3QnKSkgeyB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApOyB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBzZWxmLmdldE1vdmVtZW50U3BlZWRGbGF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwLFxuICAgICAgICBoYXNCb290cyA9IGZhbHNlLFxuICAgICAgICBoYXNFdWxzID0gZmFsc2UsXG4gICAgICAgIGhhc1dpbmRMYWNlID0gZmFsc2UsXG4gICAgICAgIGJvb3RJdGVtcyA9IFsnYm9vdHMnLCdwaGFzZV9ib290cycsJ2FyY2FuZV9ib290cycsJ3RyYXZlbF9ib290cycsJ3Bvd2VyX3RyZWFkcycsJ3RyYW5xdWlsX2Jvb3RzJywnZ3VhcmRpYW5fZ3JlYXZlcyddO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0Jvb3RzICYmIGJvb3RJdGVtcy5pbmRleE9mKGl0ZW0pID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPSAndHJhbnF1aWxfYm9vdHMnIHx8IChpdGVtID09ICd0cmFucXVpbF9ib290cycgJiYgIWlzQWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNCb290cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9lbHNlIGlmICghaGFzRXVscyAmJiBpdGVtID09ICdjeWNsb25lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbSA9PSAnY3ljbG9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0V1bHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnJva2VuX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzQm9vdHMgJiYgYm9vdEl0ZW1zLmluZGV4T2YoaXRlbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICd0cmFucXVpbF9ib290cycgJiYgaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQm9vdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVtZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzQm9vdHMgJiYgYm9vdEl0ZW1zLmluZGV4T2YoaXRlbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQm9vdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNXaW5kTGFjZSAmJiBpdGVtID09ICd3aW5kX2xhY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNXaW5kTGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTtcbiAgICBzZWxmLmdldE1vdmVtZW50U3BlZWRQZXJjZW50ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgICAgIGV4Y2x1ZGVMaXN0ID0gZSB8fCBbXSxcbiAgICAgICAgICAgIGhhc1lhc2hhID0gZmFsc2UsXG4gICAgICAgICAgICBoYXNEcnVtcyA9IGZhbHNlLFxuICAgICAgICAgICAgaGFzRHJ1bXNBY3RpdmUgPSBmYWxzZSxcbiAgICAgICAgICAgIGhhc1BoYXNlQWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgICBoYXNTaGFkb3dCbGFkZUFjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgICAgaGFzQnV0dGVyZmx5QWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgICBoYXNNb01BY3RpdmUgPSBmYWxzZSxcbiAgICAgICAgICAgIHlhc2hhSXRlbXMgPSBbJ21hbnRhJywneWFzaGEnLCdzYW5nZV9hbmRfeWFzaGEnXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZUxpc3QuaW5kZXhPZihhdHRyaWJ1dGUubmFtZSkgPiAtMSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVtZW50X3NwZWVkX3BlcmNlbnRfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNZYXNoYSAmJiB5YXNoYUl0ZW1zLmluZGV4T2YoaXRlbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzWWFzaGEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfYXVyYV9tb3ZlbWVudF9zcGVlZF9wY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNEcnVtcyAmJiBpdGVtID09ICdhbmNpZW50X2phbmdnbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0RydW1zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BoYXNlX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSAmJiAhaGFzUGhhc2VBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1BoYXNlQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVtZW50X3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUgJiYgIWhhc0RydW1zQWN0aXZlICYmIGl0ZW0gPT0gJ2FuY2llbnRfamFuZ2dvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRHJ1bXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2luZHdhbGtfbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlICYmICFoYXNTaGFkb3dCbGFkZUFjdGl2ZSAmJiAoaXRlbSA9PSAnaW52aXNfc3dvcmQnIHx8IGl0ZW0gPT0gJ3NpbHZlcl9lZGdlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1NoYWRvd0JsYWRlQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JlcnNlcmtfYm9udXNfbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlICYmICFoYXNNb01BY3RpdmUgJiYgaXRlbSA9PSAnbWFza19vZl9tYWRuZXNzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzTW9NQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX21vdmVtZW50X3NwZWVkJzogLy9tYW50YVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNZYXNoYSAmJiBpdGVtID09ICdtYW50YScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1lhc2hhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gPT0gJ3Ntb2tlX29mX2RlY2VpdCcgJiYgaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9udXNfbW92ZV9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUgJiYgIWhhc0J1dHRlcmZseUFjdGl2ZSAmJiBpdGVtID09ICdidXR0ZXJmbHknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNCdXR0ZXJmbHlBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUvMTAwLCBleGNsdWRlTGlzdDogZXhjbHVkZUxpc3R9O1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3Zlc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ2R1c3QnICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxhc3RfbW92ZW1lbnRfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ3NoaXZhc19ndWFyZCcgJiYgaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xkX21vdmVtZW50X3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdza2FkaScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFpbV9tb3ZlbWVudF9zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pdGVtcygpW2ldLmRlYnVmZiAmJiBzZWxmLml0ZW1zKClbaV0uZGVidWZmID09ICdtYWltJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3ZhbHVlOiB0b3RhbEF0dHJpYnV0ZS8xMDAsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBcbiAgICBzZWxmLmdldEJvbnVzRGFtYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICB2YXIgc291cmNlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19kYW1hZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW1dID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2UnOiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlVHlwZSc6ICdwaHlzaWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXluYW1lJzogbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5kaXNwbGF5bmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2l0ZW1dLmNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmhvbHlfYm9udXNfZGFtYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbaXRlbSArICdfYWN0aXZlJ10gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbSArICdfYWN0aXZlJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGFtYWdlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudCc6MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5bmFtZSc6IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uZGlzcGxheW5hbWUgKyAnIFVuaG9seSBTdHJlbmd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbaXRlbV0uY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzb3VyY2VzOiBzb3VyY2VzLCB0b3RhbDogdG90YWxBdHRyaWJ1dGUgfTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50ID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcyA9IHMgfHwge3NvdXJjZXM6e30sdG90YWw6MH07XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IHMudG90YWwgfHwgMDtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSBzLnNvdXJjZXMgfHwge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhbWFnZV9hdXJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzW2l0ZW1dID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlc1tpdGVtXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhbWFnZSc6IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYW1hZ2VUeXBlJzogJ3BoeXNpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50JzoxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheW5hbWUnOiBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmRpc3BsYXluYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc291cmNlc1tpdGVtXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgdG90YWw6IHRvdGFsQXR0cmlidXRlIH07XG4gICAgfTtcbiAgICBzZWxmLmdldEF0dGFja1NwZWVkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgICAgIGhhc1Bvd2VyVHJlYWRzID0gZmFsc2UsXG4gICAgICAgICAgICBleGNsdWRlTGlzdCA9IGUgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGVMaXN0LmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ3Bvd2VyX3RyZWFkcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc1Bvd2VyVHJlYWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Bvd2VyVHJlYWRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtID09ICdtb29uX3NoYXJkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtID09ICdodXJyaWNhbmVfcGlrZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29uc3VtZWRfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ21vb25fc2hhcmQnICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVyYV9hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gJ3NoaXZhc19ndWFyZCcpIHsgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2llbnRfamFuZ2dvXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX2F1cmFfYXR0YWNrX3NwZWVkX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvLyBhbmNpZW50X2phbmdnb1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19hdHRhY2tfc3BlZWRfcGN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmhvbHlfYm9udXNfYXR0YWNrX3NwZWVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkgeyB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pOyB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmVyc2Vya19ib251c19hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7IHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7IH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3ZhbHVlOiB0b3RhbEF0dHJpYnV0ZSwgZXhjbHVkZUxpc3Q6IGV4Y2x1ZGVMaXN0fTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0QXR0YWNrU3BlZWRSZWR1Y3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwLFxuICAgICAgICAgICAgZXhjbHVkZUxpc3QgPSBlIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlTGlzdC5pbmRleE9mKGF0dHJpYnV0ZS5uYW1lKSA+IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVyYV9hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ3NoaXZhc19ndWFyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSArPSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sZF9hdHRhY2tfc3BlZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT0gJ3NrYWRpJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYWltX2F0dGFja19zcGVlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pdGVtcygpW2ldLmRlYnVmZiAmJiBzZWxmLml0ZW1zKClbaV0uZGVidWZmID09ICdtYWltJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICs9IHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3ZhbHVlOiB0b3RhbEF0dHJpYnV0ZSwgZXhjbHVkZUxpc3Q6IGV4Y2x1ZGVMaXN0fTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0TGlmZXN0ZWFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdsaWZlc3RlYWxfcGVyY2VudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAnc2F0YW5pYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQWN0aXZlKSB7IHJldHVybiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmhvbHlfbGlmZXN0ZWFsX3BlcmNlbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7IHJldHVybiBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pOyB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07XG4gICAgc2VsZi5nZXRMaWZlc3RlYWxBdXJhID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMCxcbiAgICAgICAgICAgIGV4Y2x1ZGVMaXN0ID0gZSB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZUxpc3QuaW5kZXhPZihhdHRyaWJ1dGUubmFtZSkgPiAtMSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZhbXBpcmljX2F1cmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaXN0LnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGV4Y2x1ZGVMaXN0OiBleGNsdWRlTGlzdH07XG4gICAgfTtcbiAgICBzZWxmLmdldE1hZ2ljUmVzaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19tYWdpY2FsX2FybW9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxIC0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib251c19zcGVsbF9yZXNpc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hZ2ljX3Jlc2lzdGFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9O1xuICAgIHNlbGYuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb25TZWxmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG90YWxBdHRyaWJ1dGUgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuaXRlbXMoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxmLml0ZW1zKClbaV0uaXRlbTtcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IHNlbGYuYWN0aXZlSXRlbXMuaW5kZXhPZihzZWxmLml0ZW1zKClbaV0pID49IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXRlbXMoKVtpXS5lbmFibGVkKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdleHRyYV9zcGVsbF9kYW1hZ2VfcGVyY2VudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdldGhlcmVhbF9kYW1hZ2VfYm9udXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsQXR0cmlidXRlO1xuICAgIH07ICAgXG4gICAgc2VsZi5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChhdHRyaWJ1dGUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXRoZXJlYWxfZGFtYWdlX2JvbnVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNFdGhlcmVhbCgpKSB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVzaXN0X2RlYnVmZic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9OyAgICAgICAgXG5cbiAgICBzZWxmLmdldFZpc2lvblJhbmdlTmlnaHQgPSBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBteS5wcm90b3R5cGUuaXRlbURhdGFbJ2l0ZW1fJyArIGl0ZW1dLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvbnVzX25pZ2h0X3Zpc2lvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPSAnbW9vbl9zaGFyZCcgfHwgIWlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKz0gcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbEF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBcbiAgICBzZWxmLmdldEF0dGFja1JhbmdlID0gZnVuY3Rpb24gKGF0dGFja3R5cGUsIGFMaXN0KSB7XG4gICAgICAgIHZhciB0b3RhbEF0dHJpYnV0ZSA9IDAsXG4gICAgICAgICAgICBhdHRyaWJ1dGVMaXN0ID0gYUxpc3QgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5pdGVtcygpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXMoKVtpXS5pdGVtO1xuICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gc2VsZi5hY3RpdmVJdGVtcy5pbmRleE9mKHNlbGYuaXRlbXMoKVtpXSkgPj0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pdGVtcygpW2ldLmVuYWJsZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDtqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlTGlzdC5maW5kKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhdHRyaWJ1dGUubmFtZSA9PSBhLm5hbWU7IH0pKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJhZ29uX2xhbmNlXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Jhc2VfYXR0YWNrX3JhbmdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2t0eXBlID09ICdET1RBX1VOSVRfQ0FQX1JBTkdFRF9BVFRBQ0snKSBhdHRyaWJ1dGVMaXN0LnB1c2goeyduYW1lJzphdHRyaWJ1dGUubmFtZSwgJ3ZhbHVlJzogcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKX0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRvdGFsQXR0cmlidXRlID0gYXR0cmlidXRlTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lbW8gKz0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogdG90YWxBdHRyaWJ1dGUsIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZUxpc3R9O1xuICAgIH07XG4gICAgXG4gICAgc2VsZi5nZXRNaXNzQ2hhbmNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMSxcbiAgICAgICAgICAgIGV4Y2x1ZGVMaXN0ID0gZSB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZUxpc3QuaW5kZXhPZihhdHRyaWJ1dGUubmFtZSkgPiAtMSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHJpYnV0ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pc3NfY2hhbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSAnc29sYXJfY3Jlc3QnICYmIGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBdHRyaWJ1dGUgKj0gKDEgLSBwYXJzZUludChhdHRyaWJ1dGUudmFsdWVbMF0pIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGlzdC5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsaW5kX3BjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF0dHJpYnV0ZSAqPSAoMSAtIHBhcnNlSW50KGF0dHJpYnV0ZS52YWx1ZVswXSkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUxpc3QucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3ZhbHVlOiB0b3RhbEF0dHJpYnV0ZSwgZXhjbHVkZUxpc3Q6IGV4Y2x1ZGVMaXN0fTtcbiAgICB9O1xuICAgIFxuICAgIHNlbGYuZ2V0QmFzZURhbWFnZVJlZHVjdGlvblBjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFja3N0YWJfcmVkdWN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLml0ZW1zKClbaV0uZGVidWZmICYmIHNlbGYuaXRlbXMoKVtpXS5kZWJ1ZmYgPT0gJ3NoYWRvd193YWxrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTsgICAgXG4gICAgc2VsZi5nZXRCb251c0RhbWFnZVJlZHVjdGlvblBjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvdGFsQXR0cmlidXRlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLml0ZW1zKCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gc2VsZi5pdGVtcygpW2ldLml0ZW07XG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBzZWxmLmFjdGl2ZUl0ZW1zLmluZGV4T2Yoc2VsZi5pdGVtcygpW2ldKSA+PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzZWxmLml0ZW1zKClbaV0uZW5hYmxlZCgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXkucHJvdG90eXBlLml0ZW1EYXRhWydpdGVtXycgKyBpdGVtXS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IG15LnByb3RvdHlwZS5pdGVtRGF0YVsnaXRlbV8nICsgaXRlbV0uYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXR0cmlidXRlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFja3N0YWJfcmVkdWN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLml0ZW1zKClbaV0uZGVidWZmICYmIHNlbGYuaXRlbXMoKVtpXS5kZWJ1ZmYgPT0gJ3NoYWRvd193YWxrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQXR0cmlidXRlICo9ICgxICsgcGFyc2VJbnQoYXR0cmlidXRlLnZhbHVlWzBdKSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxBdHRyaWJ1dGU7XG4gICAgfTsgICAgXG4gICAgXG4gICAgc2VsZi5pdGVtT3B0aW9ucyA9IGtvLm9ic2VydmFibGVBcnJheShteS5wcm90b3R5cGUuaXRlbU9wdGlvbnNBcnIpO1xuICAgIFxuICAgIHNlbGYuaXRlbUJ1ZmZPcHRpb25zID0ga28ub2JzZXJ2YWJsZUFycmF5KG15LnByb3RvdHlwZS5pdGVtQnVmZk9wdGlvbnMpO1xuICAgIHNlbGYuc2VsZWN0ZWRJdGVtQnVmZiA9IGtvLm9ic2VydmFibGUoJ2Fzc2F1bHQnKTtcblxuICAgIHNlbGYuaXRlbURlYnVmZk9wdGlvbnMgPSBrby5vYnNlcnZhYmxlQXJyYXkobXkucHJvdG90eXBlLml0ZW1EZWJ1ZmZPcHRpb25zKTtcbiAgICBzZWxmLnNlbGVjdGVkSXRlbURlYnVmZiA9IGtvLm9ic2VydmFibGUoJ2Fzc2F1bHQnKTtcbiAgICBcbiAgICByZXR1cm4gc2VsZjtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGtvID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2tvJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydrbyddIDogbnVsbCk7XG5cbmtvLm1hcHBpbmcgPSByZXF1aXJlKCcuLi9saWIva25vY2tvdXQubWFwcGluZycpO1xua28ud3JhcCA9IHJlcXVpcmUoJy4uL2xpYi9rbm9ja291dC53cmFwJyk7XG5cbmtvLmV4dGVuZGVycy5udW1lcmljID0gZnVuY3Rpb24odGFyZ2V0LCBwcmVjaXNpb24pIHtcbiAgICAvL2NyZWF0ZSBhIHdyaXRlYWJsZSBjb21wdXRlZCBvYnNlcnZhYmxlIHRvIGludGVyY2VwdCB3cml0ZXMgdG8gb3VyIG9ic2VydmFibGVcbiAgICB2YXIgcmVzdWx0ID0ga28uY29tcHV0ZWQoe1xuICAgICAgICByZWFkOiB0YXJnZXQsICAvL2Fsd2F5cyByZXR1cm4gdGhlIG9yaWdpbmFsIG9ic2VydmFibGVzIHZhbHVlXG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0YXJnZXQoKSxcbiAgICAgICAgICAgICAgICByb3VuZGluZ011bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKSxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZUFzTnVtID0gaXNOYU4obmV3VmFsdWUpID8gMCA6IHBhcnNlRmxvYXQoK25ld1ZhbHVlKSxcbiAgICAgICAgICAgICAgICB2YWx1ZVRvV3JpdGUgPSBNYXRoLnJvdW5kKG5ld1ZhbHVlQXNOdW0gKiByb3VuZGluZ011bHRpcGxpZXIpIC8gcm91bmRpbmdNdWx0aXBsaWVyO1xuIFxuICAgICAgICAgICAgLy9vbmx5IHdyaXRlIGlmIGl0IGNoYW5nZWRcbiAgICAgICAgICAgIGlmICh2YWx1ZVRvV3JpdGUgIT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQodmFsdWVUb1dyaXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9pZiB0aGUgcm91bmRlZCB2YWx1ZSBpcyB0aGUgc2FtZSwgYnV0IGEgZGlmZmVyZW50IHZhbHVlIHdhcyB3cml0dGVuLCBmb3JjZSBhIG5vdGlmaWNhdGlvbiBmb3IgdGhlIGN1cnJlbnQgZmllbGRcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lm5vdGlmeVN1YnNjcmliZXJzKHZhbHVlVG9Xcml0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkuZXh0ZW5kKHsgbm90aWZ5OiAnYWx3YXlzJyB9KTtcbiBcbiAgICAvL2luaXRpYWxpemUgd2l0aCBjdXJyZW50IHZhbHVlIHRvIG1ha2Ugc3VyZSBpdCBpcyByb3VuZGVkIGFwcHJvcHJpYXRlbHlcbiAgICByZXN1bHQodGFyZ2V0KCkpO1xuIFxuICAgIC8vcmV0dXJuIHRoZSBuZXcgY29tcHV0ZWQgb2JzZXJ2YWJsZVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtvOyIsIid1c2Ugc3RyaWN0JztcbnZhciBrbyA9IHJlcXVpcmUoJy4vaGVyb2NhbGNfa25vY2tvdXQnKTtcbiAgICBcbnZhciBteSA9IHJlcXVpcmUoXCIuL2hlcm9jYWxjX2NvcmVcIik7XG5cbm15LnByb3RvdHlwZS5Vbml0T3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGRpc3BsYXluYW1lLCBsZXZlbHMsIGltYWdlLCBsZXZlbCkge1xuICAgIHRoaXMuaGVyb05hbWUgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChsZXZlbHMgPiAwKSA/IG5hbWUgKyAobGV2ZWwoKSA8PSBsZXZlbHMgPyBsZXZlbCgpIDogMSkgOiBuYW1lO1xuICAgIH0pO1xuICAgIHRoaXMuaGVyb0Rpc3BsYXlOYW1lID0gZGlzcGxheW5hbWU7XG4gICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgIHRoaXMubGV2ZWxzID0gbGV2ZWxzO1xufTtcblxubXkucHJvdG90eXBlLlVuaXRWaWV3TW9kZWwgPSBmdW5jdGlvbiAoaCxwKSB7XG4gICAgdmFyIHNlbGYgPSBuZXcgbXkucHJvdG90eXBlLkhlcm9Nb2RlbChoKTtcbiAgICBzZWxmLnBhcmVudCA9IHA7XG4gICAgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCA9IGtvLm9ic2VydmFibGUoMSk7XG4gICAgc2VsZi5hdmFpbGFibGVVbml0cyA9IGtvLm9ic2VydmFibGVBcnJheShbXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbG9uZV9kcnVpZF9iZWFyJywgJ0xvbmUgRHJ1aWQgU3Bpcml0IEJlYXInLDQsJy9tZWRpYS9pbWFnZXMvdW5pdHMvc3Bpcml0X2JlYXIucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfYnJld21hc3Rlcl9lYXJ0aF8nLCdCcmV3bWFzdGVyIEVhcnRoIFdhcnJpb3InLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfYnJld21hc3Rlcl9lYXJ0aC5wbmcnLCBzZWxmLnNlbGVjdGVkVW5pdExldmVsKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5Vbml0T3B0aW9uKCducGNfZG90YV9icmV3bWFzdGVyX2ZpcmVfJywnQnJld21hc3RlciBGaXJlIFdhcnJpb3InLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfYnJld21hc3Rlcl9maXJlLnBuZycsIHNlbGYuc2VsZWN0ZWRVbml0TGV2ZWwpLFxuICAgICAgICBuZXcgbXkucHJvdG90eXBlLlVuaXRPcHRpb24oJ25wY19kb3RhX2JyZXdtYXN0ZXJfc3Rvcm1fJywnQnJld21hc3RlciBTdG9ybSBXYXJyaW9yJywzLCcvbWVkaWEvaW1hZ2VzL3VuaXRzL25wY19kb3RhX2JyZXdtYXN0ZXJfc3Rvcm0ucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8nLCdOZWNyb25vbWljb24gQXJjaGVyJywzLCcvbWVkaWEvaW1hZ2VzL3VuaXRzL25wY19kb3RhX25lY3Jvbm9taWNvbl9hcmNoZXIucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbmVjcm9ub21pY29uX3dhcnJpb3JfJywnTmVjcm9ub21pY29uIFdhcnJpb3InLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfbmVjcm9ub21pY29uX3dhcnJpb3IucG5nJywgc2VsZi5zZWxlY3RlZFVuaXRMZXZlbCksXG4gICAgICAgIG5ldyBteS5wcm90b3R5cGUuVW5pdE9wdGlvbignbnBjX2RvdGFfbHljYW5fd29sZicsJ0x5Y2FuIFdvbGYnLDQsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfbHljYW5fd29sZi5wbmcnLCBzZWxmLnNlbGVjdGVkVW5pdExldmVsKSxcbiAgICAgICAgbmV3IG15LnByb3RvdHlwZS5Vbml0T3B0aW9uKCducGNfZG90YV92aXNhZ2VfZmFtaWxpYXInLCdWaXNhZ2UgRmFtaWxpYXInLDMsJy9tZWRpYS9pbWFnZXMvdW5pdHMvbnBjX2RvdGFfdmlzYWdlX2ZhbWlsaWFyLnBuZycsIHNlbGYuc2VsZWN0ZWRVbml0TGV2ZWwpXG4gICAgXSk7XG4gICAgc2VsZi5zZWxlY3RlZFVuaXQgPSBrby5vYnNlcnZhYmxlKHNlbGYuYXZhaWxhYmxlVW5pdHMoKVswXSk7XG4gICAgc2VsZi5zZWxlY3RlZFVuaXQuc3Vic2NyaWJlKGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZS5oZXJvTmFtZSgpLmluZGV4T2YoJ25wY19kb3RhX2xvbmVfZHJ1aWRfYmVhcicpICE9IC0xKSB7XG4gICAgICAgICAgICBzZWxmLmludmVudG9yeS5oYXNJbnZlbnRvcnkodHJ1ZSk7XG4gICAgICAgICAgICBzZWxmLmludmVudG9yeS5pdGVtcy5yZW1vdmVBbGwoKTtcbiAgICAgICAgICAgIHNlbGYuaW52ZW50b3J5LmFjdGl2ZUl0ZW1zLnJlbW92ZUFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5pbnZlbnRvcnkuaGFzSW52ZW50b3J5KGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGYuaW52ZW50b3J5Lml0ZW1zLnJlbW92ZUFsbCgpO1xuICAgICAgICAgICAgc2VsZi5pbnZlbnRvcnkuYWN0aXZlSXRlbXMucmVtb3ZlQWxsKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLmhlcm8gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGtvLndyYXAuZnJvbUpTKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldKTtcbiAgICB9KTtcbiAgICBzZWxmLmhlcm9EYXRhID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXTtcbiAgICB9KTtcbiAgICBzZWxmLmdldEFiaWxpdHlMZXZlbE1heCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuYWJpbGl0eXR5cGUgPT0gJ0RPVEFfQUJJTElUWV9UWVBFX0FUVFJJQlVURVMnKSB7XG4gICAgICAgICAgICByZXR1cm4gMTA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YS5uYW1lID09ICduZWNyb25vbWljb25fYXJjaGVyX21hbmFfYnVybicgfHwgZGF0YS5uYW1lID09ICduZWNyb25vbWljb25fYXJjaGVyX2FvZSdcbiAgICAgICAgICAgIHx8IGRhdGEubmFtZSA9PSAnbmVjcm9ub21pY29uX3dhcnJpb3JfbWFuYV9idXJuJyB8fCBkYXRhLm5hbWUgPT0gJ25lY3Jvbm9taWNvbl93YXJyaW9yX2xhc3Rfd2lsbCcpIHtcbiAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEubmFtZSA9PSAnbmVjcm9ub21pY29uX3dhcnJpb3Jfc2lnaHQnKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzZWxmLmFiaWxpdHkgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGEgPSBuZXcgbXkucHJvdG90eXBlLkFiaWxpdHlNb2RlbChrby5tYXBwaW5nLmZyb21KUyhteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hYmlsaXRpZXMpKTtcbiAgICAgICAgYS5oYXNTY2VwdGVyID0gc2VsZi5pbnZlbnRvcnkuaGFzU2NlcHRlclxuICAgICAgICBzd2l0Y2ggKHNlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKSkge1xuICAgICAgICAgICAgY2FzZSAnbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8xJzpcbiAgICAgICAgICAgIGNhc2UgJ25wY19kb3RhX25lY3Jvbm9taWNvbl93YXJyaW9yXzEnOlxuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMF0ubGV2ZWwoMSk7XG4gICAgICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVsxXS5sZXZlbCgxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8yJzpcbiAgICAgICAgICAgIGNhc2UgJ25wY19kb3RhX25lY3Jvbm9taWNvbl93YXJyaW9yXzInOlxuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMF0ubGV2ZWwoMik7XG4gICAgICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVsxXS5sZXZlbCgyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnBjX2RvdGFfbmVjcm9ub21pY29uX2FyY2hlcl8zJzpcbiAgICAgICAgICAgICAgICBhLmFiaWxpdGllcygpWzBdLmxldmVsKDMpO1xuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMV0ubGV2ZWwoMyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25wY19kb3RhX25lY3Jvbm9taWNvbl93YXJyaW9yXzMnOlxuICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbMF0ubGV2ZWwoMyk7XG4gICAgICAgICAgICAgICAgYS5hYmlsaXRpZXMoKVsxXS5sZXZlbCgzKTtcbiAgICAgICAgICAgICAgICBhLmFiaWxpdGllcygpWzJdLmxldmVsKDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYS5sZXZlbFVwQWJpbGl0eSA9IGZ1bmN0aW9uKGluZGV4LCBkYXRhLCBldmVudCwgaGVybykge1xuICAgICAgICAgICAgc3dpdGNoIChhLmFiaWxpdGllcygpW2luZGV4KCldLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fYXJjaGVyX21hbmFfYnVybic6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uX2FyY2hlcl9hb2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbl93YXJyaW9yX21hbmFfYnVybic6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uX3dhcnJpb3JfbGFzdF93aWxsJzpcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fd2Fycmlvcl9zaWdodCc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSA8IGhlcm8uZ2V0QWJpbGl0eUxldmVsTWF4KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmFiaWxpdGllcygpW2luZGV4KCldLmxldmVsKGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoKSsxKTtcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICAgICAgYS5sZXZlbERvd25BYmlsaXR5ID0gZnVuY3Rpb24oaW5kZXgsIGRhdGEsIGV2ZW50LCBoZXJvKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBzd2l0Y2ggKGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbl9hcmNoZXJfbWFuYV9idXJuJzpcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fYXJjaGVyX2FvZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVjcm9ub21pY29uX3dhcnJpb3JfbWFuYV9idXJuJzpcbiAgICAgICAgICAgICAgICBjYXNlICduZWNyb25vbWljb25fd2Fycmlvcl9sYXN0X3dpbGwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25lY3Jvbm9taWNvbl93YXJyaW9yX3NpZ2h0JzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoYS5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpPjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYWJpbGl0aWVzKClbaW5kZXgoKV0ubGV2ZWwoYS5hYmlsaXRpZXMoKVtpbmRleCgpXS5sZXZlbCgpLTEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhO1xuICAgIH0pOyAgICAgICAgXG4gICAgc2VsZi5wcmltYXJ5QXR0cmlidXRlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vdmFyIHYgPSBteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5hdHRyaWJ1dGVwcmltYXJ5O1xuICAgICAgICB2YXIgdiA9IDA7XG4gICAgICAgIGlmICh2ID09ICdET1RBX0FUVFJJQlVURV9BR0lMSVRZJykge1xuICAgICAgICAgICAgcmV0dXJuICdhZ2knXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA9PSAnRE9UQV9BVFRSSUJVVEVfSU5URUxMRUNUJykge1xuICAgICAgICAgICAgcmV0dXJuICdpbnQnXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA9PSAnRE9UQV9BVFRSSUJVVEVfU1RSRU5HVEgnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3N0cidcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgaWYgKGEgPT0gJ2FnaScpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNlbGYudG90YWxBZ2koKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT0gJ2ludCcpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNlbGYudG90YWxJbnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT0gJ3N0cicpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNlbGYudG90YWxTdHIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBzZWxmLnRvdGFsQWdpID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uYXR0cmlidXRlYmFzZWFnaWxpdHlcbiAgICAgICAgICAgICAgICArIG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dHJpYnV0ZWFnaWxpdHlnYWluICogKHNlbGYuc2VsZWN0ZWRIZXJvTGV2ZWwoKSAtIDEpIFxuICAgICAgICAgICAgICAgIC8vKyBzZWxmLmludmVudG9yeS5nZXRBdHRyaWJ1dGVzKCdhZ2knKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dHJpYnV0ZUJvbnVzTGV2ZWwoKSoyXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBZ2lsaXR5KClcbiAgICAgICAgICAgICAgICArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICsgc2VsZi5kZWJ1ZmZzLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsSW50ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uYXR0cmlidXRlYmFzZWludGVsbGlnZW5jZSBcbiAgICAgICAgICAgICAgICArIG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dHJpYnV0ZWludGVsbGlnZW5jZWdhaW4gKiAoc2VsZi5zZWxlY3RlZEhlcm9MZXZlbCgpIC0gMSkgXG4gICAgICAgICAgICAgICAgLy8rIHNlbGYuaW52ZW50b3J5LmdldEF0dHJpYnV0ZXMoJ2ludCcpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXR0cmlidXRlQm9udXNMZXZlbCgpKjJcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEludGVsbGlnZW5jZSgpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEFsbFN0YXRzUmVkdWN0aW9uKClcbiAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICApLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbFN0ciA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dHJpYnV0ZWJhc2VzdHJlbmd0aCBcbiAgICAgICAgICAgICAgICArIG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dHJpYnV0ZXN0cmVuZ3RoZ2FpbiAqIChzZWxmLnNlbGVjdGVkSGVyb0xldmVsKCkgLSAxKSBcbiAgICAgICAgICAgICAgICAvLysgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0cmlidXRlcygnc3RyJykgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRBdHRyaWJ1dGVCb251c0xldmVsKCkqMlxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0U3RyZW5ndGgoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRBbGxTdGF0c1JlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QWxsU3RhdHNSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIC8qc2VsZi5oZWFsdGggPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5zdGF0dXNoZWFsdGggKyBzZWxmLnRvdGFsU3RyKCkqMTkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRIZWFsdGgoKVxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0SGVhbHRoKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5oZWFsdGhyZWdlbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLnN0YXR1c2hlYWx0aHJlZ2VuICsgc2VsZi50b3RhbFN0cigpKi4wMyBcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldEhlYWx0aFJlZ2VuKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmFiaWxpdHkoKS5nZXRIZWFsdGhSZWdlbigpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEhlYWx0aFJlZ2VuKCkpLnRvRml4ZWQoMik7XG4gICAgfSk7XG4gICAgc2VsZi5tYW5hID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uc3RhdHVzbWFuYSArIHNlbGYudG90YWxJbnQoKSoxMyArIHNlbGYuaW52ZW50b3J5LmdldE1hbmEoKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLm1hbmFyZWdlbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKChteS5wcm90b3R5cGUudW5pdERhdGFbc2VsZi5zZWxlY3RlZFVuaXQoKS5oZXJvTmFtZSgpXS5zdGF0dXNtYW5hcmVnZW4gXG4gICAgICAgICAgICAgICAgKyBzZWxmLnRvdGFsSW50KCkqLjA0IFxuICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0TWFuYVJlZ2VuKCkpIFxuICAgICAgICAgICAgICAgICogKDEgKyBzZWxmLmludmVudG9yeS5nZXRNYW5hUmVnZW5QZXJjZW50KCkpIFxuICAgICAgICAgICAgICAgICsgKHNlbGYuc2VsZWN0ZWRIZXJvKCkuaGVyb05hbWUgPT0gJ2NyeXN0YWxfbWFpZGVuJyA/IHNlbGYuYWJpbGl0eSgpLmdldE1hbmFSZWdlbkFyY2FuZUF1cmEoKSAqIDIgOiBzZWxmLmJ1ZmZzLmdldE1hbmFSZWdlbkFyY2FuZUF1cmEoKSlcbiAgICAgICAgICAgICAgICArIHNlbGYuaW52ZW50b3J5LmdldE1hbmFSZWdlbkJsb29kc3RvbmUoKVxuICAgICAgICAgICAgICAgIC0gc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRNYW5hUmVnZW5SZWR1Y3Rpb24oKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QXJtb3JCYXNlUmVkdWN0aW9uKCkgKiBzZWxmLmRlYnVmZnMuZ2V0QXJtb3JCYXNlUmVkdWN0aW9uKCkgKiAobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uYXJtb3JwaHlzaWNhbCArIHNlbGYudG90YWxBZ2koKSouMTQpXG4gICAgICAgICAgICAgICAgKyBzZWxmLmludmVudG9yeS5nZXRBcm1vcigpICsgc2VsZi5hYmlsaXR5KCkuZ2V0QXJtb3IoKSArIHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0QXJtb3JSZWR1Y3Rpb24oKSArIHNlbGYuYnVmZnMuZ2V0QXJtb3IoKSArIHNlbGYuZGVidWZmcy5nZXRBcm1vclJlZHVjdGlvbigpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxBcm1vclBoeXNpY2FsUmVkdWN0aW9uID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoKDAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSAvICgxICsgMC4wNiAqIHNlbGYudG90YWxBcm1vclBoeXNpY2FsKCkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYudG90YWxNb3ZlbWVudFNwZWVkID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzZWxmLnBhcmVudC5hYmlsaXR5KCkuaXNTaGFwZVNoaWZ0QWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiA1MjI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1zID0gKHNlbGYuYWJpbGl0eSgpLnNldE1vdmVtZW50U3BlZWQoKSA+IDAgPyBzZWxmLmFiaWxpdHkoKS5zZXRNb3ZlbWVudFNwZWVkKCkgOiBzZWxmLmJ1ZmZzLnNldE1vdmVtZW50U3BlZWQoKSk7XG4gICAgICAgIGlmIChtcyA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoKG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLm1vdmVtZW50c3BlZWQgKyBzZWxmLmludmVudG9yeS5nZXRNb3ZlbWVudFNwZWVkRmxhdCgpKyBzZWxmLmFiaWxpdHkoKS5nZXRNb3ZlbWVudFNwZWVkRmxhdCgpKSAqIFxuICAgICAgICAgICAgICAgICAgICAoMSArIHNlbGYuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRQZXJjZW50KCkgXG4gICAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5hYmlsaXR5KCkuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnQoKSBcbiAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuaW52ZW50b3J5LmdldE1vdmVtZW50U3BlZWRQZXJjZW50UmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgICAgICAgICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRNb3ZlbWVudFNwZWVkUGVyY2VudFJlZHVjdGlvbigpIFxuICAgICAgICAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnQoKSBcbiAgICAgICAgICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0TW92ZW1lbnRTcGVlZFBlcmNlbnRSZWR1Y3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICApKS50b0ZpeGVkKDIpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc2VsZi50b3RhbFR1cm5SYXRlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0ubW92ZW1lbnR0dXJucmF0ZSBcbiAgICAgICAgICAgICAgICAqICgxICsgc2VsZi5lbmVteSgpLmFiaWxpdHkoKS5nZXRUdXJuUmF0ZVJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICArIHNlbGYuZGVidWZmcy5nZXRUdXJuUmF0ZVJlZHVjdGlvbigpKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICAqL1xuICAgIHNlbGYuYmFzZURhbWFnZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW01hdGguZmxvb3IobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uYXR0YWNrZGFtYWdlbWluICsgc2VsZi50b3RhbEF0dHJpYnV0ZShzZWxmLnByaW1hcnlBdHRyaWJ1dGUoKSkgKyBzZWxmLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlKCkudG90YWwpLFxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IobXkucHJvdG90eXBlLnVuaXREYXRhW3NlbGYuc2VsZWN0ZWRVbml0KCkuaGVyb05hbWUoKV0uYXR0YWNrZGFtYWdlbWF4ICsgc2VsZi50b3RhbEF0dHJpYnV0ZShzZWxmLnByaW1hcnlBdHRyaWJ1dGUoKSkgKyBzZWxmLmFiaWxpdHkoKS5nZXRCYXNlRGFtYWdlKCkudG90YWwpXTtcbiAgICB9KTtcbiAgICAvKnNlbGYuYm9udXNEYW1hZ2UgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuaW52ZW50b3J5LmdldEJvbnVzRGFtYWdlKCkudG90YWxcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlKCkudG90YWxcbiAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2UoKS50b3RhbFxuICAgICAgICAgICAgICAgICsgTWF0aC5mbG9vcigoc2VsZi5iYXNlRGFtYWdlKClbMF0gKyBzZWxmLmJhc2VEYW1hZ2UoKVsxXSkvMiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogKHNlbGYuaW52ZW50b3J5LmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUGVyY2VudCgpLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHNlbGYuYnVmZnMuZ2V0Qm9udXNEYW1hZ2VQZXJjZW50KCkudG90YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgIChzZWxmLmhlcm8oKS5hdHRhY2t0eXBlKCkgPT0gJ0RPVEFfVU5JVF9DQVBfUkFOR0VEX0FUVEFDSycgXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoc2VsZi5zZWxlY3RlZEhlcm8oKS5oZXJvTmFtZSA9PSAnZHJvd19yYW5nZXInKSA/IHNlbGYuYWJpbGl0eSgpLmdldEJvbnVzRGFtYWdlUHJlY2lzaW9uQXVyYSgpLnRvdGFsWzBdICogc2VsZi50b3RhbEFnaSgpIDogc2VsZi5idWZmcy5nZXRCb251c0RhbWFnZVByZWNpc2lvbkF1cmEoKS50b3RhbFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMClcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgfSk7Ki9cbiAgICAvKnNlbGYuYm9udXNEYW1hZ2VSZWR1Y3Rpb24gPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHNlbGYuZW5lbXkoKS5hYmlsaXR5KCkuZ2V0Qm9udXNEYW1hZ2VSZWR1Y3Rpb24oKSArIHNlbGYuZGVidWZmcy5nZXRCb251c0RhbWFnZVJlZHVjdGlvbigpKTtcbiAgICB9KTtcbiAgICBzZWxmLmRhbWFnZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW3NlbGYuYmFzZURhbWFnZSgpWzBdICsgc2VsZi5ib251c0RhbWFnZSgpWzBdLFxuICAgICAgICAgICAgICAgIHNlbGYuYmFzZURhbWFnZSgpWzFdICsgc2VsZi5ib251c0RhbWFnZSgpWzFdXTtcbiAgICB9KTsqL1xuICAgIHNlbGYudG90YWxNYWdpY1Jlc2lzdGFuY2VQcm9kdWN0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoMSAtIG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLm1hZ2ljYWxyZXNpc3RhbmNlIC8gMTAwKSBcbiAgICAgICAgICAgICAgICAgICAqICgxIC0gc2VsZi5pbnZlbnRvcnkuZ2V0TWFnaWNSZXNpc3QoKSAvIDEwMCkgXG4gICAgICAgICAgICAgICAgICAgKiAoMSAtIHNlbGYuYWJpbGl0eSgpLmdldE1hZ2ljUmVzaXN0KCkgLyAxMDApIFxuICAgICAgICAgICAgICAgICAgICogKDEgLSBzZWxmLmJ1ZmZzLmdldE1hZ2ljUmVzaXN0KCkgLyAxMDApIFxuICAgICAgICAgICAgICAgICAgICogc2VsZi5lbmVteSgpLmludmVudG9yeS5nZXRNYWdpY1Jlc2lzdFJlZHVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgKiBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldE1hZ2ljUmVzaXN0UmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgICAgKiBzZWxmLmRlYnVmZnMuZ2V0TWFnaWNSZXNpc3RSZWR1Y3Rpb24oKTtcbiAgICB9KTtcbiAgICBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoMSAtIHNlbGYudG90YWxNYWdpY1Jlc2lzdGFuY2VQcm9kdWN0KCkpO1xuICAgIH0pO1xuICAgIHNlbGYuYmF0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhYmlsaXR5QkFUID0gc2VsZi5hYmlsaXR5KCkuZ2V0QkFUKCk7XG4gICAgICAgIGlmIChhYmlsaXR5QkFUID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFiaWxpdHlCQVQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG15LnByb3RvdHlwZS51bml0RGF0YVtzZWxmLnNlbGVjdGVkVW5pdCgpLmhlcm9OYW1lKCldLmF0dGFja3JhdGU7XG4gICAgfSk7XG4gICAgLypcbiAgICBzZWxmLmlhcyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsID0gcGFyc2VGbG9hdChzZWxmLnRvdGFsQWdpKCkpIFxuICAgICAgICAgICAgICAgICsgc2VsZi5pbnZlbnRvcnkuZ2V0QXR0YWNrU3BlZWQoKSBcbiAgICAgICAgICAgICAgICArIHNlbGYuYWJpbGl0eSgpLmdldEF0dGFja1NwZWVkKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmVuZW15KCkuYWJpbGl0eSgpLmdldEF0dGFja1NwZWVkUmVkdWN0aW9uKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmJ1ZmZzLmdldEF0dGFja1NwZWVkKCkgXG4gICAgICAgICAgICAgICAgKyBzZWxmLmRlYnVmZnMuZ2V0QXR0YWNrU3BlZWRSZWR1Y3Rpb24oKTtcbiAgICAgICAgaWYgKHZhbCA8IC04MCkge1xuICAgICAgICAgICAgcmV0dXJuIC04MDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgPiA0MDApIHtcbiAgICAgICAgICAgIHJldHVybiA0MDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWwpLnRvRml4ZWQoMik7XG4gICAgfSk7Ki9cbiAgICBzZWxmLmF0dGFja1RpbWUgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmJhdCgpIC8gKDEgKyBzZWxmLmlhcygpIC8gMTAwKSkudG9GaXhlZCgyKTtcbiAgICB9KTtcbiAgICBzZWxmLmF0dGFja3NQZXJTZWNvbmQgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICgxICsgc2VsZi5pYXMoKSAvIDEwMCkgLyBzZWxmLmJhdCgpO1xuICAgIH0pO1xuICAgIHNlbGYuZXZhc2lvbiA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IHNlbGYuYWJpbGl0eSgpLnNldEV2YXNpb24oKTtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoZSAqIDEwMCkudG9GaXhlZCgyKSArICclJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoKDEtKHNlbGYuaW52ZW50b3J5LmdldEV2YXNpb24oKSAqIHNlbGYuYWJpbGl0eSgpLmdldEV2YXNpb24oKSkpICogMTAwKS50b0ZpeGVkKDIpICsgJyUnO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc2VsZi5laHBQaHlzaWNhbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKChzZWxmLmhlYWx0aCgpICogKDEgKyAuMDYgKiBzZWxmLnRvdGFsQXJtb3JQaHlzaWNhbCgpKSkgLyAoMS0oMS0oc2VsZi5pbnZlbnRvcnkuZ2V0RXZhc2lvbigpICogc2VsZi5hYmlsaXR5KCkuZ2V0RXZhc2lvbigpKSkpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIHNlbGYuZWhwTWFnaWNhbCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuaGVhbHRoKCkgLyBzZWxmLnRvdGFsTWFnaWNSZXNpc3RhbmNlUHJvZHVjdCgpKS50b0ZpeGVkKDIpO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBzZWxmO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvcmUgPSByZXF1aXJlKFwiLi9oZXJvY2FsY19jb3JlXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfaW52ZW50b3J5XCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfYWJpbGl0eWRhdGFcIik7XG5yZXF1aXJlKFwiLi9oZXJvY2FsY19hYmlsaXRpZXNcIik7XG5yZXF1aXJlKFwiLi9oZXJvY2FsY19idWZmc1wiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX2hlcm9cIik7XG5yZXF1aXJlKFwiLi9oZXJvY2FsY19oZXJvLmlsbHVzaW9uXCIpO1xucmVxdWlyZShcIi4vaGVyb2NhbGNfaGVyby5tZWVwb1wiKTtcbnJlcXVpcmUoXCIuL2hlcm9jYWxjX3VuaXRcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZTsiLCJpZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gIEFycmF5LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0aGlzID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maW5kIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgbGlzdCA9IE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XG4gICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSBsaXN0W2ldO1xuICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59IiwiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdC8vIE1vZHVsZSBzeXN0ZW1zIG1hZ2ljIGRhbmNlLlxuXG5cdGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KUyBvciBOb2RlOiBoYXJkLWNvZGVkIGRlcGVuZGVuY3kgb24gXCJrbm9ja291dFwiXG5cdFx0ZmFjdG9yeSgodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1sna28nXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2tvJ10gOiBudWxsKSwgZXhwb3J0cyk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSkge1xuXHRcdC8vIEFNRCBhbm9ueW1vdXMgbW9kdWxlIHdpdGggaGFyZC1jb2RlZCBkZXBlbmRlbmN5IG9uIFwia25vY2tvdXRcIlxuXHRcdGRlZmluZShbXCJrbm9ja291dFwiLCBcImV4cG9ydHNcIl0sIGZhY3RvcnkpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIDxzY3JpcHQ+IHRhZzogdXNlIHRoZSBnbG9iYWwgYGtvYCBvYmplY3QsIGF0dGFjaGluZyBhIGBtYXBwaW5nYCBwcm9wZXJ0eVxuXHRcdGZhY3Rvcnkoa28sIGtvLm1hcHBpbmcgPSB7fSk7XG5cdH1cbn0oZnVuY3Rpb24gKGtvLCBleHBvcnRzKSB7XG5cdHZhciBERUJVRz10cnVlO1xuXHR2YXIgbWFwcGluZ1Byb3BlcnR5ID0gXCJfX2tvX21hcHBpbmdfX1wiO1xuXHR2YXIgcmVhbEtvRGVwZW5kZW50T2JzZXJ2YWJsZSA9IGtvLmRlcGVuZGVudE9ic2VydmFibGU7XG5cdHZhciBtYXBwaW5nTmVzdGluZyA9IDA7XG5cdHZhciBkZXBlbmRlbnRPYnNlcnZhYmxlcztcblx0dmFyIHZpc2l0ZWRPYmplY3RzO1xuXHR2YXIgcmVjb2duaXplZFJvb3RQcm9wZXJ0aWVzID0gW1wiY3JlYXRlXCIsIFwidXBkYXRlXCIsIFwia2V5XCIsIFwiYXJyYXlDaGFuZ2VkXCJdO1xuXHR2YXIgZW1wdHlSZXR1cm4gPSB7fTtcblxuXHR2YXIgX2RlZmF1bHRPcHRpb25zID0ge1xuXHRcdGluY2x1ZGU6IFtcIl9kZXN0cm95XCJdLFxuXHRcdGlnbm9yZTogW10sXG5cdFx0Y29weTogW10sXG5cdFx0b2JzZXJ2ZTogW11cblx0fTtcblx0dmFyIGRlZmF1bHRPcHRpb25zID0gX2RlZmF1bHRPcHRpb25zO1xuXG5cdC8vIEF1dGhvcjogS2VubnlUTSBAIFN0YWNrT3ZlcmZsb3dcblx0ZnVuY3Rpb24gdW5pb25BcnJheXMgKHgsIHkpIHtcblx0XHR2YXIgb2JqID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IHgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLSBpKSBvYmpbeFtpXV0gPSB4W2ldO1xuXHRcdGZvciAodmFyIGkgPSB5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgLS0gaSkgb2JqW3lbaV1dID0geVtpXTtcblx0XHR2YXIgcmVzID0gW107XG5cblx0XHRmb3IgKHZhciBrIGluIG9iaikge1xuXHRcdFx0cmVzLnB1c2gob2JqW2tdKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZE9iamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG5cdFx0dmFyIGRlc3RUeXBlO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHNvdXJjZVtrZXldKSB7XG5cdFx0XHRcdGRlc3RUeXBlID0gZXhwb3J0cy5nZXRUeXBlKGRlc3RpbmF0aW9uW2tleV0pO1xuXHRcdFx0XHRpZiAoa2V5ICYmIGRlc3RpbmF0aW9uW2tleV0gJiYgZGVzdFR5cGUgIT09IFwiYXJyYXlcIiAmJiBkZXN0VHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdGV4dGVuZE9iamVjdChkZXN0aW5hdGlvbltrZXldLCBzb3VyY2Vba2V5XSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGJvdGhBcnJheXMgPSBleHBvcnRzLmdldFR5cGUoZGVzdGluYXRpb25ba2V5XSkgPT09IFwiYXJyYXlcIiAmJiBleHBvcnRzLmdldFR5cGUoc291cmNlW2tleV0pID09PSBcImFycmF5XCI7XG5cdFx0XHRcdFx0aWYgKGJvdGhBcnJheXMpIHtcblx0XHRcdFx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSB1bmlvbkFycmF5cyhkZXN0aW5hdGlvbltrZXldLCBzb3VyY2Vba2V5XSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBzb3VyY2Vba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBtZXJnZShvYmoxLCBvYmoyKSB7XG5cdFx0dmFyIG1lcmdlZCA9IHt9O1xuXHRcdGV4dGVuZE9iamVjdChtZXJnZWQsIG9iajEpO1xuXHRcdGV4dGVuZE9iamVjdChtZXJnZWQsIG9iajIpO1xuXG5cdFx0cmV0dXJuIG1lcmdlZDtcblx0fVxuXG5cdGV4cG9ydHMuaXNNYXBwZWQgPSBmdW5jdGlvbiAodmlld01vZGVsKSB7XG5cdFx0dmFyIHVud3JhcHBlZCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmlld01vZGVsKTtcblx0XHRyZXR1cm4gdW53cmFwcGVkICYmIHVud3JhcHBlZFttYXBwaW5nUHJvcGVydHldO1xuXHR9XG5cblx0ZXhwb3J0cy5mcm9tSlMgPSBmdW5jdGlvbiAoanNPYmplY3QgLyosIGlucHV0T3B0aW9ucywgdGFyZ2V0Ki8gKSB7XG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCkgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIGtvLmZyb21KUywgcGFzcyB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIGNvbnZlcnQuXCIpO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGlmICghbWFwcGluZ05lc3RpbmcrKykge1xuXHRcdFx0XHRkZXBlbmRlbnRPYnNlcnZhYmxlcyA9IFtdO1xuXHRcdFx0XHR2aXNpdGVkT2JqZWN0cyA9IG5ldyBvYmplY3RMb29rdXAoKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9wdGlvbnM7XG5cdFx0XHR2YXIgdGFyZ2V0O1xuXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHNbMV1bbWFwcGluZ1Byb3BlcnR5XSkge1xuXHRcdFx0XHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcHRpb25zID0gYXJndW1lbnRzWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAzKSB7XG5cdFx0XHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbMV07XG5cdFx0XHRcdHRhcmdldCA9IGFyZ3VtZW50c1syXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRhcmdldCkge1xuXHRcdFx0XHRvcHRpb25zID0gbWVyZ2Uob3B0aW9ucywgdGFyZ2V0W21hcHBpbmdQcm9wZXJ0eV0pO1xuXHRcdFx0fVxuXHRcdFx0b3B0aW9ucyA9IGZpbGxPcHRpb25zKG9wdGlvbnMpO1xuXG5cdFx0XHR2YXIgcmVzdWx0ID0gdXBkYXRlVmlld01vZGVsKHRhcmdldCwganNPYmplY3QsIG9wdGlvbnMpO1xuXHRcdFx0aWYgKHRhcmdldCkge1xuXHRcdFx0XHRyZXN1bHQgPSB0YXJnZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFueSBkZXBlbmRlbnQgb2JzZXJ2YWJsZXMgdGhhdCB3ZXJlIHByb3hpZWQuXG5cdFx0XHQvLyBEbyB0aGlzIGFmdGVyIHRoZSBtb2RlbCdzIG9ic2VydmFibGVzIGhhdmUgYmVlbiBjcmVhdGVkXG5cdFx0XHRpZiAoIS0tbWFwcGluZ05lc3RpbmcpIHtcblx0XHRcdFx0d2hpbGUgKGRlcGVuZGVudE9ic2VydmFibGVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBETyA9IGRlcGVuZGVudE9ic2VydmFibGVzLnBvcCgpO1xuXHRcdFx0XHRcdGlmIChETykge1xuXHRcdFx0XHRcdFx0RE8oKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gTW92ZSB0aGlzIG1hZ2ljIHByb3BlcnR5IHRvIHRoZSB1bmRlcmx5aW5nIGRlcGVuZGVudCBvYnNlcnZhYmxlXG5cdFx0XHRcdFx0XHRETy5fX0RPW1widGhyb3R0bGVFdmFsdWF0aW9uXCJdID0gRE9bXCJ0aHJvdHRsZUV2YWx1YXRpb25cIl07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYW55IG5ldyBtYXBwaW5nIG9wdGlvbnMgaW4gdGhlIHZpZXcgbW9kZWwsIHNvIHRoYXQgdXBkYXRlRnJvbUpTIGNhbiB1c2UgdGhlbSBsYXRlci5cblx0XHRcdHJlc3VsdFttYXBwaW5nUHJvcGVydHldID0gbWVyZ2UocmVzdWx0W21hcHBpbmdQcm9wZXJ0eV0sIG9wdGlvbnMpO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0bWFwcGluZ05lc3RpbmcgPSAwO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9XG5cdH07XG5cblx0ZXhwb3J0cy5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uU3RyaW5nIC8qLCBvcHRpb25zLCB0YXJnZXQqLyApIHtcblx0XHR2YXIgcGFyc2VkID0ga28udXRpbHMucGFyc2VKc29uKGpzb25TdHJpbmcpO1xuXHRcdGFyZ3VtZW50c1swXSA9IHBhcnNlZDtcblx0XHRyZXR1cm4gZXhwb3J0cy5mcm9tSlMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fTtcblxuXHRleHBvcnRzLnVwZGF0ZUZyb21KUyA9IGZ1bmN0aW9uICh2aWV3TW9kZWwpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJrby5tYXBwaW5nLnVwZGF0ZUZyb21KUywgdXNlIGtvLm1hcHBpbmcuZnJvbUpTIGluc3RlYWQuIFBsZWFzZSBub3RlIHRoYXQgdGhlIG9yZGVyIG9mIHBhcmFtZXRlcnMgaXMgZGlmZmVyZW50IVwiKTtcblx0fTtcblxuXHRleHBvcnRzLnVwZGF0ZUZyb21KU09OID0gZnVuY3Rpb24gKHZpZXdNb2RlbCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImtvLm1hcHBpbmcudXBkYXRlRnJvbUpTT04sIHVzZSBrby5tYXBwaW5nLmZyb21KU09OIGluc3RlYWQuIFBsZWFzZSBub3RlIHRoYXQgdGhlIG9yZGVyIG9mIHBhcmFtZXRlcnMgaXMgZGlmZmVyZW50IVwiKTtcblx0fTtcblxuXHRleHBvcnRzLnRvSlMgPSBmdW5jdGlvbiAocm9vdE9iamVjdCwgb3B0aW9ucykge1xuXHRcdGlmICghZGVmYXVsdE9wdGlvbnMpIGV4cG9ydHMucmVzZXREZWZhdWx0T3B0aW9ucygpO1xuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCkgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIGtvLm1hcHBpbmcudG9KUywgcGFzcyB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIGNvbnZlcnQuXCIpO1xuXHRcdGlmIChleHBvcnRzLmdldFR5cGUoZGVmYXVsdE9wdGlvbnMuaWdub3JlKSAhPT0gXCJhcnJheVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJrby5tYXBwaW5nLmRlZmF1bHRPcHRpb25zKCkuaWdub3JlIHNob3VsZCBiZSBhbiBhcnJheS5cIik7XG5cdFx0aWYgKGV4cG9ydHMuZ2V0VHlwZShkZWZhdWx0T3B0aW9ucy5pbmNsdWRlKSAhPT0gXCJhcnJheVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJrby5tYXBwaW5nLmRlZmF1bHRPcHRpb25zKCkuaW5jbHVkZSBzaG91bGQgYmUgYW4gYXJyYXkuXCIpO1xuXHRcdGlmIChleHBvcnRzLmdldFR5cGUoZGVmYXVsdE9wdGlvbnMuY29weSkgIT09IFwiYXJyYXlcIikgdGhyb3cgbmV3IEVycm9yKFwia28ubWFwcGluZy5kZWZhdWx0T3B0aW9ucygpLmNvcHkgc2hvdWxkIGJlIGFuIGFycmF5LlwiKTtcblxuXHRcdC8vIE1lcmdlIGluIHRoZSBvcHRpb25zIHVzZWQgaW4gZnJvbUpTXG5cdFx0b3B0aW9ucyA9IGZpbGxPcHRpb25zKG9wdGlvbnMsIHJvb3RPYmplY3RbbWFwcGluZ1Byb3BlcnR5XSk7XG5cblx0XHQvLyBXZSBqdXN0IHVud3JhcCBldmVyeXRoaW5nIGF0IGV2ZXJ5IGxldmVsIGluIHRoZSBvYmplY3QgZ3JhcGhcblx0XHRyZXR1cm4gZXhwb3J0cy52aXNpdE1vZGVsKHJvb3RPYmplY3QsIGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRyZXR1cm4ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh4KVxuXHRcdH0sIG9wdGlvbnMpO1xuXHR9O1xuXG5cdGV4cG9ydHMudG9KU09OID0gZnVuY3Rpb24gKHJvb3RPYmplY3QsIG9wdGlvbnMpIHtcblx0XHR2YXIgcGxhaW5KYXZhU2NyaXB0T2JqZWN0ID0gZXhwb3J0cy50b0pTKHJvb3RPYmplY3QsIG9wdGlvbnMpO1xuXHRcdHJldHVybiBrby51dGlscy5zdHJpbmdpZnlKc29uKHBsYWluSmF2YVNjcmlwdE9iamVjdCk7XG5cdH07XG5cblx0ZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdGRlZmF1bHRPcHRpb25zID0gYXJndW1lbnRzWzBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG5cdFx0fVxuXHR9O1xuXG5cdGV4cG9ydHMucmVzZXREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0XHRkZWZhdWx0T3B0aW9ucyA9IHtcblx0XHRcdGluY2x1ZGU6IF9kZWZhdWx0T3B0aW9ucy5pbmNsdWRlLnNsaWNlKDApLFxuXHRcdFx0aWdub3JlOiBfZGVmYXVsdE9wdGlvbnMuaWdub3JlLnNsaWNlKDApLFxuXHRcdFx0Y29weTogX2RlZmF1bHRPcHRpb25zLmNvcHkuc2xpY2UoMClcblx0XHR9O1xuXHR9O1xuXG5cdGV4cG9ydHMuZ2V0VHlwZSA9IGZ1bmN0aW9uKHgpIHtcblx0XHRpZiAoKHgpICYmICh0eXBlb2YgKHgpID09PSBcIm9iamVjdFwiKSkge1xuXHRcdFx0aWYgKHguY29uc3RydWN0b3IgPT09IERhdGUpIHJldHVybiBcImRhdGVcIjtcblx0XHRcdGlmICh4LmNvbnN0cnVjdG9yID09PSBBcnJheSkgcmV0dXJuIFwiYXJyYXlcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHR5cGVvZiB4O1xuXHR9XG5cblx0ZnVuY3Rpb24gZmlsbE9wdGlvbnMocmF3T3B0aW9ucywgb3RoZXJPcHRpb25zKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZXJnZSh7fSwgcmF3T3B0aW9ucyk7XG5cblx0XHQvLyBNb3ZlIHJlY29nbml6ZWQgcm9vdC1sZXZlbCBwcm9wZXJ0aWVzIGludG8gYSByb290IG5hbWVzcGFjZVxuXHRcdGZvciAodmFyIGkgPSByZWNvZ25pemVkUm9vdFByb3BlcnRpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBwcm9wZXJ0eSA9IHJlY29nbml6ZWRSb290UHJvcGVydGllc1tpXTtcblx0XHRcdFxuXHRcdFx0Ly8gQ2Fycnkgb24sIHVubGVzcyB0aGlzIHByb3BlcnR5IGlzIHByZXNlbnRcblx0XHRcdGlmICghb3B0aW9uc1twcm9wZXJ0eV0pIGNvbnRpbnVlO1xuXHRcdFx0XG5cdFx0XHQvLyBNb3ZlIHRoZSBwcm9wZXJ0eSBpbnRvIHRoZSByb290IG5hbWVzcGFjZVxuXHRcdFx0aWYgKCEob3B0aW9uc1tcIlwiXSBpbnN0YW5jZW9mIE9iamVjdCkpIG9wdGlvbnNbXCJcIl0gPSB7fTtcblx0XHRcdG9wdGlvbnNbXCJcIl1bcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XG5cdFx0XHRkZWxldGUgb3B0aW9uc1twcm9wZXJ0eV07XG5cdFx0fVxuXG5cdFx0aWYgKG90aGVyT3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucy5pZ25vcmUgPSBtZXJnZUFycmF5cyhvdGhlck9wdGlvbnMuaWdub3JlLCBvcHRpb25zLmlnbm9yZSk7XG5cdFx0XHRvcHRpb25zLmluY2x1ZGUgPSBtZXJnZUFycmF5cyhvdGhlck9wdGlvbnMuaW5jbHVkZSwgb3B0aW9ucy5pbmNsdWRlKTtcblx0XHRcdG9wdGlvbnMuY29weSA9IG1lcmdlQXJyYXlzKG90aGVyT3B0aW9ucy5jb3B5LCBvcHRpb25zLmNvcHkpO1xuXHRcdFx0b3B0aW9ucy5vYnNlcnZlID0gbWVyZ2VBcnJheXMob3RoZXJPcHRpb25zLm9ic2VydmUsIG9wdGlvbnMub2JzZXJ2ZSk7XG5cdFx0fVxuXHRcdG9wdGlvbnMuaWdub3JlID0gbWVyZ2VBcnJheXMob3B0aW9ucy5pZ25vcmUsIGRlZmF1bHRPcHRpb25zLmlnbm9yZSk7XG5cdFx0b3B0aW9ucy5pbmNsdWRlID0gbWVyZ2VBcnJheXMob3B0aW9ucy5pbmNsdWRlLCBkZWZhdWx0T3B0aW9ucy5pbmNsdWRlKTtcblx0XHRvcHRpb25zLmNvcHkgPSBtZXJnZUFycmF5cyhvcHRpb25zLmNvcHksIGRlZmF1bHRPcHRpb25zLmNvcHkpO1xuXHRcdG9wdGlvbnMub2JzZXJ2ZSA9IG1lcmdlQXJyYXlzKG9wdGlvbnMub2JzZXJ2ZSwgZGVmYXVsdE9wdGlvbnMub2JzZXJ2ZSk7XG5cblx0XHRvcHRpb25zLm1hcHBlZFByb3BlcnRpZXMgPSBvcHRpb25zLm1hcHBlZFByb3BlcnRpZXMgfHwge307XG5cdFx0b3B0aW9ucy5jb3BpZWRQcm9wZXJ0aWVzID0gb3B0aW9ucy5jb3BpZWRQcm9wZXJ0aWVzIHx8IHt9O1xuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWVyZ2VBcnJheXMoYSwgYikge1xuXHRcdGlmIChleHBvcnRzLmdldFR5cGUoYSkgIT09IFwiYXJyYXlcIikge1xuXHRcdFx0aWYgKGV4cG9ydHMuZ2V0VHlwZShhKSA9PT0gXCJ1bmRlZmluZWRcIikgYSA9IFtdO1xuXHRcdFx0ZWxzZSBhID0gW2FdO1xuXHRcdH1cblx0XHRpZiAoZXhwb3J0cy5nZXRUeXBlKGIpICE9PSBcImFycmF5XCIpIHtcblx0XHRcdGlmIChleHBvcnRzLmdldFR5cGUoYikgPT09IFwidW5kZWZpbmVkXCIpIGIgPSBbXTtcblx0XHRcdGVsc2UgYiA9IFtiXTtcblx0XHR9XG5cblx0XHRyZXR1cm4ga28udXRpbHMuYXJyYXlHZXREaXN0aW5jdFZhbHVlcyhhLmNvbmNhdChiKSk7XG5cdH1cblxuXHQvLyBXaGVuIHVzaW5nIGEgJ2NyZWF0ZScgY2FsbGJhY2ssIHdlIHByb3h5IHRoZSBkZXBlbmRlbnQgb2JzZXJ2YWJsZSBzbyB0aGF0IGl0IGRvZXNuJ3QgaW1tZWRpYXRlbHkgZXZhbHVhdGUgb24gY3JlYXRpb24uXG5cdC8vIFRoZSByZWFzb24gaXMgdGhhdCB0aGUgZGVwZW5kZW50IG9ic2VydmFibGVzIGluIHRoZSB1c2VyLXNwZWNpZmllZCBjYWxsYmFjayBtYXkgY29udGFpbiByZWZlcmVuY2VzIHRvIHByb3BlcnRpZXMgdGhhdCBoYXZlIG5vdCBiZWVuIG1hcHBlZCB5ZXQuXG5cdGZ1bmN0aW9uIHdpdGhQcm94eURlcGVuZGVudE9ic2VydmFibGUoZGVwZW5kZW50T2JzZXJ2YWJsZXMsIGNhbGxiYWNrKSB7XG5cdFx0dmFyIGxvY2FsRE8gPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlO1xuXHRcdGtvLmRlcGVuZGVudE9ic2VydmFibGUgPSBmdW5jdGlvbiAocmVhZCwgb3duZXIsIG9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0XHRpZiAocmVhZCAmJiB0eXBlb2YgcmVhZCA9PSBcIm9iamVjdFwiKSB7IC8vIG1pcnJvcnMgY29uZGl0aW9uIGluIGtub2Nrb3V0IGltcGxlbWVudGF0aW9uIG9mIERPJ3Ncblx0XHRcdFx0b3B0aW9ucyA9IHJlYWQ7XG5cdFx0XHR9XG5cblx0XHRcdHZhciByZWFsRGVmZXJFdmFsdWF0aW9uID0gb3B0aW9ucy5kZWZlckV2YWx1YXRpb247XG5cblx0XHRcdHZhciBpc1JlbW92ZWQgPSBmYWxzZTtcblxuXHRcdFx0Ly8gV2Ugd3JhcCB0aGUgb3JpZ2luYWwgZGVwZW5kZW50IG9ic2VydmFibGUgc28gdGhhdCB3ZSBjYW4gcmVtb3ZlIGl0IGZyb20gdGhlICdkZXBlbmRlbnRPYnNlcnZhYmxlcycgbGlzdCB3ZSBuZWVkIHRvIGV2YWx1YXRlIGFmdGVyIG1hcHBpbmcgaGFzXG5cdFx0XHQvLyBjb21wbGV0ZWQgaWYgdGhlIHVzZXIgYWxyZWFkeSBldmFsdWF0ZWQgdGhlIERPIHRoZW1zZWx2ZXMgaW4gdGhlIG1lYW50aW1lLlxuXHRcdFx0dmFyIHdyYXAgPSBmdW5jdGlvbiAoRE8pIHtcblx0XHRcdFx0Ly8gVGVtcG9yYXJpbHkgcmV2ZXJ0IGtvLmRlcGVuZGVudE9ic2VydmFibGUsIHNpbmNlIGl0IGlzIHVzZWQgaW4ga28uaXNXcml0ZWFibGVPYnNlcnZhYmxlXG5cdFx0XHRcdHZhciB0bXAgPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlO1xuXHRcdFx0XHRrby5kZXBlbmRlbnRPYnNlcnZhYmxlID0gcmVhbEtvRGVwZW5kZW50T2JzZXJ2YWJsZTtcblx0XHRcdFx0dmFyIGlzV3JpdGVhYmxlID0ga28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKERPKTtcblx0XHRcdFx0a28uZGVwZW5kZW50T2JzZXJ2YWJsZSA9IHRtcDtcblxuXHRcdFx0XHR2YXIgd3JhcHBlZCA9IHJlYWxLb0RlcGVuZGVudE9ic2VydmFibGUoe1xuXHRcdFx0XHRcdHJlYWQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmICghaXNSZW1vdmVkKSB7XG5cdFx0XHRcdFx0XHRcdGtvLnV0aWxzLmFycmF5UmVtb3ZlSXRlbShkZXBlbmRlbnRPYnNlcnZhYmxlcywgRE8pO1xuXHRcdFx0XHRcdFx0XHRpc1JlbW92ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIERPLmFwcGx5KERPLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0d3JpdGU6IGlzV3JpdGVhYmxlICYmIGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0XHRcdHJldHVybiBETyh2YWwpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZGVmZXJFdmFsdWF0aW9uOiB0cnVlXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAoREVCVUcpIHdyYXBwZWQuX3dyYXBwZXIgPSB0cnVlO1xuXHRcdFx0XHR3cmFwcGVkLl9fRE8gPSBETztcblx0XHRcdFx0cmV0dXJuIHdyYXBwZWQ7XG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRvcHRpb25zLmRlZmVyRXZhbHVhdGlvbiA9IHRydWU7IC8vIHdpbGwgZWl0aGVyIHNldCBmb3IganVzdCBvcHRpb25zLCBvciBib3RoIHJlYWQvb3B0aW9ucy5cblx0XHRcdHZhciByZWFsRGVwZW5kZW50T2JzZXJ2YWJsZSA9IG5ldyByZWFsS29EZXBlbmRlbnRPYnNlcnZhYmxlKHJlYWQsIG93bmVyLCBvcHRpb25zKTtcblxuXHRcdFx0aWYgKCFyZWFsRGVmZXJFdmFsdWF0aW9uKSB7XG5cdFx0XHRcdHJlYWxEZXBlbmRlbnRPYnNlcnZhYmxlID0gd3JhcChyZWFsRGVwZW5kZW50T2JzZXJ2YWJsZSk7XG5cdFx0XHRcdGRlcGVuZGVudE9ic2VydmFibGVzLnB1c2gocmVhbERlcGVuZGVudE9ic2VydmFibGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVhbERlcGVuZGVudE9ic2VydmFibGU7XG5cdFx0fVxuXHRcdGtvLmRlcGVuZGVudE9ic2VydmFibGUuZm4gPSByZWFsS29EZXBlbmRlbnRPYnNlcnZhYmxlLmZuO1xuXHRcdGtvLmNvbXB1dGVkID0ga28uZGVwZW5kZW50T2JzZXJ2YWJsZTtcblx0XHR2YXIgcmVzdWx0ID0gY2FsbGJhY2soKTtcblx0XHRrby5kZXBlbmRlbnRPYnNlcnZhYmxlID0gbG9jYWxETztcblx0XHRrby5jb21wdXRlZCA9IGtvLmRlcGVuZGVudE9ic2VydmFibGU7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVZpZXdNb2RlbChtYXBwZWRSb290T2JqZWN0LCByb290T2JqZWN0LCBvcHRpb25zLCBwYXJlbnROYW1lLCBwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSwgbWFwcGVkUGFyZW50KSB7XG5cdFx0dmFyIGlzQXJyYXkgPSBleHBvcnRzLmdldFR5cGUoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KSkgPT09IFwiYXJyYXlcIjtcblxuXHRcdHBhcmVudFByb3BlcnR5TmFtZSA9IHBhcmVudFByb3BlcnR5TmFtZSB8fCBcIlwiO1xuXG5cdFx0Ly8gSWYgdGhpcyBvYmplY3Qgd2FzIGFscmVhZHkgbWFwcGVkIHByZXZpb3VzbHksIHRha2UgdGhlIG9wdGlvbnMgZnJvbSB0aGVyZSBhbmQgbWVyZ2UgdGhlbSB3aXRoIG91ciBleGlzdGluZyBvbmVzLlxuXHRcdGlmIChleHBvcnRzLmlzTWFwcGVkKG1hcHBlZFJvb3RPYmplY3QpKSB7XG5cdFx0XHR2YXIgcHJldmlvdXNNYXBwaW5nID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShtYXBwZWRSb290T2JqZWN0KVttYXBwaW5nUHJvcGVydHldO1xuXHRcdFx0b3B0aW9ucyA9IG1lcmdlKHByZXZpb3VzTWFwcGluZywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0dmFyIGNhbGxiYWNrUGFyYW1zID0ge1xuXHRcdFx0ZGF0YTogcm9vdE9iamVjdCxcblx0XHRcdHBhcmVudDogbWFwcGVkUGFyZW50IHx8IHBhcmVudFxuXHRcdH07XG5cblx0XHR2YXIgaGFzQ3JlYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9uc1twYXJlbnROYW1lXSAmJiBvcHRpb25zW3BhcmVudE5hbWVdLmNyZWF0ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xuXHRcdH07XG5cblx0XHR2YXIgY3JlYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0cmV0dXJuIHdpdGhQcm94eURlcGVuZGVudE9ic2VydmFibGUoZGVwZW5kZW50T2JzZXJ2YWJsZXMsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHBhcmVudCkgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRcdHJldHVybiBvcHRpb25zW3BhcmVudE5hbWVdLmNyZWF0ZSh7XG5cdFx0XHRcdFx0XHRkYXRhOiBkYXRhIHx8IGNhbGxiYWNrUGFyYW1zLmRhdGEsXG5cdFx0XHRcdFx0XHRwYXJlbnQ6IGNhbGxiYWNrUGFyYW1zLnBhcmVudCxcblx0XHRcdFx0XHRcdHNraXA6IGVtcHR5UmV0dXJuXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdGlvbnNbcGFyZW50TmFtZV0uY3JlYXRlKHtcblx0XHRcdFx0XHRcdGRhdGE6IGRhdGEgfHwgY2FsbGJhY2tQYXJhbXMuZGF0YSxcblx0XHRcdFx0XHRcdHBhcmVudDogY2FsbGJhY2tQYXJhbXMucGFyZW50XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cdFx0XHRcdFxuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHZhciBoYXNVcGRhdGVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBvcHRpb25zW3BhcmVudE5hbWVdICYmIG9wdGlvbnNbcGFyZW50TmFtZV0udXBkYXRlIGluc3RhbmNlb2YgRnVuY3Rpb247XG5cdFx0fTtcblxuXHRcdHZhciB1cGRhdGVDYWxsYmFjayA9IGZ1bmN0aW9uIChvYmosIGRhdGEpIHtcblx0XHRcdHZhciBwYXJhbXMgPSB7XG5cdFx0XHRcdGRhdGE6IGRhdGEgfHwgY2FsbGJhY2tQYXJhbXMuZGF0YSxcblx0XHRcdFx0cGFyZW50OiBjYWxsYmFja1BhcmFtcy5wYXJlbnQsXG5cdFx0XHRcdHRhcmdldDoga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShvYmopXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG9iaikpIHtcblx0XHRcdFx0cGFyYW1zLm9ic2VydmFibGUgPSBvYmo7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvcHRpb25zW3BhcmVudE5hbWVdLnVwZGF0ZShwYXJhbXMpO1xuXHRcdH1cblxuXHRcdHZhciBhbHJlYWR5TWFwcGVkID0gdmlzaXRlZE9iamVjdHMuZ2V0KHJvb3RPYmplY3QpO1xuXHRcdGlmIChhbHJlYWR5TWFwcGVkKSB7XG5cdFx0XHRyZXR1cm4gYWxyZWFkeU1hcHBlZDtcblx0XHR9XG5cblx0XHRwYXJlbnROYW1lID0gcGFyZW50TmFtZSB8fCBcIlwiO1xuXG5cdFx0aWYgKCFpc0FycmF5KSB7XG5cdFx0XHQvLyBGb3IgYXRvbWljIHR5cGVzLCBkbyBhIGRpcmVjdCB1cGRhdGUgb24gdGhlIG9ic2VydmFibGVcblx0XHRcdGlmICghY2FuSGF2ZVByb3BlcnRpZXMocm9vdE9iamVjdCkpIHtcblx0XHRcdFx0c3dpdGNoIChleHBvcnRzLmdldFR5cGUocm9vdE9iamVjdCkpIHtcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0aWYgKGhhc1VwZGF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdGlmIChrby5pc1dyaXRlYWJsZU9ic2VydmFibGUocm9vdE9iamVjdCkpIHtcblx0XHRcdFx0XHRcdFx0cm9vdE9iamVjdCh1cGRhdGVDYWxsYmFjayhyb290T2JqZWN0KSk7XG5cdFx0XHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QgPSByb290T2JqZWN0O1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IHVwZGF0ZUNhbGxiYWNrKHJvb3RPYmplY3QpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0ID0gcm9vdE9iamVjdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYgKGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShtYXBwZWRSb290T2JqZWN0KSkge1xuXHRcdFx0XHRcdFx0aWYgKGhhc1VwZGF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHZhbHVlVG9Xcml0ZSA9IHVwZGF0ZUNhbGxiYWNrKG1hcHBlZFJvb3RPYmplY3QpO1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0KHZhbHVlVG9Xcml0ZSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVRvV3JpdGU7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWVUb1dyaXRlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KTtcblx0XHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCh2YWx1ZVRvV3JpdGUpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVUb1dyaXRlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YXIgaGFzQ3JlYXRlT3JVcGRhdGVDYWxsYmFjayA9IGhhc0NyZWF0ZUNhbGxiYWNrKCkgfHwgaGFzVXBkYXRlQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYgKGhhc0NyZWF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IGNyZWF0ZUNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRtYXBwZWRSb290T2JqZWN0ID0ga28ub2JzZXJ2YWJsZShrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHJvb3RPYmplY3QpKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKGhhc1VwZGF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCh1cGRhdGVDYWxsYmFjayhtYXBwZWRSb290T2JqZWN0KSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmIChoYXNDcmVhdGVPclVwZGF0ZUNhbGxiYWNrKSByZXR1cm4gbWFwcGVkUm9vdE9iamVjdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobWFwcGVkUm9vdE9iamVjdCk7XG5cdFx0XHRcdGlmICghbWFwcGVkUm9vdE9iamVjdCkge1xuXHRcdFx0XHRcdGlmIChoYXNDcmVhdGVDYWxsYmFjaygpKSB7XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gY3JlYXRlQ2FsbGJhY2soKTtcblxuXHRcdFx0XHRcdFx0aWYgKGhhc1VwZGF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gdXBkYXRlQ2FsbGJhY2socmVzdWx0KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKGhhc1VwZGF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZUNhbGxiYWNrKHJlc3VsdCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QgPSB1cGRhdGVDYWxsYmFjayhtYXBwZWRSb290T2JqZWN0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZpc2l0ZWRPYmplY3RzLnNhdmUocm9vdE9iamVjdCwgbWFwcGVkUm9vdE9iamVjdCk7XG5cdFx0XHRcdGlmIChoYXNVcGRhdGVDYWxsYmFjaygpKSByZXR1cm4gbWFwcGVkUm9vdE9iamVjdDtcblxuXHRcdFx0XHQvLyBGb3Igbm9uLWF0b21pYyB0eXBlcywgdmlzaXQgYWxsIHByb3BlcnRpZXMgYW5kIHVwZGF0ZSByZWN1cnNpdmVseVxuXHRcdFx0XHR2aXNpdFByb3BlcnRpZXNPckFycmF5RW50cmllcyhyb290T2JqZWN0LCBmdW5jdGlvbiAoaW5kZXhlcikge1xuXHRcdFx0XHRcdHZhciBmdWxsUHJvcGVydHlOYW1lID0gcGFyZW50UHJvcGVydHlOYW1lLmxlbmd0aCA/IHBhcmVudFByb3BlcnR5TmFtZSArIFwiLlwiICsgaW5kZXhlciA6IGluZGV4ZXI7XG5cblx0XHRcdFx0XHRpZiAoa28udXRpbHMuYXJyYXlJbmRleE9mKG9wdGlvbnMuaWdub3JlLCBmdWxsUHJvcGVydHlOYW1lKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChrby51dGlscy5hcnJheUluZGV4T2Yob3B0aW9ucy5jb3B5LCBmdWxsUHJvcGVydHlOYW1lKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSA9IHJvb3RPYmplY3RbaW5kZXhlcl07XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYodHlwZW9mIHJvb3RPYmplY3RbaW5kZXhlcl0gIT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygcm9vdE9iamVjdFtpbmRleGVyXSAhPSBcImFycmF5XCIgJiYgb3B0aW9ucy5vYnNlcnZlLmxlbmd0aCA+IDAgJiYga28udXRpbHMuYXJyYXlJbmRleE9mKG9wdGlvbnMub2JzZXJ2ZSwgZnVsbFByb3BlcnR5TmFtZSkgPT0gLTEpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSA9IHJvb3RPYmplY3RbaW5kZXhlcl07XG5cdFx0XHRcdFx0XHRvcHRpb25zLmNvcGllZFByb3BlcnRpZXNbZnVsbFByb3BlcnR5TmFtZV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBJbiBjYXNlIHdlIGFyZSBhZGRpbmcgYW4gYWxyZWFkeSBtYXBwZWQgcHJvcGVydHksIGZpbGwgaXQgd2l0aCB0aGUgcHJldmlvdXNseSBtYXBwZWQgcHJvcGVydHkgdmFsdWUgdG8gcHJldmVudCByZWN1cnNpb24uXG5cdFx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHByb3BlcnR5IHRoYXQgd2FzIGdlbmVyYXRlZCBieSBmcm9tSlMsIHdlIHNob3VsZCB1c2UgdGhlIG9wdGlvbnMgc3BlY2lmaWVkIHRoZXJlXG5cdFx0XHRcdFx0dmFyIHByZXZNYXBwZWRQcm9wZXJ0eSA9IHZpc2l0ZWRPYmplY3RzLmdldChyb290T2JqZWN0W2luZGV4ZXJdKTtcblx0XHRcdFx0XHR2YXIgcmV0dmFsID0gdXBkYXRlVmlld01vZGVsKG1hcHBlZFJvb3RPYmplY3RbaW5kZXhlcl0sIHJvb3RPYmplY3RbaW5kZXhlcl0sIG9wdGlvbnMsIGluZGV4ZXIsIG1hcHBlZFJvb3RPYmplY3QsIGZ1bGxQcm9wZXJ0eU5hbWUsIG1hcHBlZFJvb3RPYmplY3QpO1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IHByZXZNYXBwZWRQcm9wZXJ0eSB8fCByZXR2YWw7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYob3B0aW9ucy5vYnNlcnZlLmxlbmd0aCA+IDAgJiYga28udXRpbHMuYXJyYXlJbmRleE9mKG9wdGlvbnMub2JzZXJ2ZSwgZnVsbFByb3BlcnR5TmFtZSkgPT0gLTEpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSA9IHZhbHVlKCk7XG5cdFx0XHRcdFx0XHRvcHRpb25zLmNvcGllZFByb3BlcnRpZXNbZnVsbFByb3BlcnR5TmFtZV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG1hcHBlZFJvb3RPYmplY3RbaW5kZXhlcl0pKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWUpO1xuXHRcdFx0XHRcdFx0aWYgKG1hcHBlZFJvb3RPYmplY3RbaW5kZXhlcl0oKSAhPT0gdmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gbWFwcGVkUm9vdE9iamVjdFtpbmRleGVyXSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlKTtcblx0XHRcdFx0XHRcdG1hcHBlZFJvb3RPYmplY3RbaW5kZXhlcl0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvcHRpb25zLm1hcHBlZFByb3BlcnRpZXNbZnVsbFByb3BlcnR5TmFtZV0gPSB0cnVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgeyAvL21hcHBlZFJvb3RPYmplY3QgaXMgYW4gYXJyYXlcblx0XHRcdHZhciBjaGFuZ2VzID0gW107XG5cblx0XHRcdHZhciBoYXNLZXlDYWxsYmFjayA9IGZhbHNlO1xuXHRcdFx0dmFyIGtleUNhbGxiYWNrID0gZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0cmV0dXJuIHg7XG5cdFx0XHR9XG5cdFx0XHRpZiAob3B0aW9uc1twYXJlbnROYW1lXSAmJiBvcHRpb25zW3BhcmVudE5hbWVdLmtleSkge1xuXHRcdFx0XHRrZXlDYWxsYmFjayA9IG9wdGlvbnNbcGFyZW50TmFtZV0ua2V5O1xuXHRcdFx0XHRoYXNLZXlDYWxsYmFjayA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICgha28uaXNPYnNlcnZhYmxlKG1hcHBlZFJvb3RPYmplY3QpKSB7XG5cdFx0XHRcdC8vIFdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvYnNlcnZhYmxlIGFycmF5LCBhbHNvIGFkZCBhIGJ1bmNoIG9mIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgdGFrZSB0aGUgJ2tleScgb2YgdGhlIGFycmF5IGl0ZW1zIGludG8gYWNjb3VudC5cblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7XG5cblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdC5tYXBwZWRSZW1vdmUgPSBmdW5jdGlvbiAodmFsdWVPclByZWRpY2F0ZSkge1xuXHRcdFx0XHRcdHZhciBwcmVkaWNhdGUgPSB0eXBlb2YgdmFsdWVPclByZWRpY2F0ZSA9PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZU9yUHJlZGljYXRlIDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0ga2V5Q2FsbGJhY2sodmFsdWVPclByZWRpY2F0ZSk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHJldHVybiBtYXBwZWRSb290T2JqZWN0LnJlbW92ZShmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByZWRpY2F0ZShrZXlDYWxsYmFjayhpdGVtKSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0Lm1hcHBlZFJlbW92ZUFsbCA9IGZ1bmN0aW9uIChhcnJheU9mVmFsdWVzKSB7XG5cdFx0XHRcdFx0dmFyIGFycmF5T2ZLZXlzID0gZmlsdGVyQXJyYXlCeUtleShhcnJheU9mVmFsdWVzLCBrZXlDYWxsYmFjayk7XG5cdFx0XHRcdFx0cmV0dXJuIG1hcHBlZFJvb3RPYmplY3QucmVtb3ZlKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5T2ZLZXlzLCBrZXlDYWxsYmFjayhpdGVtKSkgIT0gLTE7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0Lm1hcHBlZERlc3Ryb3kgPSBmdW5jdGlvbiAodmFsdWVPclByZWRpY2F0ZSkge1xuXHRcdFx0XHRcdHZhciBwcmVkaWNhdGUgPSB0eXBlb2YgdmFsdWVPclByZWRpY2F0ZSA9PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZU9yUHJlZGljYXRlIDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0ga2V5Q2FsbGJhY2sodmFsdWVPclByZWRpY2F0ZSk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHJldHVybiBtYXBwZWRSb290T2JqZWN0LmRlc3Ryb3koZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBwcmVkaWNhdGUoa2V5Q2FsbGJhY2soaXRlbSkpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdC5tYXBwZWREZXN0cm95QWxsID0gZnVuY3Rpb24gKGFycmF5T2ZWYWx1ZXMpIHtcblx0XHRcdFx0XHR2YXIgYXJyYXlPZktleXMgPSBmaWx0ZXJBcnJheUJ5S2V5KGFycmF5T2ZWYWx1ZXMsIGtleUNhbGxiYWNrKTtcblx0XHRcdFx0XHRyZXR1cm4gbWFwcGVkUm9vdE9iamVjdC5kZXN0cm95KGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5T2ZLZXlzLCBrZXlDYWxsYmFjayhpdGVtKSkgIT0gLTE7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0Lm1hcHBlZEluZGV4T2YgPSBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdHZhciBrZXlzID0gZmlsdGVyQXJyYXlCeUtleShtYXBwZWRSb290T2JqZWN0KCksIGtleUNhbGxiYWNrKTtcblx0XHRcdFx0XHR2YXIga2V5ID0ga2V5Q2FsbGJhY2soaXRlbSk7XG5cdFx0XHRcdFx0cmV0dXJuIGtvLnV0aWxzLmFycmF5SW5kZXhPZihrZXlzLCBrZXkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdC5tYXBwZWRHZXQgPSBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdHJldHVybiBtYXBwZWRSb290T2JqZWN0KClbbWFwcGVkUm9vdE9iamVjdC5tYXBwZWRJbmRleE9mKGl0ZW0pXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hcHBlZFJvb3RPYmplY3QubWFwcGVkQ3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKG1hcHBlZFJvb3RPYmplY3QubWFwcGVkSW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBhbHJlYWR5IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBrZXkgdGhhdCB5b3Ugc3BlY2lmaWVkLlwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgaXRlbSA9IGhhc0NyZWF0ZUNhbGxiYWNrKCkgPyBjcmVhdGVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoaGFzVXBkYXRlQ2FsbGJhY2soKSkge1xuXHRcdFx0XHRcdFx0dmFyIG5ld1ZhbHVlID0gdXBkYXRlQ2FsbGJhY2soaXRlbSwgdmFsdWUpO1xuXHRcdFx0XHRcdFx0aWYgKGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShpdGVtKSkge1xuXHRcdFx0XHRcdFx0XHRpdGVtKG5ld1ZhbHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0gPSBuZXdWYWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bWFwcGVkUm9vdE9iamVjdC5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdHJldHVybiBpdGVtO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjdXJyZW50QXJyYXlLZXlzID0gZmlsdGVyQXJyYXlCeUtleShrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1hcHBlZFJvb3RPYmplY3QpLCBrZXlDYWxsYmFjaykuc29ydCgpO1xuXHRcdFx0dmFyIG5ld0FycmF5S2V5cyA9IGZpbHRlckFycmF5QnlLZXkocm9vdE9iamVjdCwga2V5Q2FsbGJhY2spO1xuXHRcdFx0aWYgKGhhc0tleUNhbGxiYWNrKSBuZXdBcnJheUtleXMuc29ydCgpO1xuXHRcdFx0dmFyIGVkaXRTY3JpcHQgPSBrby51dGlscy5jb21wYXJlQXJyYXlzKGN1cnJlbnRBcnJheUtleXMsIG5ld0FycmF5S2V5cyk7XG5cblx0XHRcdHZhciBpZ25vcmVJbmRleE9mID0ge307XG5cdFx0XHRcblx0XHRcdHZhciBpLCBqO1xuXG5cdFx0XHR2YXIgdW53cmFwcGVkUm9vdE9iamVjdCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocm9vdE9iamVjdCk7XG5cdFx0XHR2YXIgaXRlbXNCeUtleSA9IHt9O1xuXHRcdFx0dmFyIG9wdGltaXplZEtleXMgPSB0cnVlO1xuXHRcdFx0Zm9yIChpID0gMCwgaiA9IHVud3JhcHBlZFJvb3RPYmplY3QubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG5cdFx0XHRcdHZhciBrZXkgPSBrZXlDYWxsYmFjayh1bndyYXBwZWRSb290T2JqZWN0W2ldKTtcblx0XHRcdFx0aWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0XHRcdG9wdGltaXplZEtleXMgPSBmYWxzZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtc0J5S2V5W2tleV0gPSB1bndyYXBwZWRSb290T2JqZWN0W2ldO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbmV3Q29udGVudHMgPSBbXTtcblx0XHRcdHZhciBwYXNzZWRPdmVyID0gMDtcblx0XHRcdGZvciAoaSA9IDAsIGogPSBlZGl0U2NyaXB0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuXHRcdFx0XHR2YXIga2V5ID0gZWRpdFNjcmlwdFtpXTtcblx0XHRcdFx0dmFyIG1hcHBlZEl0ZW07XG5cdFx0XHRcdHZhciBmdWxsUHJvcGVydHlOYW1lID0gcGFyZW50UHJvcGVydHlOYW1lICsgXCJbXCIgKyBpICsgXCJdXCI7XG5cdFx0XHRcdHN3aXRjaCAoa2V5LnN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiYWRkZWRcIjpcblx0XHRcdFx0XHR2YXIgaXRlbSA9IG9wdGltaXplZEtleXMgPyBpdGVtc0J5S2V5W2tleS52YWx1ZV0gOiBnZXRJdGVtQnlLZXkoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KSwga2V5LnZhbHVlLCBrZXlDYWxsYmFjayk7XG5cdFx0XHRcdFx0bWFwcGVkSXRlbSA9IHVwZGF0ZVZpZXdNb2RlbCh1bmRlZmluZWQsIGl0ZW0sIG9wdGlvbnMsIHBhcmVudE5hbWUsIG1hcHBlZFJvb3RPYmplY3QsIGZ1bGxQcm9wZXJ0eU5hbWUsIHBhcmVudCk7XG5cdFx0XHRcdFx0aWYoIWhhc0NyZWF0ZUNhbGxiYWNrKCkpIHtcblx0XHRcdFx0XHRcdG1hcHBlZEl0ZW0gPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1hcHBlZEl0ZW0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBpbmRleCA9IGlnbm9yYWJsZUluZGV4T2Yoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KSwgaXRlbSwgaWdub3JlSW5kZXhPZik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYgKG1hcHBlZEl0ZW0gPT09IGVtcHR5UmV0dXJuKSB7XG5cdFx0XHRcdFx0XHRwYXNzZWRPdmVyKys7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5ld0NvbnRlbnRzW2luZGV4IC0gcGFzc2VkT3Zlcl0gPSBtYXBwZWRJdGVtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlnbm9yZUluZGV4T2ZbaW5kZXhdID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJldGFpbmVkXCI6XG5cdFx0XHRcdFx0dmFyIGl0ZW0gPSBvcHRpbWl6ZWRLZXlzID8gaXRlbXNCeUtleVtrZXkudmFsdWVdIDogZ2V0SXRlbUJ5S2V5KGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocm9vdE9iamVjdCksIGtleS52YWx1ZSwga2V5Q2FsbGJhY2spO1xuXHRcdFx0XHRcdG1hcHBlZEl0ZW0gPSBnZXRJdGVtQnlLZXkobWFwcGVkUm9vdE9iamVjdCwga2V5LnZhbHVlLCBrZXlDYWxsYmFjayk7XG5cdFx0XHRcdFx0dXBkYXRlVmlld01vZGVsKG1hcHBlZEl0ZW0sIGl0ZW0sIG9wdGlvbnMsIHBhcmVudE5hbWUsIG1hcHBlZFJvb3RPYmplY3QsIGZ1bGxQcm9wZXJ0eU5hbWUsIHBhcmVudCk7XG5cblx0XHRcdFx0XHR2YXIgaW5kZXggPSBpZ25vcmFibGVJbmRleE9mKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocm9vdE9iamVjdCksIGl0ZW0sIGlnbm9yZUluZGV4T2YpO1xuXHRcdFx0XHRcdG5ld0NvbnRlbnRzW2luZGV4XSA9IG1hcHBlZEl0ZW07XG5cdFx0XHRcdFx0aWdub3JlSW5kZXhPZltpbmRleF0gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVsZXRlZFwiOlxuXHRcdFx0XHRcdG1hcHBlZEl0ZW0gPSBnZXRJdGVtQnlLZXkobWFwcGVkUm9vdE9iamVjdCwga2V5LnZhbHVlLCBrZXlDYWxsYmFjayk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjaGFuZ2VzLnB1c2goe1xuXHRcdFx0XHRcdGV2ZW50OiBrZXkuc3RhdHVzLFxuXHRcdFx0XHRcdGl0ZW06IG1hcHBlZEl0ZW1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdG1hcHBlZFJvb3RPYmplY3QobmV3Q29udGVudHMpO1xuXG5cdFx0XHRpZiAob3B0aW9uc1twYXJlbnROYW1lXSAmJiBvcHRpb25zW3BhcmVudE5hbWVdLmFycmF5Q2hhbmdlZCkge1xuXHRcdFx0XHRrby51dGlscy5hcnJheUZvckVhY2goY2hhbmdlcywgZnVuY3Rpb24gKGNoYW5nZSkge1xuXHRcdFx0XHRcdG9wdGlvbnNbcGFyZW50TmFtZV0uYXJyYXlDaGFuZ2VkKGNoYW5nZS5ldmVudCwgY2hhbmdlLml0ZW0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFwcGVkUm9vdE9iamVjdDtcblx0fVxuXG5cdGZ1bmN0aW9uIGlnbm9yYWJsZUluZGV4T2YoYXJyYXksIGl0ZW0sIGlnbm9yZUluZGljZXMpIHtcblx0XHRmb3IgKHZhciBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuXHRcdFx0aWYgKGlnbm9yZUluZGljZXNbaV0gPT09IHRydWUpIGNvbnRpbnVlO1xuXHRcdFx0aWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiBtYXBLZXkoaXRlbSwgY2FsbGJhY2spIHtcblx0XHR2YXIgbWFwcGVkSXRlbTtcblx0XHRpZiAoY2FsbGJhY2spIG1hcHBlZEl0ZW0gPSBjYWxsYmFjayhpdGVtKTtcblx0XHRpZiAoZXhwb3J0cy5nZXRUeXBlKG1hcHBlZEl0ZW0pID09PSBcInVuZGVmaW5lZFwiKSBtYXBwZWRJdGVtID0gaXRlbTtcblxuXHRcdHJldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1hcHBlZEl0ZW0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0SXRlbUJ5S2V5KGFycmF5LCBrZXksIGNhbGxiYWNrKSB7XG5cdFx0YXJyYXkgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGFycmF5KTtcblx0XHRmb3IgKHZhciBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBhcnJheVtpXTtcblx0XHRcdGlmIChtYXBLZXkoaXRlbSwgY2FsbGJhY2spID09PSBrZXkpIHJldHVybiBpdGVtO1xuXHRcdH1cblxuXHRcdHRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyBrby51cGRhdGUqLCB0aGUga2V5ICdcIiArIGtleSArIFwiJyB3YXMgbm90IGZvdW5kIVwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGZpbHRlckFycmF5QnlLZXkoYXJyYXksIGNhbGxiYWNrKSB7XG5cdFx0cmV0dXJuIGtvLnV0aWxzLmFycmF5TWFwKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYXJyYXkpLCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHRcdHJldHVybiBtYXBLZXkoaXRlbSwgY2FsbGJhY2spO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW07XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiB2aXNpdFByb3BlcnRpZXNPckFycmF5RW50cmllcyhyb290T2JqZWN0LCB2aXNpdG9yQ2FsbGJhY2spIHtcblx0XHRpZiAoZXhwb3J0cy5nZXRUeXBlKHJvb3RPYmplY3QpID09PSBcImFycmF5XCIpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcm9vdE9iamVjdC5sZW5ndGg7IGkrKylcblx0XHRcdHZpc2l0b3JDYWxsYmFjayhpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHJvb3RPYmplY3QpXG5cdFx0XHR2aXNpdG9yQ2FsbGJhY2socHJvcGVydHlOYW1lKTtcblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gY2FuSGF2ZVByb3BlcnRpZXMob2JqZWN0KSB7XG5cdFx0dmFyIHR5cGUgPSBleHBvcnRzLmdldFR5cGUob2JqZWN0KTtcblx0XHRyZXR1cm4gKCh0eXBlID09PSBcIm9iamVjdFwiKSB8fCAodHlwZSA9PT0gXCJhcnJheVwiKSkgJiYgKG9iamVjdCAhPT0gbnVsbCk7XG5cdH1cblxuXHQvLyBCYXNlZCBvbiB0aGUgcGFyZW50TmFtZSwgdGhpcyBjcmVhdGVzIGEgZnVsbHkgY2xhc3NpZmllZCBuYW1lIG9mIGEgcHJvcGVydHlcblxuXHRmdW5jdGlvbiBnZXRQcm9wZXJ0eU5hbWUocGFyZW50TmFtZSwgcGFyZW50LCBpbmRleGVyKSB7XG5cdFx0dmFyIHByb3BlcnR5TmFtZSA9IHBhcmVudE5hbWUgfHwgXCJcIjtcblx0XHRpZiAoZXhwb3J0cy5nZXRUeXBlKHBhcmVudCkgPT09IFwiYXJyYXlcIikge1xuXHRcdFx0aWYgKHBhcmVudE5hbWUpIHtcblx0XHRcdFx0cHJvcGVydHlOYW1lICs9IFwiW1wiICsgaW5kZXhlciArIFwiXVwiO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAocGFyZW50TmFtZSkge1xuXHRcdFx0XHRwcm9wZXJ0eU5hbWUgKz0gXCIuXCI7XG5cdFx0XHR9XG5cdFx0XHRwcm9wZXJ0eU5hbWUgKz0gaW5kZXhlcjtcblx0XHR9XG5cdFx0cmV0dXJuIHByb3BlcnR5TmFtZTtcblx0fVxuXG5cdGV4cG9ydHMudmlzaXRNb2RlbCA9IGZ1bmN0aW9uIChyb290T2JqZWN0LCBjYWxsYmFjaywgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG9wdGlvbnMudmlzaXRlZE9iamVjdHMgPSBvcHRpb25zLnZpc2l0ZWRPYmplY3RzIHx8IG5ldyBvYmplY3RMb29rdXAoKTtcblxuXHRcdHZhciBtYXBwZWRSb290T2JqZWN0O1xuXHRcdHZhciB1bndyYXBwZWRSb290T2JqZWN0ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyb290T2JqZWN0KTtcblxuXHRcdGlmICghY2FuSGF2ZVByb3BlcnRpZXModW53cmFwcGVkUm9vdE9iamVjdCkpIHtcblx0XHRcdHJldHVybiBjYWxsYmFjayhyb290T2JqZWN0LCBvcHRpb25zLnBhcmVudE5hbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gZmlsbE9wdGlvbnMob3B0aW9ucywgdW53cmFwcGVkUm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldKTtcblxuXHRcdFx0Ly8gT25seSBkbyBhIGNhbGxiYWNrLCBidXQgaWdub3JlIHRoZSByZXN1bHRzXG5cdFx0XHRjYWxsYmFjayhyb290T2JqZWN0LCBvcHRpb25zLnBhcmVudE5hbWUpO1xuXHRcdFx0bWFwcGVkUm9vdE9iamVjdCA9IGV4cG9ydHMuZ2V0VHlwZSh1bndyYXBwZWRSb290T2JqZWN0KSA9PT0gXCJhcnJheVwiID8gW10gOiB7fTtcblx0XHR9XG5cblx0XHRvcHRpb25zLnZpc2l0ZWRPYmplY3RzLnNhdmUocm9vdE9iamVjdCwgbWFwcGVkUm9vdE9iamVjdCk7XG5cblx0XHR2YXIgcGFyZW50TmFtZSA9IG9wdGlvbnMucGFyZW50TmFtZTtcblx0XHR2aXNpdFByb3BlcnRpZXNPckFycmF5RW50cmllcyh1bndyYXBwZWRSb290T2JqZWN0LCBmdW5jdGlvbiAoaW5kZXhlcikge1xuXHRcdFx0aWYgKG9wdGlvbnMuaWdub3JlICYmIGtvLnV0aWxzLmFycmF5SW5kZXhPZihvcHRpb25zLmlnbm9yZSwgaW5kZXhlcikgIT0gLTEpIHJldHVybjtcblxuXHRcdFx0dmFyIHByb3BlcnR5VmFsdWUgPSB1bndyYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdO1xuXHRcdFx0b3B0aW9ucy5wYXJlbnROYW1lID0gZ2V0UHJvcGVydHlOYW1lKHBhcmVudE5hbWUsIHVud3JhcHBlZFJvb3RPYmplY3QsIGluZGV4ZXIpO1xuXG5cdFx0XHQvLyBJZiB3ZSBkb24ndCB3YW50IHRvIGV4cGxpY2l0bHkgY29weSB0aGUgdW5tYXBwZWQgcHJvcGVydHkuLi5cblx0XHRcdGlmIChrby51dGlscy5hcnJheUluZGV4T2Yob3B0aW9ucy5jb3B5LCBpbmRleGVyKSA9PT0gLTEpIHtcblx0XHRcdFx0Ly8gLi4uZmluZCBvdXQgaWYgaXQncyBhIHByb3BlcnR5IHdlIHdhbnQgdG8gZXhwbGljaXRseSBpbmNsdWRlXG5cdFx0XHRcdGlmIChrby51dGlscy5hcnJheUluZGV4T2Yob3B0aW9ucy5pbmNsdWRlLCBpbmRleGVyKSA9PT0gLTEpIHtcblx0XHRcdFx0XHQvLyBUaGUgbWFwcGVkIHByb3BlcnRpZXMgb2JqZWN0IGNvbnRhaW5zIGFsbCB0aGUgcHJvcGVydGllcyB0aGF0IHdlcmUgcGFydCBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuXHRcdFx0XHRcdC8vIElmIGEgcHJvcGVydHkgZG9lcyBub3QgZXhpc3QsIGFuZCBpdCBpcyBub3QgYmVjYXVzZSBpdCBpcyBwYXJ0IG9mIGFuIGFycmF5IChlLmcuIFwibXlQcm9wWzNdXCIpLCB0aGVuIGl0IHNob3VsZCBub3QgYmUgdW5tYXBwZWQuXG5cdFx0XHRcdCAgICBpZiAodW53cmFwcGVkUm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldXG5cdFx0XHRcdCAgICAgICAgJiYgdW53cmFwcGVkUm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldLm1hcHBlZFByb3BlcnRpZXMgJiYgIXVud3JhcHBlZFJvb3RPYmplY3RbbWFwcGluZ1Byb3BlcnR5XS5tYXBwZWRQcm9wZXJ0aWVzW2luZGV4ZXJdXG5cdFx0XHRcdCAgICAgICAgJiYgdW53cmFwcGVkUm9vdE9iamVjdFttYXBwaW5nUHJvcGVydHldLmNvcGllZFByb3BlcnRpZXMgJiYgIXVud3JhcHBlZFJvb3RPYmplY3RbbWFwcGluZ1Byb3BlcnR5XS5jb3BpZWRQcm9wZXJ0aWVzW2luZGV4ZXJdXG5cdFx0XHRcdCAgICAgICAgJiYgIShleHBvcnRzLmdldFR5cGUodW53cmFwcGVkUm9vdE9iamVjdCkgPT09IFwiYXJyYXlcIikpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIG91dHB1dFByb3BlcnR5O1xuXHRcdFx0c3dpdGNoIChleHBvcnRzLmdldFR5cGUoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShwcm9wZXJ0eVZhbHVlKSkpIHtcblx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdGNhc2UgXCJhcnJheVwiOlxuXHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHR2YXIgcHJldmlvdXNseU1hcHBlZFZhbHVlID0gb3B0aW9ucy52aXNpdGVkT2JqZWN0cy5nZXQocHJvcGVydHlWYWx1ZSk7XG5cdFx0XHRcdG1hcHBlZFJvb3RPYmplY3RbaW5kZXhlcl0gPSAoZXhwb3J0cy5nZXRUeXBlKHByZXZpb3VzbHlNYXBwZWRWYWx1ZSkgIT09IFwidW5kZWZpbmVkXCIpID8gcHJldmlvdXNseU1hcHBlZFZhbHVlIDogZXhwb3J0cy52aXNpdE1vZGVsKHByb3BlcnR5VmFsdWUsIGNhbGxiYWNrLCBvcHRpb25zKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRtYXBwZWRSb290T2JqZWN0W2luZGV4ZXJdID0gY2FsbGJhY2socHJvcGVydHlWYWx1ZSwgb3B0aW9ucy5wYXJlbnROYW1lKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBtYXBwZWRSb290T2JqZWN0O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2ltcGxlT2JqZWN0TG9va3VwKCkge1xuXHRcdHZhciBrZXlzID0gW107XG5cdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdHRoaXMuc2F2ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHR2YXIgZXhpc3RpbmdJbmRleCA9IGtvLnV0aWxzLmFycmF5SW5kZXhPZihrZXlzLCBrZXkpO1xuXHRcdFx0aWYgKGV4aXN0aW5nSW5kZXggPj0gMCkgdmFsdWVzW2V4aXN0aW5nSW5kZXhdID0gdmFsdWU7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0a2V5cy5wdXNoKGtleSk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0dmFyIGV4aXN0aW5nSW5kZXggPSBrby51dGlscy5hcnJheUluZGV4T2Yoa2V5cywga2V5KTtcblx0XHRcdHZhciB2YWx1ZSA9IChleGlzdGluZ0luZGV4ID49IDApID8gdmFsdWVzW2V4aXN0aW5nSW5kZXhdIDogdW5kZWZpbmVkO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH07XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBvYmplY3RMb29rdXAoKSB7XG5cdFx0dmFyIGJ1Y2tldHMgPSB7fTtcblx0XHRcblx0XHR2YXIgZmluZEJ1Y2tldCA9IGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0dmFyIGJ1Y2tldEtleTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGJ1Y2tldEtleSA9IGtleTsvL0pTT04uc3RyaW5naWZ5KGtleSk7XG5cdFx0XHR9XG5cdFx0XHRjYXRjaCAoZSkge1xuXHRcdFx0XHRidWNrZXRLZXkgPSBcIiQkJFwiO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYnVja2V0ID0gYnVja2V0c1tidWNrZXRLZXldO1xuXHRcdFx0aWYgKGJ1Y2tldCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGJ1Y2tldCA9IG5ldyBzaW1wbGVPYmplY3RMb29rdXAoKTtcblx0XHRcdFx0YnVja2V0c1tidWNrZXRLZXldID0gYnVja2V0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGJ1Y2tldDtcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMuc2F2ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRmaW5kQnVja2V0KGtleSkuc2F2ZShrZXksIHZhbHVlKTtcblx0XHR9O1xuXHRcdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGZpbmRCdWNrZXQoa2V5KS5nZXQoa2V5KTtcblx0XHR9O1xuXHR9O1xufSkpOyIsIi8vIEtub2Nrb3V0IEZhc3QgTWFwcGluZyB2MC4xXG4vLyBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0Ly8gTW9kdWxlIHN5c3RlbXMgbWFnaWMgZGFuY2UuXG5cblx0aWYgKHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTIG9yIE5vZGU6IGhhcmQtY29kZWQgZGVwZW5kZW5jeSBvbiBcImtub2Nrb3V0XCJcblx0XHRmYWN0b3J5KCh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydrbyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsna28nXSA6IG51bGwpLCBleHBvcnRzKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lW1wiYW1kXCJdKSB7XG5cdFx0Ly8gQU1EIGFub255bW91cyBtb2R1bGUgd2l0aCBoYXJkLWNvZGVkIGRlcGVuZGVuY3kgb24gXCJrbm9ja291dFwiXG5cdFx0ZGVmaW5lKFtcImtub2Nrb3V0XCIsIFwiZXhwb3J0c1wiXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gPHNjcmlwdD4gdGFnOiB1c2UgdGhlIGdsb2JhbCBga29gIG9iamVjdCwgYXR0YWNoaW5nIGEgYHdyYXBgIHByb3BlcnR5XG5cdFx0ZmFjdG9yeShrbywga28ud3JhcCA9IHt9KTtcblx0fVxufShmdW5jdGlvbiAoa28sIGV4cG9ydHMpIHtcbiAgICBcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIG1pbWljcyBrby5tYXBwaW5nXG4gICAgZXhwb3J0cy5mcm9tSlMgPSBmdW5jdGlvbihqc09iamVjdCwgY29tcHV0ZWRGdW5jdGlvbnMpXG4gICAge1xuICAgICAgICByZXNldCgpO1xuXHRyZXR1cm4gd3JhcChqc09iamVjdCwgY29tcHV0ZWRGdW5jdGlvbnMpO1xuICAgIH1cblxuICAgIC8vIHRoaXMgZnVuY3Rpb24gdW53cmFwcyB0aGUgb3V0ZXIgZm9yIGFzc2lnbmluZyB0aGUgcmVzdWx0IHRvIGFuIG9ic2VydmFibGVcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy81MTdcbiAgICBleHBvcnRzLnVwZGF0ZUZyb21KUyA9IGZ1bmN0aW9uKG9ic2VydmFibGUsIGpzT2JqZWN0LCBjb21wdXRlZEZ1bmN0aW9ucylcbiAgICB7XG4gICAgICAgIHJlc2V0KCk7XG5cdHJldHVybiBvYnNlcnZhYmxlKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUod3JhcChqc09iamVjdCwgY29tcHV0ZWRGdW5jdGlvbnMpKSk7XG4gICAgfVxuXG4gICAgZXhwb3J0cy5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uU3RyaW5nLCBjb21wdXRlZEZ1bmN0aW9ucykge1xuXHR2YXIgcGFyc2VkID0ga28udXRpbHMucGFyc2VKc29uKGpzb25TdHJpbmcpO1xuXHRhcmd1bWVudHNbMF0gPSBwYXJzZWQ7XG5cdHJldHVybiBleHBvcnRzLmZyb21KUy5hcHBseSh0aGlzLCBjb21wdXRlZEZ1bmN0aW9ucyk7XG4gICAgfTtcbiAgICBcbiAgICBleHBvcnRzLnRvSlMgPSBmdW5jdGlvbiAob2JzZXJ2YWJsZSkge1xuXHRyZXR1cm4gdW53cmFwKG9ic2VydmFibGUpO1xuICAgIH1cblxuICAgIGV4cG9ydHMudG9KU09OID0gZnVuY3Rpb24gKG9ic2VydmFibGUpIHtcblx0dmFyIHBsYWluSmF2YVNjcmlwdE9iamVjdCA9IGV4cG9ydHMudG9KUyhvYnNlcnZhYmxlKTtcblx0cmV0dXJuIGtvLnV0aWxzLnN0cmluZ2lmeUpzb24ocGxhaW5KYXZhU2NyaXB0T2JqZWN0KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdHlwZU9mKHZhbHVlKSB7XG5cdHZhciBzID0gdHlwZW9mIHZhbHVlO1xuXHRpZiAocyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PSBEYXRlKVxuICAgICAgICAgICAgICAgICAgICBzID0gJ2RhdGUnO1xuXHRcdGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gJ1tvYmplY3QgQXJyYXldJylcbiAgICAgICAgICAgICAgICAgICAgcyA9ICdhcnJheSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXHRcdHMgPSAnbnVsbCc7XG4gICAgICAgICAgICB9XG5cdH1cblx0cmV0dXJuIHM7XG4gICAgfVxuXG4gICAgLy8gdW53cmFwcGluZ1xuICAgIGZ1bmN0aW9uIHVud3JhcE9iamVjdChvKVxuICAgIHtcblx0dmFyIHQgPSB7fTtcblxuXHRmb3IgKHZhciBrIGluIG8pXG5cdHtcblx0ICAgIHZhciB2ID0gb1trXTtcblxuXHQgICAgaWYgKGtvLmlzQ29tcHV0ZWQodikpXG5cdFx0Y29udGludWU7XG5cblx0ICAgIHRba10gPSB1bndyYXAodik7XG5cdH1cblxuXHRyZXR1cm4gdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bndyYXBBcnJheShhKVxuICAgIHtcblx0dmFyIHIgPSBbXTtcblxuXHRpZiAoIWEgfHwgYS5sZW5ndGggPT0gMClcblx0ICAgIHJldHVybiByO1xuXHRcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7ICsraSlcblx0ICAgIHIucHVzaCh1bndyYXAoYVtpXSkpO1xuXG5cdHJldHVybiByO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVud3JhcCh2KVxuICAgIHtcblx0dmFyIGlzT2JzZXJ2YWJsZSA9IGtvLmlzT2JzZXJ2YWJsZSh2KTtcblxuXHRpZiAoaXNPYnNlcnZhYmxlKVxuXHR7XG5cdCAgICB2YXIgdmFsID0gdigpO1xuXG5cdCAgICByZXR1cm4gdW53cmFwKHZhbCk7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdCAgICBpZiAodHlwZU9mKHYpID09IFwiYXJyYXlcIilcblx0ICAgIHtcblx0XHRyZXR1cm4gdW53cmFwQXJyYXkodik7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmICh0eXBlT2YodikgPT0gXCJvYmplY3RcIilcblx0ICAgIHtcblx0XHRyZXR1cm4gdW53cmFwT2JqZWN0KHYpO1xuXHQgICAgfVxuXHQgICAgZWxzZVxuXHQgICAge1xuXHRcdHJldHVybiB2O1xuXHQgICAgfVxuXHR9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXQoKVxuICAgIHtcbiAgICAgICAgcGFyZW50cyA9IFt7b2JqOiBudWxsLCB3cmFwcGVkOiBudWxsLCBsdmw6IFwiXCJ9XTtcbiAgICB9ICAgIFxuICAgIFxuICAgIC8vIHdyYXBwaW5nXG5cbiAgICBmdW5jdGlvbiB3cmFwT2JqZWN0KG8sIGNvbXB1dGVkRnVuY3Rpb25zKVxuICAgIHtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGluZmluaXRlIHJlY3Vyc2lvblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnRzW2ldLm9iaiA9PT0gbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRzW2ldLndyYXBwZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHR2YXIgdCA9IHt9O1xuXG5cdGZvciAodmFyIGsgaW4gbylcblx0e1xuXHQgICAgdmFyIHYgPSBvW2tdO1xuXG4gICAgICAgICAgICBwYXJlbnRzLnB1c2goe29iajogbywgd3JhcHBlZDogdCwgbHZsOiBjdXJyZW50THZsKCkgKyBcIi9cIiArIGt9KTtcblxuXHQgICAgdFtrXSA9IHdyYXAodiwgY29tcHV0ZWRGdW5jdGlvbnMpO1xuXG4gICAgICAgICAgICBwYXJlbnRzLnBvcCgpO1xuXHR9XG5cblx0aWYgKGNvbXB1dGVkRnVuY3Rpb25zICYmIGNvbXB1dGVkRnVuY3Rpb25zW2N1cnJlbnRMdmwoKV0pXG5cdCAgICB0ID0gY29tcHV0ZWRGdW5jdGlvbnNbY3VycmVudEx2bCgpXSh0KTtcblxuICAgICAgICBpZiAoaGFzRVM1UGx1Z2luKCkpXG4gICAgICAgICAgICBrby50cmFjayh0KTtcblxuXHRyZXR1cm4gdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwQXJyYXkoYSwgY29tcHV0ZWRGdW5jdGlvbnMpXG4gICAge1xuXHR2YXIgciA9IGtvLm9ic2VydmFibGVBcnJheSgpO1xuXG5cdGlmICghYSB8fCBhLmxlbmd0aCA9PSAwKVxuXHQgICAgcmV0dXJuIHI7XG5cblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7ICsraSlcblx0ICAgIHIucHVzaCh3cmFwKGFbaV0sIGNvbXB1dGVkRnVuY3Rpb25zKSk7XG5cblx0cmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gYSBzdGFjaywgdXNlZCBmb3IgdHdvIHB1cnBvc2VzOlxuICAgIC8vICAtIGNpcmN1bGFyIHJlZmVyZW5jZSBjaGVja2luZ1xuICAgIC8vICAtIGNvbXB1dGVkIGZ1bmN0aW9uc1xuICAgIHZhciBwYXJlbnRzO1xuXG4gICAgZnVuY3Rpb24gY3VycmVudEx2bCgpXG4gICAge1xuXHRyZXR1cm4gcGFyZW50c1twYXJlbnRzLmxlbmd0aC0xXS5sdmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd3JhcCh2LCBjb21wdXRlZEZ1bmN0aW9ucylcbiAgICB7XG5cdGlmICh0eXBlT2YodikgPT0gXCJhcnJheVwiKVxuXHR7XG5cdCAgICByZXR1cm4gd3JhcEFycmF5KHYsIGNvbXB1dGVkRnVuY3Rpb25zKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlT2YodikgPT0gXCJvYmplY3RcIilcblx0e1xuXHQgICAgcmV0dXJuIHdyYXBPYmplY3QodiwgY29tcHV0ZWRGdW5jdGlvbnMpO1xuXHR9XG5cdGVsc2Vcblx0e1xuICAgICAgICAgICAgaWYgKCFoYXNFUzVQbHVnaW4oKSAmJiB0eXBlb2YgdiAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHtcblx0ICAgICAgICB2YXIgdCA9IGtvLm9ic2VydmFibGUoKTtcblx0ICAgICAgICB0KHYpO1xuXHQgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG5cdH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNFUzVQbHVnaW4oKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGtvLnRyYWNrICE9IG51bGw7XG4gICAgfVxufSkpOyJdfQ==
