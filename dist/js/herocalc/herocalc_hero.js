define(["require","exports","module","herocalc_knockout","jquery","./herocalc_core"],function(e,t,a){"use strict";var i=e("herocalc_knockout"),r=e("jquery"),o=e("./herocalc_core").HEROCALCULATOR;o.prototype.totalExp=[0,200,500,900,1400,2e3,2600,3400,4400,5400,6e3,8200,9e3,10400,11900,13500,15200,17e3,18900,20900,23e3,25200,27500,29900,32400],o.prototype.nextLevelExp=[200,300,400,500,600,600,800,1e3,1e3,600,2200,800,1400,1500,1600,1700,1800,1900,2e3,2100,2200,2300,2400,2500,"&mdash;"],o.prototype.diffProperties=["totalAgi","totalInt","totalStr","health","healthregen","mana","manaregen","totalArmorPhysical","totalArmorPhysicalReduction","totalMovementSpeed","totalTurnRate","baseDamage","bonusDamage","bonusDamageReduction","damage","totalMagicResistanceProduct","totalMagicResistance","bat","ias","attackTime","attacksPerSecond","evasion","ehpPhysical","ehpMagical","bash","critChance","critDamage","missChance","totalattackrange","visionrangeday","visionrangenight","lifesteal"],o.prototype.HeroOptions=[],o.prototype.IllusionOption=function(e,t,a){this.illusionName=e,this.illusionDisplayName=t,this.baseHero=a},o.prototype.HeroOption=function(e,t,a){this.heroName=e,this.heroDisplayName=t,this.hero=a},o.prototype.HeroOption2=function(e){this.heroName=i.computed(function(){return e.selectedHero().heroName}),this.heroDisplayName=i.computed(function(){return e.selectedHero().heroDisplayName}),this.hero=e},o.prototype.DamageInstance=function(e,t,a,i,r){this.label=e||"",this.damageType=t||"",this.value=parseFloat(a)||0,this.data=i||[],this.total=parseFloat(r)||0},o.prototype.createIllusionOptions=function(){var e=[];for(var t in o.prototype.illusionData)e.push(new o.prototype.IllusionOption(t,o.prototype.illusionData[t].displayName,o.prototype.illusionData[t].hero));return e},o.prototype.HeroCalculatorModel=function(e){var t=this;t.index=i.observable(e),t.bound=i.observable(!1),t.playerColorCss=i.computed(function(){return"player-color-"+t.index()}),t.otherHeroes=i.observableArray([]),t.availableCompare=i.computed(function(){return t.otherHeroes().map(function(e){return e.heroOption})}),t.selectedCompare=i.observable(),t.selectedCompare.subscribe(function(e){t.heroCompare(e.hero)}),t.enemies=i.observableArray([]),t.availableEnemies=i.computed(function(){return t.enemies().map(function(e){return e.heroOption})}),t.selectedEnemy=i.observable(),t.selectedEnemy.subscribe(function(e){t.enemy(e.hero)}),t.setHeroOptionStyling=function(e,t){i.applyBindingsToNode(e,{css:t.hero.playerColorCss()},t)},t.availableHeroes=i.observableArray(o.prototype.HeroOptions),t.sectionDisplay=i.observable({inventory:i.observable(!0),ability:i.observable(!0),buff:i.observable(!0),debuff:i.observable(!0),damageamp:i.observable(!1),illusion:i.observable(!1),skillbuild:i.observable(!1),"skillbuild-skills":i.observable(!0),"skillbuild-items":i.observable(!0)}),t.sectionDisplayToggle=function(e){t.sectionDisplay()[e](!t.sectionDisplay()[e]())},t.showUnitTab=i.observable(!1),t.availableHeroes.sort(function(e,t){return e.heroDisplayName==t.heroDisplayName?0:e.heroDisplayName<t.heroDisplayName?-1:1}),t.selectedHero=i.observable(t.availableHeroes()[e]),t.heroOption=new o.prototype.HeroOption2(t),t.selectedHeroLevel=i.observable(1),t.inventory=new o.prototype.InventoryViewModel(t),t.selectedInventory=i.observable(-1),t.buffs=new o.prototype.BuffViewModel,t.buffs.hasScepter=t.inventory.hasScepter,t.debuffs=new o.prototype.BuffViewModel,t.damageAmplification=new o.prototype.DamageAmpViewModel,t.damageReduction=new o.prototype.DamageAmpViewModel,t.hero=i.computed(function(){return i.mapping.fromJS(o.prototype.heroData["npc_dota_hero_"+t.selectedHero().heroName])}),t.heroData=i.computed(function(){return o.prototype.heroData["npc_dota_hero_"+t.selectedHero().heroName]}),t.heroCompare=i.observable(t),t.enemy=i.observable(t),t.unit=i.observable(t),t.clone=i.observable(t),t.illusions=i.observableArray([]),t.availableIllusions=i.observableArray(o.prototype.createIllusionOptions()),t.selectedIllusion=i.observable(t.availableIllusions()[0]),t.illusionAbilityLevel=i.observable(1),t.illusionAbilityMaxLevel=i.computed(function(){return o.prototype.illusionData[t.selectedIllusion().illusionName].max_level}),t.showDiff=i.observable(!1),t.getAbilityLevelMax=function(e){return"DOTA_ABILITY_TYPE_ATTRIBUTES"===e.abilitytype()?10:"invoker_quas"===e.name()||"invoker_wex"===e.name()||"invoker_exort"===e.name()?7:"invoker_invoke"===e.name()?4:"earth_spirit_stone_caller"===e.name()||"ogre_magi_unrefined_fireblast"===e.name()?1:"DOTA_ABILITY_TYPE_ULTIMATE"===e.abilitytype()||"keeper_of_the_light_recall"===e.name()||"keeper_of_the_light_blinding_light"===e.name()||"ember_spirit_activate_fire_remnant"===e.name()||"lone_druid_true_form_battle_cry"===e.name()?3:"puck_ethereal_jaunt"===e.name()||"shadow_demon_shadow_poison_release"===e.name()||"templar_assassin_trap"===e.name()||"spectre_reality"===e.name()?0:"invoker_cold_snap"===e.name()||"invoker_ghost_walk"===e.name()||"invoker_tornado"===e.name()||"invoker_emp"===e.name()||"invoker_alacrity"===e.name()||"invoker_chaos_meteor"===e.name()||"invoker_sun_strike"===e.name()||"invoker_forge_spirit"===e.name()||"invoker_ice_wall"===e.name()||"invoker_deafening_blast"===e.name()?0:"techies_minefield_sign"===e.name()||"techies_focused_detonate"===e.name()?0:4},t.skillPointHistory=i.observableArray(),t.ability=i.computed(function(){var e=new o.prototype.AbilityModel(i.mapping.fromJS(t.heroData().abilities),t);if("earth_spirit"===t.selectedHero().heroName||"ogre_magi"===t.selectedHero().heroName)e.abilities()[3].level(1);else if("invoker"===t.selectedHero().heroName)for(var a=6;16>a;a++)e.abilities()[a].level(1);return t.skillPointHistory.removeAll(),e.hasScepter=t.inventory.hasScepter,e}),t.showCriticalStrikeDetails=i.observable(!1),t.damageInputValue=i.observable(0),t.showDamageDetails=i.observable(!1),t.showStatDetails=i.observable(!1),t.showDamageAmpCalcDetails=i.observable(!1),t.availableSkillPoints=i.computed(function(){for(var e=t.selectedHeroLevel(),a=0;a<t.ability().abilities().length;a++){var i=function(){return a};switch(t.ability().abilities()[a].abilitytype()){case"DOTA_ABILITY_TYPE_ULTIMATE":if("invoker"===t.selectedHero().heroName)for(;1==t.ability().abilities()[a].level()&&parseInt(t.selectedHeroLevel())<2||2==t.ability().abilities()[a].level()&&parseInt(t.selectedHeroLevel())<7||3==t.ability().abilities()[a].level()&&parseInt(t.selectedHeroLevel())<11||4==t.ability().abilities()[a].level()&&parseInt(t.selectedHeroLevel())<17;)t.ability().levelDownAbility(i,null,null,t);else if("meepo"===t.selectedHero().heroName)for(;7*(t.ability().abilities()[a].level()-1)+3>parseInt(t.selectedHeroLevel());)t.ability().levelDownAbility(i,null,null,t);else for(;5*t.ability().abilities()[a].level()+1>parseInt(t.selectedHeroLevel());)t.ability().levelDownAbility(i,null,null,t);break;default:for(;2*t.ability().abilities()[a].level()-1>parseInt(t.selectedHeroLevel());)t.ability().levelDownAbility(i,null,null,t)}}for(var i=function(){return t.skillPointHistory()[t.skillPointHistory().length-1]};t.skillPointHistory().length>e;)t.ability().levelDownAbility(i,null,null,t);return e-t.skillPointHistory().length},this),t.primaryAttribute=i.pureComputed(function(){var e=t.heroData().attributeprimary;return"DOTA_ATTRIBUTE_AGILITY"===e?"agi":"DOTA_ATTRIBUTE_INTELLECT"===e?"int":"DOTA_ATTRIBUTE_STRENGTH"===e?"str":""}),t.totalExp=i.pureComputed(function(){return o.prototype.totalExp[t.selectedHeroLevel()-1]}),t.nextLevelExp=i.pureComputed(function(){return o.prototype.nextLevelExp[t.selectedHeroLevel()-1]}),t.startingArmor=i.pureComputed(function(){return(.14*t.heroData().attributebaseagility+t.heroData().armorphysical).toFixed(2)}),t.respawnTime=i.pureComputed(function(){return 5+3.8*t.selectedHeroLevel()}),t.totalAttribute=function(e){return"agi"===e?parseFloat(t.totalAgi()):"int"===e?parseFloat(t.totalInt()):"str"===e?parseFloat(t.totalStr()):0},t.totalAgi=i.pureComputed(function(){return(t.heroData().attributebaseagility+t.heroData().attributeagilitygain*(t.selectedHeroLevel()-1)+t.inventory.getAttributes("agi")+2*t.ability().getAttributeBonusLevel()+t.ability().getAgility()+t.enemy().ability().getAllStatsReduction()+t.debuffs.getAllStatsReduction()).toFixed(2)}),t.intStolen=i.observable(0).extend({numeric:0}),t.totalInt=i.pureComputed(function(){return(t.heroData().attributebaseintelligence+t.heroData().attributeintelligencegain*(t.selectedHeroLevel()-1)+t.inventory.getAttributes("int")+2*t.ability().getAttributeBonusLevel()+t.ability().getIntelligence()+t.enemy().ability().getAllStatsReduction()+t.debuffs.getAllStatsReduction()+t.intStolen()).toFixed(2)}),t.totalStr=i.pureComputed(function(){return(t.heroData().attributebasestrength+t.heroData().attributestrengthgain*(t.selectedHeroLevel()-1)+t.inventory.getAttributes("str")+2*t.ability().getAttributeBonusLevel()+t.ability().getStrength()+t.enemy().ability().getStrengthReduction()+t.enemy().ability().getAllStatsReduction()+t.debuffs.getAllStatsReduction()).toFixed(2)}),t.health=i.pureComputed(function(){return(t.heroData().statushealth+20*Math.floor(t.totalStr())+t.inventory.getHealth()+t.ability().getHealth()).toFixed(2)}),t.healthregen=i.pureComputed(function(){var e=[t.inventory.getHealthRegenAura,t.buffs.itemBuffs.getHealthRegenAura].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]});return(t.heroData().statushealthregen+.03*t.totalStr()+t.inventory.getHealthRegen()+t.ability().getHealthRegen()+t.buffs.getHealthRegen()+e.value).toFixed(2)}),t.mana=i.pureComputed(function(){return(t.heroData().statusmana+12*t.totalInt()+t.inventory.getMana()+t.ability().getMana()).toFixed(2)}),t.manaregen=i.pureComputed(function(){return((t.heroData().statusmanaregen+.04*t.totalInt()+t.ability().getManaRegen())*(1+t.inventory.getManaRegenPercent())+("crystal_maiden"===t.selectedHero().heroName?2*t.ability().getManaRegenArcaneAura():t.buffs.getManaRegenArcaneAura())+t.inventory.getManaRegenBloodstone()+t.inventory.getManaRegen()-t.enemy().ability().getManaRegenReduction()).toFixed(2)}),t.totalArmorPhysical=i.pureComputed(function(){var e=[t.inventory.getArmorAura,t.buffs.itemBuffs.getArmorAura].reduce(function(e,t){var a=t(e.attributes);return a},{value:0,attributes:[]}),a=[t.enemy().inventory.getArmorReduction,t.debuffs.itemBuffs.getArmorReduction].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]});return(t.enemy().ability().getArmorBaseReduction()*t.debuffs.getArmorBaseReduction()*(t.heroData().armorphysical+.14*t.totalAgi())+t.inventory.getArmor()+t.ability().getArmor()+t.enemy().ability().getArmorReduction()+t.buffs.getArmor()+t.buffs.itemBuffs.getArmor()+t.debuffs.getArmorReduction()+e.value+a.value).toFixed(2)}),t.totalArmorPhysicalReduction=i.pureComputed(function(){var e=t.totalArmorPhysical();return e>=0?(.06*t.totalArmorPhysical()/(1+.06*t.totalArmorPhysical())*100).toFixed(2):-(.06*-t.totalArmorPhysical()/(1+.06*-t.totalArmorPhysical())*100).toFixed(2)}),t.totalMovementSpeed=i.pureComputed(function(){var e=100,a=t.ability().setMovementSpeed()>0?t.ability().setMovementSpeed():t.buffs.setMovementSpeed();if(a>0)return a;var i=[t.inventory.getMovementSpeedPercent,t.buffs.itemBuffs.getMovementSpeedPercent].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]}),r=[t.enemy().inventory.getMovementSpeedPercentReduction,t.debuffs.itemBuffs.getMovementSpeedPercentReduction].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]});return Math.max(t.enemy().inventory.isSheeped()||t.debuffs.itemBuffs.isSheeped()?140:(t.heroData().movementspeed+t.inventory.getMovementSpeedFlat()+t.ability().getMovementSpeedFlat())*(1+i.value+r.value+t.ability().getMovementSpeedPercent()+t.enemy().ability().getMovementSpeedPercentReduction()+t.buffs.getMovementSpeedPercent()+t.debuffs.getMovementSpeedPercentReduction()+t.unit().ability().getMovementSpeedPercent()),e).toFixed(2)}),t.totalTurnRate=i.pureComputed(function(){return(t.heroData().movementturnrate*(1+t.enemy().ability().getTurnRateReduction()+t.debuffs.getTurnRateReduction())).toFixed(2)}),t.baseDamage=i.pureComputed(function(){var e=t.totalAttribute(t.primaryAttribute()),a=t.ability().getBaseDamage(),i=t.heroData().attackdamagemin,r=t.heroData().attackdamagemax;return[Math.floor((i+e+a.total)*t.ability().getSelfBaseDamageReductionPct()*t.enemy().ability().getBaseDamageReductionPct()*t.debuffs.getBaseDamageReductionPct()*t.debuffs.itemBuffs.getBaseDamageReductionPct()*a.multiplier),Math.floor((r+e+a.total)*t.ability().getSelfBaseDamageReductionPct()*t.enemy().ability().getBaseDamageReductionPct()*t.debuffs.getBaseDamageReductionPct()*t.debuffs.itemBuffs.getBaseDamageReductionPct()*a.multiplier)]}),t.bonusDamage=i.pureComputed(function(){return(t.inventory.getBonusDamage().total+t.ability().getBonusDamage().total+t.buffs.getBonusDamage().total+Math.floor((t.baseDamage()[0]+t.baseDamage()[1])/2*(t.buffs.itemBuffs.getBonusDamagePercent(t.inventory.getBonusDamagePercent()).total+t.ability().getBonusDamagePercent().total+t.buffs.getBonusDamagePercent().total))+Math.floor("DOTA_UNIT_CAP_RANGED_ATTACK"==t.hero().attacktype()?"drow_ranger"==t.selectedHero().heroName?t.ability().getBonusDamagePrecisionAura().total[0]*t.totalAgi():t.buffs.getBonusDamagePrecisionAura().total[1]:0)+Math.floor("riki"==t.selectedHero().heroName?t.ability().getBonusDamageBackstab().total[0]*t.totalAgi():0))*t.ability().getSelfBaseDamageReductionPct()*t.enemy().ability().getBaseDamageReductionPct()*t.debuffs.itemBuffs.getBaseDamageReductionPct()}),t.bonusDamageReduction=i.pureComputed(function(){return Math.abs(t.enemy().ability().getBonusDamageReduction()+t.debuffs.getBonusDamageReduction())}),t.damage=i.pureComputed(function(){return[t.baseDamage()[0]+t.bonusDamage()[0],t.baseDamage()[1]+t.bonusDamage()[1]]}),t.totalMagicResistanceProduct=i.pureComputed(function(){return(1-t.heroData().magicalresistance/100)*t.inventory.getMagicResist()*t.ability().getMagicResist()*t.buffs.getMagicResist()*t.inventory.getMagicResistReductionSelf()*t.enemy().inventory.getMagicResistReduction()*t.enemy().ability().getMagicResistReduction()*t.debuffs.getMagicResistReduction()*t.debuffs.itemBuffs.getMagicResistReduction()}),t.totalMagicResistance=i.pureComputed(function(){return(100*(1-t.totalMagicResistanceProduct())).toFixed(2)}),t.bat=i.pureComputed(function(){var e=t.ability().getBAT();return e>0?e:t.heroData().attackrate}),t.ias=i.pureComputed(function(){var e=[t.inventory.getAttackSpeed,t.buffs.itemBuffs.getAttackSpeed].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]}),a=[t.enemy().inventory.getAttackSpeedReduction,t.debuffs.itemBuffs.getAttackSpeedReduction].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]}),i=parseFloat(t.totalAgi())+e.value+a.value+t.ability().getAttackSpeed()+t.enemy().ability().getAttackSpeedReduction()+t.buffs.getAttackSpeed()+t.debuffs.getAttackSpeedReduction()+t.unit().ability().getAttackSpeed();return-80>i?-80:i>500?500:i.toFixed(2)}),t.attackTime=i.pureComputed(function(){return(t.bat()/(1+t.ias()/100)).toFixed(2)}),t.attacksPerSecond=i.pureComputed(function(){return((1+t.ias()/100)/t.bat()).toFixed(2)}),t.evasion=i.pureComputed(function(){if(t.enemy().inventory.isSheeped()||t.debuffs.itemBuffs.isSheeped())return 0;var e=t.ability().setEvasion();return e?(100*e).toFixed(2):(100*(1-t.inventory.getEvasion()*t.ability().getEvasion()*t.ability().getEvasionBacktrack()*t.buffs.itemBuffs.getEvasion())).toFixed(2)}),t.ehpPhysical=i.pureComputed(function(){var e=t.enemy().inventory.isSheeped()||t.debuffs.itemBuffs.isSheeped()?1:t.inventory.getEvasion()*t.ability().getEvasion()*t.buffs.itemBuffs.getEvasion();if(t.totalArmorPhysical()>=0)var a=t.health()*(1+.06*t.totalArmorPhysical());else var a=t.health()*(1-.06*t.totalArmorPhysical())/(1-.12*t.totalArmorPhysical());return a/=1-(1-e*t.ability().getEvasionBacktrack()),a/=1-parseFloat(t.enemy().missChance())/100,a*=t.inventory.activeItems().some(function(e){return"mask_of_madness"==e.item})?1/1.3:1,a*=1/t.ability().getDamageReduction(),a*=1/t.buffs.getDamageReduction(),a*=1/t.enemy().ability().getDamageAmplification(),a*=1/t.debuffs.getDamageAmplification(),a.toFixed(2)}),t.ehpMagical=i.pureComputed(function(){var e=t.health()/t.totalMagicResistanceProduct();return e*=t.inventory.activeItems().some(function(e){return"mask_of_madness"==e.item})?1/1.3:1,e*=1/t.ability().getDamageReduction(),e*=1/t.buffs.getDamageReduction(),e*=1/t.ability().getEvasionBacktrack(),e*=1/t.enemy().ability().getDamageAmplification(),e*=1/t.debuffs.getDamageAmplification(),e.toFixed(2)}),t.bash=i.pureComputed(function(){var e=t.heroData().attacktype;return(100*(1-t.inventory.getBash(e)*t.ability().getBash())).toFixed(2)}),t.cleaveInfo=i.pureComputed(function(){function e(e,t){return e.radius<t.radius?1:e.radius>t.radius?-1:0}var a=t.inventory.getCleaveSource();r.extend(a,t.ability().getCleaveSource()),r.extend(a,t.buffs.getCleaveSource());var i=[];for(var o in a){var n=a[o];n.name=o,i.push(n)}i.sort(e);for(var s={},u=0;u<i.length;u++){for(var l=0,c=0;c<i.length;c++)i[c].radius>=i[u].radius&&(l+=i[c].magnitude*i[c].count);s[i[u].radius]=l}var d=[];for(var o in s)d.push({radius:o,magnitude:s[o]});return d}),t.critChance=i.pureComputed(function(){return(100*(1-t.inventory.getCritChance()*t.ability().getCritChance())).toFixed(2)}),t.critInfo=i.pureComputed(function(){function e(e,t){return e.multiplier<t.multiplier?1:e.multiplier>t.multiplier?-1:0}var a=t.inventory.getCritSource();r.extend(a,t.ability().getCritSource()),r.extend(a,t.buffs.getCritSource());var i=[];for(var o in a){var n=a[o];n.name=o,i.push(n)}i.sort(e);for(var s=[],u=0,l=0;l<i.length;l++){for(var c=1,d=0;l>d;d++)for(var m=0;m<i[d].count;m++)c*=1-i[d].chance;for(var g=1,m=0;m<i[l].count;m++)g*=1-i[l].chance;c*=1-g,u+=c,i[l].count>1?s.push({name:i[l].displayname+" x"+i[l].count,chance:i[l].chance,multiplier:i[l].multiplier,count:i[l].count,totalchance:c}):s.push({name:i[l].displayname,chance:i[l].chance,multiplier:i[l].multiplier,count:i[l].count,totalchance:c})}return{sources:s,total:u}}),t.bashInfo=i.pureComputed(function(){var e=t.heroData().attacktype,a=t.inventory.getBashSource(e);r.extend(a,t.ability().getBashSource());var i=[];for(var o in a){var n=a[o];n.name=o,i.push(n)}for(var s=[],u=0,l=0;l<i.length;l++){for(var c=1,d=0;l>d;d++)for(var m=0;m<i[d].count;m++)c*=1-i[d].chance;for(var g=1,m=0;m<i[l].count;m++)g*=1-i[l].chance;if(c*=1-g,u+=c,"spirit_breaker_greater_bash"===i[l].name)var p=i[l].damage*t.totalMovementSpeed();else var p=i[l].damage;i[l].count>1?s.push({name:i[l].displayname+" x"+i[l].count,chance:i[l].chance,damage:p,count:i[l].count,damageType:i[l].damageType,totalchance:c}):s.push({name:i[l].displayname,chance:i[l].chance,damage:p,count:i[l].count,damageType:i[l].damageType,totalchance:c})}return{sources:s,total:u}}),t.orbProcInfo=i.pureComputed(function(){function e(e,t){return e.priority>t.priority?1:e.priority<t.priority?-1:e.damage<t.damage?1:e.damage>t.damage?-1:0}var a=(t.heroData().attacktype,t.inventory.getOrbProcSource()),i=[];for(var r in a){var o=a[r];o.name=r,i.push(o)}i.sort(e);for(var n=[],s=0,u=0;u<i.length;u++){for(var l=1,c=0;u>c;c++)for(var d=0;d<i[c].count;d++)l*=1-i[c].chance;for(var m=1,d=0;d<i[u].count;d++)m*=1-i[u].chance;l*=1-m,s+=l,i[u].count>1?n.push({name:i[u].displayname+" x"+i[u].count,chance:i[u].chance,damage:i[u].damage,count:i[u].count,damageType:i[u].damageType,totalchance:l}):n.push({name:i[u].displayname,chance:i[u].chance,damage:i[u].damage,count:i[u].count,damageType:i[u].damageType,totalchance:l})}return{sources:n,total:s}}),t.getReducedDamage=function(e,a){var i=e;switch(a){case"physical":i=e*(1-.06*t.enemy().totalArmorPhysical()/(1+.06*Math.abs(t.enemy().totalArmorPhysical())));break;case"magic":i=e*(1-t.enemy().totalMagicResistance()/100);break;case"pure":i=e;break;case"composite":i=e*(1-.06*t.enemy().totalArmorPhysical()/(1+.06*Math.abs(t.enemy().totalArmorPhysical()))),i*=1-t.enemy().totalMagicResistance()/100}return i*=t.ability().getDamageAmplification()*t.debuffs.getDamageAmplification(),i*=t.enemy().ability().getDamageReduction()*t.enemy().buffs.getDamageReduction()},t.damageTotalInfo=i.pureComputed(function(){var e=[t.ability().getBonusDamage().sources,t.buffs.getBonusDamage().sources],a=[t.ability().getBonusDamagePercent().sources,t.buffs.getBonusDamagePercent().sources],i=t.inventory.getBonusDamage().sources,r=t.buffs.itemBuffs.getBonusDamagePercent(t.inventory.getBonusDamagePercent()).sources,o=t.critInfo(),n=t.ability().getOrbSource(),s=t.inventory.getOrbSource(),u=t.orbProcInfo(),l=t.bashInfo(),c=(t.baseDamage()[0]+t.baseDamage()[1])/2,d=c,m=c,g=0,p={damage:0,damageReduced:0,cooldown:6,active:!1},f={pure:0,physical:c,magic:0},y=[],b=[];for(h in i){var v=i[h].damage*i[h].count*t.ability().getSelfBaseDamageReductionPct()*t.enemy().ability().getBaseDamageReductionPct()*t.debuffs.itemBuffs.getBaseDamageReductionPct();y.push({name:i[h].displayname+(i[h].count>1?" x"+i[h].count:""),damage:v,damageType:i[h].damageType,damageReduced:t.getReducedDamage(v,i[h].damageType)}),d+=v,m+=v,f[i[h].damageType]+=v}for(h in r){var v=c*r[h].damage;y.push({name:r[h].displayname,damage:v,damageType:r[h].damageType,damageReduced:t.getReducedDamage(v,r[h].damageType)}),d+=v,m+=v,f[r[h].damageType]+=v}for(var h=0;h<e.length;h++)for(j in e[h]){var v=e[h][j].damage;y.push({name:e[h][j].displayname,damage:v,damageType:e[h][j].damageType,damageReduced:t.getReducedDamage(v,e[h][j].damageType)}),d+=v,m+=v,f[e[h][j].damageType]+=v}for(var h=0;h<a.length;h++)for(j in a[h]){var v=c*a[h][j].damage;y.push({name:a[h][j].displayname,damage:v,damageType:a[h][j].damageType,damageReduced:t.getReducedDamage(v,a[h][j].damageType)}),d+=v,m+=v,f[a[h][j].damageType]+=v}if("DOTA_UNIT_CAP_RANGED_ATTACK"===t.hero().attacktype()){if("drow_ranger"===t.selectedHero().heroName)var D=t.ability().getBonusDamagePrecisionAura().sources,A=0;else var D=t.buffs.getBonusDamagePrecisionAura().sources,A=1;if(void 0!=D[A]){if("drow_ranger"===t.selectedHero().heroName)var v=D[A].damage*t.totalAgi();else var v=D[A].damage;y.push({name:D[A].displayname,damage:v,damageType:"physical",damageReduced:t.getReducedDamage(v,"physical")}),d+=v,m+=v,f.physical+=v}}if("riki"===t.selectedHero().heroName)var D=t.ability().getBonusDamageBackstab().sources,A=0;else var D=t.buffs.getBonusDamageBackstab().sources,A=1;if(void 0!=D[A]){if("riki"===t.selectedHero().heroName)var v=D[A].damage*t.totalAgi();else var v=D[A].damage;y.push({name:D[A].displayname,damage:v,damageType:"physical",damageReduced:t.getReducedDamage(v,"physical")}),d+=v,f.physical+=v}if("weaver"===t.selectedHero().heroName){var R=t.ability().abilities().find(function(e){return"weaver_geminate_attack"===e.name()});if(R&&R.level()>0){var _=R.cooldown()[R.level()-1],v=f.physical;y.push({name:R.displayname()+" every "+_+" seconds",damage:v,damageType:"physical",damageReduced:t.getReducedDamage(v,"physical")}),p.damage+=v,p.damageReduced+=t.getReducedDamage(v,"physical"),p.cooldown=_,p.active=!0}}for(var h=0;h<l.sources.length;h++){var v=l.sources[h].damage*l.sources[h].chance*l.sources[h].count;y.push({name:l.sources[h].name,damage:v,damageType:l.sources[h].damageType,damageReduced:t.getReducedDamage(v,l.sources[h].damageType)}),d+=v,f[l.sources[h].damageType]+=v}for(var h=0;h<u.sources.length;h++){var v=u.sources[h].damage*(1-Math.pow(1-u.sources[h].chance,u.sources[h].count));y.push({name:u.sources[h].name,damage:v,damageType:u.sources[h].damageType,damageReduced:t.getReducedDamage(v,u.sources[h].damageType)}),d+=v,f[u.sources[h].damageType]+=v}for(orb in n){var v=n[orb].damage*(1-u.total);y.push({name:n[orb].displayname,damage:v,damageType:n[orb].damageType,damageReduced:t.getReducedDamage(v,n[orb].damageType)}),d+=v,f[n[orb].damageType]+=v}if(0===Object.keys(n).length)for(orb in s){var v=s[orb].damage*(1-u.total);y.push({name:s[orb].displayname,damage:v,damageType:s[orb].damageType,damageReduced:t.getReducedDamage(v,s[orb].damageType)}),d+=v,f[s[orb].damageType]+=v}for(var h=0;h<o.sources.length;h++){var v=m*(o.sources[h].multiplier-1)*o.sources[h].totalchance;b.push({name:o.sources[h].name,damage:v,damageType:"physical",damageReduced:t.getReducedDamage(v,"physical")}),g+=v}var k=t.getReducedDamage(f.pure,"pure")+t.getReducedDamage(f.physical,"physical")+t.getReducedDamage(f.magic,"magic"),T=t.getReducedDamage(g,"physical"),B={base:d*t.attacksPerSecond(),crit:g*t.attacksPerSecond(),geminateAttack:p.active?p.damage/p.cooldown:0,reduced:{base:k*t.attacksPerSecond(),crit:T*t.attacksPerSecond(),geminateAttack:p.active?t.getReducedDamage(p.damage,"physical")/p.cooldown:0}};return{sources:y,sourcesCrit:b,total:d,totalCrit:g,totalGeminateAttack:d+p.damage,totalGeminateAttackReduced:k+p.damageReduced,geminateAttack:p,totalCritReduced:T,totalReduced:k,sumTotal:d+g,sumTotalReduced:k+T,dps:{base:B.base,crit:B.base+B.crit,geminateAttack:B.base+B.geminateAttack,total:B.base+B.crit+B.geminateAttack,reduced:{base:B.reduced.base,crit:B.reduced.base+B.reduced.crit,geminateAttack:B.reduced.base+B.reduced.geminateAttack,total:B.reduced.base+B.reduced.crit+B.reduced.geminateAttack}}}}),t.getDamageTypeColor=function(e){switch(e){case"physical":return"#979aa2";case"pure":return"goldenrod";case"magic":return"#428bca";default:return"#979aa2"}},t.critDamage=i.computed(function(){return t.critInfo(),0}),t.missChance=i.pureComputed(function(){var e=[t.enemy().inventory.getMissChance,t.debuffs.itemBuffs.getMissChance].reduce(function(e,t){var a=t(e.excludeList);return a.value*=e.value,a},{value:1,excludeList:[]});return(100*(1-t.enemy().ability().getMissChance()*t.debuffs.getMissChance()*e.value)).toFixed(2)}),t.totalattackrange=i.pureComputed(function(){var e=t.heroData().attacktype;return t.heroData().attackrange+t.ability().getAttackRange()+t.inventory.getAttackRange(e).value}),t.visionrangeday=i.pureComputed(function(){return t.heroData().visiondaytimerange*(1+t.enemy().ability().getVisionRangePctReduction()+t.debuffs.getVisionRangePctReduction())}),t.visionrangenight=i.pureComputed(function(){return(t.heroData().visionnighttimerange+t.inventory.getVisionRangeNight()+t.ability().getVisionRangeNight())*(1+t.enemy().ability().getVisionRangePctReduction()+t.debuffs.getVisionRangePctReduction())}),t.lifesteal=i.pureComputed(function(){var e=t.inventory.getLifesteal()+t.ability().getLifesteal()+t.buffs.getLifesteal();if("DOTA_UNIT_CAP_MELEE_ATTACK"==t.hero().attacktype()){var a=[t.inventory.getLifestealAura,t.buffs.itemBuffs.getLifestealAura].reduce(function(e,t){var a=t(e.excludeList);return a.value+=e.value,a},{value:0,excludeList:[]});e+=a.value}return e.toFixed(2)}),t.damageBrackets=[["medusa_mana_shield","templar_assassin_refraction","faceless_void_backtrack","nyx_assassin_spiked_carapace"],["spectre_dispersion","wisp_overcharge","slardar_sprint","bristleback_bristleback","undying_flesh_golem"],["abaddon_borrowed_time","abaddon_aphotic_shield","kunkka_ghostship","treant_living_armor"],["chen_penitence","medusa_stone_gaze","shadow_demon_soul_catcher"],["dazzle_shallow_grave"]],t.getDamageAfterBracket=function(e,a){for(var i=t.damageBrackets[a],r=1,n=0;n<i.length;n++)(void 0!=o.prototype.findWhere(t.damageAmplification.buffs,{name:i[n].name})||void 0!=o.prototype.findWhere(t.damageReduction.buffs,{name:i[n].name}))&&(r+=i[n].value);return e*r},t.processDamageAmpReducBracket=function(e,a,i){for(var r=1,n=[],i=parseFloat(i),s=parseFloat(i),u=0;u<t.damageBrackets[e].length;u++)void 0!=a[t.damageBrackets[e][u]]&&(r=1+parseFloat(a[t.damageBrackets[e][u]].multiplier),s+=i*r-i,n.push(new o.prototype.DamageInstance(a[t.damageBrackets[e][u]].displayname,a[t.damageBrackets[e][u]].damageType,i*r-i,[],s)));return n},t.getDamageAmpReducInstance=function(e,a,i,r){var n=[],s=parseFloat(a),u="initial"==i?"Initial":e[i].displayname;return n=n.concat(t.processDamageAmpReducBracket(0,e,s)),s=n[n.length-1]?n[n.length-1].total:s,n=n.concat(t.processDamageAmpReducBracket(1,e,s)),s=n[n.length-1]?n[n.length-1].total:s,n=n.concat(t.processDamageAmpReducBracket(2,e,s)),s=n[n.length-1]?n[n.length-1].total:s,new o.prototype.DamageInstance(u,r,a,n,n[n.length-1]?n[n.length-1].total:s)},t.getDamageAmpReduc=function(e){var a=[],i={},n=t.damageReduction.getDamageMultiplierSources(),s=t.damageAmplification.getDamageMultiplierSources();r.extend(i,n),r.extend(i,s),a.push(t.getDamageAmpReducInstance(i,e,"initial","physical"));for(var u=["shadow_demon_soul_catcher","medusa_stone_gaze","chen_penitence"],l=0;l<u.length;l++)void 0!=i[u[l]]&&a.push(t.getDamageAmpReducInstance(i,e*i[u[l]].multiplier,u[l],i[u[l]].damageType));return new o.prototype.DamageInstance("Total","physical",e,a,a.reduce(function(e,t){return parseFloat(e)+parseFloat(t.total)},0))},t.damageInputModified=i.computed(function(){return t.getDamageAmpReduc(t.damageInputValue())}),t.addIllusion=function(e,a){t.illusions.push(i.observable(new o.prototype.IllusionViewModel(0,t,t.illusionAbilityLevel())))},t.diffProperties=o.prototype.diffProperties,t.diff={},t.getDiffFunction=function(e){return i.computed(function(){return"baseDamage"==e?[t[e]()[0]-t.heroCompare()[e]()[0],t[e]()[1]-t.heroCompare()[e]()[1]]:t[e]()-t.heroCompare()[e]()},this,{deferEvaluation:!0})};for(var a=0;a<t.diffProperties.length;a++){var n=a;t.diff[t.diffProperties[n]]=t.getDiffFunction(t.diffProperties[n])}t.buildExplorer=new o.prototype.BuildExplorerViewModel(t)}});